/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2021-10-17 14:49:02.500690
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKcos(j[5]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[4]);
x11=IKsin(j[0]);
x12=((0.1025)*x2);
x13=((0.094)*x6);
x14=((1.0)*x10);
x15=((1.0)*x9);
x16=((0.376)*x2);
x17=((1.0)*x2);
x18=((0.094)*x5);
x19=((0.1025)*x4);
x20=(x0*x3);
x21=(x1*x11);
x22=(x1*x4);
x23=(x11*x9);
x24=(x0*x1);
x25=(x3*x4);
x26=(x11*x3);
x27=(x2*x3);
x28=(x11*x14);
x29=((1.0)*x22);
x30=(((x1*x2))+x25);
x31=((((-1.0)*x29))+x27);
x32=(x31*x6);
x33=(x30*x5);
x34=(((x0*x22))+(((-1.0)*x17*x20)));
x35=(((x2*x24))+((x20*x4)));
x36=(((x21*x4))+(((-1.0)*x17*x26)));
x37=(((x2*x21))+((x11*x25)));
x38=(x36*x5);
x39=(x34*x5);
x40=(x33+x32);
x41=(((x30*x6))+((x5*(((((-1.0)*x17*x3))+x29)))));
x42=(((x35*x6))+x39);
x43=(x38+((x37*x6)));
x44=(((x34*x6))+((x5*(((((-1.0)*x17*x24))+(((-1.0)*x20*x4)))))));
x45=(((x5*(((((-1.0)*x11*x25))+(((-1.0)*x17*x21))))))+((x36*x6)));
x46=(x43*x9);
eerot[0]=(((x7*(((((-1.0)*x28))+((x42*x9))))))+((x44*x8)));
eerot[1]=(((x44*x7))+((x8*(((((-1.0)*x15*x42))+x28)))));
eerot[2]=(((x10*x42))+x23);
IkReal x47=((1.0)*x20);
eetrans[0]=((((-0.408)*x20))+(((1.97e-6)*x24))+(((0.376)*x0*x22))+(((8.9e-7)*x0))+((x6*((((x19*x24))+(((-1.0)*x12*x47))))))+((x5*(((((-1.0)*x12*x24))+(((-1.0)*x19*x47))))))+(((0.094)*x23))+((x10*((((x18*x34))+((x13*x35))))))+(((-1.0)*x16*x47))+(((0.1215)*x11)));
eerot[3]=(((x7*((((x0*x10))+x46))))+((x45*x8)));
eerot[4]=(((x8*(((((-1.0)*x15*x43))+(((-1.0)*x0*x14))))))+((x45*x7)));
eerot[5]=(((x10*x43))+(((-1.0)*x0*x15)));
IkReal x48=((1.0)*x26);
eetrans[1]=(((x10*((((x18*x36))+((x13*x37))))))+(((-0.094)*x0*x9))+(((-0.408)*x26))+((x6*((((x19*x21))+(((-1.0)*x12*x48))))))+(((1.97e-6)*x21))+(((0.376)*x21*x4))+(((-0.1215)*x0))+(((8.9e-7)*x11))+((x5*(((((-1.0)*x12*x21))+(((-1.0)*x19*x48))))))+(((-1.0)*x16*x48)));
eerot[6]=(((x40*x7*x9))+((x41*x8)));
eerot[7]=(((x41*x7))+((x8*x9*(((((-1.0)*x33))+(((-1.0)*x32)))))));
eerot[8]=(x10*x40);
eetrans[2]=((0.122)+((x10*((((x18*x30))+((x13*x31))))))+(((1.97e-6)*x3))+((x6*((((x1*x12))+((x19*x3))))))+((x1*x16))+(((0.408)*x1))+((x5*(((((-1.0)*x12*x3))+((x1*x19))))))+(((0.376)*x25)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.094)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=(py+(((-0.094)*r12)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.122)+pz+(((-0.094)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x49=((1.0)*px);
IkReal x50=((1.0)*pz);
IkReal x51=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x51))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x50)));
rxp0_2=((((-1.0)*r10*x49))+((py*r00)));
rxp1_0=((((-1.0)*r21*x51))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x50)));
rxp1_2=((((-1.0)*r11*x49))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x51)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x50)));
rxp2_2=((((-1.0)*r12*x49))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x52=((0.1025)*r20);
IkReal x53=((0.1025)*r21);
IkReal x54=((0.1025)*r22);
IkReal x55=((-0.205)*npx);
IkReal x56=((-0.205)*npy);
IkReal x57=((-1.0)*npz);
IkReal x58=((-1.0)*r21);
IkReal x59=((-1.0)*npy);
IkReal x60=((-0.1025)*r21);
IkReal x61=((-1.0)*rxp0_2);
IkReal x62=((-1.0)*r22);
IkReal x63=((-0.1025)*r22);
IkReal x64=((-1.0)*rxp1_2);
IkReal x65=((-1.0)*npx);
matrixinvcoeffs[0]=x52;
matrixinvcoeffs[1]=x55;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=r20;
matrixinvcoeffs[9]=0;
matrixinvcoeffs[10]=0;
matrixinvcoeffs[11]=x65;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=rxp0_2;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x52;
matrixinvcoeffs[19]=x55;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=0;
matrixinvcoeffs[25]=npx;
matrixinvcoeffs[26]=((-1.0)*r20);
matrixinvcoeffs[27]=0;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x61;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x53;
matrixinvcoeffs[33]=x56;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=r21;
matrixinvcoeffs[41]=0;
matrixinvcoeffs[42]=0;
matrixinvcoeffs[43]=x59;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=rxp1_2;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x53;
matrixinvcoeffs[51]=x56;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=0;
matrixinvcoeffs[57]=npy;
matrixinvcoeffs[58]=x58;
matrixinvcoeffs[59]=0;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x64;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=0;
matrixinvcoeffs[73]=x57;
matrixinvcoeffs[74]=r22;
matrixinvcoeffs[75]=0;
matrixinvcoeffs[76]=x54;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=rxp2_2;
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=r22;
matrixinvcoeffs[89]=0;
matrixinvcoeffs[90]=0;
matrixinvcoeffs[91]=x57;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x54;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=x58;
matrixinvcoeffs[101]=x59;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=rxp1_2;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x60;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=x58;
matrixinvcoeffs[119]=x59;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=rxp1_2;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x60;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=r20;
matrixinvcoeffs[133]=npx;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=x61;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=x52;
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=r20;
matrixinvcoeffs[151]=npx;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=x61;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x52;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x62;
matrixinvcoeffs[165]=x57;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x63;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x62;
matrixinvcoeffs[183]=x57;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=x63;
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=0;
matrixinvcoeffs[201]=npy;
matrixinvcoeffs[202]=x58;
matrixinvcoeffs[203]=0;
matrixinvcoeffs[204]=x60;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x64;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=x58;
matrixinvcoeffs[217]=0;
matrixinvcoeffs[218]=0;
matrixinvcoeffs[219]=npy;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x60;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=x64;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=0;
matrixinvcoeffs[233]=x65;
matrixinvcoeffs[234]=r20;
matrixinvcoeffs[235]=0;
matrixinvcoeffs[236]=x52;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=r20;
matrixinvcoeffs[249]=0;
matrixinvcoeffs[250]=0;
matrixinvcoeffs[251]=x65;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x52;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=rxp0_2;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_9=matrixinvcoeffs[148], gclwh4_10=matrixinvcoeffs[164], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_8=matrixinvcoeffs[133], gclwh5_11=matrixinvcoeffs[181], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_10=matrixinvcoeffs[166], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_8=matrixinvcoeffs[135], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_10=matrixinvcoeffs[168], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_8=matrixinvcoeffs[137], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_3=matrixinvcoeffs[58], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_10=matrixinvcoeffs[170], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_8=matrixinvcoeffs[139], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_9=matrixinvcoeffs[156], gclwh12_10=matrixinvcoeffs[172], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_8=matrixinvcoeffs[141], gclwh13_11=matrixinvcoeffs[189], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_9=matrixinvcoeffs[158], gclwh14_10=matrixinvcoeffs[174], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_8=matrixinvcoeffs[143], gclwh15_11=matrixinvcoeffs[191], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x66=pz*pz;
IkReal x67=((5.863e-7)*rxp2_2);
IkReal x68=(pp*r21);
IkReal x69=(pp*r22);
IkReal x70=(gclwh4_9*rxp2_2);
IkReal x71=(npy*pz);
IkReal x72=((2.0)*gclwh6_10);
IkReal x73=(npz*pz);
IkReal x74=((0.0210125)*r21);
IkReal x75=((0.0210125)*r20);
IkReal x76=((0.049815)*rxp0_2);
IkReal x77=((0.15416)*rxp2_2);
IkReal x78=(gclwh14_2*rxp0_2);
IkReal x79=(gclwh15_1*rxp0_2);
IkReal x80=((0.001276509375)*r21);
IkReal x81=((0.0249075)*rxp2_2);
IkReal x82=(pp*r20);
IkReal x83=((6.009575e-8)*r21);
IkReal x84=((5.863e-7)*rxp0_2);
IkReal x85=((0.0210125)*r22);
IkReal x86=((0.41)*rxp0_2);
IkReal x87=(gclwh15_11*rxp0_2);
IkReal x88=((5.72e-6)*gclwh4_9);
IkReal x89=((2.0)*gclwh8_10);
IkReal x90=(gclwh15_11*r20);
IkReal x91=(gclwh12_9*rxp1_2);
IkReal x92=(npx*pz);
IkReal x93=(gclwh5_11*rxp2_2);
IkReal x94=((4.5192004e-8)*r21);
IkReal x95=((0.01050625)*r21);
IkReal x96=(gclwh4_3*rxp2_2);
IkReal x97=((0.205)*pp);
IkReal x98=(gclwh4_9*r22);
IkReal x99=(gclwh8_12*r20);
IkReal x100=((0.00255301875)*r22);
IkReal x101=((0.205)*pz);
IkReal x102=(gclwh4_2*rxp2_2);
IkReal x103=(gclwh13_0*rxp1_2);
IkReal x104=((0.01050625)*r22);
IkReal x105=(gclwh12_2*rxp1_2);
IkReal x106=((3.0047875e-8)*r22);
IkReal x107=((0.0079007)*r22);
IkReal x108=((0.049815)*rxp2_2);
IkReal x109=(gclwh10_3*r22);
IkReal x110=((0.243)*gclwh12_14);
IkReal x111=((0.049815)*rxp1_2);
IkReal x112=((2.0)*gclwh7_8);
IkReal x113=((0.243)*gclwh13_15);
IkReal x114=((4.5192004e-8)*r20);
IkReal x115=((0.0249075)*rxp1_2);
IkReal x116=((0.15416)*rxp0_2);
IkReal x117=(gclwh15_0*rxp0_2);
IkReal x118=(gclwh13_11*rxp1_2);
IkReal x119=(gclwh8_2*pz);
IkReal x120=(gclwh13_1*rxp1_2);
IkReal x121=((0.205)*rxp1_2);
IkReal x122=((5.72e-6)*gclwh13_11);
IkReal x123=((0.01050625)*r20);
IkReal x124=(gclwh5_0*rxp2_2);
IkReal x125=((0.001276509375)*r22);
IkReal x126=((3.0047875e-8)*r20);
IkReal x127=(gclwh9_0*pz);
IkReal x128=((2.0)*gclwh10_10);
IkReal x129=((0.205)*rxp0_2);
IkReal x130=((8.817952e-7)*rxp2_2);
IkReal x131=(gclwh14_3*rxp0_2);
IkReal x132=((0.0249075)*rxp0_2);
IkReal x133=(gclwh13_11*r21);
IkReal x134=((2.0)*gclwh9_8);
IkReal x135=(gclwh12_3*rxp1_2);
IkReal x136=((0.243)*gclwh5_15);
IkReal x137=(gclwh5_8*rxp2_2);
IkReal x138=((5.72e-6)*gclwh5_11);
IkReal x139=((5.72e-6)*gclwh15_11);
IkReal x140=(gclwh7_13*rxp1_2);
IkReal x141=((0.41)*rxp2_2);
IkReal x142=(gclwh10_2*pz);
IkReal x143=(gclwh6_12*rxp1_2);
IkReal x144=(gclwh6_2*r21);
IkReal x145=((0.001276509375)*r20);
IkReal x146=((4.5192004e-8)*r22);
IkReal x147=((0.0079007)*r21);
IkReal x148=((0.243)*gclwh4_14);
IkReal x149=((0.00255301875)*r20);
IkReal x150=((0.41)*rxp1_2);
IkReal x151=(gclwh6_2*pz);
IkReal x152=(gclwh8_2*r20);
IkReal x153=(gclwh11_0*pz);
IkReal x154=((2.0)*gclwh11_8);
IkReal x155=(gclwh14_9*rxp0_2);
IkReal x156=(gclwh14_9*r20);
IkReal x157=(gclwh7_0*r21);
IkReal x158=(gclwh9_0*r20);
IkReal x159=((3.0047875e-8)*r21);
IkReal x160=(gclwh5_1*rxp2_2);
IkReal x161=(gclwh5_11*r22);
IkReal x162=((5.72e-6)*gclwh14_9);
IkReal x163=((0.0003362)*r22);
IkReal x164=((0.243)*gclwh14_14);
IkReal x165=((5.72e-6)*gclwh12_9);
IkReal x166=((0.243)*gclwh15_15);
IkReal x167=(gclwh7_0*pz);
IkReal x168=((0.00255301875)*r21);
IkReal x169=((0.0082369)*r22);
IkReal x170=(gclwh12_14*x115);
IkReal x171=((5.863e-7)*x91);
IkReal x172=(gclwh6_12*x159);
IkReal x173=(gclwh10_12*x106);
IkReal x174=(gclwh8_5*x145);
IkReal x175=(gclwh14_9*x84);
IkReal x176=(gclwh4_14*x81);
IkReal x177=((3.0047875e-8)*x99);
IkReal x178=(gclwh10_5*x125);
IkReal x179=(gclwh4_9*x67);
IkReal x180=(gclwh6_5*x80);
IkReal x181=(gclwh14_14*x132);
IkReal x182=((0.205)*gclwh4_10*rxp2_2);
IkReal x183=(gclwh8_10*x123);
IkReal x184=(gclwh14_10*x129);
IkReal x185=(gclwh12_10*x121);
IkReal x186=(gclwh10_10*x104);
IkReal x187=(gclwh6_10*x95);
IkReal x188=(gclwh9_8*x123);
IkReal x189=((0.205)*x137);
IkReal x190=(gclwh15_8*x129);
IkReal x191=(gclwh11_8*x104);
IkReal x192=(gclwh13_8*x121);
IkReal x193=(gclwh7_8*x95);
IkReal x194=(gclwh15_11*x84);
IkReal x195=(gclwh9_7*x145);
IkReal x196=(gclwh11_13*x106);
IkReal x197=(gclwh7_13*x159);
IkReal x198=(gclwh15_15*x132);
IkReal x199=(gclwh5_15*x81);
IkReal x200=(gclwh5_11*x67);
IkReal x201=((5.863e-7)*x118);
IkReal x202=(gclwh7_7*x80);
IkReal x203=(gclwh13_15*x115);
IkReal x204=(gclwh9_13*x126);
IkReal x205=(gclwh11_7*x125);
IkReal x206=(gclwh4_14*x125);
IkReal x207=((3.0047875e-8)*x98);
IkReal x208=(gclwh8_5*x132);
IkReal x209=(gclwh14_9*x126);
IkReal x210=(gclwh14_14*x145);
IkReal x211=((5.863e-7)*x143);
IkReal x212=(gclwh10_12*x67);
IkReal x213=(gclwh12_9*x159);
IkReal x214=(gclwh10_5*x81);
IkReal x215=(gclwh6_5*x115);
IkReal x216=(gclwh8_12*x84);
IkReal x217=(gclwh12_14*x80);
IkReal x218=(gclwh11_13*x67);
IkReal x219=(gclwh13_15*x80);
IkReal x220=((5.863e-7)*x140);
IkReal x221=((3.0047875e-8)*x133);
IkReal x222=(gclwh9_7*x132);
IkReal x223=(gclwh11_7*x81);
IkReal x224=(gclwh5_11*x106);
IkReal x225=((3.0047875e-8)*x90);
IkReal x226=(gclwh15_15*x145);
IkReal x227=(gclwh7_7*x115);
IkReal x228=(gclwh9_13*x84);
IkReal x229=(gclwh5_15*x125);
IkReal x230=((2.0)*x66);
IkReal x231=((0.243)*gclwh10_5*x73);
IkReal x232=((0.243)*gclwh6_5*x71);
IkReal x233=((2.86e-6)*gclwh6_12*x68);
IkReal x234=((5.72e-6)*gclwh8_12*x92);
IkReal x235=((2.86e-6)*gclwh10_12*x69);
IkReal x236=((0.1215)*gclwh8_5*x82);
IkReal x237=((0.243)*gclwh8_5*x92);
IkReal x238=((0.1215)*gclwh10_5*x69);
IkReal x239=((5.72e-6)*gclwh6_12*x71);
IkReal x240=((0.1215)*gclwh6_5*x68);
IkReal x241=((5.72e-6)*gclwh10_12*x73);
IkReal x242=((2.86e-6)*gclwh8_12*x82);
IkReal x243=(x151*x95);
IkReal x244=(x131*x97);
IkReal x245=(x104*x142);
IkReal x246=(x71*x72);
IkReal x247=(x151*x68);
IkReal x248=(x101*x105);
IkReal x249=(x128*x73);
IkReal x250=(x142*x69);
IkReal x251=(x96*x97);
IkReal x252=(x135*x97);
IkReal x253=(x101*x78);
IkReal x254=(x89*x92);
IkReal x255=(x119*x123);
IkReal x256=(x101*x102);
IkReal x257=(x154*x73);
IkReal x258=(x167*x95);
IkReal x259=(x160*x97);
IkReal x260=(x79*x97);
IkReal x261=(x112*x71);
IkReal x262=(x167*x68);
IkReal x263=(x101*x103);
IkReal x264=(x153*x69);
IkReal x265=(x104*x153);
IkReal x266=(x101*x117);
IkReal x267=(x123*x127);
IkReal x268=(x101*x124);
IkReal x269=(x134*x92);
IkReal x270=(x120*x97);
IkReal x271=((2.86e-6)*gclwh7_13*x68);
IkReal x272=((0.1215)*gclwh9_7*x82);
IkReal x273=((0.243)*gclwh7_7*x71);
IkReal x274=((5.72e-6)*gclwh9_13*x92);
IkReal x275=((0.243)*gclwh11_7*x73);
IkReal x276=((2.86e-6)*gclwh11_13*x69);
IkReal x277=((2.86e-6)*gclwh9_13*x82);
IkReal x278=((5.72e-6)*gclwh7_13*x71);
IkReal x279=((0.243)*gclwh9_7*x92);
IkReal x280=((5.72e-6)*gclwh11_13*x73);
IkReal x281=((0.1215)*gclwh11_7*x69);
IkReal x282=((0.1215)*gclwh7_7*x68);
IkReal x283=(x110*x71);
IkReal x284=((2.86e-6)*gclwh14_9*x82);
IkReal x285=((0.1215)*gclwh14_14*x82);
IkReal x286=(x165*x71);
IkReal x287=((0.1215)*gclwh4_14*x69);
IkReal x288=((2.86e-6)*gclwh4_9*x69);
IkReal x289=(x162*x92);
IkReal x290=((2.86e-6)*gclwh12_9*x68);
IkReal x291=((0.1215)*gclwh12_14*x68);
IkReal x292=(x148*x73);
IkReal x293=(x164*x92);
IkReal x294=(x73*x88);
IkReal x295=(x136*x73);
IkReal x296=(x138*x73);
IkReal x297=((0.1215)*gclwh13_15*x68);
IkReal x298=(x166*x92);
IkReal x299=(x139*x92);
IkReal x300=((2.86e-6)*gclwh13_11*x68);
IkReal x301=(x113*x71);
IkReal x302=((0.1215)*gclwh5_15*x69);
IkReal x303=((2.86e-6)*gclwh15_11*x82);
IkReal x304=(x122*x71);
IkReal x305=((0.1215)*gclwh15_15*x82);
IkReal x306=((2.86e-6)*gclwh5_11*x69);
IkReal x307=((2.0)*gclwh10_3*pp*x73);
IkReal x308=(gclwh8_2*npx*x230);
IkReal x309=((1.0)*gclwh10_3*pp*x69);
IkReal x310=(gclwh6_2*npy*x230);
IkReal x311=((1.0)*x119*x82);
IkReal x312=(gclwh10_2*npz*x230);
IkReal x313=(gclwh9_0*npx*x230);
IkReal x314=((1.0)*x127*x82);
IkReal x315=(gclwh11_0*npz*x230);
IkReal x316=(gclwh7_0*npy*x230);
IkReal x317=(x171+x170);
IkReal x318=(x203+x201);
IkReal x319=(x211+x212+x208);
IkReal x320=(x228+x223+x227);
IkReal x321=(x214+x215+x216);
IkReal x322=(x218+x220+x222);
IkReal x323=(x199+x198+x194+x200);
IkReal x324=(x179+x175+x176+x181);
IkReal x325=(x193+x192+x191+x269);
IkReal x326=(x185+x186+x187+x254);
IkReal x327=(x190+x188+x189+x257+x261);
IkReal x328=(x184+x182+x183+x246+x249);
IkReal x329=(x213+x217+x290+x291+x292+x293+x294+x289);
IkReal x330=(x300+x219+x221+x298+x299+x295+x296+x297);
IkReal x331=(x315+x314+x316+x267+x266+x268+x270);
IkReal x332=(x197+x196+x195+x276+x274+x275+x272+x273+x271);
IkReal x333=(x205+x204+x202+x277+x278+x279+x282+x281+x280);
IkReal x334=(x178+x177+x180+x238+x239+x237+x242+x241+x240);
IkReal x335=(x313+x258+x259+x265+x264+x260+x263+x262);
IkReal x336=(x173+x172+x174+x232+x233+x231+x236+x234+x235);
IkReal x337=(x210+x207+x206+x209+x288+x287+x286+x285+x284+x283);
IkReal x338=(x306+x304+x305+x302+x303+x301+x229+x225+x224+x226);
IkReal x339=(x309+x311+x310+x312+x255+x256+x252+x253);
IkReal x340=(x308+x307+x250+x251+x243+x247+x245+x244+x248);
op[0]=((0.190512)+x336+x324+(((-1.0)*x317))+(((-1.0)*x334)));
op[1]=((((-1.568)*gclwh8_2*x92))+((gclwh10_10*x69))+(((-1.23782400001636)*gclwh10_3*x73))+(((-1.0)*gclwh8_10*x82))+(((1.568)*gclwh10_2*x73))+(((0.1397075)*x70))+(((-1.0)*x328))+(((0.784)*gclwh8_2*x82))+(((-0.126876960001677)*x96))+(((-1.0)*gclwh10_2*x169))+(((-0.784)*gclwh6_2*x68))+x326+x340+(((0.126876960001677)*x135))+(((0.1397075)*x155))+(((-0.16072)*x105))+(((1.568)*gclwh6_2*x71))+(((-0.126876960001677)*x131))+(((0.16072)*x102))+(((-0.1397075)*x91))+(((0.16072)*x78))+(((-1.0)*x339))+(((0.0082369)*x152))+((gclwh6_10*x68))+(((0.60840575000818)*gclwh10_3*x69))+(((-0.784)*gclwh10_2*x69))+(((-0.0082369)*x144))+(((0.00650244420008594)*x109)));
op[2]=(((gclwh6_12*x147))+(((-0.752)*gclwh8_12*x82))+(((-1.0)*gclwh6_10*x74))+(((0.752)*gclwh6_12*x68))+(((1.504)*gclwh8_12*x92))+((gclwh10_12*x107))+((x82*x89))+(((4.0)*gclwh10_10*x73))+(((-1.0)*x128*x69))+((gclwh8_10*x75))+(((-0.0079007)*x99))+(((-1.0)*gclwh10_10*x85))+(((-1.504)*gclwh10_12*x73))+(((-0.16728)*x155))+(((0.752)*gclwh10_12*x69))+((gclwh14_10*x86))+(((4.0)*gclwh6_10*x71))+(((-4.0)*gclwh8_10*x92))+((gclwh4_10*x141))+(((-1.504)*gclwh6_12*x71))+(((-1.0)*x68*x72))+(((0.16728)*x91))+(((-1.0)*gclwh12_10*x150))+(((-0.16728)*x70)));
op[3]=((((-8.817952e-7)*x131))+(((-8.60288e-6)*gclwh10_3*x73))+(((-1.1726e-6)*x91))+((gclwh4_14*x108))+(((-8.817952e-7)*x96))+(((1.1726e-6)*x155))+(((4.5192004e-8)*x109))+(((-1.0)*gclwh12_14*x111))+(((8.817952e-7)*x135))+(((1.1726e-6)*x70))+(((4.30144e-6)*gclwh10_3*x69))+((gclwh14_14*x76)));
op[4]=((0.007776)+(((-1.0)*x324))+x336+x317+(((-1.0)*x334)));
op[5]=((((-1.0)*gclwh6_10*x68))+(((-0.0003362)*x144))+(((0.00108240000167682)*x135))+(((-0.0105600000163592)*gclwh10_3*x73))+(((0.0003362)*x152))+((gclwh8_10*x82))+(((-0.032)*gclwh10_2*x69))+(((5.54730000859369e-5)*x109))+(((-0.0275725)*x70))+(((-1.0)*x326))+(((-0.00108240000167682)*x131))+(((-1.0)*gclwh10_2*x163))+(((0.0275725)*x91))+(((-0.064)*gclwh8_2*x92))+x328+x340+(((-1.0)*gclwh10_10*x69))+(((-0.0052262499918204)*gclwh10_3*x69))+(((-0.0275725)*x155))+(((0.032)*gclwh8_2*x82))+(((0.064)*gclwh10_2*x73))+(((0.064)*gclwh6_2*x71))+(((-1.0)*x339))+(((-0.00108240000167682)*x96))+(((-0.032)*gclwh6_2*x68))+(((-0.00656)*x105))+(((0.00656)*x78))+(((0.00656)*x102)));
op[6]=((((-1.0)*gclwh9_8*x82))+(((0.1817325)*x87))+(((-0.0082369)*x157))+(((0.1817325)*x93))+(((-0.784)*gclwh7_0*x68))+(((1.568)*gclwh7_0*x71))+(((-1.0)*x327))+x335+x325+(((-1.568)*gclwh9_0*x92))+(((-0.126876960001677)*x79))+(((1.568)*gclwh11_0*x73))+(((-0.16072)*x103))+(((0.126876960001677)*x120))+(((0.16072)*x117))+(((-1.0)*x331))+((gclwh7_8*x68))+(((0.0082369)*x158))+(((0.784)*gclwh9_0*x82))+(((0.16072)*x124))+(((-1.0)*gclwh11_0*x169))+(((-0.1817325)*x118))+((gclwh11_8*x69))+(((-0.126876960001677)*x160))+(((-0.784)*gclwh11_0*x69)));
op[7]=((0.190512)+(((-1.0)*x323))+x332+x318+(((-1.0)*x333)));
op[8]=((((-8.817952e-7)*x79))+(((-1.0)*gclwh13_15*x111))+((gclwh5_15*x108))+((gclwh15_15*x76))+(((-1.1726e-6)*x118))+(((8.817952e-7)*x120))+(((-1.0)*gclwh5_1*x130))+(((1.1726e-6)*x93))+(((1.1726e-6)*x87)));
op[9]=((((-4.0)*gclwh11_8*x73))+(((-0.0079007)*gclwh9_13*r20))+(((-1.0)*gclwh15_8*x86))+((gclwh13_8*x150))+(((1.504)*gclwh9_13*x92))+((gclwh7_13*x147))+(((4.0)*gclwh9_8*x92))+(((-0.41)*x137))+(((-1.0)*gclwh9_8*x75))+((x112*x68))+(((-4.0)*gclwh7_8*x71))+(((-1.504)*gclwh11_13*x73))+((x154*x69))+(((-0.752)*gclwh9_13*x82))+(((-0.16728)*x118))+(((0.752)*gclwh7_13*x68))+((gclwh11_8*x85))+(((-1.0)*x134*x82))+(((0.16728)*x87))+(((-1.504)*gclwh7_13*x71))+((gclwh11_13*x107))+(((0.16728)*x93))+(((0.752)*gclwh11_13*x69))+((gclwh7_8*x74)));
op[10]=((((-0.032)*gclwh11_0*x69))+(((-0.00108240000167682)*x160))+(((-0.064)*gclwh9_0*x92))+(((0.00656)*x124))+(((-0.0144525)*x118))+(((0.00108240000167682)*x120))+(((0.0003362)*x158))+(((-1.0)*x325))+(((-0.00108240000167682)*x79))+(((-0.032)*gclwh7_0*x68))+(((0.0144525)*x93))+(((0.032)*gclwh9_0*x82))+(((0.0144525)*x87))+x335+x327+(((0.064)*gclwh11_0*x73))+(((-1.0)*x331))+(((0.064)*gclwh7_0*x71))+((gclwh9_8*x82))+(((-1.0)*gclwh7_8*x68))+(((-0.00656)*x103))+(((-1.0)*gclwh11_0*x163))+(((0.00656)*x117))+(((-1.0)*gclwh11_8*x69))+(((-0.0003362)*x157)));
op[11]=((0.007776)+x332+x323+(((-1.0)*x318))+(((-1.0)*x333)));
op[12]=((4.48448e-6)+(((-1.0)*x321))+x329+x319+(((-1.0)*x337)));
op[13]=((0.59989374999182)+(((2.0)*gclwh12_10*npy*pz))+(((-1.0)*gclwh12_2*pp*pz*r21))+(((2.0)*gclwh12_2*npy*(pz*pz)))+(((-0.205)*gclwh10_3*pp*rxp2_2))+((gclwh14_2*pp*pz*r20))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((2.0)*gclwh4_3*npz*pp*pz))+(((-0.62941825000818)*gclwh1_3*pp*r20))+(((0.01050625)*gclwh4_10*r22))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((-0.007160009375)*gclwh14_9*r20))+(((0.00650244420008594)*gclwh3_3*r21))+((gclwh12_3*r21*(pp*pp)))+(((-1.568)*gclwh1_2*npx*pz))+(((1.23782400001636)*gclwh12_3*npy*pz))+(((0.01050625)*gclwh14_10*r20))+(((-0.60840575000818)*gclwh12_3*pp*r21))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((-0.01050625)*gclwh12_10*r21))+(((-0.784)*gclwh4_2*pp*r22))+(((-0.0082369)*gclwh1_2*r20))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((0.00650244420008594)*gclwh1_3*r20))+(((-1.363)*gclwh12_9*npy*pz))+(((0.007160009375)*gclwh12_9*r21))+(((0.6815)*gclwh12_9*pp*r21))+(((-0.205)*gclwh8_10*rxp0_2))+(((0.205)*gclwh6_2*pz*rxp1_2))+(((0.01050625)*gclwh3_2*pz*r21))+(((0.784)*gclwh3_2*pp*r21))+(((-0.01050625)*gclwh12_2*pz*r21))+(((1.363)*gclwh4_9*npz*pz))+(((-0.007160009375)*gclwh4_9*r22))+(((-0.16072)*gclwh6_2*rxp1_2))+(((1.568)*gclwh14_2*npx*pz))+(((-0.0082369)*gclwh3_2*r21))+(((-1.568)*gclwh12_2*npy*pz))+(((1.568)*gclwh4_2*npz*pz))+(((-0.6815)*gclwh14_9*pp*r20))+((gclwh3_3*r21*(pp*pp)))+((gclwh1_3*r20*(pp*pp)))+(((-0.205)*pz))+(((0.0082369)*gclwh12_2*r21))+((gclwh14_10*pp*r20))+(((0.205)*gclwh10_2*pz*rxp2_2))+(((2.0)*gclwh14_3*npx*pp*pz))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((-0.16072)*gclwh10_2*rxp2_2))+(((0.126876960001677)*gclwh10_3*rxp2_2))+(((-0.0082369)*gclwh4_2*r22))+(((-1.0)*gclwh4_3*r22*(pp*pp)))+(((0.784)*gclwh1_2*pp*r20))+(((-0.62941825000818)*gclwh3_3*pp*r21))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((1.23782400001636)*gclwh3_3*npy*pz))+(((-1.0)*gclwh12_10*pp*r21))+(((-1.568)*gclwh3_2*npy*pz))+(((0.205)*gclwh10_10*rxp2_2))+(((-0.00650244420008594)*gclwh12_3*r21))+(((-1.23782400001636)*gclwh14_3*npx*pz))+(((1.23782400001636)*gclwh1_3*npx*pz))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((-0.6815)*gclwh4_9*pp*r22))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((0.205)*gclwh6_10*rxp1_2))+((gclwh4_10*pp*r22))+(((1.363)*gclwh14_9*npx*pz))+(((0.60840575000818)*gclwh14_3*pp*r20))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((-1.23782400001636)*gclwh4_3*npz*pz))+(((-0.784)*gclwh14_2*pp*r20))+(((0.784)*gclwh12_2*pp*r21))+(((-2.0)*gclwh14_10*npx*pz))+(((-0.0082369)*gclwh14_2*r20))+(((0.00650244420008594)*gclwh4_3*r22))+(((0.60840575000818)*gclwh4_3*pp*r22))+(((0.01050625)*gclwh4_2*pz*r22))+((gclwh4_2*pp*pz*r22))+(((-2.0)*gclwh4_2*npz*(pz*pz)))+(((0.01050625)*gclwh14_2*pz*r20))+(((0.16072)*gclwh8_2*rxp0_2))+(((-2.0)*gclwh4_10*npz*pz))+(((-0.205)*gclwh8_2*pz*rxp0_2))+(((0.01050625)*gclwh1_2*pz*r20))+(((0.00650244420008594)*gclwh14_3*r20)));
op[14]=((-0.0206514999836408)+(((-0.0085731)*gclwh12_9*r21))+(((0.816)*gclwh4_9*x69))+(((-1.632)*gclwh4_9*x73))+((gclwh8_10*x86))+(((0.0085731)*x156))+(((0.15416)*x143))+(((-2.0)*gclwh4_10*x69))+(((-0.816)*gclwh12_9*x68))+((gclwh12_10*x74))+(((4.0)*gclwh4_10*x73))+(((-1.0)*gclwh8_12*x116))+(((-1.0)*gclwh4_10*x85))+(((-1.632)*gclwh14_9*x92))+(((-1.0)*gclwh14_10*x75))+(((-1.0)*gclwh10_10*x141))+(((-4.0)*gclwh12_10*x71))+(((-1.0)*gclwh6_10*x150))+(((0.0085731)*x98))+(((4.0)*gclwh14_10*x92))+(((1.632)*gclwh12_9*x71))+(((0.816)*gclwh14_9*x82))+((gclwh10_12*x77))+(((2.0)*gclwh12_10*x68))+(((-2.0)*gclwh14_10*x82)));
op[15]=((4.66752e-6)+(((0.486)*gclwh14_14*x92))+((gclwh1_3*x114))+(((-1.0)*x148*x69))+(((-6.009575e-8)*x98))+(((-6.009575e-8)*x156))+(((-0.486)*gclwh12_14*x71))+(((4.30144e-6)*gclwh4_3*x69))+((gclwh10_3*x130))+((gclwh14_3*x114))+(((-1.0)*x164*x82))+((gclwh4_3*x146))+(((-1.0)*gclwh14_14*x149))+(((-4.30144e-6)*gclwh12_3*x68))+(((-4.30144e-6)*gclwh1_3*x82))+((gclwh3_3*x94))+(((0.486)*gclwh4_14*x73))+(((-1.0)*gclwh12_3*x94))+((gclwh12_9*x83))+(((1.144e-5)*gclwh14_9*x92))+((x165*x68))+((gclwh12_14*x168))+(((-1.144e-5)*gclwh12_9*x71))+(((1.144e-5)*gclwh4_9*x73))+((x110*x68))+(((-1.0)*gclwh4_14*x100))+(((-8.60288e-6)*gclwh14_3*x92))+(((-1.0)*x162*x82))+(((4.30144e-6)*gclwh14_3*x82))+(((-4.30144e-6)*gclwh3_3*x68))+(((-1.0)*x69*x88))+(((-8.60288e-6)*gclwh4_3*x73))+(((8.60288e-6)*gclwh3_3*x71))+(((8.60288e-6)*gclwh1_3*x92))+(((8.60288e-6)*gclwh12_3*x71)));
op[16]=((-1.8304e-7)+(((-1.0)*x321))+(((-1.0)*x329))+x337+x319);
op[17]=((0.0137382500081796)+(((-1.0)*gclwh12_2*pp*pz*r21))+(((2.0)*gclwh12_2*npy*(pz*pz)))+(((-0.205)*gclwh10_3*pp*rxp2_2))+((gclwh14_2*pp*pz*r20))+(((0.205)*gclwh8_10*rxp0_2))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((0.064)*gclwh14_2*npx*pz))+(((2.0)*gclwh4_3*npz*pp*pz))+(((5.54730000859369e-5)*gclwh3_3*r21))+(((0.0052262499918204)*gclwh12_3*pp*r21))+(((0.269)*gclwh12_9*npy*pz))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((-0.0105600000163592)*gclwh4_3*npz*pz))+((gclwh12_3*r21*(pp*pp)))+(((-0.269)*gclwh14_9*npx*pz))+(((-0.1345)*gclwh12_9*pp*r21))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((-0.01050625)*gclwh14_10*r20))+(((2.0)*gclwh14_10*npx*pz))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((-0.0157862500081796)*gclwh1_3*pp*r20))+(((0.032)*gclwh12_2*pp*r21))+(((5.54730000859369e-5)*gclwh14_3*r20))+(((5.54730000859369e-5)*gclwh4_3*r22))+(((-0.205)*gclwh6_10*rxp1_2))+(((-0.064)*gclwh3_2*npy*pz))+(((0.205)*gclwh6_2*pz*rxp1_2))+(((-1.0)*gclwh14_10*pp*r20))+(((0.01050625)*gclwh3_2*pz*r21))+(((0.1345)*gclwh4_9*pp*r22))+(((-0.01050625)*gclwh12_2*pz*r21))+(((5.54730000859369e-5)*gclwh1_3*r20))+(((-0.01050625)*gclwh4_10*r22))+(((-0.0003362)*gclwh4_2*r22))+(((-0.001413090625)*gclwh12_9*r21))+(((0.032)*gclwh3_2*pp*r21))+(((0.032)*gclwh1_2*pp*r20))+(((-2.0)*gclwh12_10*npy*pz))+((gclwh12_10*pp*r21))+(((0.0105600000163592)*gclwh1_3*npx*pz))+(((0.0105600000163592)*gclwh12_3*npy*pz))+(((-0.269)*gclwh4_9*npz*pz))+(((-0.0052262499918204)*gclwh14_3*pp*r20))+((gclwh3_3*r21*(pp*pp)))+(((-0.0157862500081796)*gclwh3_3*pp*r21))+((gclwh1_3*r20*(pp*pp)))+(((-0.205)*pz))+(((0.1345)*gclwh14_9*pp*r20))+(((0.0105600000163592)*gclwh3_3*npy*pz))+(((0.001413090625)*gclwh4_9*r22))+(((0.064)*gclwh4_2*npz*pz))+(((0.205)*gclwh10_2*pz*rxp2_2))+(((-0.032)*gclwh14_2*pp*r20))+(((2.0)*gclwh14_3*npx*pp*pz))+(((-0.0003362)*gclwh14_2*r20))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((-0.0105600000163592)*gclwh14_3*npx*pz))+(((-5.54730000859369e-5)*gclwh12_3*r21))+(((-1.0)*gclwh4_3*r22*(pp*pp)))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((0.0003362)*gclwh12_2*r21))+(((0.01050625)*gclwh12_10*r21))+(((0.001413090625)*gclwh14_9*r20))+(((0.00656)*gclwh8_2*rxp0_2))+(((-0.205)*gclwh10_10*rxp2_2))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((-0.0003362)*gclwh3_2*r21))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((-0.064)*gclwh12_2*npy*pz))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((-0.064)*gclwh1_2*npx*pz))+(((-0.0003362)*gclwh1_2*r20))+(((0.00108240000167682)*gclwh10_3*rxp2_2))+(((-0.0052262499918204)*gclwh4_3*pp*r22))+(((-0.00656)*gclwh6_2*rxp1_2))+(((-0.00656)*gclwh10_2*rxp2_2))+(((0.01050625)*gclwh4_2*pz*r22))+((gclwh4_2*pp*pz*r22))+(((-2.0)*gclwh4_2*npz*(pz*pz)))+(((-0.032)*gclwh4_2*pp*r22))+(((0.01050625)*gclwh14_2*pz*r20))+(((2.0)*gclwh4_10*npz*pz))+(((-0.205)*gclwh8_2*pz*rxp0_2))+(((0.01050625)*gclwh1_2*pz*r20))+(((-1.0)*gclwh4_10*pp*r22)));
op[18]=((0.59989374999182)+(((0.01050625)*gclwh5_8*r22))+(((-0.8865)*gclwh15_11*pp*r20))+(((-0.01050625)*gclwh0_0*pz*r20))+(((2.0)*gclwh2_1*npy*pp*pz))+(((0.62941825000818)*gclwh2_1*pp*r21))+((gclwh15_0*pp*pz*r20))+(((-0.784)*gclwh2_0*pp*r21))+(((0.01050625)*gclwh15_8*r20))+(((0.0082369)*gclwh2_0*r21))+(((-0.784)*gclwh5_0*pp*r22))+(((0.00650244420008594)*gclwh5_1*r22))+((gclwh13_1*r21*(pp*pp)))+(((2.0)*gclwh0_1*npx*pp*pz))+(((0.60840575000818)*gclwh15_1*pp*r20))+(((-0.0082369)*gclwh15_0*r20))+(((1.773)*gclwh5_11*npz*pz))+(((-1.23782400001636)*gclwh0_1*npx*pz))+(((-1.0)*gclwh2_1*r21*(pp*pp)))+(((-0.0082369)*gclwh5_0*r22))+(((-1.23782400001636)*gclwh15_1*npx*pz))+(((2.0)*gclwh13_8*npy*pz))+(((-1.568)*gclwh13_0*npy*pz))+((gclwh5_0*pp*pz*r22))+((gclwh2_0*pp*pz*r21))+((gclwh0_0*pp*pz*r20))+(((-0.205)*gclwh9_8*rxp0_2))+(((1.568)*gclwh2_0*npy*pz))+(((2.0)*gclwh13_0*npy*(pz*pz)))+(((0.60840575000818)*gclwh5_1*pp*r22))+(((1.23782400001636)*gclwh13_1*npy*pz))+(((-1.23782400001636)*gclwh5_1*npz*pz))+(((2.0)*gclwh5_1*npz*pp*pz))+(((0.205)*gclwh7_0*pz*rxp1_2))+((gclwh5_8*pp*r22))+(((-2.0)*gclwh2_0*npy*(pz*pz)))+(((-0.16072)*gclwh11_0*rxp2_2))+(((-0.784)*gclwh0_0*pp*r20))+(((1.773)*gclwh15_11*npx*pz))+(((0.205)*gclwh11_8*rxp2_2))+(((0.16072)*gclwh9_0*rxp0_2))+(((-0.01050625)*gclwh2_0*pz*r21))+(((1.568)*gclwh5_0*npz*pz))+(((-2.0)*gclwh15_0*npx*(pz*pz)))+(((-1.23782400001636)*gclwh2_1*npy*pz))+(((0.205)*gclwh11_0*pz*rxp2_2))+(((-0.009313790625)*gclwh5_11*r22))+(((-1.773)*gclwh13_11*npy*pz))+(((-1.0)*gclwh13_8*pp*r21))+(((-2.0)*gclwh15_8*npx*pz))+(((-2.0)*gclwh5_0*npz*(pz*pz)))+(((-0.01050625)*gclwh13_0*pz*r21))+(((0.784)*gclwh13_0*pp*r21))+(((1.568)*gclwh15_0*npx*pz))+(((0.62941825000818)*gclwh0_1*pp*r20))+(((0.01050625)*gclwh5_0*pz*r22))+(((-2.0)*gclwh0_0*npx*(pz*pz)))+(((-0.009313790625)*gclwh15_11*r20))+(((-0.01050625)*gclwh13_8*r21))+(((0.009313790625)*gclwh13_11*r21))+(((-1.0)*gclwh13_0*pp*pz*r21))+(((0.205)*gclwh7_8*rxp1_2))+(((-1.0)*gclwh5_1*r22*(pp*pp)))+(((-0.00650244420008594)*gclwh2_1*r21))+(((-0.205)*gclwh9_0*pz*rxp0_2))+(((-2.0)*gclwh13_1*npy*pp*pz))+(((-0.784)*gclwh15_0*pp*r20))+(((-0.60840575000818)*gclwh13_1*pp*r21))+(((-0.00650244420008594)*gclwh13_1*r21))+((gclwh15_8*pp*r20))+(((-0.00650244420008594)*gclwh0_1*r20))+(((0.205)*pz))+(((0.8865)*gclwh13_11*pp*r21))+(((0.01050625)*gclwh15_0*pz*r20))+(((-0.8865)*gclwh5_11*pp*r22))+(((1.568)*gclwh0_0*npx*pz))+(((-1.0)*gclwh15_1*r20*(pp*pp)))+(((0.00650244420008594)*gclwh15_1*r20))+(((-2.0)*gclwh5_8*npz*pz))+(((-0.16072)*gclwh7_0*rxp1_2))+(((0.0082369)*gclwh13_0*r21))+(((0.0082369)*gclwh0_0*r20))+(((2.0)*gclwh15_1*npx*pp*pz))+(((-1.0)*gclwh0_1*r20*(pp*pp))));
op[19]=((-4.48448e-6)+(((-1.0)*x320))+x338+x322+(((-1.0)*x330)));
op[20]=((4.66752e-6)+(((-4.30144e-6)*gclwh13_1*x68))+(((-8.60288e-6)*gclwh15_1*x92))+(((4.30144e-6)*gclwh2_1*x68))+((gclwh5_1*x146))+(((-6.009575e-8)*x90))+(((-8.60288e-6)*gclwh0_1*x92))+(((-0.486)*gclwh13_15*x71))+((x122*x68))+(((1.144e-5)*gclwh5_11*x73))+((x113*x68))+(((-1.144e-5)*gclwh13_11*x71))+(((-1.0)*gclwh0_1*x114))+(((-1.0)*x138*x69))+((gclwh13_11*x83))+(((1.144e-5)*gclwh15_11*x92))+(((-1.0)*x139*x82))+((gclwh15_1*x114))+(((-1.0)*x136*x69))+(((4.30144e-6)*gclwh0_1*x82))+(((-1.0)*x166*x82))+((gclwh13_15*x168))+(((-8.60288e-6)*gclwh2_1*x71))+(((-1.0)*gclwh5_15*x100))+(((0.486)*gclwh5_15*x73))+(((4.30144e-6)*gclwh5_1*x69))+(((0.486)*gclwh15_15*x92))+(((8.60288e-6)*gclwh13_1*x71))+(((-1.0)*gclwh2_1*x94))+(((-1.0)*gclwh13_1*x94))+(((4.30144e-6)*gclwh15_1*x82))+(((-8.60288e-6)*gclwh5_1*x73))+(((-6.009575e-8)*x161))+(((-1.0)*gclwh15_15*x149)));
op[21]=((0.0206514999836408)+(((-4.0)*gclwh15_8*x92))+(((-0.0085731)*x90))+(((0.0085731)*x133))+(((1.632)*gclwh5_11*x73))+(((0.816)*gclwh13_11*x68))+(((2.0)*gclwh5_8*x69))+(((-0.816)*gclwh5_11*x69))+(((-1.0)*gclwh9_8*x86))+(((0.15416)*x140))+(((-2.0)*gclwh13_8*x68))+(((1.632)*gclwh15_11*x92))+(((-1.0)*gclwh9_13*x116))+(((-0.0085731)*x161))+((gclwh5_8*x85))+((gclwh15_8*x75))+((gclwh7_8*x150))+(((-0.816)*gclwh15_11*x82))+(((-1.0)*gclwh13_8*x74))+(((2.0)*gclwh15_8*x82))+(((-4.0)*gclwh5_8*x73))+((gclwh11_8*x141))+((gclwh11_13*x77))+(((4.0)*gclwh13_8*x71))+(((-1.632)*gclwh13_11*x71)));
op[22]=((0.0137382500081796)+(((0.01050625)*gclwh13_8*r21))+(((-0.01050625)*gclwh0_0*pz*r20))+(((2.0)*gclwh2_1*npy*pp*pz))+(((0.141)*gclwh5_11*npz*pz))+((gclwh15_0*pp*pz*r20))+((gclwh13_1*r21*(pp*pp)))+(((0.000740690625)*gclwh13_11*r21))+(((-0.0705)*gclwh15_11*pp*r20))+((gclwh13_8*pp*r21))+(((2.0)*gclwh0_1*npx*pp*pz))+(((0.064)*gclwh0_0*npx*pz))+(((-1.0)*gclwh2_1*r21*(pp*pp)))+(((5.54730000859369e-5)*gclwh5_1*r22))+(((0.0705)*gclwh13_11*pp*r21))+(((0.0105600000163592)*gclwh13_1*npy*pz))+(((-0.032)*gclwh2_0*pp*r21))+(((0.141)*gclwh15_11*npx*pz))+((gclwh5_0*pp*pz*r22))+((gclwh2_0*pp*pz*r21))+(((-0.205)*gclwh7_8*rxp1_2))+(((0.0157862500081796)*gclwh2_1*pp*r21))+((gclwh0_0*pp*pz*r20))+(((-0.032)*gclwh15_0*pp*r20))+(((5.54730000859369e-5)*gclwh15_1*r20))+(((-1.0)*gclwh15_8*pp*r20))+(((-0.0003362)*gclwh5_0*r22))+(((-5.54730000859369e-5)*gclwh2_1*r21))+(((2.0)*gclwh13_0*npy*(pz*pz)))+(((2.0)*gclwh5_1*npz*pp*pz))+(((0.205)*gclwh7_0*pz*rxp1_2))+(((-0.0105600000163592)*gclwh15_1*npx*pz))+(((-2.0)*gclwh13_8*npy*pz))+(((-2.0)*gclwh2_0*npy*(pz*pz)))+(((0.064)*gclwh5_0*npz*pz))+(((0.00656)*gclwh9_0*rxp0_2))+(((0.205)*gclwh9_8*rxp0_2))+(((0.064)*gclwh2_0*npy*pz))+(((0.0157862500081796)*gclwh0_1*pp*r20))+(((-0.0003362)*gclwh15_0*r20))+(((-0.01050625)*gclwh2_0*pz*r21))+(((-2.0)*gclwh15_0*npx*(pz*pz)))+(((2.0)*gclwh5_8*npz*pz))+(((0.205)*gclwh11_0*pz*rxp2_2))+(((-0.01050625)*gclwh5_8*r22))+(((-2.0)*gclwh5_0*npz*(pz*pz)))+(((-0.01050625)*gclwh13_0*pz*r21))+(((0.01050625)*gclwh5_0*pz*r22))+(((-0.064)*gclwh13_0*npy*pz))+(((-2.0)*gclwh0_0*npx*(pz*pz)))+(((-0.0105600000163592)*gclwh2_1*npy*pz))+(((-1.0)*gclwh13_0*pp*pz*r21))+(((-5.54730000859369e-5)*gclwh13_1*r21))+(((-1.0)*gclwh5_1*r22*(pp*pp)))+(((-0.0705)*gclwh5_11*pp*r22))+(((-0.205)*gclwh9_0*pz*rxp0_2))+(((-5.54730000859369e-5)*gclwh0_1*r20))+(((-2.0)*gclwh13_1*npy*pp*pz))+(((0.0052262499918204)*gclwh13_1*pp*r21))+(((0.0003362)*gclwh0_0*r20))+(((-0.205)*gclwh11_8*rxp2_2))+(((-0.141)*gclwh13_11*npy*pz))+(((0.205)*pz))+(((-0.00656)*gclwh7_0*rxp1_2))+(((-0.0052262499918204)*gclwh5_1*pp*r22))+(((-0.0105600000163592)*gclwh5_1*npz*pz))+(((0.0003362)*gclwh13_0*r21))+(((-0.0105600000163592)*gclwh0_1*npx*pz))+(((0.01050625)*gclwh15_0*pz*r20))+(((-1.0)*gclwh15_1*r20*(pp*pp)))+(((-1.0)*gclwh5_8*pp*r22))+(((0.032)*gclwh13_0*pp*r21))+(((0.064)*gclwh15_0*npx*pz))+(((0.0003362)*gclwh2_0*r21))+(((-0.00656)*gclwh11_0*rxp2_2))+(((-0.01050625)*gclwh15_8*r20))+(((-0.000740690625)*gclwh5_11*r22))+(((2.0)*gclwh15_1*npx*pp*pz))+(((-0.000740690625)*gclwh15_11*r20))+(((-0.032)*gclwh5_0*pp*r22))+(((-0.0052262499918204)*gclwh15_1*pp*r20))+(((-1.0)*gclwh0_1*r20*(pp*pp)))+(((-0.032)*gclwh0_0*pp*r20))+(((2.0)*gclwh15_8*npx*pz)));
op[23]=((1.8304e-7)+(((-1.0)*x320))+x330+x322+(((-1.0)*x338)));
IkReal x341=pz*pz;
IkReal x342=(npz*pz);
IkReal x343=(gclwh12_9*r21);
IkReal x344=((0.01312)*rxp0_2);
IkReal x345=(pp*r20);
IkReal x346=(gclwh4_9*rxp2_2);
IkReal x347=(npy*pz);
IkReal x348=((2.0)*gclwh6_10);
IkReal x349=((0.82)*rxp2_2);
IkReal x350=(pp*r22);
IkReal x351=(gclwh13_11*r21);
IkReal x352=(gclwh12_10*r21);
IkReal x353=((0.0210125)*r20);
IkReal x354=(gclwh7_13*r21);
IkReal x355=((4.1394625e-8)*r20);
IkReal x356=(pp*r21);
IkReal x357=((4.0)*gclwh13_8);
IkReal x358=(gclwh6_2*rxp1_2);
IkReal x359=((0.486)*gclwh12_14);
IkReal x360=((0.049815)*rxp0_2);
IkReal x361=(gclwh4_2*rxp2_2);
IkReal x362=((4.0)*gclwh15_8);
IkReal x363=(gclwh14_2*rxp0_2);
IkReal x364=((4.0)*gclwh4_10);
IkReal x365=(gclwh5_11*rxp2_2);
IkReal x366=((0.486)*gclwh5_15);
IkReal x367=((1.8701125e-8)*r20);
IkReal x368=((2.33536e-8)*rxp2_2);
IkReal x369=(gclwh13_8*rxp1_2);
IkReal x370=(gclwh15_11*rxp0_2);
IkReal x371=((4.0)*gclwh8_10);
IkReal x372=((4.1394625e-8)*r21);
IkReal x373=(gclwh4_10*r22);
IkReal x374=(gclwh15_8*rxp0_2);
IkReal x375=((0.30832)*rxp0_2);
IkReal x376=((2.0)*gclwh8_10);
IkReal x377=((2.0)*pp);
IkReal x378=((0.486)*gclwh4_14);
IkReal x379=((2.9323364e-8)*r21);
IkReal x380=((3.56e-6)*pp);
IkReal x381=(gclwh12_9*rxp1_2);
IkReal x382=((4.0)*gclwh5_8);
IkReal x383=(npx*pz);
IkReal x384=(gclwh12_2*rxp1_2);
IkReal x385=((4.0)*gclwh11_8);
IkReal x386=(gclwh13_11*rxp1_2);
IkReal x387=((0.205)*pp);
IkReal x388=(gclwh4_3*rxp2_2);
IkReal x389=((0.486)*gclwh15_15);
IkReal x390=(gclwh13_15*rxp1_2);
IkReal x391=(gclwh5_1*rxp2_2);
IkReal x392=((4.0)*gclwh9_8);
IkReal x393=(gclwh14_14*r20);
IkReal x394=((1.196872e-9)*r20);
IkReal x395=((0.41)*rxp2_2);
IkReal x396=((2.9323364e-8)*r20);
IkReal x397=(gclwh10_2*r22);
IkReal x398=((0.00255301875)*r22);
IkReal x399=((0.205)*pz);
IkReal x400=(gclwh13_8*r21);
IkReal x401=((2.9323364e-8)*r22);
IkReal x402=(gclwh8_12*r20);
IkReal x403=((0.01050625)*r22);
IkReal x404=((0.0158014)*r20);
IkReal x405=(gclwh5_11*r22);
IkReal x406=((1.196872e-9)*r21);
IkReal x407=((0.042025)*r22);
IkReal x408=(gclwh11_13*r22);
IkReal x409=(gclwh5_15*rxp2_2);
IkReal x410=((0.32144)*rxp1_2);
IkReal x411=(gclwh12_14*rxp1_2);
IkReal x412=(gclwh6_12*r21);
IkReal x413=((4.1394625e-8)*r22);
IkReal x414=((0.042025)*r20);
IkReal x415=((0.001276509375)*r21);
IkReal x416=((2.0)*gclwh7_8);
IkReal x417=((1.78e-6)*pp);
IkReal x418=((1.196872e-9)*r22);
IkReal x419=(gclwh9_8*rxp0_2);
IkReal x420=(gclwh15_0*rxp0_2);
IkReal x421=(gclwh8_2*pz);
IkReal x422=((0.32144)*rxp2_2);
IkReal x423=(gclwh13_1*rxp1_2);
IkReal x424=(gclwh15_1*rxp0_2);
IkReal x425=(gclwh5_0*rxp2_2);
IkReal x426=(gclwh12_3*rxp1_2);
IkReal x427=((3.56e-6)*gclwh15_11);
IkReal x428=((0.01050625)*pz);
IkReal x429=(gclwh9_0*r20);
IkReal x430=((8.077e-7)*rxp2_2);
IkReal x431=(gclwh8_10*rxp0_2);
IkReal x432=(gclwh13_0*rxp1_2);
IkReal x433=((0.0158014)*r21);
IkReal x434=((2.0)*gclwh9_8);
IkReal x435=(gclwh14_10*rxp0_2);
IkReal x436=(gclwh10_12*r22);
IkReal x437=((4.0)*gclwh14_10);
IkReal x438=(gclwh6_2*r21);
IkReal x439=((0.32144)*rxp0_2);
IkReal x440=((3.740225e-8)*r20);
IkReal x441=((0.30832)*rxp2_2);
IkReal x442=((0.82)*rxp1_2);
IkReal x443=((0.0158014)*r22);
IkReal x444=((4.0)*gclwh10_10);
IkReal x445=((8.077e-7)*rxp0_2);
IkReal x446=(gclwh8_2*r20);
IkReal x447=((3.56e-6)*gclwh4_9);
IkReal x448=((0.01050625)*r20);
IkReal x449=(gclwh6_10*r21);
IkReal x450=(gclwh14_3*rxp0_2);
IkReal x451=(gclwh4_14*rxp2_2);
IkReal x452=(gclwh11_0*pz);
IkReal x453=((0.0051060375)*r21);
IkReal x454=((2.0)*gclwh11_8);
IkReal x455=((4.0)*gclwh7_8);
IkReal x456=(gclwh4_9*r22);
IkReal x457=(gclwh9_13*r20);
IkReal x458=((0.001276509375)*r22);
IkReal x459=((0.486)*gclwh14_14);
IkReal x460=(gclwh14_9*rxp0_2);
IkReal x461=(gclwh7_0*r21);
IkReal x462=((4.0)*gclwh6_10);
IkReal x463=((0.001276509375)*r20);
IkReal x464=(gclwh10_3*r22);
IkReal x465=(gclwh15_15*r20);
IkReal x466=((0.01312)*rxp2_2);
IkReal x467=((3.56e-6)*gclwh5_11);
IkReal x468=((0.0051060375)*r22);
IkReal x469=((0.205)*rxp2_2);
IkReal x470=(gclwh15_15*rxp0_2);
IkReal x471=((0.41)*rxp1_2);
IkReal x472=((0.01312)*rxp1_2);
IkReal x473=((2.0)*gclwh10_10);
IkReal x474=((0.00255301875)*r21);
IkReal x475=(gclwh11_0*r22);
IkReal x476=(gclwh7_0*rxp1_2);
IkReal x477=((0.0210125)*r22);
IkReal x478=(gclwh7_8*r21);
IkReal x479=(gclwh14_14*rxp0_2);
IkReal x480=((0.486)*gclwh13_15);
IkReal x481=((0.41)*x435);
IkReal x482=(gclwh8_10*x353);
IkReal x483=(gclwh4_10*x395);
IkReal x484=((0.0210125)*x449);
IkReal x485=(gclwh12_10*x471);
IkReal x486=(gclwh10_10*x477);
IkReal x487=((8.077e-7)*x363);
IkReal x488=(gclwh14_14*x360);
IkReal x489=((0.049815)*x451);
IkReal x490=((8.077e-7)*x361);
IkReal x491=(gclwh8_2*x355);
IkReal x492=((3.649e-7)*x346);
IkReal x493=((3.649e-7)*x460);
IkReal x494=((3.649e-7)*x381);
IkReal x495=((4.1394625e-8)*x397);
IkReal x496=(gclwh6_2*x372);
IkReal x497=((8.077e-7)*x384);
IkReal x498=((0.049815)*x411);
IkReal x499=((8.077e-7)*x425);
IkReal x500=(gclwh9_0*x355);
IkReal x501=((3.649e-7)*x370);
IkReal x502=(gclwh15_15*x360);
IkReal x503=((8.077e-7)*x420);
IkReal x504=((3.649e-7)*x365);
IkReal x505=((0.049815)*x409);
IkReal x506=((0.049815)*x390);
IkReal x507=((8.077e-7)*x432);
IkReal x508=((3.649e-7)*x386);
IkReal x509=(gclwh7_0*x372);
IkReal x510=(gclwh11_0*x413);
IkReal x511=(gclwh11_8*x477);
IkReal x512=((0.41)*x369);
IkReal x513=((0.0210125)*x478);
IkReal x514=((0.41)*x374);
IkReal x515=(gclwh9_8*x353);
IkReal x516=(gclwh5_8*x395);
IkReal x517=((0.41)*x431);
IkReal x518=((0.0210125)*x352);
IkReal x519=((0.0210125)*x373);
IkReal x520=(gclwh10_10*x395);
IkReal x521=(gclwh6_10*x471);
IkReal x522=(gclwh14_10*x353);
IkReal x523=(gclwh12_2*x372);
IkReal x524=(gclwh8_2*x445);
IkReal x525=((1.8701125e-8)*x343);
IkReal x526=(gclwh12_14*x474);
IkReal x527=((1.8701125e-8)*x456);
IkReal x528=(gclwh4_14*x398);
IkReal x529=((8.077e-7)*x358);
IkReal x530=(gclwh4_2*x413);
IkReal x531=((0.00255301875)*x393);
IkReal x532=(gclwh1_2*x355);
IkReal x533=(gclwh10_2*x430);
IkReal x534=(gclwh14_9*x367);
IkReal x535=(gclwh14_2*x355);
IkReal x536=(gclwh3_2*x372);
IkReal x537=(gclwh2_0*x372);
IkReal x538=(gclwh0_0*x355);
IkReal x539=(gclwh9_0*x445);
IkReal x540=((1.8701125e-8)*x351);
IkReal x541=(gclwh13_15*x474);
IkReal x542=(gclwh13_0*x372);
IkReal x543=((1.8701125e-8)*x405);
IkReal x544=(gclwh5_0*x413);
IkReal x545=((8.077e-7)*x476);
IkReal x546=((0.00255301875)*x465);
IkReal x547=(gclwh15_11*x367);
IkReal x548=(gclwh15_0*x355);
IkReal x549=(gclwh5_15*x398);
IkReal x550=(gclwh11_0*x430);
IkReal x551=(gclwh11_8*x395);
IkReal x552=(gclwh7_8*x471);
IkReal x553=(gclwh15_8*x353);
IkReal x554=(gclwh5_8*x477);
IkReal x555=((0.0210125)*x400);
IkReal x556=((0.41)*x419);
IkReal x557=((0.0249075)*x451);
IkReal x558=((1.134675e-8)*x402);
IkReal x559=((2.214e-7)*x381);
IkReal x560=(gclwh8_5*x463);
IkReal x561=((0.0249075)*x479);
IkReal x562=((2.214e-7)*x346);
IkReal x563=((0.0249075)*x411);
IkReal x564=((2.214e-7)*x460);
IkReal x565=(gclwh10_5*x458);
IkReal x566=(gclwh6_5*x415);
IkReal x567=((1.134675e-8)*x436);
IkReal x568=((1.134675e-8)*x412);
IkReal x569=((0.205)*gclwh12_10*rxp1_2);
IkReal x570=(gclwh10_10*x403);
IkReal x571=((0.01050625)*x449);
IkReal x572=(gclwh4_10*x469);
IkReal x573=(gclwh8_10*x448);
IkReal x574=((0.205)*x435);
IkReal x575=(gclwh11_8*x403);
IkReal x576=((0.205)*x369);
IkReal x577=((0.01050625)*x478);
IkReal x578=(gclwh9_8*x448);
IkReal x579=(gclwh5_8*x469);
IkReal x580=((0.205)*x374);
IkReal x581=(gclwh14_9*x383);
IkReal x582=((1.08e-6)*x350);
IkReal x583=((5.58208e-6)*x383);
IkReal x584=((2.0)*x341);
IkReal x585=(x347*x462);
IkReal x586=(x342*x444);
IkReal x587=(x345*x376);
IkReal x588=(x348*x356);
IkReal x589=(x371*x383);
IkReal x590=(x350*x473);
IkReal x591=((7.88e-6)*gclwh10_2*x342);
IkReal x592=((7.88e-6)*gclwh6_2*x347);
IkReal x593=((3.94e-6)*gclwh8_2*x345);
IkReal x594=((3.94e-6)*gclwh6_2*x356);
IkReal x595=((3.94e-6)*gclwh10_2*x350);
IkReal x596=((7.88e-6)*gclwh8_2*x383);
IkReal x597=((7.88e-6)*gclwh7_0*x347);
IkReal x598=((7.88e-6)*gclwh11_0*x342);
IkReal x599=((3.94e-6)*gclwh9_0*x345);
IkReal x600=((3.94e-6)*gclwh11_0*x350);
IkReal x601=((3.94e-6)*gclwh7_0*x356);
IkReal x602=((7.88e-6)*gclwh9_0*x383);
IkReal x603=(x383*x392);
IkReal x604=(x356*x416);
IkReal x605=(x350*x454);
IkReal x606=(x347*x455);
IkReal x607=(x342*x385);
IkReal x608=(x345*x434);
IkReal x609=(x352*x377);
IkReal x610=(x383*x437);
IkReal x611=(x342*x364);
IkReal x612=((2.0)*gclwh14_10*x345);
IkReal x613=((2.0)*gclwh4_10*x350);
IkReal x614=((4.0)*gclwh12_10*x347);
IkReal x615=((3.94e-6)*gclwh1_2*x345);
IkReal x616=((3.94e-6)*gclwh12_2*x356);
IkReal x617=(x383*x459);
IkReal x618=(x342*x378);
IkReal x619=(x343*x417);
IkReal x620=(x342*x447);
IkReal x621=((3.94e-6)*gclwh3_2*x356);
IkReal x622=((7.88e-6)*gclwh4_2*x342);
IkReal x623=((3.56e-6)*x581);
IkReal x624=((0.243)*gclwh12_14*x356);
IkReal x625=((7.88e-6)*gclwh14_2*x383);
IkReal x626=((3.94e-6)*gclwh14_2*x345);
IkReal x627=((3.94e-6)*gclwh4_2*x350);
IkReal x628=((1.78e-6)*gclwh14_9*x345);
IkReal x629=((0.243)*gclwh14_14*x345);
IkReal x630=((1.78e-6)*gclwh4_9*x350);
IkReal x631=(x347*x359);
IkReal x632=((7.88e-6)*gclwh1_2*x383);
IkReal x633=((3.56e-6)*gclwh12_9*x347);
IkReal x634=((0.243)*gclwh4_14*x350);
IkReal x635=((7.88e-6)*gclwh3_2*x347);
IkReal x636=((7.88e-6)*gclwh12_2*x347);
IkReal x637=((7.88e-6)*gclwh5_0*x342);
IkReal x638=((7.88e-6)*gclwh15_0*x383);
IkReal x639=(x383*x389);
IkReal x640=(x342*x366);
IkReal x641=(x383*x427);
IkReal x642=(x342*x467);
IkReal x643=((3.94e-6)*gclwh13_0*x356);
IkReal x644=(x351*x417);
IkReal x645=((7.88e-6)*gclwh2_0*x347);
IkReal x646=((0.243)*gclwh13_15*x356);
IkReal x647=((7.88e-6)*gclwh0_0*x383);
IkReal x648=((7.88e-6)*gclwh13_0*x347);
IkReal x649=((3.94e-6)*gclwh15_0*x345);
IkReal x650=((1.78e-6)*gclwh5_11*x350);
IkReal x651=((0.243)*gclwh15_15*x345);
IkReal x652=((3.94e-6)*gclwh2_0*x356);
IkReal x653=((0.243)*gclwh5_15*x350);
IkReal x654=(x347*x480);
IkReal x655=((1.78e-6)*gclwh15_11*x345);
IkReal x656=((3.94e-6)*gclwh0_0*x345);
IkReal x657=((3.56e-6)*gclwh13_11*x347);
IkReal x658=((3.94e-6)*gclwh5_0*x350);
IkReal x659=(x347*x357);
IkReal x660=((2.0)*gclwh15_8*x345);
IkReal x661=((2.0)*gclwh5_8*x350);
IkReal x662=((2.0)*gclwh13_8*x356);
IkReal x663=(x362*x383);
IkReal x664=(x342*x382);
IkReal x665=((0.243)*gclwh10_5*x342);
IkReal x666=((0.243)*gclwh6_5*x347);
IkReal x667=((0.1215)*gclwh8_5*x345);
IkReal x668=((1.08e-6)*gclwh8_12*x345);
IkReal x669=((2.16e-6)*gclwh10_12*x342);
IkReal x670=((2.16e-6)*gclwh6_12*x347);
IkReal x671=((0.243)*gclwh8_5*x383);
IkReal x672=(gclwh10_12*x582);
IkReal x673=((0.1215)*gclwh10_5*x350);
IkReal x674=((2.16e-6)*gclwh8_12*x383);
IkReal x675=((0.1215)*gclwh6_5*x356);
IkReal x676=((1.08e-6)*gclwh6_12*x356);
IkReal x677=(x428*x438);
IkReal x678=(x387*x450);
IkReal x679=(x397*x428);
IkReal x680=(gclwh6_2*pz*x356);
IkReal x681=(x384*x399);
IkReal x682=(x376*x383);
IkReal x683=(gclwh10_2*pz*x350);
IkReal x684=(x387*x388);
IkReal x685=(x387*x426);
IkReal x686=(x363*x399);
IkReal x687=(x347*x348);
IkReal x688=(x342*x473);
IkReal x689=(x421*x448);
IkReal x690=(x361*x399);
IkReal x691=(x428*x461);
IkReal x692=(x387*x391);
IkReal x693=(x387*x424);
IkReal x694=(gclwh7_0*pz*x356);
IkReal x695=(x399*x432);
IkReal x696=(x350*x452);
IkReal x697=(x383*x434);
IkReal x698=(x403*x452);
IkReal x699=(x342*x454);
IkReal x700=(x399*x420);
IkReal x701=(x347*x416);
IkReal x702=(x428*x429);
IkReal x703=(x399*x425);
IkReal x704=(x387*x423);
IkReal x705=(gclwh10_3*x342*x377);
IkReal x706=(gclwh8_2*npx*x584);
IkReal x707=x309;
IkReal x708=(gclwh6_2*npy*x584);
IkReal x709=((1.0)*x345*x421);
IkReal x710=(gclwh10_2*npz*x584);
IkReal x711=(gclwh9_0*npx*x584);
IkReal x712=((1.0)*gclwh9_0*pz*x345);
IkReal x713=(gclwh11_0*npz*x584);
IkReal x714=(gclwh7_0*npy*x584);
IkReal x715=(x498+x494);
IkReal x716=(x502+x505);
IkReal x717=(x501+x504);
IkReal x718=(x508+x506);
IkReal x719=(x559+x557+x561);
IkReal x720=(x564+x562+x563);
IkReal x721=(x489+x488+x492+x493);
IkReal x722=(x571+x570+x569+x682);
IkReal x723=(x575+x577+x576+x697);
IkReal x724=(x574+x573+x572+x688+x687);
IkReal x725=(x579+x578+x580+x699+x701);
IkReal x726=(x518+x517+x609+x610+x611);
IkReal x727=(x556+x555+x663+x662+x664);
IkReal x728=(x487+x490+x491+x593+x592+x591);
IkReal x729=(x509+x507+x510+x602+x601+x600);
IkReal x730=(x516+x515+x514+x607+x606+x608);
IkReal x731=(x481+x483+x482+x585+x586+x587);
IkReal x732=(x496+x497+x495+x596+x595+x594);
IkReal x733=(x513+x512+x511+x603+x605+x604);
IkReal x734=(x485+x484+x486+x588+x589+x590);
IkReal x735=(x499+x500+x503+x597+x599+x598);
IkReal x736=(x553+x552+x551+x554+x659+x661+x660);
IkReal x737=(x522+x520+x521+x519+x614+x612+x613);
IkReal x738=(x523+x524+x615+x616+x625+x621+x622);
IkReal x739=(x558+x560+x669+x668+x665+x667+x666+x670);
IkReal x740=(x540+x541+x646+x644+x642+x641+x640+x639);
IkReal x741=(x526+x525+x618+x619+x617+x624+x620+x623);
IkReal x742=(x713+x712+x714+x702+x703+x700+x704);
IkReal x743=(x550+x544+x545+x548+x649+x648+x652+x656+x658);
IkReal x744=(x542+x537+x539+x538+x647+x645+x643+x637+x638);
IkReal x745=(x694+x695+x696+x691+x692+x693+x698+x711);
IkReal x746=(x568+x566+x567+x565+x672+x673+x671+x676+x674+x675);
IkReal x747=(x689+x686+x685+x690+x710+x708+x709+x707);
IkReal x748=(x531+x534+x527+x528+x629+x628+x634+x633+x630+x631);
IkReal x749=(x546+x547+x543+x549+x650+x651+x653+x654+x655+x657);
IkReal x750=(x678+x679+x677+x683+x681+x680+x684+x706+x705);
IkReal x751=(x530+x533+x532+x535+x536+x529+x627+x626+x636+x635+x632);
op[24]=((9.5742e-7)+(((-1.568)*gclwh6_12*x356))+(((-3.136)*gclwh8_12*x383))+(((3.136)*gclwh6_12*x347))+(((-0.0164738)*x436))+(((3.136)*gclwh10_12*x342))+(((-1.0)*x731))+(((-0.0164738)*x412))+(((1.568)*gclwh8_12*x345))+x734+(((-1.568)*gclwh10_12*x350))+(((0.0164738)*x402)));
op[25]=((((-2.79104e-6)*gclwh10_3*x350))+(((5.58208e-6)*gclwh10_3*x342))+(((5.721632e-7)*x388))+(((-1.0)*x721))+(((-1.0)*x732))+(((-1.0)*gclwh10_3*x401))+(((5.721632e-7)*x450))+x715+x728+(((-5.721632e-7)*x426)));
op[26]=((0.365472)+(((7.298e-7)*x346))+(((0.09963)*x479))+(((-0.09963)*x411))+(((0.09963)*x451))+(((7.298e-7)*x460))+(((-7.298e-7)*x381)));
op[27]=((((-8.0)*gclwh10_10*x342))+(((0.042025)*x449))+(((-1.0)*x345*x371))+(((-3.008)*gclwh8_2*x383))+(((-0.30832)*x384))+(((8.0)*gclwh8_10*x383))+(((-1.0)*gclwh4_10*x349))+(((-1.504)*gclwh10_2*x350))+(((-1.0)*gclwh6_2*x433))+(((0.30832)*x361))+(((0.30832)*x363))+(((1.504)*gclwh8_2*x345))+(((3.008)*gclwh6_2*x347))+(((3.008)*gclwh10_2*x342))+((gclwh8_2*x404))+((x350*x444))+(((-0.0158014)*x397))+(((-8.0)*gclwh6_10*x347))+(((-1.0)*gclwh8_10*x414))+(((-1.504)*gclwh6_2*x356))+((gclwh10_10*x407))+((x356*x462))+(((-0.82)*x435))+((gclwh12_10*x442)));
op[28]=((9.5742e-7)+(((-0.064)*gclwh10_12*x350))+(((0.128)*gclwh10_12*x342))+(((-0.064)*gclwh6_12*x356))+(((-0.128)*gclwh8_12*x383))+(((-1.0)*x734))+(((0.064)*gclwh8_12*x345))+(((-0.0006724)*x412))+(((0.0006724)*x402))+x731+(((-0.0006724)*x436))+(((0.128)*gclwh6_12*x347)));
op[29]=((((2.33536e-8)*x450))+((gclwh4_3*x368))+(((-1.0)*x732))+(((-2.33536e-8)*x426))+(((-1.0)*x715))+(((-1.0)*gclwh10_3*x418))+(((-1.1392e-7)*gclwh10_3*x350))+x721+x728+(((2.2784e-7)*gclwh10_3*x342)));
op[30]=((((-1.0)*x729))+(((-1.0)*x716))+(((-1.0)*x717))+x718+x735+(((-5.721632e-7)*x423))+(((5.721632e-7)*x391))+(((5.721632e-7)*x424)));
op[31]=((9.5742e-7)+(((-0.0164738)*x354))+(((3.136)*gclwh7_13*x347))+(((-1.0)*x733))+(((-0.0164738)*x408))+(((3.136)*gclwh11_13*x342))+(((-3.136)*gclwh9_13*x383))+(((0.0164738)*x457))+(((1.568)*gclwh9_13*x345))+x730+(((-1.568)*gclwh11_13*x350))+(((-1.568)*pp*x354)));
op[32]=((((-1.504)*gclwh7_0*x356))+(((-8.0)*gclwh7_8*x347))+(((-1.0)*gclwh11_0*x443))+(((0.82)*x369))+(((-0.30832)*x432))+(((8.0)*gclwh9_8*x383))+(((-1.0)*x345*x392))+(((0.042025)*x478))+(((-8.0)*gclwh11_8*x342))+(((3.008)*gclwh11_0*x342))+((gclwh15_0*x375))+((x350*x385))+(((-1.0)*gclwh9_8*x414))+(((-3.008)*gclwh9_0*x383))+(((-1.504)*gclwh11_0*x350))+(((-1.0)*gclwh7_0*x433))+(((0.30832)*x425))+(((-0.82)*x374))+((gclwh9_0*x404))+(((-1.0)*gclwh5_8*x349))+(((1.504)*gclwh9_0*x345))+((x356*x455))+(((3.008)*gclwh7_0*x347))+((gclwh11_8*x407)));
op[33]=((0.365472)+(((-0.09963)*x470))+(((0.09963)*x390))+(((7.298e-7)*x386))+(((-7.298e-7)*x365))+(((-7.298e-7)*x370))+(((-0.09963)*x409)));
op[34]=((((2.33536e-8)*x424))+(((-1.0)*x729))+(((-2.33536e-8)*x423))+(((-1.0)*x718))+x717+x716+x735+((gclwh5_1*x368)));
op[35]=((9.5742e-7)+(((-0.0006724)*x354))+(((0.128)*gclwh7_13*x347))+(((-0.128)*gclwh9_13*x383))+(((0.128)*gclwh11_13*x342))+(((-0.064)*pp*x354))+(((-0.064)*gclwh11_13*x350))+(((-0.0006724)*x408))+(((-1.0)*x730))+x733+(((0.0006724)*x457))+(((0.064)*gclwh9_13*x345)));
op[36]=((-1.25883649999382)+(((-1.0)*gclwh6_12*x410))+(((-1.0)*x726))+(((-1.0)*gclwh10_12*x422))+((gclwh8_12*x439))+x737);
op[37]=((6.17792e-6)+(((-1.0)*gclwh1_3*x396))+(((-2.79104e-6)*gclwh4_3*x350))+(((-1.0)*gclwh3_3*x379))+(((-1.0)*gclwh4_3*x401))+(((2.79104e-6)*gclwh3_3*x356))+(((2.79104e-6)*gclwh12_3*x356))+(((2.79104e-6)*gclwh1_3*x345))+(((-1.0)*gclwh1_3*x583))+(((-5.58208e-6)*gclwh12_3*x347))+(((-2.79104e-6)*gclwh14_3*x345))+(((-1.0)*gclwh14_3*x396))+x738+x748+(((-5.58208e-6)*gclwh3_3*x347))+(((-1.0)*x741))+((gclwh14_3*x583))+(((-5.721632e-7)*gclwh10_3*rxp2_2))+((gclwh12_3*x379))+(((5.58208e-6)*gclwh4_3*x342))+(((-1.0)*x751)));
op[38]=((-6.43008e-6)+(((-0.0051060375)*x393))+(((-7.12e-6)*gclwh12_9*x347))+((x356*x359))+(((-1.0)*x350*x378))+(((-3.56e-6)*gclwh14_9*x345))+(((-1.0)*gclwh4_14*x468))+(((7.12e-6)*gclwh4_9*x342))+(((-1.0)*gclwh14_9*x440))+((x343*x380))+(((-1.0)*x350*x447))+(((3.740225e-8)*x343))+(((7.12e-6)*x581))+(((-1.0)*x345*x459))+(((0.972)*gclwh14_14*x383))+(((-0.972)*gclwh12_14*x347))+(((0.972)*gclwh4_14*x342))+(((-3.740225e-8)*x456))+((gclwh12_14*x453)));
op[39]=((-0.159400999987645)+((gclwh8_2*x375))+(((-4.0)*pp*x352))+(((3.008)*gclwh4_2*x342))+(((-1.504)*gclwh4_2*x350))+(((1.504)*gclwh3_2*x356))+(((8.0)*gclwh12_10*x347))+(((-1.504)*gclwh14_2*x345))+(((-0.042025)*x352))+(((-3.008)*gclwh3_2*x347))+((x345*x437))+(((-1.0)*gclwh14_2*x404))+(((-1.0)*gclwh10_2*x441))+((x350*x364))+(((0.042025)*x373))+(((-3.008)*gclwh1_2*x383))+(((-0.30832)*x358))+(((-8.0)*gclwh4_10*x342))+(((-1.0)*gclwh4_2*x443))+(((-1.0)*gclwh3_2*x433))+((gclwh10_10*x349))+(((-8.0)*gclwh14_10*x383))+((gclwh14_10*x414))+(((-3.008)*gclwh12_2*x347))+(((1.504)*gclwh12_2*x356))+(((3.008)*gclwh14_2*x383))+(((1.504)*gclwh1_2*x345))+(((-1.0)*gclwh1_2*x404))+(((-0.82)*x431))+((gclwh6_10*x442))+((gclwh12_2*x433)));
op[40]=((0.0315724999938224)+(((-1.0)*x737))+(((-1.0)*gclwh6_12*x472))+x726+(((-1.0)*gclwh10_12*x466))+((gclwh8_12*x344)));
op[41]=((-2.5216e-7)+(((-2.2784e-7)*gclwh3_3*x347))+(((-1.0)*gclwh10_3*x368))+(((-1.0)*gclwh1_3*x394))+(((-1.1392e-7)*gclwh4_3*x350))+(((1.1392e-7)*gclwh3_3*x356))+(((-1.0)*gclwh4_3*x418))+(((-2.2784e-7)*gclwh12_3*x347))+(((2.2784e-7)*gclwh14_3*x383))+(((-2.2784e-7)*gclwh1_3*x383))+(((1.1392e-7)*gclwh12_3*x356))+(((2.2784e-7)*gclwh4_3*x342))+(((-1.0)*gclwh14_3*x394))+x738+x741+(((-1.0)*gclwh3_3*x406))+((gclwh12_3*x406))+(((-1.1392e-7)*gclwh14_3*x345))+(((-1.0)*x748))+(((1.1392e-7)*gclwh1_3*x345))+(((-1.0)*x751)));
op[42]=((6.17792e-6)+(((-1.0)*gclwh5_1*x401))+(((2.79104e-6)*gclwh13_1*x356))+((gclwh0_1*x396))+((gclwh15_1*x583))+(((-2.79104e-6)*gclwh2_1*x356))+(((-5.58208e-6)*gclwh13_1*x347))+((gclwh0_1*x583))+(((-2.79104e-6)*gclwh15_1*x345))+((gclwh13_1*x379))+((gclwh2_1*x379))+(((5.58208e-6)*gclwh5_1*x342))+(((5.58208e-6)*gclwh2_1*x347))+x744+x749+(((-2.79104e-6)*gclwh0_1*x345))+(((-1.0)*x740))+(((-1.0)*x743))+(((-2.79104e-6)*gclwh5_1*x350))+(((-1.0)*gclwh15_1*x396)));
op[43]=((1.25883649999382)+(((-1.0)*gclwh7_13*x410))+((gclwh9_13*x439))+(((-1.0)*gclwh11_13*x422))+(((-1.0)*x736))+x727);
op[44]=((-0.159400999987645)+((gclwh15_8*x414))+(((-1.504)*gclwh2_0*x356))+(((-1.0)*gclwh11_0*x441))+(((-0.042025)*x400))+(((-1.504)*gclwh5_0*x350))+((gclwh9_0*x375))+(((-1.504)*gclwh15_0*x345))+(((8.0)*gclwh13_8*x347))+(((-1.504)*gclwh0_0*x345))+(((-1.0)*x356*x357))+(((3.008)*gclwh2_0*x347))+((x350*x382))+(((-1.0)*gclwh15_0*x404))+(((1.504)*gclwh13_0*x356))+(((3.008)*gclwh0_0*x383))+((gclwh0_0*x404))+(((-0.82)*x419))+(((-3.008)*gclwh13_0*x347))+(((-1.0)*gclwh5_0*x443))+((x345*x362))+((gclwh13_0*x433))+((gclwh2_0*x433))+(((-8.0)*gclwh5_8*x342))+(((-0.30832)*x476))+(((3.008)*gclwh5_0*x342))+((gclwh5_8*x407))+(((-8.0)*gclwh15_8*x383))+((gclwh7_8*x442))+(((3.008)*gclwh15_0*x383))+((gclwh11_8*x349)));
op[45]=((6.43008e-6)+((x345*x427))+((gclwh5_15*x468))+(((-0.972)*gclwh15_15*x383))+((x350*x366))+((x345*x389))+(((-3.740225e-8)*x351))+(((-7.12e-6)*gclwh5_11*x342))+((x350*x467))+(((-1.0)*x351*x380))+(((7.12e-6)*gclwh13_11*x347))+(((-7.12e-6)*gclwh15_11*x383))+(((3.740225e-8)*x405))+(((-0.972)*gclwh5_15*x342))+(((-1.0)*gclwh13_15*x453))+((gclwh15_11*x440))+(((0.0051060375)*x465))+(((-1.0)*x356*x480))+(((0.972)*gclwh13_15*x347)));
op[46]=((-2.5216e-7)+(((2.2784e-7)*gclwh5_1*x342))+(((-1.0)*gclwh5_1*x418))+((gclwh0_1*x394))+(((-1.1392e-7)*gclwh5_1*x350))+(((2.2784e-7)*gclwh2_1*x347))+(((-1.1392e-7)*gclwh2_1*x356))+((gclwh13_1*x406))+(((1.1392e-7)*gclwh13_1*x356))+(((-1.1392e-7)*gclwh0_1*x345))+x744+x740+(((-1.0)*x749))+(((-1.0)*x743))+(((-1.1392e-7)*gclwh15_1*x345))+(((2.2784e-7)*gclwh15_1*x383))+(((2.2784e-7)*gclwh0_1*x383))+((gclwh2_1*x406))+(((-1.0)*gclwh15_1*x394))+(((-2.2784e-7)*gclwh13_1*x347)));
op[47]=((-0.0315724999938224)+((gclwh9_13*x344))+(((-1.0)*x727))+(((-1.0)*gclwh11_13*x466))+x736+(((-1.0)*gclwh7_13*x472)));
op[48]=((-0.190512)+(((-1.0)*x719))+x739+x720+(((-1.0)*x746)));
op[49]=((((-1.568)*gclwh6_2*x347))+(((0.126876960000239)*x426))+(((0.784)*gclwh6_2*x356))+(((0.16072)*x384))+(((0.00650244420001225)*x464))+(((0.0082369)*x397))+(((-0.126876960000239)*x450))+(((-1.23782400000233)*gclwh10_3*x342))+(((0.1397075)*x346))+(((-0.0082369)*x446))+((gclwh8_10*x345))+(((-0.1397075)*x381))+(((0.784)*gclwh10_2*x350))+(((0.608405750001166)*gclwh10_3*x350))+(((-1.0)*x722))+(((-0.126876960000239)*x388))+(((-1.0)*gclwh6_10*x356))+(((-1.0)*gclwh10_10*x350))+(((-0.16072)*x361))+(((-0.16072)*x363))+x724+x750+(((-1.568)*gclwh10_2*x342))+(((-1.0)*x747))+(((0.1397075)*x460))+(((1.568)*gclwh8_2*x383))+(((0.0082369)*x438))+(((-0.784)*gclwh8_2*x345)));
op[50]=((((0.16728)*x381))+(((-0.16728)*x346))+(((-0.0079007)*x412))+(((1.504)*gclwh10_12*x342))+(((-0.752)*gclwh6_12*x356))+(((-0.16728)*x460))+(((-1.0)*x731))+(((0.0079007)*x402))+(((1.504)*gclwh6_12*x347))+(((0.752)*gclwh8_12*x345))+x734+(((-0.752)*gclwh10_12*x350))+(((-0.0079007)*x436))+(((-1.504)*gclwh8_12*x383)));
op[51]=((((-3.329856e-7)*x388))+(((-3.24864e-6)*gclwh10_3*x342))+(((-3.329856e-7)*x450))+(((-1.0)*x488))+(((-1.0)*x489))+(((4.428e-7)*x460))+(((3.329856e-7)*x426))+x498+(((-4.428e-7)*x381))+(((4.428e-7)*x346))+(((1.62432e-6)*gclwh10_3*x350))+(((1.7065512e-8)*x464)));
op[52]=((-0.007776)+(((-1.0)*x720))+x719+x739+(((-1.0)*x746)));
op[53]=((((-0.0105600000023328)*gclwh10_3*x342))+(((-0.064)*gclwh6_2*x347))+(((0.064)*gclwh8_2*x383))+(((-0.0052262499988336)*gclwh10_3*x350))+(((0.0003362)*x397))+(((0.00108240000023911)*x426))+(((-0.00108240000023911)*x450))+(((-0.032)*gclwh8_2*x345))+((gclwh10_10*x350))+(((-1.0)*gclwh8_10*x345))+(((-1.0)*x724))+(((-0.064)*gclwh10_2*x342))+(((-0.0003362)*x446))+(((0.032)*gclwh10_2*x350))+(((0.032)*gclwh6_2*x356))+(((-0.00656)*x361))+(((-0.00656)*x363))+(((5.54730000122545e-5)*x464))+x722+x750+(((0.0003362)*x438))+(((0.0275725)*x381))+(((-0.0275725)*x460))+(((-1.0)*x747))+(((-0.0275725)*x346))+((gclwh6_10*x356))+(((0.00656)*x384))+(((-0.00108240000023911)*x388)));
op[54]=((((0.126876960000239)*x423))+(((-0.126876960000239)*x424))+(((-0.1817325)*x386))+(((-0.784)*gclwh9_0*x345))+(((0.0082369)*x475))+(((0.0082369)*x461))+(((-0.16072)*x420))+(((-0.16072)*x425))+(((-1.0)*x723))+(((0.784)*gclwh7_0*x356))+(((0.1817325)*x370))+(((-0.0082369)*x429))+(((1.568)*gclwh9_0*x383))+(((0.1817325)*x365))+(((-1.568)*gclwh7_0*x347))+(((0.16072)*x432))+(((-1.568)*gclwh11_0*x342))+((gclwh9_8*x345))+(((0.784)*gclwh11_0*x350))+x725+x745+(((-1.0)*x742))+(((-1.0)*gclwh11_8*x350))+(((-0.126876960000239)*x391))+(((-1.0)*gclwh7_8*x356)));
op[55]=((-0.190512)+(((1.08e-6)*gclwh9_13*x345))+(((0.243)*gclwh7_7*x347))+(((1.134675e-8)*x457))+(((-1.0)*gclwh11_13*x582))+(((0.0249075)*x409))+(((0.1215)*gclwh9_7*x345))+(((-0.1215)*gclwh7_7*x356))+(((-1.0)*gclwh11_7*x458))+(((-1.134675e-8)*x408))+(((2.16e-6)*gclwh11_13*x342))+(((-0.243)*gclwh9_7*x383))+(((2.214e-7)*x386))+((gclwh9_7*x463))+(((2.16e-6)*gclwh7_13*x347))+(((0.243)*gclwh11_7*x342))+(((-2.16e-6)*gclwh9_13*x383))+(((-1.08e-6)*pp*x354))+(((-2.214e-7)*x365))+(((-0.0249075)*x390))+(((-2.214e-7)*x370))+(((0.0249075)*x470))+(((-1.0)*gclwh7_7*x415))+(((-0.1215)*gclwh11_7*x350))+(((-1.134675e-8)*x354)));
op[56]=((((4.428e-7)*x365))+(((4.428e-7)*x370))+(((3.329856e-7)*x423))+(((-3.329856e-7)*x391))+(((-4.428e-7)*x386))+(((-1.0)*x716))+x506+(((-3.329856e-7)*x424)));
op[57]=((((0.752)*gclwh9_13*x345))+(((0.0079007)*x457))+(((-0.0079007)*x408))+(((-0.752)*pp*x354))+(((1.504)*gclwh7_13*x347))+(((1.504)*gclwh11_13*x342))+(((-1.0)*x733))+(((-0.752)*gclwh11_13*x350))+(((-1.504)*gclwh9_13*x383))+(((0.16728)*x370))+x730+(((-0.0079007)*x354))+(((0.16728)*x365))+(((-0.16728)*x386)));
op[58]=((((-0.00108240000023911)*x424))+(((-1.0)*gclwh9_8*x345))+(((0.00656)*x432))+(((0.00108240000023911)*x423))+(((-0.0003362)*x429))+(((-0.0144525)*x386))+(((-0.00108240000023911)*x391))+(((0.0144525)*x365))+(((0.0003362)*x461))+(((-0.032)*gclwh9_0*x345))+(((-1.0)*x725))+(((0.0144525)*x370))+(((-0.064)*gclwh11_0*x342))+(((0.0003362)*x475))+(((0.064)*gclwh9_0*x383))+(((-0.00656)*x420))+(((-0.00656)*x425))+((gclwh7_8*x356))+x723+x745+(((-1.0)*x742))+(((-0.064)*gclwh7_0*x347))+(((0.032)*gclwh7_0*x356))+(((0.032)*gclwh11_0*x350))+((gclwh11_8*x350)));
IkReal x752=(gclwh15_11*r20);
IkReal x753=(pp*r21);
IkReal x754=((4.0)*pz);
IkReal x755=(npz*pz);
IkReal x756=((2.16e-6)*gclwh5_11);
IkReal x757=(gclwh4_9*r22);
IkReal x758=(gclwh14_3*r20);
IkReal x759=(pp*r22);
IkReal x760=((0.0249075)*rxp0_2);
IkReal x761=((1.134675e-8)*r22);
IkReal x762=(gclwh5_15*r22);
IkReal x763=((1.62432e-6)*pp);
IkReal x764=(gclwh13_11*r21);
IkReal x765=((0.0210125)*r21);
IkReal x766=(gclwh14_9*r20);
IkReal x767=((0.0210125)*r20);
IkReal x768=(npx*pz);
IkReal x769=(gclwh4_14*r22);
IkReal x770=(pp*r20);
IkReal x771=(npy*pz);
IkReal x772=((2.16e-6)*pp);
IkReal x773=((0.243)*gclwh15_15);
IkReal x774=((2.214e-7)*rxp2_2);
IkReal x775=((0.15416)*rxp2_2);
IkReal x776=(gclwh13_15*r21);
IkReal x777=((0.816)*pp);
IkReal x778=((1.7065512e-8)*r21);
IkReal x779=(gclwh1_3*r20);
IkReal x780=((0.15416)*rxp1_2);
IkReal x781=((0.243)*gclwh5_15);
IkReal x782=(gclwh15_15*r20);
IkReal x783=((1.7065512e-8)*r20);
IkReal x784=(gclwh12_9*r21);
IkReal x785=((0.0210125)*r22);
IkReal x786=((2.214e-7)*rxp0_2);
IkReal x787=((0.0249075)*rxp2_2);
IkReal x788=((1.08e-6)*pp);
IkReal x789=((0.0249075)*rxp1_2);
IkReal x790=((0.243)*gclwh4_14);
IkReal x791=((0.41)*rxp1_2);
IkReal x792=((0.41)*rxp2_2);
IkReal x793=((1.7065512e-8)*r22);
IkReal x794=((0.001276509375)*r21);
IkReal x795=(gclwh14_14*r20);
IkReal x796=((2.16e-6)*gclwh13_11);
IkReal x797=((2.16e-6)*gclwh12_9);
IkReal x798=((2.214e-7)*rxp1_2);
IkReal x799=(gclwh5_11*r22);
IkReal x800=((0.15416)*rxp0_2);
IkReal x801=((0.243)*gclwh12_14);
IkReal x802=((0.243)*gclwh14_14);
IkReal x803=((0.243)*gclwh13_15);
IkReal x804=((0.41)*rxp0_2);
IkReal x805=((1.134675e-8)*x757);
IkReal x806=((1.134675e-8)*x766);
IkReal x807=(gclwh8_12*x786);
IkReal x808=(gclwh8_5*x760);
IkReal x809=(gclwh12_14*x794);
IkReal x810=((0.001276509375)*x769);
IkReal x811=(gclwh6_12*x798);
IkReal x812=(gclwh10_5*x787);
IkReal x813=((1.134675e-8)*x784);
IkReal x814=(gclwh10_12*x774);
IkReal x815=(gclwh6_5*x789);
IkReal x816=((0.001276509375)*x795);
IkReal x817=(gclwh9_13*x786);
IkReal x818=((0.001276509375)*x782);
IkReal x819=((1.134675e-8)*x764);
IkReal x820=((0.001276509375)*x762);
IkReal x821=(gclwh9_7*x760);
IkReal x822=(gclwh11_13*x774);
IkReal x823=(gclwh11_7*x787);
IkReal x824=((0.001276509375)*x776);
IkReal x825=(gclwh5_11*x761);
IkReal x826=(gclwh7_13*x798);
IkReal x827=(gclwh7_7*x789);
IkReal x828=((1.134675e-8)*x752);
IkReal x829=(x771*x797);
IkReal x830=(x757*x788);
IkReal x831=((0.1215)*gclwh12_14*x753);
IkReal x832=(x755*x790);
IkReal x833=(x766*x788);
IkReal x834=(x768*x802);
IkReal x835=(x771*x801);
IkReal x836=((2.16e-6)*gclwh4_9*x755);
IkReal x837=((0.1215)*gclwh14_14*x770);
IkReal x838=((1.08e-6)*gclwh12_9*x753);
IkReal x839=((2.16e-6)*gclwh14_9*x768);
IkReal x840=((0.1215)*gclwh4_14*x759);
IkReal x841=(x771*x803);
IkReal x842=(x755*x756);
IkReal x843=((1.08e-6)*gclwh13_11*x753);
IkReal x844=((0.1215)*gclwh5_15*x759);
IkReal x845=((2.16e-6)*gclwh15_11*x768);
IkReal x846=((0.1215)*gclwh15_15*x770);
IkReal x847=(x755*x781);
IkReal x848=((1.08e-6)*gclwh5_11*x759);
IkReal x849=((0.1215)*gclwh13_15*x753);
IkReal x850=(x752*x788);
IkReal x851=(x771*x796);
IkReal x852=(x768*x773);
IkReal x853=(x808+x807);
IkReal x854=(x817+x821);
IkReal x855=(x814+x815+x812+x811);
IkReal x856=(x823+x822+x827+x826);
IkReal x857=(x816+x813+x810+x835+x836+x837+x838+x839+x840);
IkReal x858=(x829+x834+x830+x831+x832+x833+x809+x805+x806);
IkReal x859=(x818+x819+x820+x841+x843+x842+x845+x844+x846);
IkReal x860=(x852+x850+x851+x828+x825+x824+x847+x849+x848);
op[59]=((-0.007776)+(((0.1215)*gclwh9_7*x770))+(((-0.001276509375)*gclwh11_7*r22))+(((-1.0)*gclwh13_11*x798))+(((-1.0)*gclwh11_13*x761))+(((0.001276509375)*gclwh9_7*r20))+(((2.16e-6)*gclwh11_13*x755))+(((-1.0)*gclwh5_15*x787))+((gclwh15_11*x786))+(((-2.16e-6)*gclwh9_13*x768))+(((-1.134675e-8)*gclwh7_13*r21))+((gclwh5_11*x774))+(((-1.0)*gclwh15_15*x760))+(((-1.0)*gclwh7_7*x794))+(((-1.08e-6)*gclwh7_13*x753))+((gclwh13_15*x789))+(((2.16e-6)*gclwh7_13*x771))+(((0.243)*gclwh7_7*x771))+(((-0.1215)*gclwh7_7*x753))+(((-0.243)*gclwh9_7*x768))+(((-1.08e-6)*gclwh11_13*x759))+(((-0.1215)*gclwh11_7*x759))+(((1.08e-6)*gclwh9_13*x770))+(((1.134675e-8)*gclwh9_13*r20))+(((0.243)*gclwh11_7*x755)));
op[60]=((-1.69344e-6)+(((-1.0)*x858))+(((-1.0)*x855))+x853+x857);
op[61]=((-0.599893749998834)+(((-0.629418250001166)*gclwh3_3*pp*r21))+(((-1.0)*gclwh12_2*pp*pz*r21))+(((1.568)*gclwh1_2*npx*pz))+(((2.0)*gclwh12_2*npy*(pz*pz)))+(((-0.205)*gclwh10_3*pp*rxp2_2))+((gclwh14_2*pp*pz*r20))+(((-0.784)*gclwh3_2*pp*r21))+(((0.608405750001166)*gclwh4_3*pp*r22))+(((1.23782400000233)*gclwh12_3*npy*pz))+(((0.205)*gclwh8_10*rxp0_2))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((2.0)*gclwh4_3*npz*pp*pz))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((-0.007160009375)*gclwh14_9*r20))+(((-0.00650244420001225)*gclwh12_3*r21))+((gclwh12_3*r21*(pp*pp)))+(((0.608405750001166)*gclwh14_3*pp*r20))+(((1.23782400000233)*gclwh1_3*npx*pz))+(((-1.568)*gclwh14_2*npx*pz))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((-0.01050625)*gclwh14_10*r20))+(((2.0)*gclwh14_10*npx*pz))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((-1.363)*gclwh12_9*npy*pz))+(((-0.784)*gclwh1_2*pp*r20))+(((0.00650244420001225)*gclwh4_3*r22))+(((0.784)*gclwh4_2*pp*r22))+(((0.0082369)*gclwh1_2*r20))+(((0.007160009375)*gclwh12_9*r21))+(((-0.205)*gclwh6_10*rxp1_2))+(((0.6815)*gclwh12_9*pp*r21))+(((-1.23782400000233)*gclwh4_3*npz*pz))+(((0.205)*gclwh6_2*pz*rxp1_2))+(((-1.0)*gclwh14_10*pp*r20))+(((0.16072)*gclwh6_2*rxp1_2))+(((0.01050625)*gclwh3_2*pz*r21))+(((-0.01050625)*gclwh12_2*pz*r21))+(((1.363)*gclwh4_9*npz*pz))+(((-0.01050625)*gclwh4_10*r22))+(((-0.007160009375)*gclwh4_9*r22))+(((-0.784)*gclwh12_2*pp*r21))+(((-2.0)*gclwh12_10*npy*pz))+(((-1.23782400000233)*gclwh14_3*npx*pz))+(((1.568)*gclwh12_2*npy*pz))+((gclwh12_10*pp*r21))+(((0.784)*gclwh14_2*pp*r20))+(((1.23782400000233)*gclwh3_3*npy*pz))+(((-0.6815)*gclwh14_9*pp*r20))+((gclwh3_3*r21*(pp*pp)))+(((-1.568)*gclwh4_2*npz*pz))+((gclwh1_3*r20*(pp*pp)))+(((-0.205)*pz))+(((-0.0082369)*gclwh12_2*r21))+(((0.126876960000239)*gclwh10_3*rxp2_2))+(((0.205)*gclwh10_2*pz*rxp2_2))+(((2.0)*gclwh14_3*npx*pp*pz))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((-1.0)*gclwh4_3*r22*(pp*pp)))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((0.0082369)*gclwh3_2*r21))+(((0.00650244420001225)*gclwh14_3*r20))+(((0.01050625)*gclwh12_10*r21))+(((-0.608405750001166)*gclwh12_3*pp*r21))+(((1.568)*gclwh3_2*npy*pz))+(((-0.205)*gclwh10_10*rxp2_2))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((-0.6815)*gclwh4_9*pp*r22))+(((-0.16072)*gclwh8_2*rxp0_2))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((-0.629418250001166)*gclwh1_3*pp*r20))+(((0.0082369)*gclwh4_2*r22))+(((1.363)*gclwh14_9*npx*pz))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((0.00650244420001225)*gclwh1_3*r20))+(((0.16072)*gclwh10_2*rxp2_2))+(((0.0082369)*gclwh14_2*r20))+(((0.01050625)*gclwh4_2*pz*r22))+((gclwh4_2*pp*pz*r22))+(((-2.0)*gclwh4_2*npz*(pz*pz)))+(((0.00650244420001225)*gclwh3_3*r21))+(((0.01050625)*gclwh14_2*pz*r20))+(((2.0)*gclwh4_10*npz*pz))+(((-0.205)*gclwh8_2*pz*rxp0_2))+(((0.01050625)*gclwh1_2*pz*r20))+(((-1.0)*gclwh4_10*pp*r22)));
op[62]=((0.0206514999976672)+(((-1.0)*gclwh14_10*npx*x754))+((gclwh6_10*x791))+(((-0.816)*gclwh12_9*x753))+(((2.0)*gclwh4_10*x759))+(((-1.0)*gclwh10_12*x775))+((gclwh10_10*x792))+(((-1.632)*gclwh4_9*x755))+((gclwh12_10*npy*x754))+(((0.0085731)*x757))+(((-0.0085731)*x784))+(((-1.0)*gclwh8_10*x804))+(((2.0)*gclwh14_10*x770))+(((0.0085731)*x766))+(((-2.0)*gclwh12_10*x753))+((x766*x777))+((gclwh4_10*x785))+((gclwh8_12*x800))+(((-1.632)*gclwh14_9*x768))+((gclwh14_10*x767))+(((-1.0)*gclwh4_10*npz*x754))+((x757*x777))+(((1.632)*gclwh12_9*x771))+(((-1.0)*gclwh12_10*x765))+(((-1.0)*gclwh6_12*x780)));
op[63]=((-1.76256e-6)+((x753*x797))+(((-1.0)*x757*x772))+(((-1.62432e-6)*gclwh3_3*x753))+(((-4.32e-6)*gclwh12_9*x771))+(((-1.62432e-6)*gclwh12_3*x753))+(((3.24864e-6)*gclwh3_3*x771))+(((3.329856e-7)*gclwh10_3*rxp2_2))+(((4.32e-6)*gclwh4_9*x755))+((gclwh3_3*x778))+(((2.26935e-8)*x784))+(((1.62432e-6)*gclwh4_3*x759))+((x758*x763))+(((0.00255301875)*x795))+((x759*x790))+((gclwh4_3*x793))+(((3.24864e-6)*gclwh12_3*x771))+(((4.32e-6)*gclwh14_9*x768))+(((0.00255301875)*x769))+(((1.7065512e-8)*x779))+(((-3.24864e-6)*gclwh4_3*x755))+(((-1.0)*x766*x772))+((x770*x802))+(((-0.486)*gclwh4_14*x755))+(((-0.486)*gclwh14_14*x768))+(((3.24864e-6)*gclwh1_3*x768))+(((1.7065512e-8)*x758))+(((-0.00255301875)*gclwh12_14*r21))+(((-1.0)*x763*x779))+(((-1.0)*x753*x801))+(((0.486)*gclwh12_14*x771))+(((-3.24864e-6)*gclwh14_3*x768))+(((-1.0)*gclwh12_3*x778))+(((-2.26935e-8)*x766))+(((-2.26935e-8)*x757)));
op[64]=((6.912e-8)+(((-1.0)*x855))+(((-1.0)*x857))+x853+x858);
op[65]=((-0.0137382500011664)+(((2.0)*gclwh12_10*npy*pz))+(((-0.064)*gclwh14_2*npx*pz))+(((-1.0)*gclwh12_2*pp*pz*r21))+(((2.0)*gclwh12_2*npy*(pz*pz)))+(((-0.205)*gclwh10_3*pp*rxp2_2))+((gclwh14_2*pp*pz*r20))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((2.0)*gclwh4_3*npz*pp*pz))+(((0.00656)*gclwh10_2*rxp2_2))+(((-0.0105600000023328)*gclwh4_3*npz*pz))+(((-0.0052262499988336)*gclwh14_3*pp*r20))+(((0.01050625)*gclwh4_10*r22))+(((-5.54730000122545e-5)*gclwh12_3*r21))+(((-0.064)*gclwh4_2*npz*pz))+(((0.269)*gclwh12_9*npy*pz))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((5.54730000122545e-5)*gclwh14_3*r20))+(((5.54730000122545e-5)*gclwh4_3*r22))+((gclwh12_3*r21*(pp*pp)))+(((-0.269)*gclwh14_9*npx*pz))+(((0.01050625)*gclwh14_10*r20))+(((5.54730000122545e-5)*gclwh1_3*r20))+(((-0.1345)*gclwh12_9*pp*r21))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((-0.01050625)*gclwh12_10*r21))+(((0.064)*gclwh12_2*npy*pz))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((0.064)*gclwh3_2*npy*pz))+(((-0.0157862500011664)*gclwh3_3*pp*r21))+(((-0.205)*gclwh8_10*rxp0_2))+(((0.205)*gclwh6_2*pz*rxp1_2))+(((0.032)*gclwh14_2*pp*r20))+(((0.01050625)*gclwh3_2*pz*r21))+(((0.1345)*gclwh4_9*pp*r22))+(((-0.01050625)*gclwh12_2*pz*r21))+(((-0.001413090625)*gclwh12_9*r21))+(((-0.032)*gclwh1_2*pp*r20))+(((0.00656)*gclwh6_2*rxp1_2))+(((-0.269)*gclwh4_9*npz*pz))+((gclwh3_3*r21*(pp*pp)))+(((-0.0105600000023328)*gclwh14_3*npx*pz))+((gclwh1_3*r20*(pp*pp)))+(((-0.205)*pz))+(((0.0003362)*gclwh4_2*r22))+(((-0.032)*gclwh12_2*pp*r21))+(((0.1345)*gclwh14_9*pp*r20))+(((0.0105600000023328)*gclwh1_3*npx*pz))+(((0.001413090625)*gclwh4_9*r22))+(((-0.032)*gclwh3_2*pp*r21))+(((-0.00656)*gclwh8_2*rxp0_2))+((gclwh14_10*pp*r20))+(((0.205)*gclwh10_2*pz*rxp2_2))+(((2.0)*gclwh14_3*npx*pp*pz))+(((-0.0052262499988336)*gclwh4_3*pp*r22))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((-1.0)*gclwh4_3*r22*(pp*pp)))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((-0.0003362)*gclwh12_2*r21))+(((0.00108240000023911)*gclwh10_3*rxp2_2))+(((0.001413090625)*gclwh14_9*r20))+(((0.0003362)*gclwh3_2*r21))+(((-1.0)*gclwh12_10*pp*r21))+(((0.0003362)*gclwh14_2*r20))+(((0.205)*gclwh10_10*rxp2_2))+(((0.0105600000023328)*gclwh12_3*npy*pz))+(((5.54730000122545e-5)*gclwh3_3*r21))+(((0.0105600000023328)*gclwh3_3*npy*pz))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((0.0052262499988336)*gclwh12_3*pp*r21))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((0.205)*gclwh6_10*rxp1_2))+((gclwh4_10*pp*r22))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((-0.0157862500011664)*gclwh1_3*pp*r20))+(((0.064)*gclwh1_2*npx*pz))+(((-2.0)*gclwh14_10*npx*pz))+(((0.032)*gclwh4_2*pp*r22))+(((0.01050625)*gclwh4_2*pz*r22))+((gclwh4_2*pp*pz*r22))+(((-2.0)*gclwh4_2*npz*(pz*pz)))+(((0.01050625)*gclwh14_2*pz*r20))+(((-2.0)*gclwh4_10*npz*pz))+(((-0.205)*gclwh8_2*pz*rxp0_2))+(((0.01050625)*gclwh1_2*pz*r20))+(((0.0003362)*gclwh1_2*r20)));
op[66]=((-0.599893749998834)+(((0.01050625)*gclwh13_8*r21))+(((-0.8865)*gclwh15_11*pp*r20))+(((-0.01050625)*gclwh0_0*pz*r20))+(((2.0)*gclwh2_1*npy*pp*pz))+((gclwh15_0*pp*pz*r20))+(((-0.0082369)*gclwh13_0*r21))+(((-1.568)*gclwh15_0*npx*pz))+(((-1.23782400000233)*gclwh15_1*npx*pz))+((gclwh13_1*r21*(pp*pp)))+((gclwh13_8*pp*r21))+(((2.0)*gclwh0_1*npx*pp*pz))+(((1.773)*gclwh5_11*npz*pz))+(((-1.0)*gclwh2_1*r21*(pp*pp)))+(((0.16072)*gclwh11_0*rxp2_2))+((gclwh5_0*pp*pz*r22))+((gclwh2_0*pp*pz*r21))+(((-0.205)*gclwh7_8*rxp1_2))+((gclwh0_0*pp*pz*r20))+(((-1.0)*gclwh15_8*pp*r20))+(((-0.0082369)*gclwh2_0*r21))+(((-0.00650244420001225)*gclwh0_1*r20))+(((2.0)*gclwh13_0*npy*(pz*pz)))+(((-0.608405750001166)*gclwh13_1*pp*r21))+(((2.0)*gclwh5_1*npz*pp*pz))+(((-1.568)*gclwh0_0*npx*pz))+(((0.205)*gclwh7_0*pz*rxp1_2))+(((0.784)*gclwh5_0*pp*r22))+(((-2.0)*gclwh13_8*npy*pz))+(((-2.0)*gclwh2_0*npy*(pz*pz)))+(((-0.00650244420001225)*gclwh13_1*r21))+(((-0.0082369)*gclwh0_0*r20))+(((0.16072)*gclwh7_0*rxp1_2))+(((1.773)*gclwh15_11*npx*pz))+(((0.205)*gclwh9_8*rxp0_2))+(((-1.23782400000233)*gclwh0_1*npx*pz))+(((-1.568)*gclwh5_0*npz*pz))+(((1.23782400000233)*gclwh13_1*npy*pz))+(((-0.01050625)*gclwh2_0*pz*r21))+(((-2.0)*gclwh15_0*npx*(pz*pz)))+(((2.0)*gclwh5_8*npz*pz))+(((0.205)*gclwh11_0*pz*rxp2_2))+(((-0.009313790625)*gclwh5_11*r22))+(((-0.01050625)*gclwh5_8*r22))+(((-1.773)*gclwh13_11*npy*pz))+(((0.00650244420001225)*gclwh15_1*r20))+(((0.0082369)*gclwh5_0*r22))+(((-2.0)*gclwh5_0*npz*(pz*pz)))+(((-0.01050625)*gclwh13_0*pz*r21))+(((0.0082369)*gclwh15_0*r20))+(((-1.568)*gclwh2_0*npy*pz))+(((0.01050625)*gclwh5_0*pz*r22))+(((-0.00650244420001225)*gclwh2_1*r21))+(((-0.784)*gclwh13_0*pp*r21))+(((-2.0)*gclwh0_0*npx*(pz*pz)))+(((-1.23782400000233)*gclwh5_1*npz*pz))+(((-0.009313790625)*gclwh15_11*r20))+(((0.009313790625)*gclwh13_11*r21))+(((-1.23782400000233)*gclwh2_1*npy*pz))+(((0.629418250001166)*gclwh0_1*pp*r20))+(((-1.0)*gclwh13_0*pp*pz*r21))+(((-1.0)*gclwh5_1*r22*(pp*pp)))+(((-0.205)*gclwh9_0*pz*rxp0_2))+(((-2.0)*gclwh13_1*npy*pp*pz))+(((-0.205)*gclwh11_8*rxp2_2))+(((0.784)*gclwh0_0*pp*r20))+(((0.784)*gclwh2_0*pp*r21))+(((0.608405750001166)*gclwh5_1*pp*r22))+(((0.205)*pz))+(((-0.16072)*gclwh9_0*rxp0_2))+(((0.8865)*gclwh13_11*pp*r21))+(((0.01050625)*gclwh15_0*pz*r20))+(((-0.8865)*gclwh5_11*pp*r22))+(((1.568)*gclwh13_0*npy*pz))+(((-1.0)*gclwh15_1*r20*(pp*pp)))+(((-1.0)*gclwh5_8*pp*r22))+(((0.00650244420001225)*gclwh5_1*r22))+(((0.629418250001166)*gclwh2_1*pp*r21))+(((0.608405750001166)*gclwh15_1*pp*r20))+(((0.784)*gclwh15_0*pp*r20))+(((-0.01050625)*gclwh15_8*r20))+(((2.0)*gclwh15_1*npx*pp*pz))+(((-1.0)*gclwh0_1*r20*(pp*pp)))+(((2.0)*gclwh15_8*npx*pz)));
op[67]=((1.69344e-6)+(((-1.0)*x856))+(((-1.0)*x859))+x854+x860);
op[68]=((-1.76256e-6)+(((-1.0)*gclwh13_1*x778))+((x753*x796))+(((-3.24864e-6)*gclwh2_1*x771))+(((-3.24864e-6)*gclwh0_1*x768))+((gclwh0_1*r20*x763))+(((-4.32e-6)*gclwh13_11*x771))+(((-1.0)*gclwh2_1*x778))+((x770*x773))+((gclwh15_1*x783))+(((-1.0)*gclwh0_1*x783))+(((-3.24864e-6)*gclwh15_1*x768))+(((4.32e-6)*gclwh15_11*x768))+(((1.62432e-6)*gclwh2_1*x753))+(((0.00255301875)*x782))+((gclwh15_1*r20*x763))+(((2.26935e-8)*x764))+(((4.32e-6)*gclwh5_11*x755))+(((0.486)*gclwh13_15*x771))+((x759*x781))+(((0.00255301875)*x762))+(((-1.0)*x752*x772))+(((-0.486)*gclwh15_15*x768))+(((-1.62432e-6)*gclwh13_1*x753))+(((-1.0)*x756*x759))+(((-1.0)*x753*x803))+(((-0.00255301875)*x776))+(((1.62432e-6)*gclwh5_1*x759))+(((-2.26935e-8)*x799))+(((-3.24864e-6)*gclwh5_1*x755))+(((3.24864e-6)*gclwh13_1*x771))+((gclwh5_1*x793))+(((-2.26935e-8)*x752))+(((-0.486)*gclwh5_15*x755)));
op[69]=((-0.0206514999976672)+(((-1.0)*gclwh5_8*x785))+((gclwh15_8*npx*x754))+(((-2.0)*gclwh5_8*x759))+(((-0.0085731)*x799))+(((-1.0)*gclwh13_8*npy*x754))+(((-1.0)*gclwh11_13*x775))+(((-0.816)*gclwh5_11*x759))+(((-1.0)*gclwh7_13*x780))+(((1.632)*gclwh15_11*x768))+((gclwh13_8*x765))+(((0.0085731)*x764))+(((-0.0085731)*x752))+((gclwh9_8*x804))+(((-1.0)*x752*x777))+(((-1.632)*gclwh13_11*x771))+((gclwh5_8*npz*x754))+(((-1.0)*gclwh7_8*x791))+(((-1.0)*gclwh11_8*x792))+(((-1.0)*gclwh15_8*x767))+((gclwh9_13*x800))+(((0.816)*gclwh13_11*x753))+(((1.632)*gclwh5_11*x755))+(((-2.0)*gclwh15_8*x770))+(((2.0)*gclwh13_8*x753)));
op[70]=((-0.0137382500011664)+(((0.01050625)*gclwh5_8*r22))+(((-5.54730000122545e-5)*gclwh2_1*r21))+(((-0.01050625)*gclwh0_0*pz*r20))+(((2.0)*gclwh2_1*npy*pp*pz))+(((0.141)*gclwh5_11*npz*pz))+(((0.0157862500011664)*gclwh2_1*pp*r21))+((gclwh15_0*pp*pz*r20))+(((0.01050625)*gclwh15_8*r20))+((gclwh13_1*r21*(pp*pp)))+(((-0.032)*gclwh13_0*pp*r21))+(((0.000740690625)*gclwh13_11*r21))+(((-0.0705)*gclwh15_11*pp*r20))+(((2.0)*gclwh0_1*npx*pp*pz))+(((-0.0105600000023328)*gclwh5_1*npz*pz))+(((0.0157862500011664)*gclwh0_1*pp*r20))+(((-0.0052262499988336)*gclwh5_1*pp*r22))+(((-1.0)*gclwh2_1*r21*(pp*pp)))+(((0.0705)*gclwh13_11*pp*r21))+(((-0.064)*gclwh15_0*npx*pz))+(((-0.0105600000023328)*gclwh2_1*npy*pz))+(((0.141)*gclwh15_11*npx*pz))+(((2.0)*gclwh13_8*npy*pz))+((gclwh5_0*pp*pz*r22))+((gclwh2_0*pp*pz*r21))+((gclwh0_0*pp*pz*r20))+(((-0.205)*gclwh9_8*rxp0_2))+(((-0.064)*gclwh2_0*npy*pz))+(((2.0)*gclwh13_0*npy*(pz*pz)))+(((0.0003362)*gclwh5_0*r22))+(((2.0)*gclwh5_1*npz*pp*pz))+(((0.205)*gclwh7_0*pz*rxp1_2))+(((-0.0105600000023328)*gclwh0_1*npx*pz))+(((-0.0003362)*gclwh2_0*r21))+(((0.064)*gclwh13_0*npy*pz))+((gclwh5_8*pp*r22))+(((-0.0003362)*gclwh0_0*r20))+(((-2.0)*gclwh2_0*npy*(pz*pz)))+(((0.032)*gclwh0_0*pp*r20))+(((-0.00656)*gclwh9_0*rxp0_2))+(((-0.064)*gclwh5_0*npz*pz))+(((0.00656)*gclwh7_0*rxp1_2))+(((0.205)*gclwh11_8*rxp2_2))+(((0.0105600000023328)*gclwh13_1*npy*pz))+(((-0.01050625)*gclwh2_0*pz*r21))+(((0.032)*gclwh15_0*pp*r20))+(((-2.0)*gclwh15_0*npx*(pz*pz)))+(((0.205)*gclwh11_0*pz*rxp2_2))+(((0.00656)*gclwh11_0*rxp2_2))+(((-0.064)*gclwh0_0*npx*pz))+(((-1.0)*gclwh13_8*pp*r21))+(((-2.0)*gclwh15_8*npx*pz))+(((-0.0105600000023328)*gclwh15_1*npx*pz))+(((-2.0)*gclwh5_0*npz*(pz*pz)))+(((0.0003362)*gclwh15_0*r20))+(((-0.01050625)*gclwh13_0*pz*r21))+(((0.01050625)*gclwh5_0*pz*r22))+(((-2.0)*gclwh0_0*npx*(pz*pz)))+(((-0.01050625)*gclwh13_8*r21))+(((0.032)*gclwh5_0*pp*r22))+(((-1.0)*gclwh13_0*pp*pz*r21))+(((5.54730000122545e-5)*gclwh5_1*r22))+(((0.205)*gclwh7_8*rxp1_2))+(((-1.0)*gclwh5_1*r22*(pp*pp)))+(((5.54730000122545e-5)*gclwh15_1*r20))+(((-0.0705)*gclwh5_11*pp*r22))+(((-5.54730000122545e-5)*gclwh0_1*r20))+(((-0.205)*gclwh9_0*pz*rxp0_2))+(((-2.0)*gclwh13_1*npy*pp*pz))+(((-5.54730000122545e-5)*gclwh13_1*r21))+((gclwh15_8*pp*r20))+(((-0.0052262499988336)*gclwh15_1*pp*r20))+(((-0.141)*gclwh13_11*npy*pz))+(((0.205)*pz))+(((0.032)*gclwh2_0*pp*r21))+(((0.01050625)*gclwh15_0*pz*r20))+(((-1.0)*gclwh15_1*r20*(pp*pp)))+(((0.0052262499988336)*gclwh13_1*pp*r21))+(((-2.0)*gclwh5_8*npz*pz))+(((-0.000740690625)*gclwh5_11*r22))+(((2.0)*gclwh15_1*npx*pp*pz))+(((-0.000740690625)*gclwh15_11*r20))+(((-0.0003362)*gclwh13_0*r21))+(((-1.0)*gclwh0_1*r20*(pp*pp))));
op[71]=((-6.912e-8)+(((-1.0)*x860))+(((-1.0)*x856))+x854+x859);
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x861=htj1*htj1;
CheckValue<IkReal> x862=IKPowWithIntegerCheck(((1.0)+x861),-1);
if(!x862.valid){
continue;
}
cj1array[numsolutions]=((x862.value)*(((1.0)+(((-1.0)*x861)))));
CheckValue<IkReal> x863=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x863.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x863.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x864=htj2*htj2;
CheckValue<IkReal> x865=IKPowWithIntegerCheck(((1.0)+x864),-1);
if(!x865.valid){
continue;
}
cj2array[numsolutions]=((x865.value)*(((1.0)+(((-1.0)*x864)))));
CheckValue<IkReal> x866=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x866.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x866.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x867=htj3*htj3;
CheckValue<IkReal> x868=IKPowWithIntegerCheck(((1.0)+x867),-1);
if(!x868.valid){
continue;
}
cj3array[numsolutions]=((x868.value)*(((1.0)+(((-1.0)*x867)))));
CheckValue<IkReal> x869=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x869.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x869.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x870=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x870);
rxp1_0=(pz*r11);
rxp1_1=(r01*x870);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x871=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x871);
rxp1_0=(pz*r11);
rxp1_1=(r01*x871);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x872=IKPowWithIntegerCheck(cj3,-1);
if(!x872.valid){
continue;
}
CheckValue<IkReal> x873=IKPowWithIntegerCheck(r22,-1);
if(!x873.valid){
continue;
}
sj4array[0]=((x872.value)*(x873.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4))))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x874=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x874);
rxp1_0=(pz*r11);
rxp1_1=(r01*x874);
IkReal x875=(r10*sj3);
IkReal x876=((4.0)*cj4);
IkReal x877=(r11*sj3);
IkReal x878=((16.0)*cj4);
IkReal x879=((8.0)*sj1);
IkReal x880=((16.0)*cj1);
IkReal x881=(cj1*cj2);
IkReal x882=(r01*sj4);
IkReal x883=((8.0)*cj4);
IkReal x884=(cj3*r11);
IkReal x885=((4.0)*sj4);
IkReal x886=(r12*sj3);
IkReal x887=(cj1*sj2);
IkReal x888=((16.0)*sj1);
IkReal x889=(r00*sj1);
IkReal x890=(sj1*sj2);
IkReal x891=(cj3*r12);
IkReal x892=((12.0)*sj4);
IkReal x893=(cj3*r10);
IkReal x894=(cj2*sj1);
IkReal x895=((4.0)*x877);
IkReal x896=((4.0)*x884);
IkReal x897=(sj2*x882);
IkReal x898=((12.0)*cj4*r02);
IkReal x899=(x876*x893);
IkReal x900=(x875*x876);
IkReal x901=(x886*x892);
IkReal x902=(x891*x892);
IkReal x903=(r00*x881*x885);
IkReal x904=(sj2*x885*x889);
IkReal x905=(cj2*x885*x889);
IkReal x906=(r00*x885*x887);
IkReal x907=(x894*x898);
IkReal x908=(x887*x898);
IkReal x909=(x881*x898);
IkReal x910=(x890*x898);
IkReal x911=(x907+x901);
IkReal x912=(x910+x909);
IkReal x913=(x896+x906+x900);
IkReal x914=(x899+x904+x903);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x914))+(((-1.0)*r02*x876*x890))+(((-1.0)*r02*x876*x881))+x895+((x885*x891)))))))+(((0.5)*(IKabs((((r02*x876*x894))+(((-1.0)*x913))+(((-1.0)*r02*x876*x887))+x905+((x885*x886)))))))+(((0.5)*(IKabs(((((-1.0)*x877*x878))+((cj2*x882*x888))+(((16.0)*x893))+(((-1.0)*x880*x897)))))))+(((0.5)*(IKabs(((((-1.0)*x905))+(((-1.0)*x908))+x913+x911)))))+(IKabs(((((8.0)*x893))+(((-1.0)*x877*x883))+(((-8.0)*x882*x887))+((cj2*x879*x882)))))+(((0.5)*(IKabs(((((-16.0)*x875))+(((-1.0)*x888*x897))+(((-1.0)*cj2*x880*x882))+(((-1.0)*x878*x884)))))))+(((0.5)*(IKabs(((((-1.0)*x908))+(((-1.0)*x913))+x911+x905)))))+(((0.5)*(IKabs(((((-1.0)*x895))+(((-1.0)*x912))+x914+x902)))))+(IKabs(((((-1.0)*x883*x884))+(((-1.0)*x879*x897))+(((-8.0)*x881*x882))+(((-8.0)*x875)))))+(((0.5)*(IKabs(((((-1.0)*x912))+(((-1.0)*x914))+x895+x902))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x915=(r10*sj3);
IkReal x916=(r01*sj4);
IkReal x917=(cj1*cj2);
IkReal x918=(cj3*cj4);
IkReal x919=(sj1*sj2);
IkReal x920=(cj4*r02);
IkReal x921=((4.0)*r11*sj3);
IkReal x922=(cj3*r12*sj4);
IkReal x923=((4.0)*r00*sj4);
IkReal x924=((4.0)*r10*x918);
IkReal x925=((12.0)*x922);
IkReal x926=((4.0)*x922);
IkReal x927=(x917*x923);
IkReal x928=(x919*x923);
IkReal x929=((12.0)*x917*x920);
IkReal x930=((12.0)*x919*x920);
IkReal x931=((4.0)*x917*x920);
IkReal x932=((4.0)*x919*x920);
IkReal x933=(x931+x932);
IkReal x934=(x930+x929);
IkReal x935=(x928+x927+x924);
IkReal x936=((((-8.0)*x916*x919))+(((-8.0)*x916*x917))+(((-8.0)*r11*x918))+(((-8.0)*x915)));
op[0]=(x926+x921+(((-1.0)*x935))+(((-1.0)*x933)));
op[1]=x936;
op[2]=(x925+x921+(((-1.0)*x934))+(((-1.0)*x935)));
op[3]=((((-16.0)*x916*x917))+(((-16.0)*x916*x919))+(((-16.0)*x915))+(((-16.0)*r11*x918)));
op[4]=((((-1.0)*x921))+x935+x925+(((-1.0)*x934)));
op[5]=x936;
op[6]=((((-1.0)*x921))+x935+x926+(((-1.0)*x933)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x937=(cj4*sj3);
IkReal x938=(cj1*sj2);
IkReal x939=(r01*sj4);
IkReal x940=((4.0)*sj4);
IkReal x941=(r12*sj3);
IkReal x942=(cj4*r02);
IkReal x943=(cj2*sj1);
IkReal x944=(cj3*r10);
IkReal x945=((4.0)*cj3*r11);
IkReal x946=((4.0)*r10*x937);
IkReal x947=((12.0)*sj4*x941);
IkReal x948=(x940*x941);
IkReal x949=(r00*x938*x940);
IkReal x950=((12.0)*x942*x943);
IkReal x951=(r00*x940*x943);
IkReal x952=((12.0)*x938*x942);
IkReal x953=((4.0)*x942*x943);
IkReal x954=((4.0)*x938*x942);
IkReal x955=(x953+x948);
IkReal x956=(x950+x947);
IkReal x957=(x949+x945+x946);
IkReal x958=((((-8.0)*r11*x937))+(((8.0)*x939*x943))+(((8.0)*x944))+(((-8.0)*x938*x939)));
j5evalpoly[0]=(((htj5*x958))+(((htj5*htj5*htj5)*(((((-16.0)*r11*x937))+(((16.0)*x939*x943))+(((16.0)*x944))+(((-16.0)*x938*x939))))))+((x958*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x957))+(((-1.0)*x952))+x956+x951))))+(((-1.0)*x954))+(((-1.0)*x951))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x954))+(((-1.0)*x957))+x955+x951))))+x957+x955+(((htj5*htj5)*(((((-1.0)*x951))+(((-1.0)*x952))+x957+x956)))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x959=(cj5*sj4);
IkReal x960=(sj4*sj5);
if( IKabs((((r01*x960))+(((-1.0)*r00*x959))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x960))+(((-1.0)*cj4*r12))+((r10*x959)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x960))+(((-1.0)*r00*x959))+((cj4*r02))))+IKsqr(((((-1.0)*r11*x960))+(((-1.0)*cj4*r12))+((r10*x959))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x960))+(((-1.0)*r00*x959))+((cj4*r02))), ((((-1.0)*r11*x960))+(((-1.0)*cj4*r12))+((r10*x959))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x961=IKcos(j0);
IkReal x962=IKsin(j0);
IkReal x963=((0.376)*cj2);
IkReal x964=((1.0)*cj3);
IkReal x965=(r02*sj4);
IkReal x966=(cj4*cj5);
IkReal x967=((1.0)*sj3);
IkReal x968=(cj5*sj4);
IkReal x969=(cj5*r01);
IkReal x970=(r12*sj4);
IkReal x971=(r01*sj5);
IkReal x972=((1.0)*sj4);
IkReal x973=(cj1*cj2);
IkReal x974=(cj1*sj2);
IkReal x975=(cj4*sj3);
IkReal x976=(cj5*r11);
IkReal x977=(cj3*cj4);
IkReal x978=(r00*sj5);
IkReal x979=((1.0)*cj2);
IkReal x980=((1.97e-6)*cj1);
IkReal x981=(r11*sj5);
IkReal x982=(r10*sj5);
IkReal x983=((1.0)*cj4);
IkReal x984=(sj1*x962);
IkReal x985=(sj1*x961);
evalcond[0]=((((-1.0)*x971*x972))+((r00*x968))+(((-1.0)*r02*x983))+x962);
evalcond[1]=((((-1.0)*x961))+(((-1.0)*x972*x981))+(((-1.0)*r12*x983))+((r10*x968)));
evalcond[2]=(((x961*x973))+(((-1.0)*x964*x965))+(((-1.0)*r00*x964*x966))+((x971*x977))+((sj3*x969))+((sj3*x978))+((sj2*x985)));
evalcond[3]=(((x977*x981))+((x962*x973))+(((-1.0)*x964*x970))+(((-1.0)*r10*x964*x966))+((sj3*x982))+((sj3*x976))+((sj2*x984)));
evalcond[4]=((((-1.0)*x965*x967))+((x961*x974))+(((-1.0)*x964*x969))+(((-1.0)*x964*x978))+(((-1.0)*r00*x966*x967))+((x971*x975))+(((-1.0)*x979*x985)));
evalcond[5]=((((-1.0)*r10*x966*x967))+((x975*x981))+((x962*x974))+(((-1.0)*x964*x976))+(((-1.0)*x967*x970))+(((-1.0)*x964*x982))+(((-1.0)*x979*x984)));
evalcond[6]=((((0.1025)*x969))+(((-1.0)*x963*x985))+((x961*x980))+(((8.9e-7)*x961))+(((0.376)*x961*x974))+(((0.1215)*x962))+(((-1.0)*px))+(((-0.408)*x985))+(((0.1025)*x978)));
evalcond[7]=((((-1.0)*x963*x984))+(((0.376)*x962*x974))+(((8.9e-7)*x962))+((x962*x980))+(((-1.0)*py))+(((-0.1215)*x961))+(((-0.408)*x984))+(((0.1025)*x982))+(((0.1025)*x976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x986=IKPowWithIntegerCheck(r22,-1);
if(!x986.valid){
continue;
}
CheckValue<IkReal> x987=IKPowWithIntegerCheck(sj3,-1);
if(!x987.valid){
continue;
}
sj4array[0]=((x986.value)*(x987.value)*((((sj1*sj2))+((cj1*cj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x988=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x988);
rxp1_0=(pz*r11);
rxp1_1=(r01*x988);
IkReal x989=(r10*sj3);
IkReal x990=((4.0)*cj4);
IkReal x991=(r11*sj3);
IkReal x992=((16.0)*cj4);
IkReal x993=((8.0)*sj1);
IkReal x994=((16.0)*cj1);
IkReal x995=(cj1*cj2);
IkReal x996=(r01*sj4);
IkReal x997=((8.0)*cj4);
IkReal x998=(cj3*r11);
IkReal x999=((4.0)*sj4);
IkReal x1000=(r12*sj3);
IkReal x1001=(cj1*sj2);
IkReal x1002=((16.0)*sj1);
IkReal x1003=(r00*sj1);
IkReal x1004=(sj1*sj2);
IkReal x1005=(cj3*r12);
IkReal x1006=((12.0)*sj4);
IkReal x1007=(cj3*r10);
IkReal x1008=(cj2*sj1);
IkReal x1009=((4.0)*x991);
IkReal x1010=((4.0)*x998);
IkReal x1011=(sj2*x996);
IkReal x1012=((12.0)*cj4*r02);
IkReal x1013=(x1007*x990);
IkReal x1014=(x989*x990);
IkReal x1015=(x1000*x1006);
IkReal x1016=(x1005*x1006);
IkReal x1017=(r00*x995*x999);
IkReal x1018=(sj2*x1003*x999);
IkReal x1019=(cj2*x1003*x999);
IkReal x1020=(r00*x1001*x999);
IkReal x1021=(x1008*x1012);
IkReal x1022=(x1001*x1012);
IkReal x1023=(x1012*x995);
IkReal x1024=(x1004*x1012);
IkReal x1025=(x1015+x1021);
IkReal x1026=(x1024+x1023);
IkReal x1027=(x1014+x1010+x1020);
IkReal x1028=(x1018+x1017+x1013);
j5eval[0]=((IKabs(((((-1.0)*x997*x998))+(((-8.0)*x989))+(((-1.0)*x1011*x993))+(((-8.0)*x995*x996)))))+(IKabs(((((8.0)*x1007))+((cj2*x993*x996))+(((-1.0)*x991*x997))+(((-8.0)*x1001*x996)))))+(((0.5)*(IKabs((x1025+x1027+(((-1.0)*x1019))+(((-1.0)*x1022)))))))+(((0.5)*(IKabs(((((-1.0)*x991*x992))+(((16.0)*x1007))+(((-1.0)*x1011*x994))+((cj2*x1002*x996)))))))+(((0.5)*(IKabs((((x1000*x999))+x1019+(((-1.0)*x1027))+((r02*x1008*x990))+(((-1.0)*r02*x1001*x990)))))))+(((0.5)*(IKabs((x1016+x1028+(((-1.0)*x1009))+(((-1.0)*x1026)))))))+(((0.5)*(IKabs((x1016+x1009+(((-1.0)*x1026))+(((-1.0)*x1028)))))))+(((0.5)*(IKabs(((((-1.0)*r02*x990*x995))+x1009+(((-1.0)*x1028))+(((-1.0)*r02*x1004*x990))+((x1005*x999)))))))+(((0.5)*(IKabs((x1019+x1025+(((-1.0)*x1027))+(((-1.0)*x1022)))))))+(((0.5)*(IKabs(((((-1.0)*x992*x998))+(((-16.0)*x989))+(((-1.0)*x1002*x1011))+(((-1.0)*cj2*x994*x996))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1029=(r10*sj3);
IkReal x1030=(r01*sj4);
IkReal x1031=(cj1*cj2);
IkReal x1032=(cj3*cj4);
IkReal x1033=(sj1*sj2);
IkReal x1034=(cj4*r02);
IkReal x1035=((4.0)*r11*sj3);
IkReal x1036=(cj3*r12*sj4);
IkReal x1037=((4.0)*r00*sj4);
IkReal x1038=((4.0)*r10*x1032);
IkReal x1039=((12.0)*x1036);
IkReal x1040=((4.0)*x1036);
IkReal x1041=(x1031*x1037);
IkReal x1042=(x1033*x1037);
IkReal x1043=((12.0)*x1031*x1034);
IkReal x1044=((12.0)*x1033*x1034);
IkReal x1045=((4.0)*x1031*x1034);
IkReal x1046=((4.0)*x1033*x1034);
IkReal x1047=(x1046+x1045);
IkReal x1048=(x1043+x1044);
IkReal x1049=(x1042+x1041+x1038);
IkReal x1050=((((-8.0)*x1030*x1033))+(((-8.0)*x1030*x1031))+(((-8.0)*x1029))+(((-8.0)*r11*x1032)));
op[0]=(x1040+x1035+(((-1.0)*x1047))+(((-1.0)*x1049)));
op[1]=x1050;
op[2]=(x1039+x1035+(((-1.0)*x1048))+(((-1.0)*x1049)));
op[3]=((((-16.0)*x1029))+(((-16.0)*r11*x1032))+(((-16.0)*x1030*x1031))+(((-16.0)*x1030*x1033)));
op[4]=((((-1.0)*x1035))+x1049+x1039+(((-1.0)*x1048)));
op[5]=x1050;
op[6]=((((-1.0)*x1035))+x1040+x1049+(((-1.0)*x1047)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1051=(cj4*sj3);
IkReal x1052=(cj1*sj2);
IkReal x1053=(r01*sj4);
IkReal x1054=((4.0)*sj4);
IkReal x1055=(r12*sj3);
IkReal x1056=(cj4*r02);
IkReal x1057=(cj2*sj1);
IkReal x1058=(cj3*r10);
IkReal x1059=((4.0)*cj3*r11);
IkReal x1060=((4.0)*r10*x1051);
IkReal x1061=((12.0)*sj4*x1055);
IkReal x1062=(x1054*x1055);
IkReal x1063=(r00*x1052*x1054);
IkReal x1064=((12.0)*x1056*x1057);
IkReal x1065=(r00*x1054*x1057);
IkReal x1066=((12.0)*x1052*x1056);
IkReal x1067=((4.0)*x1056*x1057);
IkReal x1068=((4.0)*x1052*x1056);
IkReal x1069=(x1062+x1067);
IkReal x1070=(x1061+x1064);
IkReal x1071=(x1059+x1060+x1063);
IkReal x1072=((((8.0)*x1053*x1057))+(((-8.0)*r11*x1051))+(((-8.0)*x1052*x1053))+(((8.0)*x1058)));
j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*((x1069+x1065+(((-1.0)*x1068))+(((-1.0)*x1071))))))+x1071+x1069+(((htj5*htj5*htj5)*(((((16.0)*x1058))+(((16.0)*x1053*x1057))+(((-16.0)*x1052*x1053))+(((-16.0)*r11*x1051))))))+(((htj5*htj5*htj5*htj5)*((x1070+x1065+(((-1.0)*x1066))+(((-1.0)*x1071))))))+(((htj5*htj5)*((x1070+x1071+(((-1.0)*x1066))+(((-1.0)*x1065))))))+((x1072*(htj5*htj5*htj5*htj5*htj5)))+((htj5*x1072))+(((-1.0)*x1068))+(((-1.0)*x1065)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1073=(cj5*sj4);
IkReal x1074=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1073))+((r01*x1074))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1074))+((r10*x1073))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1073))+((r01*x1074))+((cj4*r02))))+IKsqr(((((-1.0)*r11*x1074))+((r10*x1073))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1073))+((r01*x1074))+((cj4*r02))), ((((-1.0)*r11*x1074))+((r10*x1073))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1075=IKcos(j0);
IkReal x1076=IKsin(j0);
IkReal x1077=((0.376)*cj2);
IkReal x1078=((1.0)*cj3);
IkReal x1079=(r02*sj4);
IkReal x1080=(cj4*cj5);
IkReal x1081=((1.0)*sj3);
IkReal x1082=(cj5*sj4);
IkReal x1083=(cj5*r01);
IkReal x1084=(r12*sj4);
IkReal x1085=(r01*sj5);
IkReal x1086=((1.0)*sj4);
IkReal x1087=(cj1*cj2);
IkReal x1088=(cj1*sj2);
IkReal x1089=(cj4*sj3);
IkReal x1090=(cj5*r11);
IkReal x1091=(cj3*cj4);
IkReal x1092=(r00*sj5);
IkReal x1093=((1.0)*cj2);
IkReal x1094=((1.97e-6)*cj1);
IkReal x1095=(r11*sj5);
IkReal x1096=(r10*sj5);
IkReal x1097=((1.0)*cj4);
IkReal x1098=(sj1*x1076);
IkReal x1099=(sj1*x1075);
evalcond[0]=(x1076+((r00*x1082))+(((-1.0)*r02*x1097))+(((-1.0)*x1085*x1086)));
evalcond[1]=((((-1.0)*x1086*x1095))+((r10*x1082))+(((-1.0)*r12*x1097))+(((-1.0)*x1075)));
evalcond[2]=((((-1.0)*x1078*x1079))+((sj3*x1083))+((x1085*x1091))+((x1075*x1087))+(((-1.0)*r00*x1078*x1080))+((sj2*x1099))+((sj3*x1092)));
evalcond[3]=(((x1076*x1087))+(((-1.0)*x1078*x1084))+(((-1.0)*r10*x1078*x1080))+((sj2*x1098))+((x1091*x1095))+((sj3*x1090))+((sj3*x1096)));
evalcond[4]=((((-1.0)*r00*x1080*x1081))+(((-1.0)*x1078*x1083))+((x1075*x1088))+(((-1.0)*x1079*x1081))+(((-1.0)*x1093*x1099))+((x1085*x1089))+(((-1.0)*x1078*x1092)));
evalcond[5]=(((x1076*x1088))+((x1089*x1095))+(((-1.0)*x1081*x1084))+(((-1.0)*x1093*x1098))+(((-1.0)*r10*x1080*x1081))+(((-1.0)*x1078*x1090))+(((-1.0)*x1078*x1096)));
evalcond[6]=((((8.9e-7)*x1075))+(((-0.408)*x1099))+(((0.1215)*x1076))+(((-1.0)*px))+(((0.376)*x1075*x1088))+(((0.1025)*x1092))+(((0.1025)*x1083))+(((-1.0)*x1077*x1099))+((x1075*x1094)));
evalcond[7]=(((x1076*x1094))+(((8.9e-7)*x1076))+(((-0.408)*x1098))+(((0.376)*x1076*x1088))+(((-1.0)*py))+(((0.1025)*x1096))+(((0.1025)*x1090))+(((-1.0)*x1077*x1098))+(((-0.1215)*x1075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1100=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1100);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1100);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1101=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1101);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1101);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1102=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1102);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1102);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1103=IKPowWithIntegerCheck(r22,-1);
if(!x1103.valid){
continue;
}
sj4array[0]=((x1103.value)*((((sj1*sj2))+((cj1*cj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1104=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1104);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1104);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1106 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1106.valid){
continue;
}
IkReal x1105=x1106.value;
j5array[0]=((-1.0)*x1105);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1105)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1107=(cj5*sj4);
IkReal x1108=(sj4*sj5);
if( IKabs((((r01*x1108))+(((-1.0)*r00*x1107)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1108))+((r10*x1107)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1108))+(((-1.0)*r00*x1107))))+IKsqr(((((-1.0)*r11*x1108))+((r10*x1107))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1108))+(((-1.0)*r00*x1107))), ((((-1.0)*r11*x1108))+((r10*x1107))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1109=IKcos(j0);
IkReal x1110=IKsin(j0);
IkReal x1111=(cj5*sj4);
IkReal x1112=(cj5*r01);
IkReal x1113=(cj1*cj2);
IkReal x1114=((0.1025)*sj5);
IkReal x1115=((1.97e-6)*cj1);
IkReal x1116=(cj5*r11);
IkReal x1117=((1.0)*sj4*sj5);
IkReal x1118=(sj1*x1110);
IkReal x1119=(sj1*x1109);
evalcond[0]=((((-1.0)*r01*x1117))+x1110+((r00*x1111)));
evalcond[1]=((((-1.0)*r11*x1117))+(((-1.0)*x1109))+((r10*x1111)));
evalcond[2]=(((x1109*x1113))+((r00*sj5))+((sj2*x1119))+x1112);
evalcond[3]=(((sj2*x1118))+x1116+((r10*sj5))+((x1110*x1113)));
evalcond[4]=(((x1109*x1115))+(((0.1215)*x1110))+((r00*x1114))+(((-1.0)*px))+(((-0.408)*x1119))+(((0.1025)*x1112))+(((8.9e-7)*x1109)));
evalcond[5]=(((x1110*x1115))+(((-1.0)*py))+(((-0.408)*x1118))+(((8.9e-7)*x1110))+(((0.1025)*x1116))+(((-0.1215)*x1109))+((r10*x1114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1120=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1120);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1120);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1121=IKPowWithIntegerCheck(r22,-1);
if(!x1121.valid){
continue;
}
sj4array[0]=((-1.0)*(x1121.value)*((((sj1*sj2))+((cj1*cj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1122=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1122);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1122);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1124 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1124.valid){
continue;
}
IkReal x1123=x1124.value;
j5array[0]=((-1.0)*x1123);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1123)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1125=(cj5*sj4);
IkReal x1126=(sj4*sj5);
if( IKabs((((r01*x1126))+(((-1.0)*r00*x1125)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1126))+((r10*x1125)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1126))+(((-1.0)*r00*x1125))))+IKsqr(((((-1.0)*r11*x1126))+((r10*x1125))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1126))+(((-1.0)*r00*x1125))), ((((-1.0)*r11*x1126))+((r10*x1125))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1127=IKcos(j0);
IkReal x1128=IKsin(j0);
IkReal x1129=(cj5*sj4);
IkReal x1130=(cj5*r01);
IkReal x1131=((1.0)*sj5);
IkReal x1132=(cj1*cj2);
IkReal x1133=(cj5*r11);
IkReal x1134=((0.1025)*sj5);
IkReal x1135=((0.408)*sj1);
IkReal x1136=(sj1*sj2);
IkReal x1137=((1.97e-6)*cj1);
evalcond[0]=(x1128+((r00*x1129))+(((-1.0)*r01*sj4*x1131)));
evalcond[1]=(((r10*x1129))+(((-1.0)*r11*sj4*x1131))+(((-1.0)*x1127)));
evalcond[2]=((((-1.0)*x1130))+(((-1.0)*r00*x1131))+((x1127*x1136))+((x1127*x1132)));
evalcond[3]=((((-1.0)*r10*x1131))+((x1128*x1132))+((x1128*x1136))+(((-1.0)*x1133)));
evalcond[4]=(((r00*x1134))+(((0.1025)*x1130))+(((-1.0)*x1127*x1135))+(((-1.0)*px))+(((0.1215)*x1128))+(((8.9e-7)*x1127))+((x1127*x1137)));
evalcond[5]=(((r10*x1134))+(((-0.1215)*x1127))+(((0.1025)*x1133))+(((-1.0)*py))+(((8.9e-7)*x1128))+((x1128*x1137))+(((-1.0)*x1128*x1135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1138=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1138);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1138);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1139=IKPowWithIntegerCheck(r22,-1);
if(!x1139.valid){
continue;
}
sj4array[0]=((x1139.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1140=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1140);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1140);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1142 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1142.valid){
continue;
}
IkReal x1141=x1142.value;
j5array[0]=((-1.0)*x1141);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1141)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1143=(cj5*sj4);
IkReal x1144=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1143))+((r01*x1144)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1144))+((r10*x1143)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1143))+((r01*x1144))))+IKsqr(((((-1.0)*r11*x1144))+((r10*x1143))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1143))+((r01*x1144))), ((((-1.0)*r11*x1144))+((r10*x1143))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1145=IKcos(j0);
IkReal x1146=IKsin(j0);
IkReal x1147=(cj2*sj1);
IkReal x1148=(cj5*sj4);
IkReal x1149=(cj5*r01);
IkReal x1150=((1.0)*sj5);
IkReal x1151=(cj5*r11);
IkReal x1152=(cj1*sj2);
IkReal x1153=((0.408)*sj1);
IkReal x1154=((1.97e-6)*cj1);
IkReal x1155=((0.1025)*sj5);
IkReal x1156=((0.376)*x1146);
IkReal x1157=((1.0)*x1145);
IkReal x1158=((0.376)*x1145);
evalcond[0]=(x1146+(((-1.0)*r01*sj4*x1150))+((r00*x1148)));
evalcond[1]=((((-1.0)*x1157))+(((-1.0)*r11*sj4*x1150))+((r10*x1148)));
evalcond[2]=((((-1.0)*r00*x1150))+(((-1.0)*x1149))+(((-1.0)*x1147*x1157))+((x1145*x1152)));
evalcond[3]=(((x1146*x1152))+(((-1.0)*x1151))+(((-1.0)*r10*x1150))+(((-1.0)*x1146*x1147)));
evalcond[4]=(((r00*x1155))+(((0.1025)*x1149))+((x1152*x1158))+(((-1.0)*x1147*x1158))+(((-1.0)*px))+((x1145*x1154))+(((-1.0)*x1145*x1153))+(((8.9e-7)*x1145))+(((0.1215)*x1146)));
evalcond[5]=(((x1146*x1154))+(((-0.1215)*x1145))+(((0.1025)*x1151))+((x1152*x1156))+(((-1.0)*x1147*x1156))+(((-1.0)*py))+(((-1.0)*x1146*x1153))+(((8.9e-7)*x1146))+((r10*x1155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1159=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1159);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1159);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1160=IKPowWithIntegerCheck(r22,-1);
if(!x1160.valid){
continue;
}
sj4array[0]=((-1.0)*(x1160.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1161=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1161);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1161);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1163 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1163.valid){
continue;
}
IkReal x1162=x1163.value;
j5array[0]=((-1.0)*x1162);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1162)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1164=(cj5*sj4);
IkReal x1165=(sj4*sj5);
if( IKabs((((r01*x1165))+(((-1.0)*r00*x1164)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1164))+(((-1.0)*r11*x1165)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1165))+(((-1.0)*r00*x1164))))+IKsqr((((r10*x1164))+(((-1.0)*r11*x1165))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1165))+(((-1.0)*r00*x1164))), (((r10*x1164))+(((-1.0)*r11*x1165))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1166=IKcos(j0);
IkReal x1167=IKsin(j0);
IkReal x1168=(cj2*sj1);
IkReal x1169=(cj5*sj4);
IkReal x1170=(cj5*r01);
IkReal x1171=(cj1*sj2);
IkReal x1172=((0.408)*sj1);
IkReal x1173=(r00*sj5);
IkReal x1174=((1.97e-6)*cj1);
IkReal x1175=(cj5*r11);
IkReal x1176=(r10*sj5);
IkReal x1177=((0.376)*x1167);
IkReal x1178=((1.0)*sj4*sj5);
IkReal x1179=((0.376)*x1166);
IkReal x1180=((1.0)*x1166);
evalcond[0]=(x1167+((r00*x1169))+(((-1.0)*r01*x1178)));
evalcond[1]=(((r10*x1169))+(((-1.0)*r11*x1178))+(((-1.0)*x1180)));
evalcond[2]=(x1173+x1170+((x1166*x1171))+(((-1.0)*x1168*x1180)));
evalcond[3]=(x1176+x1175+((x1167*x1171))+(((-1.0)*x1167*x1168)));
evalcond[4]=((((-1.0)*x1168*x1179))+((x1166*x1174))+(((8.9e-7)*x1166))+(((0.1215)*x1167))+(((0.1025)*x1173))+(((0.1025)*x1170))+(((-1.0)*px))+(((-1.0)*x1166*x1172))+((x1171*x1179)));
evalcond[5]=((((-1.0)*x1168*x1177))+(((8.9e-7)*x1167))+(((-0.1215)*x1166))+(((0.1025)*x1176))+(((0.1025)*x1175))+(((-1.0)*py))+(((-1.0)*x1167*x1172))+((x1167*x1174))+((x1171*x1177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1181=IKPowWithIntegerCheck(cj3,-1);
if(!x1181.valid){
continue;
}
CheckValue<IkReal> x1182=IKPowWithIntegerCheck(r22,-1);
if(!x1182.valid){
continue;
}
sj4array[0]=((x1181.value)*(x1182.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4))))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1183=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1183);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1183);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((-4.0)*cj1*cj2*cj4*r00*sj3))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))+(((0.5)*(IKabs(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((-16.0)*cj2*cj3*cj4*r11*sj1)))))))+(((0.5)*(IKabs(((((4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10)))))+(IKabs(((((8.0)*cj1*r00*sj2*sj3))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1184=(r00*sj2);
IkReal x1185=((8.0)*cj1);
IkReal x1186=((16.0)*sj1);
IkReal x1187=(cj2*r00);
IkReal x1188=(cj1*sj2);
IkReal x1189=(cj3*sj1);
IkReal x1190=((4.0)*r01);
IkReal x1191=(cj2*sj3);
IkReal x1192=(cj1*cj3);
IkReal x1193=((4.0)*cj4);
IkReal x1194=(cj4*r01);
IkReal x1195=((16.0)*cj1);
IkReal x1196=((8.0)*sj1);
IkReal x1197=(sj2*sj3);
IkReal x1198=(cj3*x1194);
IkReal x1199=(((x1184*x1192*x1193))+((sj1*x1190*x1191)));
IkReal x1200=(((sj3*x1188*x1190))+((cj2*x1190*x1192))+((x1187*x1189*x1193))+((cj1*sj3*x1187*x1193))+((sj2*x1189*x1190))+((sj1*sj3*x1184*x1193)));
IkReal x1201=(x1199+(((-1.0)*x1200)));
IkReal x1202=((((-8.0)*cj2*x1189*x1194))+((sj2*x1185*x1198))+((cj3*x1185*x1187))+(((-1.0)*x1194*x1196*x1197))+(((8.0)*x1184*x1189))+(((-1.0)*x1185*x1191*x1194))+((sj3*x1184*x1185))+(((-1.0)*sj3*x1187*x1196)));
IkReal x1203=(x1200+(((-1.0)*x1199)));
op[0]=x1201;
op[1]=x1202;
op[2]=x1201;
op[3]=((((-1.0)*sj3*x1186*x1187))+(((-1.0)*cj2*x1186*x1198))+(((16.0)*x1187*x1192))+(((16.0)*x1188*x1198))+((cj3*x1184*x1186))+(((-1.0)*x1191*x1194*x1195))+(((-1.0)*x1186*x1194*x1197))+((sj3*x1184*x1195)));
op[4]=x1203;
op[5]=x1202;
op[6]=x1203;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5)*(((((4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5)*(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((-16.0)*cj2*cj3*cj4*r11*sj1))))))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))))))+(((4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*r11*sj1*sj3))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))))))+(((4.0)*cj1*cj2*cj4*r10*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1204=(cj5*sj4);
IkReal x1205=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1204))+((r01*x1205)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1204))+(((-1.0)*r11*x1205)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1204))+((r01*x1205))))+IKsqr((((r10*x1204))+(((-1.0)*r11*x1205))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1204))+((r01*x1205))), (((r10*x1204))+(((-1.0)*r11*x1205))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1206=IKcos(j0);
IkReal x1207=IKsin(j0);
IkReal x1208=((0.376)*cj2);
IkReal x1209=(r10*sj3);
IkReal x1210=(cj3*r00);
IkReal x1211=(cj5*sj4);
IkReal x1212=(cj5*r01);
IkReal x1213=((1.0)*sj5);
IkReal x1214=(cj3*r10);
IkReal x1215=(cj1*cj2);
IkReal x1216=((1.0)*cj3);
IkReal x1217=(cj1*sj2);
IkReal x1218=(r11*sj3);
IkReal x1219=(r00*sj3);
IkReal x1220=((1.0)*cj2);
IkReal x1221=((1.97e-6)*cj1);
IkReal x1222=(cj4*sj5);
IkReal x1223=((0.1025)*sj5);
IkReal x1224=(cj5*r11);
IkReal x1225=(sj1*x1207);
IkReal x1226=((1.0)*cj4*cj5);
IkReal x1227=(r01*x1222);
IkReal x1228=(sj1*x1206);
evalcond[0]=(x1207+(((-1.0)*r01*sj4*x1213))+((r00*x1211)));
evalcond[1]=(((r10*x1211))+(((-1.0)*x1206))+(((-1.0)*r11*sj4*x1213)));
evalcond[2]=((((-1.0)*x1210*x1226))+((cj3*x1227))+((sj2*x1228))+((x1206*x1215))+((sj5*x1219))+((sj3*x1212)));
evalcond[3]=(((sj2*x1225))+((cj5*x1218))+(((-1.0)*x1214*x1226))+((x1207*x1215))+((sj5*x1209))+((cj3*r11*x1222)));
evalcond[4]=(((sj3*x1227))+(((-1.0)*x1220*x1228))+((x1206*x1217))+(((-1.0)*x1212*x1216))+(((-1.0)*x1210*x1213))+(((-1.0)*x1219*x1226)));
evalcond[5]=((((-1.0)*x1220*x1225))+((x1207*x1217))+(((-1.0)*x1209*x1226))+(((-1.0)*x1213*x1214))+((x1218*x1222))+(((-1.0)*x1216*x1224)));
evalcond[6]=((((0.1025)*x1212))+(((0.1215)*x1207))+((r00*x1223))+(((0.376)*x1206*x1217))+((x1206*x1221))+(((8.9e-7)*x1206))+(((-1.0)*px))+(((-1.0)*x1208*x1228))+(((-0.408)*x1228)));
evalcond[7]=(((x1207*x1221))+(((8.9e-7)*x1207))+(((-1.0)*py))+(((0.376)*x1207*x1217))+(((-1.0)*x1208*x1225))+((r10*x1223))+(((-0.1215)*x1206))+(((-0.408)*x1225))+(((0.1025)*x1224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1229=IKPowWithIntegerCheck(r22,-1);
if(!x1229.valid){
continue;
}
CheckValue<IkReal> x1230=IKPowWithIntegerCheck(sj3,-1);
if(!x1230.valid){
continue;
}
sj4array[0]=((x1229.value)*(x1230.value)*((((sj1*sj2))+((cj1*cj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1231=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1231);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1231);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((-4.0)*cj1*cj2*cj4*r00*sj3))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))+(((0.5)*(IKabs(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((-16.0)*cj2*cj3*cj4*r11*sj1)))))))+(((0.5)*(IKabs(((((4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10)))))+(IKabs(((((8.0)*cj1*r00*sj2*sj3))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1232=(r00*sj2);
IkReal x1233=((8.0)*cj1);
IkReal x1234=((16.0)*sj1);
IkReal x1235=(cj2*r00);
IkReal x1236=(cj1*sj2);
IkReal x1237=(cj3*sj1);
IkReal x1238=((4.0)*r01);
IkReal x1239=(cj2*sj3);
IkReal x1240=(cj1*cj3);
IkReal x1241=((4.0)*cj4);
IkReal x1242=(cj4*r01);
IkReal x1243=((16.0)*cj1);
IkReal x1244=((8.0)*sj1);
IkReal x1245=(sj2*sj3);
IkReal x1246=(cj3*x1242);
IkReal x1247=(((x1232*x1240*x1241))+((sj1*x1238*x1239)));
IkReal x1248=(((sj1*sj3*x1232*x1241))+((cj2*x1238*x1240))+((x1235*x1237*x1241))+((sj2*x1237*x1238))+((sj3*x1236*x1238))+((cj1*sj3*x1235*x1241)));
IkReal x1249=(x1247+(((-1.0)*x1248)));
IkReal x1250=((((8.0)*x1232*x1237))+((sj3*x1232*x1233))+((cj3*x1233*x1235))+(((-1.0)*x1242*x1244*x1245))+((sj2*x1233*x1246))+(((-1.0)*x1233*x1239*x1242))+(((-8.0)*cj2*x1237*x1242))+(((-1.0)*sj3*x1235*x1244)));
IkReal x1251=(x1248+(((-1.0)*x1247)));
op[0]=x1249;
op[1]=x1250;
op[2]=x1249;
op[3]=((((16.0)*x1235*x1240))+(((-1.0)*x1234*x1242*x1245))+((sj3*x1232*x1243))+(((-1.0)*sj3*x1234*x1235))+(((-1.0)*x1239*x1242*x1243))+((cj3*x1232*x1234))+(((16.0)*x1236*x1246))+(((-1.0)*cj2*x1234*x1246)));
op[4]=x1251;
op[5]=x1250;
op[6]=x1251;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5)*(((((4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5)*(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((-16.0)*cj2*cj3*cj4*r11*sj1))))))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))))))+(((4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*r11*sj1*sj3))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))))))+(((4.0)*cj1*cj2*cj4*r10*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1252=(cj5*sj4);
IkReal x1253=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1252))+((r01*x1253)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1252))+(((-1.0)*r11*x1253)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1252))+((r01*x1253))))+IKsqr((((r10*x1252))+(((-1.0)*r11*x1253))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1252))+((r01*x1253))), (((r10*x1252))+(((-1.0)*r11*x1253))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1254=IKcos(j0);
IkReal x1255=IKsin(j0);
IkReal x1256=((0.376)*cj2);
IkReal x1257=(r10*sj3);
IkReal x1258=(cj3*r00);
IkReal x1259=(cj5*sj4);
IkReal x1260=(cj5*r01);
IkReal x1261=((1.0)*sj5);
IkReal x1262=(cj3*r10);
IkReal x1263=(cj1*cj2);
IkReal x1264=((1.0)*cj3);
IkReal x1265=(cj1*sj2);
IkReal x1266=(r11*sj3);
IkReal x1267=(r00*sj3);
IkReal x1268=((1.0)*cj2);
IkReal x1269=((1.97e-6)*cj1);
IkReal x1270=(cj4*sj5);
IkReal x1271=((0.1025)*sj5);
IkReal x1272=(cj5*r11);
IkReal x1273=(sj1*x1255);
IkReal x1274=((1.0)*cj4*cj5);
IkReal x1275=(r01*x1270);
IkReal x1276=(sj1*x1254);
evalcond[0]=(x1255+(((-1.0)*r01*sj4*x1261))+((r00*x1259)));
evalcond[1]=(((r10*x1259))+(((-1.0)*r11*sj4*x1261))+(((-1.0)*x1254)));
evalcond[2]=(((sj5*x1267))+((sj2*x1276))+((cj3*x1275))+((x1254*x1263))+(((-1.0)*x1258*x1274))+((sj3*x1260)));
evalcond[3]=(((sj5*x1257))+((sj2*x1273))+((cj3*r11*x1270))+((x1255*x1263))+(((-1.0)*x1262*x1274))+((cj5*x1266)));
evalcond[4]=(((sj3*x1275))+(((-1.0)*x1268*x1276))+(((-1.0)*x1258*x1261))+(((-1.0)*x1267*x1274))+(((-1.0)*x1260*x1264))+((x1254*x1265)));
evalcond[5]=((((-1.0)*x1268*x1273))+(((-1.0)*x1261*x1262))+(((-1.0)*x1257*x1274))+((x1266*x1270))+((x1255*x1265))+(((-1.0)*x1264*x1272)));
evalcond[6]=((((8.9e-7)*x1254))+(((-0.408)*x1276))+(((-1.0)*px))+((x1254*x1269))+(((-1.0)*x1256*x1276))+(((0.1025)*x1260))+((r00*x1271))+(((0.376)*x1254*x1265))+(((0.1215)*x1255)));
evalcond[7]=(((r10*x1271))+(((8.9e-7)*x1255))+(((-0.408)*x1273))+(((0.1025)*x1272))+(((-1.0)*py))+((x1255*x1269))+(((-1.0)*x1256*x1273))+(((0.376)*x1255*x1265))+(((-0.1215)*x1254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1279 = IKatan2WithCheck(IkReal(((0.1025)*r21)),IkReal(((0.1025)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1279.valid){
continue;
}
IkReal x1277=((1.0)*(x1279.value));
if((((((0.01050625)*(r21*r21)))+(((0.01050625)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1280=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.01050625)*(r21*r21)))+(((0.01050625)*(r20*r20)))))),-1);
if(!x1280.valid){
continue;
}
if( (((x1280.value)*(((((0.376)*sj1*sj2))+(((1.97e-6)*sj1))+(((0.408)*cj1))+(((0.376)*cj1*cj2))+(((-1.0)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x1280.value)*(((((0.376)*sj1*sj2))+(((1.97e-6)*sj1))+(((0.408)*cj1))+(((0.376)*cj1*cj2))+(((-1.0)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1278=IKasin(((x1280.value)*(((((0.376)*sj1*sj2))+(((1.97e-6)*sj1))+(((0.408)*cj1))+(((0.376)*cj1*cj2))+(((-1.0)*pz))))));
j5array[0]=((((-1.0)*x1277))+(((-1.0)*x1278)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+x1278+(((-1.0)*x1277)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1281=cj5*cj5;
IkReal x1282=r21*r21;
IkReal x1283=(cj3*x1281);
IkReal x1284=((((-2.0)*cj3*cj5*r20*r21*sj5))+((cj3*(r22*r22)))+(((-1.0)*x1282*x1283))+((cj3*x1282))+((x1283*(r20*r20))));
j4eval[0]=x1284;
j4eval[1]=IKsign(x1284);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1285=cj5*cj5;
IkReal x1286=r21*r21;
IkReal x1287=(sj3*x1285);
IkReal x1288=(((sj3*(r22*r22)))+((x1287*(r20*r20)))+(((-2.0)*cj5*r20*r21*sj3*sj5))+(((-1.0)*x1286*x1287))+((sj3*x1286)));
j4eval[0]=x1288;
j4eval[1]=IKsign(x1288);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1289=cj1*cj1;
IkReal x1290=cj2*cj2;
IkReal x1291=(cj1*sj1);
IkReal x1292=((87496720469.9709)*cj2);
IkReal x1293=(cj1*sj2);
IkReal x1294=((1227264.0)*cj2);
IkReal x1295=(cj2*sj1);
IkReal x1296=(cj2*x1291);
IkReal x1297=(sj2*x1289);
IkReal x1298=(x1289*x1290);
j0eval[0]=((-51681472081.4442)+(((-1.0)*x1292))+(((422471.91011236)*x1296))+(((7154508639.74194)*x1289))+(((80634232589.9732)*sj2*x1296))+(((-190862.944162437)*x1293))+(((-40317116294.9866)*x1290))+(((80634232589.9732)*x1298))+(((207106.598984772)*sj1))+(((87496720469.9709)*sj2*x1291))+(((190862.944162437)*x1295))+(((-422471.91011236)*x1297))+(((-1.0)*cj1))+(((458426.966292135)*x1291))+((x1289*x1292)));
j0eval[1]=IKsign(((-724905.000003168)+(((5.92576)*x1296))+(((2.90496)*sj1))+(((-1.40264e-5)*cj1))+(((-1.0)*x1294))+(((100351.999984476)*x1289))+(((2.67712)*x1295))+(((6.43008)*x1291))+(((1131008.0)*sj2*x1296))+(((-2.67712)*x1293))+(((-565504.0)*x1290))+(((1227264.0)*sj2*x1291))+(((1131008.0)*x1298))+((x1289*x1294))+(((-5.92576)*x1297))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1299=(((cj1*sj2))+(((-1.0)*cj2*sj1)));
j0eval[0]=x1299;
j0eval[1]=IKsign(x1299);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1300=cj5*cj5;
IkReal x1301=r21*r21;
IkReal x1302=(cj5*r20);
IkReal x1303=(r21*sj5);
IkReal x1304=(cj2*sj1);
IkReal x1305=((1.0)*cj1*sj2);
IkReal x1306=(x1301+(((-2.0)*x1302*x1303))+(r22*r22)+(((-1.0)*x1300*x1301))+((x1300*(r20*r20))));
j4eval[0]=x1306;
j4eval[1]=IKsign(x1306);
j4eval[2]=((IKabs((((cj1*sj2*x1303))+(((-1.0)*x1303*x1304))+((x1302*x1304))+(((-1.0)*x1302*x1305)))))+(IKabs(((((-1.0)*r22*x1305))+((r22*x1304))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=(((cj1*sj2))+(((-1.0)*cj2*sj1)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((8.23045267033672)*px))+(((0.000193737404421095)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-8.23045267033672)*py))+(((0.000193737404421095)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.23045267033672)*px))+(((0.000193737404421095)*py))))+IKsqr(((((-8.23045267033672)*py))+(((0.000193737404421095)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((8.23045267033672)*px))+(((0.000193737404421095)*py))), ((((-8.23045267033672)*py))+(((0.000193737404421095)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1307=IKsin(j0);
IkReal x1308=IKcos(j0);
evalcond[0]=((((0.1215)*x1307))+(((-1.0)*px))+(((2.86e-6)*x1308)));
evalcond[1]=((((-1.0)*py))+(((-0.1215)*x1308))+(((2.86e-6)*x1307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1309=((1.0)*sj5);
IkReal x1310=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1309)));
j4eval[0]=x1310;
j4eval[1]=IKsign(x1310);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1309)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1311=cj5*cj5;
IkReal x1312=((1.0)*r21);
IkReal x1313=(cj5*sj5);
IkReal x1314=(((r00*r20*x1311))+(((-1.0)*r00*x1312*x1313))+(((-1.0)*r01*r20*x1313))+((r01*r21))+(((-1.0)*r01*x1311*x1312))+((r02*r22)));
j4eval[0]=x1314;
j4eval[1]=IKsign(x1314);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x1312)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1315=cj5*cj5;
IkReal x1316=(cj5*r20);
IkReal x1317=((1.0)*sj5);
IkReal x1318=(r11*r21);
IkReal x1319=(x1318+(((-1.0)*x1315*x1318))+(((-1.0)*r11*x1316*x1317))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1317))+((r10*r20*x1315)));
j4eval[0]=x1319;
j4eval[1]=IKsign(x1319);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x1317))+((sj0*x1316))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1320=cj5*cj5;
IkReal x1321=(cj5*r20);
IkReal x1322=((1.0)*sj5);
IkReal x1323=(r11*r21);
CheckValue<IkReal> x1324=IKPowWithIntegerCheck(IKsign((x1323+(((-1.0)*x1320*x1323))+(((-1.0)*r11*x1321*x1322))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1322))+((r10*r20*x1320)))),-1);
if(!x1324.valid){
continue;
}
CheckValue<IkReal> x1325 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1322))+((sj0*x1321)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1324.value)))+(x1325.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1326=IKsin(j4);
IkReal x1327=IKcos(j4);
IkReal x1328=(cj5*r00);
IkReal x1329=(r11*sj5);
IkReal x1330=(r01*sj5);
IkReal x1331=(cj5*r20);
IkReal x1332=(r21*sj5);
IkReal x1333=(cj5*r10);
IkReal x1334=((1.0)*x1327);
IkReal x1335=((1.0)*x1326);
evalcond[0]=((((-1.0)*r22*x1334))+((x1326*x1331))+(((-1.0)*x1332*x1335)));
evalcond[1]=((((-1.0)*r22*x1335))+(((-1.0)*x1331*x1334))+((x1327*x1332)));
evalcond[2]=(sj0+(((-1.0)*x1330*x1335))+((x1326*x1328))+(((-1.0)*r02*x1334)));
evalcond[3]=(cj0+(((-1.0)*x1328*x1334))+((x1327*x1330))+(((-1.0)*r02*x1335)));
evalcond[4]=(sj0+((x1327*x1329))+(((-1.0)*x1333*x1334))+(((-1.0)*r12*x1335)));
evalcond[5]=((((-1.0)*x1329*x1335))+((x1326*x1333))+(((-1.0)*r12*x1334))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1336=cj5*cj5;
IkReal x1337=((1.0)*r21);
IkReal x1338=(cj5*sj5);
CheckValue<IkReal> x1339=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x1336*x1337))+(((-1.0)*r01*r20*x1338))+(((-1.0)*r00*x1337*x1338))+((r00*r20*x1336))+((r02*r22)))),-1);
if(!x1339.valid){
continue;
}
CheckValue<IkReal> x1340 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x1337))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1339.value)))+(x1340.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1341=IKsin(j4);
IkReal x1342=IKcos(j4);
IkReal x1343=(cj5*r00);
IkReal x1344=(r11*sj5);
IkReal x1345=(r01*sj5);
IkReal x1346=(cj5*r20);
IkReal x1347=(r21*sj5);
IkReal x1348=(cj5*r10);
IkReal x1349=((1.0)*x1342);
IkReal x1350=((1.0)*x1341);
evalcond[0]=((((-1.0)*x1347*x1350))+((x1341*x1346))+(((-1.0)*r22*x1349)));
evalcond[1]=((((-1.0)*x1346*x1349))+(((-1.0)*r22*x1350))+((x1342*x1347)));
evalcond[2]=(sj0+(((-1.0)*x1345*x1350))+(((-1.0)*r02*x1349))+((x1341*x1343)));
evalcond[3]=(cj0+(((-1.0)*r02*x1350))+((x1342*x1345))+(((-1.0)*x1343*x1349)));
evalcond[4]=((((-1.0)*r12*x1350))+sj0+(((-1.0)*x1348*x1349))+((x1342*x1344)));
evalcond[5]=((((-1.0)*r12*x1349))+((x1341*x1348))+(((-1.0)*x1344*x1350))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1351=((1.0)*sj5);
CheckValue<IkReal> x1352 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1351)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1352.valid){
continue;
}
CheckValue<IkReal> x1353=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1351)))),-1);
if(!x1353.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1352.value)+(((1.5707963267949)*(x1353.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1354=IKsin(j4);
IkReal x1355=IKcos(j4);
IkReal x1356=(cj5*r00);
IkReal x1357=(r11*sj5);
IkReal x1358=(r01*sj5);
IkReal x1359=(cj5*r20);
IkReal x1360=(r21*sj5);
IkReal x1361=(cj5*r10);
IkReal x1362=((1.0)*x1355);
IkReal x1363=((1.0)*x1354);
evalcond[0]=(((x1354*x1359))+(((-1.0)*r22*x1362))+(((-1.0)*x1360*x1363)));
evalcond[1]=(((x1355*x1360))+(((-1.0)*x1359*x1362))+(((-1.0)*r22*x1363)));
evalcond[2]=(sj0+(((-1.0)*r02*x1362))+((x1354*x1356))+(((-1.0)*x1358*x1363)));
evalcond[3]=(((x1355*x1358))+cj0+(((-1.0)*r02*x1363))+(((-1.0)*x1356*x1362)));
evalcond[4]=(((x1355*x1357))+sj0+(((-1.0)*r12*x1363))+(((-1.0)*x1361*x1362)));
evalcond[5]=((((-1.0)*r12*x1362))+((x1354*x1361))+(((-1.0)*x1357*x1363))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((8.23045267033672)*px))+(((0.000193737404421095)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-8.23045267033672)*py))+(((0.000193737404421095)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.23045267033672)*px))+(((0.000193737404421095)*py))))+IKsqr(((((-8.23045267033672)*py))+(((0.000193737404421095)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((8.23045267033672)*px))+(((0.000193737404421095)*py))), ((((-8.23045267033672)*py))+(((0.000193737404421095)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1364=IKsin(j0);
IkReal x1365=IKcos(j0);
evalcond[0]=((((2.86e-6)*x1365))+(((0.1215)*x1364))+(((-1.0)*px)));
evalcond[1]=((((2.86e-6)*x1364))+(((-0.1215)*x1365))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1366=((1.0)*sj5);
IkReal x1367=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1366)));
j4eval[0]=x1367;
j4eval[1]=IKsign(x1367);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1366)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1368=((1.0)*sj5);
IkReal x1369=((((-1.0)*r00*x1368))+(((-1.0)*cj5*r01)));
j4eval[0]=x1369;
j4eval[1]=IKsign(x1369);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1368))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1370=cj5*cj5;
IkReal x1371=((1.0)*r21);
IkReal x1372=(cj5*sj5);
IkReal x1373=((1.0)*r20);
IkReal x1374=((((-1.0)*r00*x1371*x1372))+((r00*r20*x1370))+((r01*r21))+(((-1.0)*r01*x1370*x1371))+((r02*r22))+(((-1.0)*r01*x1372*x1373)));
j4eval[0]=x1374;
j4eval[1]=IKsign(x1374);
j4eval[2]=((IKabs(((((-1.0)*cj5*sj0*x1373))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1375=cj5*cj5;
IkReal x1376=((1.0)*r21);
IkReal x1377=(cj5*sj5);
IkReal x1378=((1.0)*r20);
CheckValue<IkReal> x1379 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*sj0*x1378))+((r21*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1379.valid){
continue;
}
CheckValue<IkReal> x1380=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1377*x1378))+((r00*r20*x1375))+((r01*r21))+((r02*r22))+(((-1.0)*r00*x1376*x1377))+(((-1.0)*r01*x1375*x1376)))),-1);
if(!x1380.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1379.value)+(((1.5707963267949)*(x1380.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1381=IKsin(j4);
IkReal x1382=IKcos(j4);
IkReal x1383=((1.0)*cj0);
IkReal x1384=(cj5*r00);
IkReal x1385=(r11*sj5);
IkReal x1386=(r01*sj5);
IkReal x1387=(cj5*r20);
IkReal x1388=(r21*sj5);
IkReal x1389=(cj5*r10);
IkReal x1390=((1.0)*x1382);
IkReal x1391=((1.0)*x1381);
evalcond[0]=(((x1381*x1387))+(((-1.0)*r22*x1390))+(((-1.0)*x1388*x1391)));
evalcond[1]=((((-1.0)*r22*x1391))+(((-1.0)*x1387*x1390))+((x1382*x1388)));
evalcond[2]=(((x1381*x1384))+sj0+(((-1.0)*r02*x1390))+(((-1.0)*x1386*x1391)));
evalcond[3]=((((-1.0)*x1383))+(((-1.0)*x1385*x1391))+((x1381*x1389))+(((-1.0)*r12*x1390)));
evalcond[4]=((((-1.0)*x1383))+(((-1.0)*x1384*x1390))+(((-1.0)*r02*x1391))+((x1382*x1386)));
evalcond[5]=((((-1.0)*r12*x1391))+(((-1.0)*sj0))+(((-1.0)*x1389*x1390))+((x1382*x1385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1392=((1.0)*sj5);
CheckValue<IkReal> x1393=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1392))+(((-1.0)*cj5*r01)))),-1);
if(!x1393.valid){
continue;
}
CheckValue<IkReal> x1394 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x1392))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1393.value)))+(x1394.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1395=IKsin(j4);
IkReal x1396=IKcos(j4);
IkReal x1397=((1.0)*cj0);
IkReal x1398=(cj5*r00);
IkReal x1399=(r11*sj5);
IkReal x1400=(r01*sj5);
IkReal x1401=(cj5*r20);
IkReal x1402=(r21*sj5);
IkReal x1403=(cj5*r10);
IkReal x1404=((1.0)*x1396);
IkReal x1405=((1.0)*x1395);
evalcond[0]=((((-1.0)*r22*x1404))+((x1395*x1401))+(((-1.0)*x1402*x1405)));
evalcond[1]=(((x1396*x1402))+(((-1.0)*r22*x1405))+(((-1.0)*x1401*x1404)));
evalcond[2]=(sj0+((x1395*x1398))+(((-1.0)*r02*x1404))+(((-1.0)*x1400*x1405)));
evalcond[3]=((((-1.0)*r12*x1404))+(((-1.0)*x1399*x1405))+((x1395*x1403))+(((-1.0)*x1397)));
evalcond[4]=((((-1.0)*x1398*x1404))+((x1396*x1400))+(((-1.0)*r02*x1405))+(((-1.0)*x1397)));
evalcond[5]=((((-1.0)*r12*x1405))+(((-1.0)*sj0))+((x1396*x1399))+(((-1.0)*x1403*x1404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1406=((1.0)*sj5);
CheckValue<IkReal> x1407=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1406)))),-1);
if(!x1407.valid){
continue;
}
CheckValue<IkReal> x1408 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1406))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1407.value)))+(x1408.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1409=IKsin(j4);
IkReal x1410=IKcos(j4);
IkReal x1411=((1.0)*cj0);
IkReal x1412=(cj5*r00);
IkReal x1413=(r11*sj5);
IkReal x1414=(r01*sj5);
IkReal x1415=(cj5*r20);
IkReal x1416=(r21*sj5);
IkReal x1417=(cj5*r10);
IkReal x1418=((1.0)*x1410);
IkReal x1419=((1.0)*x1409);
evalcond[0]=((((-1.0)*r22*x1418))+(((-1.0)*x1416*x1419))+((x1409*x1415)));
evalcond[1]=((((-1.0)*x1415*x1418))+(((-1.0)*r22*x1419))+((x1410*x1416)));
evalcond[2]=(sj0+(((-1.0)*x1414*x1419))+(((-1.0)*r02*x1418))+((x1409*x1412)));
evalcond[3]=((((-1.0)*x1411))+(((-1.0)*x1413*x1419))+(((-1.0)*r12*x1418))+((x1409*x1417)));
evalcond[4]=((((-1.0)*x1411))+(((-1.0)*x1412*x1418))+(((-1.0)*r02*x1419))+((x1410*x1414)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1417*x1418))+((x1410*x1413))+(((-1.0)*r12*x1419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.670435364062589)*px))+(((-2.25133359547376)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.670435364062589)*py))+(((-2.25133359547376)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.670435364062589)*px))+(((-2.25133359547376)*py))))+IKsqr(((((-0.670435364062589)*py))+(((-2.25133359547376)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.670435364062589)*px))+(((-2.25133359547376)*py))), ((((-0.670435364062589)*py))+(((-2.25133359547376)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1420=IKcos(j0);
IkReal x1421=IKsin(j0);
evalcond[0]=((((-0.40799911)*x1420))+(((-1.0)*px))+(((0.1215)*x1421)));
evalcond[1]=((((-0.40799911)*x1421))+(((-1.0)*py))+(((-0.1215)*x1420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1422=((1.0)*sj5);
IkReal x1423=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1422)));
j4eval[0]=x1423;
j4eval[1]=IKsign(x1423);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1422)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1424=cj5*cj5;
IkReal x1425=((1.0)*r21);
IkReal x1426=(cj5*sj5);
IkReal x1427=((((-1.0)*r00*x1425*x1426))+(((-1.0)*r01*x1424*x1425))+((r00*r20*x1424))+(((-1.0)*r01*r20*x1426))+((r01*r21))+((r02*r22)));
j4eval[0]=x1427;
j4eval[1]=IKsign(x1427);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x1425))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1428=cj5*cj5;
IkReal x1429=(cj5*r20);
IkReal x1430=((1.0)*sj5);
IkReal x1431=(r11*r21);
IkReal x1432=((((-1.0)*x1428*x1431))+(((-1.0)*r11*x1429*x1430))+((r12*r22))+x1431+(((-1.0)*cj5*r10*r21*x1430))+((r10*r20*x1428)));
j4eval[0]=x1432;
j4eval[1]=IKsign(x1432);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x1430))+((sj0*x1429))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1433=cj5*cj5;
IkReal x1434=(cj5*r20);
IkReal x1435=((1.0)*sj5);
IkReal x1436=(r11*r21);
CheckValue<IkReal> x1437=IKPowWithIntegerCheck(IKsign((((r10*r20*x1433))+((r12*r22))+(((-1.0)*r11*x1434*x1435))+x1436+(((-1.0)*x1433*x1436))+(((-1.0)*cj5*r10*r21*x1435)))),-1);
if(!x1437.valid){
continue;
}
CheckValue<IkReal> x1438 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1435))+((sj0*x1434)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1437.value)))+(x1438.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1439=IKsin(j4);
IkReal x1440=IKcos(j4);
IkReal x1441=(cj5*r00);
IkReal x1442=(r11*sj5);
IkReal x1443=(r01*sj5);
IkReal x1444=(cj5*r20);
IkReal x1445=(r21*sj5);
IkReal x1446=(cj5*r10);
IkReal x1447=((1.0)*x1440);
IkReal x1448=((1.0)*x1439);
evalcond[0]=((((-1.0)*r22*x1447))+((x1439*x1444))+(((-1.0)*x1445*x1448)));
evalcond[1]=((((-1.0)*r22*x1448))+((x1440*x1445))+(((-1.0)*x1444*x1447)));
evalcond[2]=(sj0+((x1439*x1441))+(((-1.0)*r02*x1447))+(((-1.0)*x1443*x1448)));
evalcond[3]=(cj0+((x1440*x1443))+(((-1.0)*x1441*x1447))+(((-1.0)*r02*x1448)));
evalcond[4]=((((-1.0)*x1446*x1447))+sj0+((x1440*x1442))+(((-1.0)*r12*x1448)));
evalcond[5]=(((x1439*x1446))+(((-1.0)*r12*x1447))+(((-1.0)*x1442*x1448))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1449=cj5*cj5;
IkReal x1450=((1.0)*r21);
IkReal x1451=(cj5*sj5);
CheckValue<IkReal> x1452 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x1450))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1452.valid){
continue;
}
CheckValue<IkReal> x1453=IKPowWithIntegerCheck(IKsign((((r00*r20*x1449))+((r01*r21))+(((-1.0)*r01*x1449*x1450))+(((-1.0)*r01*r20*x1451))+(((-1.0)*r00*x1450*x1451))+((r02*r22)))),-1);
if(!x1453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1452.value)+(((1.5707963267949)*(x1453.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1454=IKsin(j4);
IkReal x1455=IKcos(j4);
IkReal x1456=(cj5*r00);
IkReal x1457=(r11*sj5);
IkReal x1458=(r01*sj5);
IkReal x1459=(cj5*r20);
IkReal x1460=(r21*sj5);
IkReal x1461=(cj5*r10);
IkReal x1462=((1.0)*x1455);
IkReal x1463=((1.0)*x1454);
evalcond[0]=(((x1454*x1459))+(((-1.0)*r22*x1462))+(((-1.0)*x1460*x1463)));
evalcond[1]=((((-1.0)*x1459*x1462))+(((-1.0)*r22*x1463))+((x1455*x1460)));
evalcond[2]=(sj0+(((-1.0)*x1458*x1463))+(((-1.0)*r02*x1462))+((x1454*x1456)));
evalcond[3]=(((x1455*x1458))+(((-1.0)*r02*x1463))+cj0+(((-1.0)*x1456*x1462)));
evalcond[4]=(((x1455*x1457))+sj0+(((-1.0)*x1461*x1462))+(((-1.0)*r12*x1463)));
evalcond[5]=(((x1454*x1461))+(((-1.0)*x1457*x1463))+(((-1.0)*r12*x1462))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1464=((1.0)*sj5);
CheckValue<IkReal> x1465=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1464)))),-1);
if(!x1465.valid){
continue;
}
CheckValue<IkReal> x1466 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1464))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1466.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1465.value)))+(x1466.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1467=IKsin(j4);
IkReal x1468=IKcos(j4);
IkReal x1469=(cj5*r00);
IkReal x1470=(r11*sj5);
IkReal x1471=(r01*sj5);
IkReal x1472=(cj5*r20);
IkReal x1473=(r21*sj5);
IkReal x1474=(cj5*r10);
IkReal x1475=((1.0)*x1468);
IkReal x1476=((1.0)*x1467);
evalcond[0]=((((-1.0)*r22*x1475))+((x1467*x1472))+(((-1.0)*x1473*x1476)));
evalcond[1]=((((-1.0)*r22*x1476))+((x1468*x1473))+(((-1.0)*x1472*x1475)));
evalcond[2]=(sj0+(((-1.0)*x1471*x1476))+(((-1.0)*r02*x1475))+((x1467*x1469)));
evalcond[3]=(cj0+(((-1.0)*x1469*x1475))+(((-1.0)*r02*x1476))+((x1468*x1471)));
evalcond[4]=(sj0+(((-1.0)*r12*x1476))+(((-1.0)*x1474*x1475))+((x1468*x1470)));
evalcond[5]=((((-1.0)*x1470*x1476))+((x1467*x1474))+(((-1.0)*r12*x1475))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.670435364062589)*px))+(((-2.25133359547376)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.670435364062589)*py))+(((-2.25133359547376)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.670435364062589)*px))+(((-2.25133359547376)*py))))+IKsqr(((((-0.670435364062589)*py))+(((-2.25133359547376)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.670435364062589)*px))+(((-2.25133359547376)*py))), ((((-0.670435364062589)*py))+(((-2.25133359547376)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1477=IKcos(j0);
IkReal x1478=IKsin(j0);
evalcond[0]=((((-0.40799911)*x1477))+(((0.1215)*x1478))+(((-1.0)*px)));
evalcond[1]=((((-0.40799911)*x1478))+(((-0.1215)*x1477))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1479=((1.0)*sj5);
IkReal x1480=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1479)));
j4eval[0]=x1480;
j4eval[1]=IKsign(x1480);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1479))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1481=((1.0)*sj5);
IkReal x1482=((((-1.0)*r00*x1481))+(((-1.0)*cj5*r01)));
j4eval[0]=x1482;
j4eval[1]=IKsign(x1482);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1481))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1483=cj5*cj5;
IkReal x1484=((1.0)*r21);
IkReal x1485=(cj5*sj5);
IkReal x1486=((1.0)*r20);
IkReal x1487=((((-1.0)*r01*x1485*x1486))+((r01*r21))+(((-1.0)*r00*x1484*x1485))+((r00*r20*x1483))+(((-1.0)*r01*x1483*x1484))+((r02*r22)));
j4eval[0]=x1487;
j4eval[1]=IKsign(x1487);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x1486))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1488=cj5*cj5;
IkReal x1489=((1.0)*r21);
IkReal x1490=(cj5*sj5);
IkReal x1491=((1.0)*r20);
CheckValue<IkReal> x1492 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*sj0*x1491))+((r21*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1492.valid){
continue;
}
CheckValue<IkReal> x1493=IKPowWithIntegerCheck(IKsign((((r01*r21))+((r00*r20*x1488))+(((-1.0)*r01*x1490*x1491))+(((-1.0)*r01*x1488*x1489))+((r02*r22))+(((-1.0)*r00*x1489*x1490)))),-1);
if(!x1493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1492.value)+(((1.5707963267949)*(x1493.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1494=IKsin(j4);
IkReal x1495=IKcos(j4);
IkReal x1496=((1.0)*cj0);
IkReal x1497=(cj5*r00);
IkReal x1498=(r11*sj5);
IkReal x1499=(r01*sj5);
IkReal x1500=(cj5*r20);
IkReal x1501=(r21*sj5);
IkReal x1502=(cj5*r10);
IkReal x1503=((1.0)*x1495);
IkReal x1504=((1.0)*x1494);
evalcond[0]=(((x1494*x1500))+(((-1.0)*r22*x1503))+(((-1.0)*x1501*x1504)));
evalcond[1]=((((-1.0)*r22*x1504))+((x1495*x1501))+(((-1.0)*x1500*x1503)));
evalcond[2]=((((-1.0)*x1499*x1504))+sj0+((x1494*x1497))+(((-1.0)*r02*x1503)));
evalcond[3]=(((x1494*x1502))+(((-1.0)*x1498*x1504))+(((-1.0)*x1496))+(((-1.0)*r12*x1503)));
evalcond[4]=((((-1.0)*x1496))+((x1495*x1499))+(((-1.0)*r02*x1504))+(((-1.0)*x1497*x1503)));
evalcond[5]=((((-1.0)*sj0))+((x1495*x1498))+(((-1.0)*x1502*x1503))+(((-1.0)*r12*x1504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1505=((1.0)*sj5);
CheckValue<IkReal> x1506=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1505))+(((-1.0)*cj5*r01)))),-1);
if(!x1506.valid){
continue;
}
CheckValue<IkReal> x1507 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x1505))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1507.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1506.value)))+(x1507.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1508=IKsin(j4);
IkReal x1509=IKcos(j4);
IkReal x1510=((1.0)*cj0);
IkReal x1511=(cj5*r00);
IkReal x1512=(r11*sj5);
IkReal x1513=(r01*sj5);
IkReal x1514=(cj5*r20);
IkReal x1515=(r21*sj5);
IkReal x1516=(cj5*r10);
IkReal x1517=((1.0)*x1509);
IkReal x1518=((1.0)*x1508);
evalcond[0]=((((-1.0)*x1515*x1518))+((x1508*x1514))+(((-1.0)*r22*x1517)));
evalcond[1]=(((x1509*x1515))+(((-1.0)*r22*x1518))+(((-1.0)*x1514*x1517)));
evalcond[2]=(((x1508*x1511))+sj0+(((-1.0)*x1513*x1518))+(((-1.0)*r02*x1517)));
evalcond[3]=(((x1508*x1516))+(((-1.0)*x1510))+(((-1.0)*x1512*x1518))+(((-1.0)*r12*x1517)));
evalcond[4]=(((x1509*x1513))+(((-1.0)*x1510))+(((-1.0)*r02*x1518))+(((-1.0)*x1511*x1517)));
evalcond[5]=(((x1509*x1512))+(((-1.0)*x1516*x1517))+(((-1.0)*sj0))+(((-1.0)*r12*x1518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1519=((1.0)*sj5);
CheckValue<IkReal> x1520=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1519)))),-1);
if(!x1520.valid){
continue;
}
CheckValue<IkReal> x1521 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1519)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1521.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1520.value)))+(x1521.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1522=IKsin(j4);
IkReal x1523=IKcos(j4);
IkReal x1524=((1.0)*cj0);
IkReal x1525=(cj5*r00);
IkReal x1526=(r11*sj5);
IkReal x1527=(r01*sj5);
IkReal x1528=(cj5*r20);
IkReal x1529=(r21*sj5);
IkReal x1530=(cj5*r10);
IkReal x1531=((1.0)*x1523);
IkReal x1532=((1.0)*x1522);
evalcond[0]=((((-1.0)*x1529*x1532))+((x1522*x1528))+(((-1.0)*r22*x1531)));
evalcond[1]=((((-1.0)*r22*x1532))+((x1523*x1529))+(((-1.0)*x1528*x1531)));
evalcond[2]=(sj0+((x1522*x1525))+(((-1.0)*r02*x1531))+(((-1.0)*x1527*x1532)));
evalcond[3]=((((-1.0)*r12*x1531))+(((-1.0)*x1524))+((x1522*x1530))+(((-1.0)*x1526*x1532)));
evalcond[4]=((((-1.0)*x1525*x1531))+(((-1.0)*x1524))+((x1523*x1527))+(((-1.0)*r02*x1532)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x1532))+(((-1.0)*x1530*x1531))+((x1523*x1526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-7.31595793266383e-5)*py))+(((8.23045267424681)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-8.23045267424681)*py))+(((-7.31595793266383e-5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.31595793266383e-5)*py))+(((8.23045267424681)*px))))+IKsqr(((((-8.23045267424681)*py))+(((-7.31595793266383e-5)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-7.31595793266383e-5)*py))+(((8.23045267424681)*px))), ((((-8.23045267424681)*py))+(((-7.31595793266383e-5)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1533=IKcos(j0);
IkReal x1534=IKsin(j0);
evalcond[0]=((((-1.08e-6)*x1533))+(((-1.0)*px))+(((0.1215)*x1534)));
evalcond[1]=((((-1.08e-6)*x1534))+(((-1.0)*py))+(((-0.1215)*x1533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1535=((1.0)*sj5);
IkReal x1536=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1535)));
j4eval[0]=x1536;
j4eval[1]=IKsign(x1536);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1535))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1537=((1.0)*sj5);
IkReal x1538=((((-1.0)*r00*x1537))+(((-1.0)*cj5*r01)));
j4eval[0]=x1538;
j4eval[1]=IKsign(x1538);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1537))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1539=cj5*cj5;
IkReal x1540=((1.0)*r21);
IkReal x1541=(cj5*sj5);
IkReal x1542=((1.0)*r20);
IkReal x1543=(((r01*r21))+(((-1.0)*r01*x1539*x1540))+(((-1.0)*r01*x1541*x1542))+((r02*r22))+(((-1.0)*r00*x1540*x1541))+((r00*r20*x1539)));
j4eval[0]=x1543;
j4eval[1]=IKsign(x1543);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*cj5*sj0*x1542))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1544=cj5*cj5;
IkReal x1545=((1.0)*r21);
IkReal x1546=(cj5*sj5);
IkReal x1547=((1.0)*r20);
CheckValue<IkReal> x1548=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x1546*x1547))+(((-1.0)*r01*x1544*x1545))+((r00*r20*x1544))+(((-1.0)*r00*x1545*x1546))+((r02*r22)))),-1);
if(!x1548.valid){
continue;
}
CheckValue<IkReal> x1549 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*sj0*x1547))+((r21*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1548.value)))+(x1549.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1550=IKsin(j4);
IkReal x1551=IKcos(j4);
IkReal x1552=((1.0)*cj0);
IkReal x1553=(cj5*r00);
IkReal x1554=(r11*sj5);
IkReal x1555=(r01*sj5);
IkReal x1556=(cj5*r20);
IkReal x1557=(r21*sj5);
IkReal x1558=(cj5*r10);
IkReal x1559=((1.0)*x1551);
IkReal x1560=((1.0)*x1550);
evalcond[0]=((((-1.0)*r22*x1559))+((x1550*x1556))+(((-1.0)*x1557*x1560)));
evalcond[1]=(((x1551*x1557))+(((-1.0)*r22*x1560))+(((-1.0)*x1556*x1559)));
evalcond[2]=(sj0+(((-1.0)*x1555*x1560))+((x1550*x1553))+(((-1.0)*r02*x1559)));
evalcond[3]=(((x1550*x1558))+(((-1.0)*r12*x1559))+(((-1.0)*x1552))+(((-1.0)*x1554*x1560)));
evalcond[4]=(((x1551*x1555))+(((-1.0)*r02*x1560))+(((-1.0)*x1553*x1559))+(((-1.0)*x1552)));
evalcond[5]=(((x1551*x1554))+(((-1.0)*x1558*x1559))+(((-1.0)*sj0))+(((-1.0)*r12*x1560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1561=((1.0)*sj5);
CheckValue<IkReal> x1562=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1561))+(((-1.0)*cj5*r01)))),-1);
if(!x1562.valid){
continue;
}
CheckValue<IkReal> x1563 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x1561)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1562.value)))+(x1563.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1564=IKsin(j4);
IkReal x1565=IKcos(j4);
IkReal x1566=((1.0)*cj0);
IkReal x1567=(cj5*r00);
IkReal x1568=(r11*sj5);
IkReal x1569=(r01*sj5);
IkReal x1570=(cj5*r20);
IkReal x1571=(r21*sj5);
IkReal x1572=(cj5*r10);
IkReal x1573=((1.0)*x1565);
IkReal x1574=((1.0)*x1564);
evalcond[0]=((((-1.0)*x1571*x1574))+(((-1.0)*r22*x1573))+((x1564*x1570)));
evalcond[1]=((((-1.0)*x1570*x1573))+(((-1.0)*r22*x1574))+((x1565*x1571)));
evalcond[2]=((((-1.0)*r02*x1573))+sj0+(((-1.0)*x1569*x1574))+((x1564*x1567)));
evalcond[3]=((((-1.0)*x1568*x1574))+(((-1.0)*r12*x1573))+(((-1.0)*x1566))+((x1564*x1572)));
evalcond[4]=((((-1.0)*r02*x1574))+(((-1.0)*x1567*x1573))+(((-1.0)*x1566))+((x1565*x1569)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1572*x1573))+(((-1.0)*r12*x1574))+((x1565*x1568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1575=((1.0)*sj5);
CheckValue<IkReal> x1576=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1575)))),-1);
if(!x1576.valid){
continue;
}
CheckValue<IkReal> x1577 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1575)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1577.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1576.value)))+(x1577.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1578=IKsin(j4);
IkReal x1579=IKcos(j4);
IkReal x1580=((1.0)*cj0);
IkReal x1581=(cj5*r00);
IkReal x1582=(r11*sj5);
IkReal x1583=(r01*sj5);
IkReal x1584=(cj5*r20);
IkReal x1585=(r21*sj5);
IkReal x1586=(cj5*r10);
IkReal x1587=((1.0)*x1579);
IkReal x1588=((1.0)*x1578);
evalcond[0]=((((-1.0)*x1585*x1588))+(((-1.0)*r22*x1587))+((x1578*x1584)));
evalcond[1]=((((-1.0)*x1584*x1587))+(((-1.0)*r22*x1588))+((x1579*x1585)));
evalcond[2]=(sj0+(((-1.0)*r02*x1587))+((x1578*x1581))+(((-1.0)*x1583*x1588)));
evalcond[3]=((((-1.0)*x1580))+((x1578*x1586))+(((-1.0)*r12*x1587))+(((-1.0)*x1582*x1588)));
evalcond[4]=((((-1.0)*x1580))+(((-1.0)*r02*x1588))+(((-1.0)*x1581*x1587))+((x1579*x1583)));
evalcond[5]=((((-1.0)*sj0))+((x1579*x1582))+(((-1.0)*x1586*x1587))+(((-1.0)*r12*x1588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-7.31595793266383e-5)*py))+(((8.23045267424681)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-8.23045267424681)*py))+(((-7.31595793266383e-5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.31595793266383e-5)*py))+(((8.23045267424681)*px))))+IKsqr(((((-8.23045267424681)*py))+(((-7.31595793266383e-5)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-7.31595793266383e-5)*py))+(((8.23045267424681)*px))), ((((-8.23045267424681)*py))+(((-7.31595793266383e-5)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1589=IKcos(j0);
IkReal x1590=IKsin(j0);
evalcond[0]=((((-1.08e-6)*x1589))+(((-1.0)*px))+(((0.1215)*x1590)));
evalcond[1]=((((-1.08e-6)*x1590))+(((-1.0)*py))+(((-0.1215)*x1589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1591=((1.0)*sj5);
IkReal x1592=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1591)));
j4eval[0]=x1592;
j4eval[1]=IKsign(x1592);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1591))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1593=cj5*cj5;
IkReal x1594=((1.0)*r21);
IkReal x1595=(cj5*sj5);
IkReal x1596=(((r01*r21))+(((-1.0)*r01*x1593*x1594))+(((-1.0)*r01*r20*x1595))+(((-1.0)*r00*x1594*x1595))+((r00*r20*x1593))+((r02*r22)));
j4eval[0]=x1596;
j4eval[1]=IKsign(x1596);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x1594))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1597=cj5*cj5;
IkReal x1598=(cj5*r20);
IkReal x1599=((1.0)*sj5);
IkReal x1600=(r11*r21);
IkReal x1601=(((r10*r20*x1597))+x1600+((r12*r22))+(((-1.0)*cj5*r10*r21*x1599))+(((-1.0)*r11*x1598*x1599))+(((-1.0)*x1597*x1600)));
j4eval[0]=x1601;
j4eval[1]=IKsign(x1601);
j4eval[2]=((IKabs((((sj0*x1598))+(((-1.0)*r21*sj0*x1599)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1602=cj5*cj5;
IkReal x1603=(cj5*r20);
IkReal x1604=((1.0)*sj5);
IkReal x1605=(r11*r21);
CheckValue<IkReal> x1606 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1604))+((sj0*x1603)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1606.valid){
continue;
}
CheckValue<IkReal> x1607=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1603*x1604))+((r10*r20*x1602))+x1605+((r12*r22))+(((-1.0)*x1602*x1605))+(((-1.0)*cj5*r10*r21*x1604)))),-1);
if(!x1607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1606.value)+(((1.5707963267949)*(x1607.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1608=IKsin(j4);
IkReal x1609=IKcos(j4);
IkReal x1610=(cj5*r00);
IkReal x1611=(r11*sj5);
IkReal x1612=(r01*sj5);
IkReal x1613=(cj5*r20);
IkReal x1614=(r21*sj5);
IkReal x1615=(cj5*r10);
IkReal x1616=((1.0)*x1609);
IkReal x1617=((1.0)*x1608);
evalcond[0]=(((x1608*x1613))+(((-1.0)*r22*x1616))+(((-1.0)*x1614*x1617)));
evalcond[1]=(((x1609*x1614))+(((-1.0)*r22*x1617))+(((-1.0)*x1613*x1616)));
evalcond[2]=(sj0+(((-1.0)*r02*x1616))+((x1608*x1610))+(((-1.0)*x1612*x1617)));
evalcond[3]=(cj0+(((-1.0)*x1610*x1616))+(((-1.0)*r02*x1617))+((x1609*x1612)));
evalcond[4]=((((-1.0)*r12*x1617))+sj0+((x1609*x1611))+(((-1.0)*x1615*x1616)));
evalcond[5]=((((-1.0)*r12*x1616))+(((-1.0)*x1611*x1617))+((x1608*x1615))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1618=cj5*cj5;
IkReal x1619=((1.0)*r21);
IkReal x1620=(cj5*sj5);
CheckValue<IkReal> x1621=IKPowWithIntegerCheck(IKsign((((r00*r20*x1618))+((r01*r21))+(((-1.0)*r00*x1619*x1620))+(((-1.0)*r01*x1618*x1619))+(((-1.0)*r01*r20*x1620))+((r02*r22)))),-1);
if(!x1621.valid){
continue;
}
CheckValue<IkReal> x1622 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x1619)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1622.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1621.value)))+(x1622.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1623=IKsin(j4);
IkReal x1624=IKcos(j4);
IkReal x1625=(cj5*r00);
IkReal x1626=(r11*sj5);
IkReal x1627=(r01*sj5);
IkReal x1628=(cj5*r20);
IkReal x1629=(r21*sj5);
IkReal x1630=(cj5*r10);
IkReal x1631=((1.0)*x1624);
IkReal x1632=((1.0)*x1623);
evalcond[0]=((((-1.0)*r22*x1631))+((x1623*x1628))+(((-1.0)*x1629*x1632)));
evalcond[1]=((((-1.0)*r22*x1632))+(((-1.0)*x1628*x1631))+((x1624*x1629)));
evalcond[2]=(sj0+((x1623*x1625))+(((-1.0)*r02*x1631))+(((-1.0)*x1627*x1632)));
evalcond[3]=(cj0+(((-1.0)*x1625*x1631))+((x1624*x1627))+(((-1.0)*r02*x1632)));
evalcond[4]=(sj0+(((-1.0)*r12*x1632))+(((-1.0)*x1630*x1631))+((x1624*x1626)));
evalcond[5]=((((-1.0)*r12*x1631))+((x1623*x1630))+(((-1.0)*x1626*x1632))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1633=((1.0)*sj5);
CheckValue<IkReal> x1634 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1633)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1634.valid){
continue;
}
CheckValue<IkReal> x1635=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1633)))),-1);
if(!x1635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1634.value)+(((1.5707963267949)*(x1635.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1636=IKsin(j4);
IkReal x1637=IKcos(j4);
IkReal x1638=(cj5*r00);
IkReal x1639=(r11*sj5);
IkReal x1640=(r01*sj5);
IkReal x1641=(cj5*r20);
IkReal x1642=(r21*sj5);
IkReal x1643=(cj5*r10);
IkReal x1644=((1.0)*x1637);
IkReal x1645=((1.0)*x1636);
evalcond[0]=(((x1636*x1641))+(((-1.0)*r22*x1644))+(((-1.0)*x1642*x1645)));
evalcond[1]=((((-1.0)*x1641*x1644))+((x1637*x1642))+(((-1.0)*r22*x1645)));
evalcond[2]=(sj0+((x1636*x1638))+(((-1.0)*x1640*x1645))+(((-1.0)*r02*x1644)));
evalcond[3]=(((x1637*x1640))+cj0+(((-1.0)*x1638*x1644))+(((-1.0)*r02*x1645)));
evalcond[4]=(((x1637*x1639))+sj0+(((-1.0)*r12*x1645))+(((-1.0)*x1643*x1644)));
evalcond[5]=(((x1636*x1643))+(((-1.0)*r12*x1644))+(((-1.0)*x1639*x1645))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.670429990723709)*px))+(((2.2513253736458)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.2513253736458)*px))+(((-0.670429990723709)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.670429990723709)*px))+(((2.2513253736458)*py))))+IKsqr(((((2.2513253736458)*px))+(((-0.670429990723709)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.670429990723709)*px))+(((2.2513253736458)*py))), ((((2.2513253736458)*px))+(((-0.670429990723709)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1646=IKsin(j0);
IkReal x1647=IKcos(j0);
evalcond[0]=((((0.40800089)*x1647))+(((0.1215)*x1646))+(((-1.0)*px)));
evalcond[1]=((((0.40800089)*x1646))+(((-1.0)*py))+(((-0.1215)*x1647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1648=((1.0)*sj5);
IkReal x1649=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1648)));
j4eval[0]=x1649;
j4eval[1]=IKsign(x1649);
j4eval[2]=((IKabs(((((-1.0)*r21*sj0*x1648))+((cj5*r20*sj0)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1650=((1.0)*sj5);
IkReal x1651=((((-1.0)*r00*x1650))+(((-1.0)*cj5*r01)));
j4eval[0]=x1651;
j4eval[1]=IKsign(x1651);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1650))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1652=cj5*cj5;
IkReal x1653=((1.0)*r21);
IkReal x1654=(cj5*sj5);
IkReal x1655=((1.0)*r20);
IkReal x1656=((((-1.0)*r01*x1652*x1653))+(((-1.0)*r01*x1654*x1655))+((r01*r21))+((r00*r20*x1652))+(((-1.0)*r00*x1653*x1654))+((r02*r22)));
j4eval[0]=x1656;
j4eval[1]=IKsign(x1656);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x1655))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1657=cj5*cj5;
IkReal x1658=((1.0)*r21);
IkReal x1659=(cj5*sj5);
IkReal x1660=((1.0)*r20);
CheckValue<IkReal> x1661=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1659*x1660))+((r01*r21))+(((-1.0)*r00*x1658*x1659))+((r00*r20*x1657))+((r02*r22))+(((-1.0)*r01*x1657*x1658)))),-1);
if(!x1661.valid){
continue;
}
CheckValue<IkReal> x1662 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x1660)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1661.value)))+(x1662.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1663=IKsin(j4);
IkReal x1664=IKcos(j4);
IkReal x1665=((1.0)*cj0);
IkReal x1666=(cj5*r00);
IkReal x1667=(r11*sj5);
IkReal x1668=(r01*sj5);
IkReal x1669=(cj5*r20);
IkReal x1670=(r21*sj5);
IkReal x1671=(cj5*r10);
IkReal x1672=((1.0)*x1664);
IkReal x1673=((1.0)*x1663);
evalcond[0]=((((-1.0)*x1670*x1673))+((x1663*x1669))+(((-1.0)*r22*x1672)));
evalcond[1]=((((-1.0)*x1669*x1672))+(((-1.0)*r22*x1673))+((x1664*x1670)));
evalcond[2]=(sj0+(((-1.0)*x1668*x1673))+(((-1.0)*r02*x1672))+((x1663*x1666)));
evalcond[3]=((((-1.0)*x1667*x1673))+(((-1.0)*r12*x1672))+(((-1.0)*x1665))+((x1663*x1671)));
evalcond[4]=((((-1.0)*r02*x1673))+(((-1.0)*x1665))+(((-1.0)*x1666*x1672))+((x1664*x1668)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1671*x1672))+(((-1.0)*r12*x1673))+((x1664*x1667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1674=((1.0)*sj5);
CheckValue<IkReal> x1675=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1674))+(((-1.0)*cj5*r01)))),-1);
if(!x1675.valid){
continue;
}
CheckValue<IkReal> x1676 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x1674)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1676.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1675.value)))+(x1676.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1677=IKsin(j4);
IkReal x1678=IKcos(j4);
IkReal x1679=((1.0)*cj0);
IkReal x1680=(cj5*r00);
IkReal x1681=(r11*sj5);
IkReal x1682=(r01*sj5);
IkReal x1683=(cj5*r20);
IkReal x1684=(r21*sj5);
IkReal x1685=(cj5*r10);
IkReal x1686=((1.0)*x1678);
IkReal x1687=((1.0)*x1677);
evalcond[0]=(((x1677*x1683))+(((-1.0)*r22*x1686))+(((-1.0)*x1684*x1687)));
evalcond[1]=((((-1.0)*x1683*x1686))+(((-1.0)*r22*x1687))+((x1678*x1684)));
evalcond[2]=(sj0+((x1677*x1680))+(((-1.0)*x1682*x1687))+(((-1.0)*r02*x1686)));
evalcond[3]=((((-1.0)*r12*x1686))+(((-1.0)*x1681*x1687))+((x1677*x1685))+(((-1.0)*x1679)));
evalcond[4]=((((-1.0)*x1680*x1686))+(((-1.0)*r02*x1687))+(((-1.0)*x1679))+((x1678*x1682)));
evalcond[5]=((((-1.0)*r12*x1687))+(((-1.0)*sj0))+(((-1.0)*x1685*x1686))+((x1678*x1681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1688=((1.0)*sj5);
CheckValue<IkReal> x1689=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1688)))),-1);
if(!x1689.valid){
continue;
}
CheckValue<IkReal> x1690 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1688)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1689.value)))+(x1690.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1691=IKsin(j4);
IkReal x1692=IKcos(j4);
IkReal x1693=((1.0)*cj0);
IkReal x1694=(cj5*r00);
IkReal x1695=(r11*sj5);
IkReal x1696=(r01*sj5);
IkReal x1697=(cj5*r20);
IkReal x1698=(r21*sj5);
IkReal x1699=(cj5*r10);
IkReal x1700=((1.0)*x1692);
IkReal x1701=((1.0)*x1691);
evalcond[0]=((((-1.0)*x1698*x1701))+((x1691*x1697))+(((-1.0)*r22*x1700)));
evalcond[1]=(((x1692*x1698))+(((-1.0)*r22*x1701))+(((-1.0)*x1697*x1700)));
evalcond[2]=(sj0+((x1691*x1694))+(((-1.0)*r02*x1700))+(((-1.0)*x1696*x1701)));
evalcond[3]=((((-1.0)*x1693))+((x1691*x1699))+(((-1.0)*x1695*x1701))+(((-1.0)*r12*x1700)));
evalcond[4]=((((-1.0)*x1693))+((x1692*x1696))+(((-1.0)*r02*x1701))+(((-1.0)*x1694*x1700)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1699*x1700))+((x1692*x1695))+(((-1.0)*r12*x1701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.670429990723709)*px))+(((2.2513253736458)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.2513253736458)*px))+(((-0.670429990723709)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.670429990723709)*px))+(((2.2513253736458)*py))))+IKsqr(((((2.2513253736458)*px))+(((-0.670429990723709)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.670429990723709)*px))+(((2.2513253736458)*py))), ((((2.2513253736458)*px))+(((-0.670429990723709)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1702=IKsin(j0);
IkReal x1703=IKcos(j0);
evalcond[0]=((((0.40800089)*x1703))+(((-1.0)*px))+(((0.1215)*x1702)));
evalcond[1]=((((0.40800089)*x1702))+(((-0.1215)*x1703))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1704=((1.0)*sj5);
IkReal x1705=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1704)));
j4eval[0]=x1705;
j4eval[1]=IKsign(x1705);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x1704))+((cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1706=cj5*cj5;
IkReal x1707=((1.0)*r21);
IkReal x1708=(cj5*sj5);
IkReal x1709=((((-1.0)*r00*x1707*x1708))+(((-1.0)*r01*x1706*x1707))+((r01*r21))+((r00*r20*x1706))+((r02*r22))+(((-1.0)*r01*r20*x1708)));
j4eval[0]=x1709;
j4eval[1]=IKsign(x1709);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x1707))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1710=cj5*cj5;
IkReal x1711=(cj5*r20);
IkReal x1712=((1.0)*sj5);
IkReal x1713=(r11*r21);
IkReal x1714=(x1713+((r10*r20*x1710))+((r12*r22))+(((-1.0)*r11*x1711*x1712))+(((-1.0)*x1710*x1713))+(((-1.0)*cj5*r10*r21*x1712)));
j4eval[0]=x1714;
j4eval[1]=IKsign(x1714);
j4eval[2]=((IKabs((((sj0*x1711))+(((-1.0)*r21*sj0*x1712)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1715=cj5*cj5;
IkReal x1716=(cj5*r20);
IkReal x1717=((1.0)*sj5);
IkReal x1718=(r11*r21);
CheckValue<IkReal> x1719=IKPowWithIntegerCheck(IKsign((x1718+(((-1.0)*r11*x1716*x1717))+((r10*r20*x1715))+(((-1.0)*x1715*x1718))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1717)))),-1);
if(!x1719.valid){
continue;
}
CheckValue<IkReal> x1720 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1716))+(((-1.0)*r21*sj0*x1717)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1720.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1719.value)))+(x1720.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1721=IKsin(j4);
IkReal x1722=IKcos(j4);
IkReal x1723=(cj5*r00);
IkReal x1724=(r11*sj5);
IkReal x1725=(r01*sj5);
IkReal x1726=(cj5*r20);
IkReal x1727=(r21*sj5);
IkReal x1728=(cj5*r10);
IkReal x1729=((1.0)*x1722);
IkReal x1730=((1.0)*x1721);
evalcond[0]=((((-1.0)*r22*x1729))+((x1721*x1726))+(((-1.0)*x1727*x1730)));
evalcond[1]=(((x1722*x1727))+(((-1.0)*x1726*x1729))+(((-1.0)*r22*x1730)));
evalcond[2]=(sj0+((x1721*x1723))+(((-1.0)*x1725*x1730))+(((-1.0)*r02*x1729)));
evalcond[3]=(((x1722*x1725))+cj0+(((-1.0)*x1723*x1729))+(((-1.0)*r02*x1730)));
evalcond[4]=(((x1722*x1724))+sj0+(((-1.0)*x1728*x1729))+(((-1.0)*r12*x1730)));
evalcond[5]=((((-1.0)*r12*x1729))+((x1721*x1728))+(((-1.0)*x1724*x1730))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1731=cj5*cj5;
IkReal x1732=((1.0)*r21);
IkReal x1733=(cj5*sj5);
CheckValue<IkReal> x1734 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x1732)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1734.valid){
continue;
}
CheckValue<IkReal> x1735=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*r20*x1733))+(((-1.0)*r01*x1731*x1732))+(((-1.0)*r00*x1732*x1733))+((r02*r22))+((r00*r20*x1731)))),-1);
if(!x1735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1734.value)+(((1.5707963267949)*(x1735.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1736=IKsin(j4);
IkReal x1737=IKcos(j4);
IkReal x1738=(cj5*r00);
IkReal x1739=(r11*sj5);
IkReal x1740=(r01*sj5);
IkReal x1741=(cj5*r20);
IkReal x1742=(r21*sj5);
IkReal x1743=(cj5*r10);
IkReal x1744=((1.0)*x1737);
IkReal x1745=((1.0)*x1736);
evalcond[0]=(((x1736*x1741))+(((-1.0)*r22*x1744))+(((-1.0)*x1742*x1745)));
evalcond[1]=((((-1.0)*x1741*x1744))+(((-1.0)*r22*x1745))+((x1737*x1742)));
evalcond[2]=(sj0+(((-1.0)*x1740*x1745))+((x1736*x1738))+(((-1.0)*r02*x1744)));
evalcond[3]=(cj0+(((-1.0)*x1738*x1744))+(((-1.0)*r02*x1745))+((x1737*x1740)));
evalcond[4]=((((-1.0)*r12*x1745))+sj0+((x1737*x1739))+(((-1.0)*x1743*x1744)));
evalcond[5]=(((x1736*x1743))+(((-1.0)*r12*x1744))+(((-1.0)*x1739*x1745))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1746=((1.0)*sj5);
CheckValue<IkReal> x1747=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1746)))),-1);
if(!x1747.valid){
continue;
}
CheckValue<IkReal> x1748 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1746)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1747.value)))+(x1748.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1749=IKsin(j4);
IkReal x1750=IKcos(j4);
IkReal x1751=(cj5*r00);
IkReal x1752=(r11*sj5);
IkReal x1753=(r01*sj5);
IkReal x1754=(cj5*r20);
IkReal x1755=(r21*sj5);
IkReal x1756=(cj5*r10);
IkReal x1757=((1.0)*x1750);
IkReal x1758=((1.0)*x1749);
evalcond[0]=(((x1749*x1754))+(((-1.0)*r22*x1757))+(((-1.0)*x1755*x1758)));
evalcond[1]=((((-1.0)*r22*x1758))+((x1750*x1755))+(((-1.0)*x1754*x1757)));
evalcond[2]=(sj0+((x1749*x1751))+(((-1.0)*x1753*x1758))+(((-1.0)*r02*x1757)));
evalcond[3]=(cj0+((x1750*x1753))+(((-1.0)*x1751*x1757))+(((-1.0)*r02*x1758)));
evalcond[4]=((((-1.0)*x1756*x1757))+sj0+(((-1.0)*r12*x1758))+((x1750*x1752)));
evalcond[5]=((((-1.0)*r12*x1757))+((x1749*x1756))+(((-1.0)*x1752*x1758))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1759=(cj5*r01);
IkReal x1760=(cj2*sj1);
IkReal x1761=((0.00394)*cj1);
IkReal x1762=(r00*sj5);
IkReal x1763=(cj1*sj2);
IkReal x1764=((816.0)*sj1);
IkReal x1765=((2000.0)*px);
CheckValue<IkReal> x1766=IKPowWithIntegerCheck(((((243.0)*x1763))+(((-243.0)*x1760))),-1);
if(!x1766.valid){
continue;
}
CheckValue<IkReal> x1767=IKPowWithIntegerCheck(((((-1.0)*x1760))+x1763),-1);
if(!x1767.valid){
continue;
}
if( IKabs(((x1766.value)*(((((-0.00178)*x1759))+((x1759*x1764))+(((957.0)*x1759*x1760))+(((-1.0)*x1759*x1761))+(((-1.0)*x1761*x1762))+(((-1.0)*x1760*x1765))+((x1762*x1764))+(((957.0)*x1760*x1762))+(((-0.00178)*x1762))+(((-957.0)*x1762*x1763))+(((-957.0)*x1759*x1763))+((x1763*x1765)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1767.value)*((x1762+x1759)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1766.value)*(((((-0.00178)*x1759))+((x1759*x1764))+(((957.0)*x1759*x1760))+(((-1.0)*x1759*x1761))+(((-1.0)*x1761*x1762))+(((-1.0)*x1760*x1765))+((x1762*x1764))+(((957.0)*x1760*x1762))+(((-0.00178)*x1762))+(((-957.0)*x1762*x1763))+(((-957.0)*x1759*x1763))+((x1763*x1765))))))+IKsqr(((x1767.value)*((x1762+x1759))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1766.value)*(((((-0.00178)*x1759))+((x1759*x1764))+(((957.0)*x1759*x1760))+(((-1.0)*x1759*x1761))+(((-1.0)*x1761*x1762))+(((-1.0)*x1760*x1765))+((x1762*x1764))+(((957.0)*x1760*x1762))+(((-0.00178)*x1762))+(((-957.0)*x1762*x1763))+(((-957.0)*x1759*x1763))+((x1763*x1765))))), ((x1767.value)*((x1762+x1759))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1768=IKcos(j0);
IkReal x1769=IKsin(j0);
IkReal x1770=(cj2*sj1);
IkReal x1771=(cj5*r01);
IkReal x1772=(cj5*r11);
IkReal x1773=(cj1*sj2);
IkReal x1774=((0.408)*sj1);
IkReal x1775=((1.0)*sj5);
IkReal x1776=((1.97e-6)*cj1);
IkReal x1777=((0.1025)*sj5);
IkReal x1778=((0.376)*x1769);
IkReal x1779=((0.376)*x1768);
evalcond[0]=((((-1.0)*x1771))+(((-1.0)*x1768*x1770))+(((-1.0)*r00*x1775))+((x1768*x1773)));
evalcond[1]=((((-1.0)*x1772))+(((-1.0)*r10*x1775))+(((-1.0)*x1769*x1770))+((x1769*x1773)));
evalcond[2]=((((8.9e-7)*x1768))+(((0.1025)*x1771))+((r00*x1777))+((x1773*x1779))+(((-1.0)*px))+(((-1.0)*x1770*x1779))+(((0.1215)*x1769))+(((-1.0)*x1768*x1774))+((x1768*x1776)));
evalcond[3]=((((8.9e-7)*x1769))+(((0.1025)*x1772))+(((-0.1215)*x1768))+((x1773*x1778))+((r10*x1777))+(((-1.0)*py))+(((-1.0)*x1770*x1778))+(((-1.0)*x1769*x1774))+((x1769*x1776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1780=((1.0)*sj5);
IkReal x1781=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1780)));
j4eval[0]=x1781;
j4eval[1]=IKsign(x1781);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1780))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1782=((1.0)*sj5);
IkReal x1783=((((-1.0)*r00*x1782))+(((-1.0)*cj5*r01)));
j4eval[0]=x1783;
j4eval[1]=IKsign(x1783);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x1782))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1784=((1.0)*sj5);
IkReal x1785=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x1785;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r11*sj0*x1784))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x1784))))));
j4eval[2]=IKsign(x1785);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1787 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1787)==0){
continue;
}
IkReal x1786=pow(x1787,-0.5);
CheckValue<IkReal> x1788 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1788.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1788.value));
IkReal gconst79=((-1.0)*r21*x1786);
IkReal gconst80=(r20*x1786);
CheckValue<IkReal> x1789 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1789.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1789.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x1792 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1792.valid){
continue;
}
IkReal x1790=((-1.0)*(x1792.value));
IkReal x1791=x1786;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x1790;
IkReal gconst78=x1790;
IkReal gconst79=((-1.0)*r21*x1791);
IkReal gconst80=(r20*x1791);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x1795 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1795.valid){
continue;
}
IkReal x1793=((-1.0)*(x1795.value));
IkReal x1794=x1786;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x1793;
IkReal gconst78=x1793;
IkReal gconst79=((-1.0)*r21*x1794);
IkReal gconst80=(r20*x1794);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x1798 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1798.valid){
continue;
}
IkReal x1796=((-1.0)*(x1798.value));
IkReal x1797=x1786;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x1796;
IkReal gconst78=x1796;
IkReal gconst79=((-1.0)*r21*x1797);
IkReal gconst80=(r20*x1797);
IkReal x1799=r22*r22;
CheckValue<IkReal> x1802=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1799))),-1);
if(!x1802.valid){
continue;
}
IkReal x1800=x1802.value;
IkReal x1801=(x1799+((x1800*(r21*r21*r21*r21)))+(((2.0)*x1800*(r20*r20)*(r21*r21)))+((x1800*(r20*r20*r20*r20))));
j4eval[0]=x1801;
j4eval[1]=IKsign(x1801);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1803=(cj1*sj2);
IkReal x1804=(gconst79*r21);
IkReal x1805=(cj2*sj1);
IkReal x1806=(gconst80*r20);
CheckValue<IkReal> x1807 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1803))+((r22*x1805)))),IkReal(((((-1.0)*x1804*x1805))+((x1803*x1804))+(((-1.0)*x1803*x1806))+((x1805*x1806)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1807.valid){
continue;
}
CheckValue<IkReal> x1808=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x1804*x1806))+(x1804*x1804)+(x1806*x1806))),-1);
if(!x1808.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1807.value)+(((1.5707963267949)*(x1808.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1809=IKsin(j4);
IkReal x1810=IKcos(j4);
IkReal x1811=(cj1*cj2);
IkReal x1812=(gconst80*r20);
IkReal x1813=(sj1*sj2);
IkReal x1814=(gconst79*r21);
IkReal x1815=(gconst80*r10);
IkReal x1816=(gconst79*r01);
IkReal x1817=(gconst79*r11);
IkReal x1818=(gconst80*r00);
IkReal x1819=((1.0)*x1810);
IkReal x1820=((1.0)*x1809);
evalcond[0]=(((x1809*x1812))+(((-1.0)*x1814*x1820))+(((-1.0)*r22*x1819)));
evalcond[1]=(sj0+(((-1.0)*r02*x1819))+((x1809*x1818))+(((-1.0)*x1816*x1820)));
evalcond[2]=((((-1.0)*x1817*x1820))+((x1809*x1815))+(((-1.0)*r12*x1819))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x1812*x1819))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x1820))+((x1810*x1814)));
evalcond[4]=(((cj0*x1813))+((cj0*x1811))+(((-1.0)*r02*x1820))+(((-1.0)*x1818*x1819))+((x1810*x1816)));
evalcond[5]=(((sj0*x1811))+((sj0*x1813))+(((-1.0)*r12*x1820))+(((-1.0)*x1815*x1819))+((x1810*x1817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1821=((1.0)*gconst79);
CheckValue<IkReal> x1822=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst80*r01))+(((-1.0)*r00*x1821)))),-1);
if(!x1822.valid){
continue;
}
CheckValue<IkReal> x1823 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x1821))+((cj0*gconst80*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1823.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1822.value)))+(x1823.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1824=IKsin(j4);
IkReal x1825=IKcos(j4);
IkReal x1826=(cj1*cj2);
IkReal x1827=(gconst80*r20);
IkReal x1828=(sj1*sj2);
IkReal x1829=(gconst79*r21);
IkReal x1830=(gconst80*r10);
IkReal x1831=(gconst79*r01);
IkReal x1832=(gconst79*r11);
IkReal x1833=(gconst80*r00);
IkReal x1834=((1.0)*x1825);
IkReal x1835=((1.0)*x1824);
evalcond[0]=(((x1824*x1827))+(((-1.0)*r22*x1834))+(((-1.0)*x1829*x1835)));
evalcond[1]=(sj0+((x1824*x1833))+(((-1.0)*r02*x1834))+(((-1.0)*x1831*x1835)));
evalcond[2]=((((-1.0)*x1832*x1835))+((x1824*x1830))+(((-1.0)*r12*x1834))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((x1825*x1829))+(((-1.0)*x1827*x1834))+(((-1.0)*r22*x1835)));
evalcond[4]=(((cj0*x1826))+((cj0*x1828))+(((-1.0)*x1833*x1834))+(((-1.0)*r02*x1835))+((x1825*x1831)));
evalcond[5]=(((sj0*x1828))+((sj0*x1826))+((x1825*x1832))+(((-1.0)*r12*x1835))+(((-1.0)*x1830*x1834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1836=((1.0)*gconst79);
CheckValue<IkReal> x1837=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x1836))+(((-1.0)*gconst80*r11)))),-1);
if(!x1837.valid){
continue;
}
CheckValue<IkReal> x1838 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst80*r20*sj0))+(((-1.0)*r21*sj0*x1836)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1837.value)))+(x1838.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1839=IKsin(j4);
IkReal x1840=IKcos(j4);
IkReal x1841=(cj1*cj2);
IkReal x1842=(gconst80*r20);
IkReal x1843=(sj1*sj2);
IkReal x1844=(gconst79*r21);
IkReal x1845=(gconst80*r10);
IkReal x1846=(gconst79*r01);
IkReal x1847=(gconst79*r11);
IkReal x1848=(gconst80*r00);
IkReal x1849=((1.0)*x1840);
IkReal x1850=((1.0)*x1839);
evalcond[0]=((((-1.0)*r22*x1849))+((x1839*x1842))+(((-1.0)*x1844*x1850)));
evalcond[1]=(sj0+(((-1.0)*r02*x1849))+((x1839*x1848))+(((-1.0)*x1846*x1850)));
evalcond[2]=(((x1839*x1845))+(((-1.0)*r12*x1849))+(((-1.0)*x1847*x1850))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x1842*x1849))+((x1840*x1844))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x1850)));
evalcond[4]=(((cj0*x1841))+((cj0*x1843))+((x1840*x1846))+(((-1.0)*r02*x1850))+(((-1.0)*x1848*x1849)));
evalcond[5]=(((x1840*x1847))+((sj0*x1841))+((sj0*x1843))+(((-1.0)*x1845*x1849))+(((-1.0)*r12*x1850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1852 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1852)==0){
continue;
}
IkReal x1851=pow(x1852,-0.5);
CheckValue<IkReal> x1853 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1853.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1853.value))));
IkReal gconst82=((1.0)*r21*x1851);
IkReal gconst83=((-1.0)*r20*x1851);
CheckValue<IkReal> x1854 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1854.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1854.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x1857 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1857.valid){
continue;
}
IkReal x1855=((1.0)*(x1857.value));
IkReal x1856=x1851;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1855)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1855)));
IkReal gconst82=((1.0)*r21*x1856);
IkReal gconst83=((-1.0)*r20*x1856);
IkReal x1858=r22*r22;
IkReal x1859=((1.0)*x1858);
CheckValue<IkReal> x1863=IKPowWithIntegerCheck(((-1.0)+x1858),-1);
if(!x1863.valid){
continue;
}
IkReal x1860=x1863.value;
if((((1.0)+(((-1.0)*x1859)))) < -0.00001)
continue;
IkReal x1861=IKsqrt(((1.0)+(((-1.0)*x1859))));
IkReal x1862=(sj0*x1860*x1861);
j4eval[0]=((IKabs((x1862+(((-1.0)*x1859*x1862)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x1866 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1866.valid){
continue;
}
IkReal x1864=((1.0)*(x1866.value));
IkReal x1865=x1851;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1864)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1864)));
IkReal gconst82=((1.0)*r21*x1865);
IkReal gconst83=((-1.0)*r20*x1865);
IkReal x1867=r22*r22;
IkReal x1868=((1.0)*x1867);
CheckValue<IkReal> x1872=IKPowWithIntegerCheck(((-1.0)+x1867),-1);
if(!x1872.valid){
continue;
}
IkReal x1869=x1872.value;
if((((1.0)+(((-1.0)*x1868)))) < -0.00001)
continue;
IkReal x1870=IKsqrt(((1.0)+(((-1.0)*x1868))));
IkReal x1871=(cj0*x1869*x1870);
j4eval[0]=((IKabs(((((-1.0)*x1868*x1871))+x1871)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x1875 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1875.valid){
continue;
}
IkReal x1873=((1.0)*(x1875.value));
IkReal x1874=x1851;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1873)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1873)));
IkReal gconst82=((1.0)*r21*x1874);
IkReal gconst83=((-1.0)*r20*x1874);
IkReal x1876=r22*r22;
IkReal x1877=(cj0*r02);
IkReal x1878=(r12*sj0);
CheckValue<IkReal> x1882=IKPowWithIntegerCheck(((-1.0)+x1876),-1);
if(!x1882.valid){
continue;
}
IkReal x1879=x1882.value;
if((((1.0)+(((-1.0)*x1876)))) < -0.00001)
continue;
IkReal x1880=IKsqrt(((1.0)+(((-1.0)*x1876))));
IkReal x1881=((1.0)*r22*x1879*x1880);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x1878*x1881))+(((-1.0)*x1877*x1881)))))+(IKabs((x1877+x1878))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1883=((1.0)*gconst82);
CheckValue<IkReal> x1884=IKPowWithIntegerCheck(IKsign((((gconst83*r21))+((gconst82*r20)))),-1);
if(!x1884.valid){
continue;
}
CheckValue<IkReal> x1885 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x1883))+((gconst83*r10*sj0))+((cj0*gconst83*r00))+(((-1.0)*r11*sj0*x1883)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1885.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1884.value)))+(x1885.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1886=IKsin(j4);
IkReal x1887=IKcos(j4);
IkReal x1888=(cj1*cj2);
IkReal x1889=(sj1*sj2);
IkReal x1890=(gconst82*r01);
IkReal x1891=(gconst82*r21);
IkReal x1892=(gconst82*r11);
IkReal x1893=((1.0)*x1887);
IkReal x1894=(gconst83*x1886);
IkReal x1895=((1.0)*x1886);
evalcond[0]=(((r20*x1894))+(((-1.0)*x1891*x1895))+(((-1.0)*r22*x1893)));
evalcond[1]=((((-1.0)*r02*x1893))+sj0+((r00*x1894))+(((-1.0)*x1890*x1895)));
evalcond[2]=((((-1.0)*x1892*x1895))+((r10*x1894))+(((-1.0)*r12*x1893))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x1895))+(((-1.0)*gconst83*r20*x1893))+((x1887*x1891)));
evalcond[4]=((((-1.0)*r02*x1895))+((x1887*x1890))+((cj0*x1888))+((cj0*x1889))+(((-1.0)*gconst83*r00*x1893)));
evalcond[5]=((((-1.0)*r12*x1895))+((x1887*x1892))+(((-1.0)*gconst83*r10*x1893))+((sj0*x1888))+((sj0*x1889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1896=((1.0)*gconst82);
CheckValue<IkReal> x1897=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst83*r01))+(((-1.0)*r00*x1896)))),-1);
if(!x1897.valid){
continue;
}
CheckValue<IkReal> x1898 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst83*r20))+(((-1.0)*cj0*r21*x1896)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1898.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1897.value)))+(x1898.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1899=IKsin(j4);
IkReal x1900=IKcos(j4);
IkReal x1901=(cj1*cj2);
IkReal x1902=(sj1*sj2);
IkReal x1903=(gconst82*r01);
IkReal x1904=(gconst82*r21);
IkReal x1905=(gconst82*r11);
IkReal x1906=((1.0)*x1900);
IkReal x1907=(gconst83*x1899);
IkReal x1908=((1.0)*x1899);
evalcond[0]=((((-1.0)*r22*x1906))+(((-1.0)*x1904*x1908))+((r20*x1907)));
evalcond[1]=(sj0+(((-1.0)*x1903*x1908))+((r00*x1907))+(((-1.0)*r02*x1906)));
evalcond[2]=((((-1.0)*x1905*x1908))+(((-1.0)*r12*x1906))+(((-1.0)*cj0))+((r10*x1907)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x1908))+(((-1.0)*cj1*sj2))+((x1900*x1904))+(((-1.0)*gconst83*r20*x1906)));
evalcond[4]=((((-1.0)*gconst83*r00*x1906))+((x1900*x1903))+((cj0*x1902))+((cj0*x1901))+(((-1.0)*r02*x1908)));
evalcond[5]=(((x1900*x1905))+((sj0*x1902))+((sj0*x1901))+(((-1.0)*r12*x1908))+(((-1.0)*gconst83*r10*x1906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1909=((1.0)*gconst82);
CheckValue<IkReal> x1910 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1909))+((gconst83*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1910.valid){
continue;
}
CheckValue<IkReal> x1911=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x1909))+(((-1.0)*gconst83*r11)))),-1);
if(!x1911.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1910.value)+(((1.5707963267949)*(x1911.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1912=IKsin(j4);
IkReal x1913=IKcos(j4);
IkReal x1914=(cj1*cj2);
IkReal x1915=(sj1*sj2);
IkReal x1916=(gconst82*r01);
IkReal x1917=(gconst82*r21);
IkReal x1918=(gconst82*r11);
IkReal x1919=((1.0)*x1913);
IkReal x1920=(gconst83*x1912);
IkReal x1921=((1.0)*x1912);
evalcond[0]=((((-1.0)*r22*x1919))+(((-1.0)*x1917*x1921))+((r20*x1920)));
evalcond[1]=(((r00*x1920))+sj0+(((-1.0)*r02*x1919))+(((-1.0)*x1916*x1921)));
evalcond[2]=((((-1.0)*x1918*x1921))+(((-1.0)*r12*x1919))+((r10*x1920))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((x1913*x1917))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst83*r20*x1919))+(((-1.0)*r22*x1921)));
evalcond[4]=(((x1913*x1916))+(((-1.0)*gconst83*r00*x1919))+(((-1.0)*r02*x1921))+((cj0*x1915))+((cj0*x1914)));
evalcond[5]=(((x1913*x1918))+(((-1.0)*r12*x1921))+(((-1.0)*gconst83*r10*x1919))+((sj0*x1915))+((sj0*x1914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1922=((-1.0)*r00);
IkReal x1924 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1924)==0){
continue;
}
IkReal x1923=pow(x1924,-0.5);
CheckValue<IkReal> x1925 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x1922),IKFAST_ATAN2_MAGTHRESH);
if(!x1925.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1925.value));
IkReal gconst85=(r01*x1923);
IkReal gconst86=(x1922*x1923);
CheckValue<IkReal> x1926 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1926.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1926.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1927=((-1.0)*r00);
IkReal x1928=x1923;
CheckValue<IkReal> x1930 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x1927),IKFAST_ATAN2_MAGTHRESH);
if(!x1930.valid){
continue;
}
IkReal x1929=((-1.0)*(x1930.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst85;
cj5=gconst86;
j5=x1929;
IkReal gconst84=x1929;
IkReal gconst85=(r01*x1928);
IkReal gconst86=(x1927*x1928);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1931=((1.0)*gconst85);
CheckValue<IkReal> x1932 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*cj0*r01*x1931))+(((-1.0)*r11*sj0*x1931))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1932.valid){
continue;
}
CheckValue<IkReal> x1933=IKPowWithIntegerCheck(IKsign((((gconst86*r21))+((gconst85*r20)))),-1);
if(!x1933.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1932.value)+(((1.5707963267949)*(x1933.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1934=IKsin(j4);
IkReal x1935=IKcos(j4);
IkReal x1936=(cj1*cj2);
IkReal x1937=(sj1*sj2);
IkReal x1938=((1.0)*x1935);
IkReal x1939=(gconst86*x1934);
IkReal x1940=(gconst85*x1935);
IkReal x1941=((1.0)*x1934);
IkReal x1942=(gconst85*x1941);
evalcond[0]=((((-1.0)*r21*x1942))+(((-1.0)*r22*x1938))+((r20*x1939)));
evalcond[1]=(((r00*x1939))+sj0+(((-1.0)*r01*x1942))+(((-1.0)*r02*x1938)));
evalcond[2]=((((-1.0)*r12*x1938))+(((-1.0)*r11*x1942))+((r10*x1939))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x1941))+(((-1.0)*cj1*sj2))+((r21*x1940))+(((-1.0)*gconst86*r20*x1938)));
evalcond[4]=((((-1.0)*r02*x1941))+(((-1.0)*gconst86*r00*x1938))+((cj0*x1937))+((cj0*x1936))+((r01*x1940)));
evalcond[5]=(((r11*x1940))+(((-1.0)*gconst86*r10*x1938))+((sj0*x1937))+((sj0*x1936))+(((-1.0)*r12*x1941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1943=((1.0)*gconst85);
CheckValue<IkReal> x1944=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x1943))+(((-1.0)*gconst86*r11)))),-1);
if(!x1944.valid){
continue;
}
CheckValue<IkReal> x1945 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1943))+((gconst86*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1945.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1944.value)))+(x1945.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1946=IKsin(j4);
IkReal x1947=IKcos(j4);
IkReal x1948=(cj1*cj2);
IkReal x1949=(sj1*sj2);
IkReal x1950=((1.0)*x1947);
IkReal x1951=(gconst86*x1946);
IkReal x1952=(gconst85*x1947);
IkReal x1953=((1.0)*x1946);
IkReal x1954=(gconst85*x1953);
evalcond[0]=((((-1.0)*r22*x1950))+((r20*x1951))+(((-1.0)*r21*x1954)));
evalcond[1]=(sj0+(((-1.0)*r02*x1950))+(((-1.0)*r01*x1954))+((r00*x1951)));
evalcond[2]=(((r10*x1951))+(((-1.0)*r11*x1954))+(((-1.0)*r12*x1950))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x1953))+(((-1.0)*gconst86*r20*x1950))+(((-1.0)*cj1*sj2))+((r21*x1952)));
evalcond[4]=(((cj0*x1949))+((cj0*x1948))+(((-1.0)*r02*x1953))+(((-1.0)*gconst86*r00*x1950))+((r01*x1952)));
evalcond[5]=(((r11*x1952))+(((-1.0)*gconst86*r10*x1950))+((sj0*x1949))+((sj0*x1948))+(((-1.0)*r12*x1953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1955=((-1.0)*r01);
IkReal x1957 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1957)==0){
continue;
}
IkReal x1956=pow(x1957,-0.5);
CheckValue<IkReal> x1958 = IKatan2WithCheck(IkReal(x1955),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1958.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x1958.value))));
IkReal gconst88=(x1955*x1956);
IkReal gconst89=((1.0)*r00*x1956);
CheckValue<IkReal> x1959 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1959.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1959.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1960=((-1.0)*r01);
CheckValue<IkReal> x1963 = IKatan2WithCheck(IkReal(x1960),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1963.valid){
continue;
}
IkReal x1961=((1.0)*(x1963.value));
IkReal x1962=x1956;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1961)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1961)));
IkReal gconst88=(x1960*x1962);
IkReal gconst89=((1.0)*r00*x1962);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x1964=((-1.0)*r01);
CheckValue<IkReal> x1967 = IKatan2WithCheck(IkReal(x1964),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1967.valid){
continue;
}
IkReal x1965=((1.0)*(x1967.value));
IkReal x1966=x1956;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1965)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1965)));
IkReal gconst88=(x1964*x1966);
IkReal gconst89=((1.0)*r00*x1966);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1968=((-1.0)*r01);
CheckValue<IkReal> x1971 = IKatan2WithCheck(IkReal(x1968),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1971.valid){
continue;
}
IkReal x1969=((1.0)*(x1971.value));
IkReal x1970=x1956;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1969)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1969)));
IkReal gconst88=(x1968*x1970);
IkReal gconst89=((1.0)*r00*x1970);
IkReal x1972=r02*r02;
IkReal x1973=(r12*sj0);
IkReal x1974=x1956;
IkReal x1975=(cj0*x1974);
j4eval[0]=((IKabs((((x1972*x1975))+(((-1.0)*x1975))+((r02*x1973*x1974)))))+(IKabs((x1973+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1976=((1.0)*gconst88);
CheckValue<IkReal> x1977=IKPowWithIntegerCheck(IKsign((((gconst89*r21))+((gconst88*r20)))),-1);
if(!x1977.valid){
continue;
}
CheckValue<IkReal> x1978 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x1976))+(((-1.0)*cj0*r01*x1976))+((cj0*gconst89*r00))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1978.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1977.value)))+(x1978.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1979=IKsin(j4);
IkReal x1980=IKcos(j4);
IkReal x1981=(cj1*cj2);
IkReal x1982=(gconst89*r10);
IkReal x1983=(sj1*sj2);
IkReal x1984=((1.0)*x1980);
IkReal x1985=(gconst88*x1980);
IkReal x1986=(gconst89*x1979);
IkReal x1987=((1.0)*x1979);
evalcond[0]=((((-1.0)*gconst88*r21*x1987))+(((-1.0)*r22*x1984))+((r20*x1986)));
evalcond[1]=(sj0+(((-1.0)*r02*x1984))+(((-1.0)*gconst88*r01*x1987))+((r00*x1986)));
evalcond[2]=((((-1.0)*r12*x1984))+((x1979*x1982))+(((-1.0)*gconst88*r11*x1987))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((r21*x1985))+(((-1.0)*gconst89*r20*x1984))+(((-1.0)*r22*x1987)));
evalcond[4]=((((-1.0)*r02*x1987))+(((-1.0)*gconst89*r00*x1984))+((r01*x1985))+((cj0*x1981))+((cj0*x1983)));
evalcond[5]=(((r11*x1985))+((sj0*x1981))+((sj0*x1983))+(((-1.0)*r12*x1987))+(((-1.0)*x1982*x1984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1988=((1.0)*gconst88);
CheckValue<IkReal> x1989 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst89*r20))+(((-1.0)*cj0*r21*x1988)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1989.valid){
continue;
}
CheckValue<IkReal> x1990=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst89*r01))+(((-1.0)*r00*x1988)))),-1);
if(!x1990.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1989.value)+(((1.5707963267949)*(x1990.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1991=IKsin(j4);
IkReal x1992=IKcos(j4);
IkReal x1993=(cj1*cj2);
IkReal x1994=(gconst89*r10);
IkReal x1995=(sj1*sj2);
IkReal x1996=((1.0)*x1992);
IkReal x1997=(gconst88*x1992);
IkReal x1998=(gconst89*x1991);
IkReal x1999=((1.0)*x1991);
evalcond[0]=(((r20*x1998))+(((-1.0)*gconst88*r21*x1999))+(((-1.0)*r22*x1996)));
evalcond[1]=(sj0+(((-1.0)*r02*x1996))+((r00*x1998))+(((-1.0)*gconst88*r01*x1999)));
evalcond[2]=(((x1991*x1994))+(((-1.0)*gconst88*r11*x1999))+(((-1.0)*r12*x1996))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r21*x1997))+(((-1.0)*gconst89*r20*x1996))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x1999)));
evalcond[4]=(((cj0*x1995))+((cj0*x1993))+(((-1.0)*r02*x1999))+((r01*x1997))+(((-1.0)*gconst89*r00*x1996)));
evalcond[5]=(((sj0*x1995))+((sj0*x1993))+((r11*x1997))+(((-1.0)*x1994*x1996))+(((-1.0)*r12*x1999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2000=((1.0)*gconst88);
CheckValue<IkReal> x2001=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2000))+(((-1.0)*gconst89*r11)))),-1);
if(!x2001.valid){
continue;
}
CheckValue<IkReal> x2002 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst89*r20*sj0))+(((-1.0)*r21*sj0*x2000)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2001.value)))+(x2002.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2003=IKsin(j4);
IkReal x2004=IKcos(j4);
IkReal x2005=(cj1*cj2);
IkReal x2006=(gconst89*r10);
IkReal x2007=(sj1*sj2);
IkReal x2008=((1.0)*x2004);
IkReal x2009=(gconst88*x2004);
IkReal x2010=(gconst89*x2003);
IkReal x2011=((1.0)*x2003);
evalcond[0]=((((-1.0)*r22*x2008))+(((-1.0)*gconst88*r21*x2011))+((r20*x2010)));
evalcond[1]=(sj0+((r00*x2010))+(((-1.0)*gconst88*r01*x2011))+(((-1.0)*r02*x2008)));
evalcond[2]=((((-1.0)*gconst88*r11*x2011))+(((-1.0)*r12*x2008))+((x2003*x2006))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x2009))+((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst89*r20*x2008))+(((-1.0)*r22*x2011)));
evalcond[4]=(((r01*x2009))+(((-1.0)*gconst89*r00*x2008))+((cj0*x2005))+((cj0*x2007))+(((-1.0)*r02*x2011)));
evalcond[5]=((((-1.0)*x2006*x2008))+((r11*x2009))+((sj0*x2005))+((sj0*x2007))+(((-1.0)*r12*x2011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2012=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2012;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x2012);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2013=((1.0)*sj5);
IkReal x2014=((((-1.0)*cj5*r11))+(((-1.0)*r10*x2013)));
j4eval[0]=x2014;
j4eval[1]=IKsign(x2014);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x2013)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2015=cj5*cj5;
IkReal x2016=r01*r01;
IkReal x2017=(cj5*r00);
IkReal x2018=(r01*sj5);
IkReal x2019=(x2016+((x2015*(r00*r00)))+(r02*r02)+(((-1.0)*x2015*x2016))+(((-2.0)*x2017*x2018)));
j4eval[0]=x2019;
j4eval[1]=((IKabs(r02))+(IKabs((x2018+(((-1.0)*x2017))))));
j4eval[2]=IKsign(x2019);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2020=cj5*cj5;
IkReal x2021=r01*r01;
IkReal x2022=(r01*sj5);
IkReal x2023=(cj5*r00);
CheckValue<IkReal> x2024 = IKatan2WithCheck(IkReal((x2022+(((-1.0)*x2023)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2024.valid){
continue;
}
CheckValue<IkReal> x2025=IKPowWithIntegerCheck(IKsign((((x2020*(r00*r00)))+(((-1.0)*x2020*x2021))+x2021+(((-2.0)*x2022*x2023))+(r02*r02))),-1);
if(!x2025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2024.value)+(((1.5707963267949)*(x2025.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2026=IKsin(j4);
IkReal x2027=IKcos(j4);
IkReal x2028=(cj5*r00);
IkReal x2029=(cj5*r20);
IkReal x2030=(cj5*r10);
IkReal x2031=((1.0)*x2027);
IkReal x2032=(sj5*x2027);
IkReal x2033=((1.0)*x2026);
IkReal x2034=(sj5*x2033);
evalcond[0]=((((-1.0)*r22*x2031))+((x2026*x2029))+(((-1.0)*r21*x2034)));
evalcond[1]=(((x2026*x2030))+(((-1.0)*r12*x2031))+(((-1.0)*r11*x2034)));
evalcond[2]=(((r01*x2032))+(((-1.0)*r02*x2033))+(((-1.0)*x2028*x2031)));
evalcond[3]=((1.0)+((x2026*x2028))+(((-1.0)*r01*x2034))+(((-1.0)*r02*x2031)));
evalcond[4]=((((-1.0)*r12*x2033))+((sj1*sj2))+(((-1.0)*x2030*x2031))+((cj1*cj2))+((r11*x2032)));
evalcond[5]=(((cj2*sj1))+((r21*x2032))+(((-1.0)*r22*x2033))+(((-1.0)*cj1*sj2))+(((-1.0)*x2029*x2031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2035=((1.0)*sj5);
CheckValue<IkReal> x2036 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x2035)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2036.valid){
continue;
}
CheckValue<IkReal> x2037=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x2035)))),-1);
if(!x2037.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2036.value)+(((1.5707963267949)*(x2037.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2038=IKsin(j4);
IkReal x2039=IKcos(j4);
IkReal x2040=(cj5*r00);
IkReal x2041=(cj5*r20);
IkReal x2042=(cj5*r10);
IkReal x2043=((1.0)*x2039);
IkReal x2044=(sj5*x2039);
IkReal x2045=((1.0)*x2038);
IkReal x2046=(sj5*x2045);
evalcond[0]=((((-1.0)*r22*x2043))+(((-1.0)*r21*x2046))+((x2038*x2041)));
evalcond[1]=((((-1.0)*r11*x2046))+((x2038*x2042))+(((-1.0)*r12*x2043)));
evalcond[2]=((((-1.0)*r02*x2045))+(((-1.0)*x2040*x2043))+((r01*x2044)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2043))+(((-1.0)*r01*x2046))+((x2038*x2040)));
evalcond[4]=(((r11*x2044))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*x2042*x2043))+(((-1.0)*r12*x2045)));
evalcond[5]=(((cj2*sj1))+((r21*x2044))+(((-1.0)*r22*x2045))+(((-1.0)*cj1*sj2))+(((-1.0)*x2041*x2043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2047 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2047.valid){
continue;
}
CheckValue<IkReal> x2048=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2047.value)+(((1.5707963267949)*(x2048.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2049=IKsin(j4);
IkReal x2050=IKcos(j4);
IkReal x2051=(cj5*r00);
IkReal x2052=(cj5*r20);
IkReal x2053=(cj5*r10);
IkReal x2054=((1.0)*x2050);
IkReal x2055=(sj5*x2050);
IkReal x2056=((1.0)*x2049);
IkReal x2057=(sj5*x2056);
evalcond[0]=(((x2049*x2052))+(((-1.0)*r22*x2054))+(((-1.0)*r21*x2057)));
evalcond[1]=(((x2049*x2053))+(((-1.0)*r12*x2054))+(((-1.0)*r11*x2057)));
evalcond[2]=(((r01*x2055))+(((-1.0)*r02*x2056))+(((-1.0)*x2051*x2054)));
evalcond[3]=((1.0)+(((-1.0)*r01*x2057))+((x2049*x2051))+(((-1.0)*r02*x2054)));
evalcond[4]=(((r11*x2055))+(((-1.0)*r12*x2056))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*x2053*x2054)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r22*x2056))+(((-1.0)*cj1*sj2))+(((-1.0)*x2052*x2054))+((r21*x2055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2058=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2058;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x2058);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2059=((1.0)*sj5);
IkReal x2060=((((-1.0)*cj5*r21))+(((-1.0)*r20*x2059)));
j4eval[0]=x2060;
j4eval[1]=((IKabs((((cj5*r10))+(((-1.0)*r11*x2059)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2060);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2061=cj5*cj5;
IkReal x2062=r01*r01;
IkReal x2063=(r01*sj5);
IkReal x2064=(cj5*r00);
IkReal x2065=((((2.0)*x2063*x2064))+(((-1.0)*(r02*r02)))+(((-1.0)*x2062))+(((-1.0)*x2061*(r00*r00)))+((x2061*x2062)));
j4eval[0]=x2065;
j4eval[1]=IKsign(x2065);
j4eval[2]=((IKabs(r02))+(IKabs((x2063+(((-1.0)*x2064))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2066=cj5*cj5;
IkReal x2067=r01*r01;
IkReal x2068=(r01*sj5);
IkReal x2069=(cj5*r00);
CheckValue<IkReal> x2070=IKPowWithIntegerCheck(IKsign((((x2066*x2067))+(((-1.0)*x2066*(r00*r00)))+(((2.0)*x2068*x2069))+(((-1.0)*(r02*r02)))+(((-1.0)*x2067)))),-1);
if(!x2070.valid){
continue;
}
CheckValue<IkReal> x2071 = IKatan2WithCheck(IkReal((x2068+(((-1.0)*x2069)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2070.value)))+(x2071.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2072=IKsin(j4);
IkReal x2073=IKcos(j4);
IkReal x2074=(cj5*r00);
IkReal x2075=((1.0)*sj2);
IkReal x2076=(cj5*r20);
IkReal x2077=(cj5*r10);
IkReal x2078=((1.0)*x2073);
IkReal x2079=(sj5*x2073);
IkReal x2080=((1.0)*x2072);
IkReal x2081=(sj5*x2080);
evalcond[0]=((((-1.0)*r21*x2081))+(((-1.0)*r22*x2078))+((x2072*x2076)));
evalcond[1]=((((-1.0)*r12*x2078))+(((-1.0)*r11*x2081))+((x2072*x2077)));
evalcond[2]=((((-1.0)*r02*x2080))+(((-1.0)*x2074*x2078))+((r01*x2079)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2078))+((x2072*x2074))+(((-1.0)*r01*x2081)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x2080))+(((-1.0)*x2076*x2078))+(((-1.0)*cj1*x2075))+((r21*x2079)));
evalcond[5]=((((-1.0)*sj1*x2075))+(((-1.0)*cj1*cj2))+((r11*x2079))+(((-1.0)*x2077*x2078))+(((-1.0)*r12*x2080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2082=((1.0)*sj5);
CheckValue<IkReal> x2083 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x2082)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2083.valid){
continue;
}
CheckValue<IkReal> x2084=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2082))+(((-1.0)*cj5*r21)))),-1);
if(!x2084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2083.value)+(((1.5707963267949)*(x2084.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2085=IKsin(j4);
IkReal x2086=IKcos(j4);
IkReal x2087=(cj5*r00);
IkReal x2088=((1.0)*sj2);
IkReal x2089=(cj5*r20);
IkReal x2090=(cj5*r10);
IkReal x2091=((1.0)*x2086);
IkReal x2092=(sj5*x2086);
IkReal x2093=((1.0)*x2085);
IkReal x2094=(sj5*x2093);
evalcond[0]=((((-1.0)*r21*x2094))+((x2085*x2089))+(((-1.0)*r22*x2091)));
evalcond[1]=((((-1.0)*r11*x2094))+(((-1.0)*r12*x2091))+((x2085*x2090)));
evalcond[2]=(((r01*x2092))+(((-1.0)*x2087*x2091))+(((-1.0)*r02*x2093)));
evalcond[3]=((-1.0)+((x2085*x2087))+(((-1.0)*r02*x2091))+(((-1.0)*r01*x2094)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*cj1*x2088))+(((-1.0)*x2089*x2091))+((r21*x2092))+(((-1.0)*r22*x2093)));
evalcond[5]=((((-1.0)*x2090*x2091))+(((-1.0)*sj1*x2088))+(((-1.0)*cj1*cj2))+(((-1.0)*r12*x2093))+((r11*x2092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2095=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2095.valid){
continue;
}
CheckValue<IkReal> x2096 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2095.value)))+(x2096.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2097=IKsin(j4);
IkReal x2098=IKcos(j4);
IkReal x2099=(cj5*r00);
IkReal x2100=((1.0)*sj2);
IkReal x2101=(cj5*r20);
IkReal x2102=(cj5*r10);
IkReal x2103=((1.0)*x2098);
IkReal x2104=(sj5*x2098);
IkReal x2105=((1.0)*x2097);
IkReal x2106=(sj5*x2105);
evalcond[0]=((((-1.0)*r22*x2103))+((x2097*x2101))+(((-1.0)*r21*x2106)));
evalcond[1]=((((-1.0)*r12*x2103))+(((-1.0)*r11*x2106))+((x2097*x2102)));
evalcond[2]=((((-1.0)*r02*x2105))+(((-1.0)*x2099*x2103))+((r01*x2104)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2103))+(((-1.0)*r01*x2106))+((x2097*x2099)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x2105))+((r21*x2104))+(((-1.0)*x2101*x2103))+(((-1.0)*cj1*x2100)));
evalcond[5]=((((-1.0)*r12*x2105))+(((-1.0)*sj1*x2100))+(((-1.0)*x2102*x2103))+((r11*x2104))+(((-1.0)*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2107=((-1.0)*r10);
IkReal x2109 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2109)==0){
continue;
}
IkReal x2108=pow(x2109,-0.5);
CheckValue<IkReal> x2110 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2107),IKFAST_ATAN2_MAGTHRESH);
if(!x2110.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2110.value));
IkReal gconst91=(r11*x2108);
IkReal gconst92=(x2107*x2108);
CheckValue<IkReal> x2111 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2111.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2111.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2112=((-1.0)*r10);
IkReal x2113=x2108;
CheckValue<IkReal> x2115 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2112),IKFAST_ATAN2_MAGTHRESH);
if(!x2115.valid){
continue;
}
IkReal x2114=((-1.0)*(x2115.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst91;
cj5=gconst92;
j5=x2114;
IkReal gconst90=x2114;
IkReal gconst91=(r11*x2113);
IkReal gconst92=(x2112*x2113);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2116=((1.0)*gconst91);
CheckValue<IkReal> x2117=IKPowWithIntegerCheck(IKsign((((gconst91*r20))+((gconst92*r21)))),-1);
if(!x2117.valid){
continue;
}
CheckValue<IkReal> x2118 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*cj0*r01*x2116))+(((-1.0)*r11*sj0*x2116)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2117.value)))+(x2118.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2119=IKsin(j4);
IkReal x2120=IKcos(j4);
IkReal x2121=(cj1*cj2);
IkReal x2122=(gconst92*r00);
IkReal x2123=(sj1*sj2);
IkReal x2124=((1.0)*x2120);
IkReal x2125=(gconst91*x2120);
IkReal x2126=((1.0)*x2119);
IkReal x2127=(gconst92*x2119);
IkReal x2128=(gconst91*x2126);
evalcond[0]=((((-1.0)*r22*x2124))+((r20*x2127))+(((-1.0)*r21*x2128)));
evalcond[1]=(sj0+(((-1.0)*r01*x2128))+(((-1.0)*r02*x2124))+((x2119*x2122)));
evalcond[2]=(((r10*x2127))+(((-1.0)*r11*x2128))+(((-1.0)*r12*x2124))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x2126))+(((-1.0)*cj1*sj2))+((r21*x2125))+(((-1.0)*gconst92*r20*x2124)));
evalcond[4]=((((-1.0)*x2122*x2124))+(((-1.0)*r02*x2126))+((r01*x2125))+((cj0*x2121))+((cj0*x2123)));
evalcond[5]=((((-1.0)*gconst92*r10*x2124))+((sj0*x2123))+((sj0*x2121))+((r11*x2125))+(((-1.0)*r12*x2126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2129=((1.0)*gconst91);
CheckValue<IkReal> x2130=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2129))+(((-1.0)*gconst92*r01)))),-1);
if(!x2130.valid){
continue;
}
CheckValue<IkReal> x2131 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x2129))+((cj0*gconst92*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2131.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2130.value)))+(x2131.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2132=IKsin(j4);
IkReal x2133=IKcos(j4);
IkReal x2134=(cj1*cj2);
IkReal x2135=(gconst92*r00);
IkReal x2136=(sj1*sj2);
IkReal x2137=((1.0)*x2133);
IkReal x2138=(gconst91*x2133);
IkReal x2139=((1.0)*x2132);
IkReal x2140=(gconst92*x2132);
IkReal x2141=(gconst91*x2139);
evalcond[0]=((((-1.0)*r22*x2137))+((r20*x2140))+(((-1.0)*r21*x2141)));
evalcond[1]=((((-1.0)*r01*x2141))+sj0+((x2132*x2135))+(((-1.0)*r02*x2137)));
evalcond[2]=((((-1.0)*r12*x2137))+(((-1.0)*r11*x2141))+((r10*x2140))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x2139))+((cj2*sj1))+((r21*x2138))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst92*r20*x2137)));
evalcond[4]=(((cj0*x2136))+((cj0*x2134))+(((-1.0)*x2135*x2137))+((r01*x2138))+(((-1.0)*r02*x2139)));
evalcond[5]=((((-1.0)*gconst92*r10*x2137))+(((-1.0)*r12*x2139))+((r11*x2138))+((sj0*x2136))+((sj0*x2134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2142=((-1.0)*r11);
IkReal x2144 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2144)==0){
continue;
}
IkReal x2143=pow(x2144,-0.5);
CheckValue<IkReal> x2145 = IKatan2WithCheck(IkReal(x2142),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2145.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2145.value))));
IkReal gconst94=(x2142*x2143);
IkReal gconst95=((1.0)*r10*x2143);
CheckValue<IkReal> x2146 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2146.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2146.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2147=((-1.0)*r11);
CheckValue<IkReal> x2150 = IKatan2WithCheck(IkReal(x2147),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2150.valid){
continue;
}
IkReal x2148=((1.0)*(x2150.value));
IkReal x2149=x2143;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2148)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2148)));
IkReal gconst94=(x2147*x2149);
IkReal gconst95=((1.0)*r10*x2149);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2151=((-1.0)*r11);
CheckValue<IkReal> x2154 = IKatan2WithCheck(IkReal(x2151),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2154.valid){
continue;
}
IkReal x2152=((1.0)*(x2154.value));
IkReal x2153=x2143;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2152)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2152)));
IkReal gconst94=(x2151*x2153);
IkReal gconst95=((1.0)*r10*x2153);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2155=((-1.0)*r11);
CheckValue<IkReal> x2158 = IKatan2WithCheck(IkReal(x2155),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2158.valid){
continue;
}
IkReal x2156=((1.0)*(x2158.value));
IkReal x2157=x2143;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2156)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2156)));
IkReal gconst94=(x2155*x2157);
IkReal gconst95=((1.0)*r10*x2157);
IkReal x2159=r12*r12;
IkReal x2160=(cj0*r02);
IkReal x2161=x2143;
IkReal x2162=(sj0*x2161);
j4eval[0]=((IKabs((x2160+((r12*sj0)))))+(IKabs((((r12*x2160*x2161))+(((-1.0)*x2162))+((x2159*x2162))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2163=((1.0)*gconst94);
CheckValue<IkReal> x2164=IKPowWithIntegerCheck(IKsign((((gconst95*r21))+((gconst94*r20)))),-1);
if(!x2164.valid){
continue;
}
CheckValue<IkReal> x2165 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst95*r10*sj0))+(((-1.0)*cj0*r01*x2163))+(((-1.0)*r11*sj0*x2163))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2165.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2164.value)))+(x2165.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2166=IKsin(j4);
IkReal x2167=IKcos(j4);
IkReal x2168=(cj1*cj2);
IkReal x2169=(gconst95*r10);
IkReal x2170=(sj1*sj2);
IkReal x2171=((1.0)*x2167);
IkReal x2172=(gconst95*x2166);
IkReal x2173=(gconst94*x2167);
IkReal x2174=((1.0)*x2166);
IkReal x2175=(gconst94*x2174);
evalcond[0]=((((-1.0)*r21*x2175))+((r20*x2172))+(((-1.0)*r22*x2171)));
evalcond[1]=(((r00*x2172))+sj0+(((-1.0)*r02*x2171))+(((-1.0)*r01*x2175)));
evalcond[2]=(((x2166*x2169))+(((-1.0)*r11*x2175))+(((-1.0)*r12*x2171))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r21*x2173))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst95*r20*x2171))+(((-1.0)*r22*x2174)));
evalcond[4]=(((r01*x2173))+((cj0*x2170))+(((-1.0)*gconst95*r00*x2171))+((cj0*x2168))+(((-1.0)*r02*x2174)));
evalcond[5]=(((r11*x2173))+(((-1.0)*x2169*x2171))+((sj0*x2168))+(((-1.0)*r12*x2174))+((sj0*x2170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2176=((1.0)*gconst94);
CheckValue<IkReal> x2177=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r01))+(((-1.0)*r00*x2176)))),-1);
if(!x2177.valid){
continue;
}
CheckValue<IkReal> x2178 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x2176))+((cj0*gconst95*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2178.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2177.value)))+(x2178.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2179=IKsin(j4);
IkReal x2180=IKcos(j4);
IkReal x2181=(cj1*cj2);
IkReal x2182=(gconst95*r10);
IkReal x2183=(sj1*sj2);
IkReal x2184=((1.0)*x2180);
IkReal x2185=(gconst95*x2179);
IkReal x2186=(gconst94*x2180);
IkReal x2187=((1.0)*x2179);
IkReal x2188=(gconst94*x2187);
evalcond[0]=((((-1.0)*r21*x2188))+((r20*x2185))+(((-1.0)*r22*x2184)));
evalcond[1]=(sj0+(((-1.0)*r02*x2184))+(((-1.0)*r01*x2188))+((r00*x2185)));
evalcond[2]=(((x2179*x2182))+(((-1.0)*r11*x2188))+(((-1.0)*r12*x2184))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst95*r20*x2184))+(((-1.0)*cj1*sj2))+((r21*x2186))+(((-1.0)*r22*x2187)));
evalcond[4]=(((cj0*x2181))+((cj0*x2183))+(((-1.0)*r02*x2187))+(((-1.0)*gconst95*r00*x2184))+((r01*x2186)));
evalcond[5]=(((sj0*x2181))+((sj0*x2183))+((r11*x2186))+(((-1.0)*x2182*x2184))+(((-1.0)*r12*x2187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2189=((1.0)*gconst94);
CheckValue<IkReal> x2190=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r11))+(((-1.0)*r10*x2189)))),-1);
if(!x2190.valid){
continue;
}
CheckValue<IkReal> x2191 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst95*r20*sj0))+(((-1.0)*r21*sj0*x2189)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2190.value)))+(x2191.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2192=IKsin(j4);
IkReal x2193=IKcos(j4);
IkReal x2194=(cj1*cj2);
IkReal x2195=(gconst95*r10);
IkReal x2196=(sj1*sj2);
IkReal x2197=((1.0)*x2193);
IkReal x2198=(gconst95*x2192);
IkReal x2199=(gconst94*x2193);
IkReal x2200=((1.0)*x2192);
IkReal x2201=(gconst94*x2200);
evalcond[0]=(((r20*x2198))+(((-1.0)*r21*x2201))+(((-1.0)*r22*x2197)));
evalcond[1]=(sj0+(((-1.0)*r02*x2197))+((r00*x2198))+(((-1.0)*r01*x2201)));
evalcond[2]=(((x2192*x2195))+(((-1.0)*r11*x2201))+(((-1.0)*r12*x2197))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst95*r20*x2197))+(((-1.0)*r22*x2200))+(((-1.0)*cj1*sj2))+((r21*x2199)));
evalcond[4]=(((cj0*x2194))+((cj0*x2196))+(((-1.0)*gconst95*r00*x2197))+(((-1.0)*r02*x2200))+((r01*x2199)));
evalcond[5]=((((-1.0)*x2195*x2197))+(((-1.0)*r12*x2200))+((sj0*x2194))+((sj0*x2196))+((r11*x2199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2202=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2202;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x2202);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2203=((1.0)*sj5);
IkReal x2204=((((-1.0)*r00*x2203))+(((-1.0)*cj5*r01)));
j4eval[0]=x2204;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x2203))))));
j4eval[2]=IKsign(x2204);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2205=cj5*cj5;
IkReal x2206=r11*r11;
IkReal x2207=(cj5*r10);
IkReal x2208=(r11*sj5);
IkReal x2209=((((-1.0)*x2206))+((x2205*x2206))+(((2.0)*x2207*x2208))+(((-1.0)*(r12*r12)))+(((-1.0)*x2205*(r10*r10))));
j4eval[0]=x2209;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2207))+x2208))));
j4eval[2]=IKsign(x2209);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2210=cj5*cj5;
IkReal x2211=r11*r11;
IkReal x2212=(cj5*r10);
IkReal x2213=(r11*sj5);
CheckValue<IkReal> x2214=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2211))+((x2210*x2211))+(((-1.0)*x2210*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x2212*x2213)))),-1);
if(!x2214.valid){
continue;
}
CheckValue<IkReal> x2215 = IKatan2WithCheck(IkReal(((((-1.0)*x2212))+x2213)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2215.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2214.value)))+(x2215.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2216=IKsin(j4);
IkReal x2217=IKcos(j4);
IkReal x2218=(cj5*r00);
IkReal x2219=((1.0)*x2217);
IkReal x2220=(sj5*x2217);
IkReal x2221=(cj5*x2216);
IkReal x2222=((1.0)*x2216);
IkReal x2223=(sj5*x2222);
evalcond[0]=((((-1.0)*r21*x2223))+(((-1.0)*r22*x2219))+((r20*x2221)));
evalcond[1]=((((-1.0)*r01*x2223))+((x2216*x2218))+(((-1.0)*r02*x2219)));
evalcond[2]=((((-1.0)*r12*x2222))+(((-1.0)*cj5*r10*x2219))+((r11*x2220)));
evalcond[3]=((-1.0)+((r10*x2221))+(((-1.0)*r12*x2219))+(((-1.0)*r11*x2223)));
evalcond[4]=((((-1.0)*x2218*x2219))+((sj1*sj2))+(((-1.0)*r02*x2222))+((cj1*cj2))+((r01*x2220)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj5*r20*x2219))+(((-1.0)*cj1*sj2))+((r21*x2220))+(((-1.0)*r22*x2222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2224=((1.0)*sj5);
CheckValue<IkReal> x2225 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x2224)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2225.valid){
continue;
}
CheckValue<IkReal> x2226=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2224))+(((-1.0)*cj5*r01)))),-1);
if(!x2226.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2225.value)+(((1.5707963267949)*(x2226.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2227=IKsin(j4);
IkReal x2228=IKcos(j4);
IkReal x2229=(cj5*r00);
IkReal x2230=((1.0)*x2228);
IkReal x2231=(sj5*x2228);
IkReal x2232=(cj5*x2227);
IkReal x2233=((1.0)*x2227);
IkReal x2234=(sj5*x2233);
evalcond[0]=((((-1.0)*r21*x2234))+((r20*x2232))+(((-1.0)*r22*x2230)));
evalcond[1]=((((-1.0)*r02*x2230))+(((-1.0)*r01*x2234))+((x2227*x2229)));
evalcond[2]=((((-1.0)*cj5*r10*x2230))+(((-1.0)*r12*x2233))+((r11*x2231)));
evalcond[3]=((-1.0)+((r10*x2232))+(((-1.0)*r11*x2234))+(((-1.0)*r12*x2230)));
evalcond[4]=((((-1.0)*r02*x2233))+((sj1*sj2))+(((-1.0)*x2229*x2230))+((cj1*cj2))+((r01*x2231)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((r21*x2231))+(((-1.0)*r22*x2233))+(((-1.0)*cj5*r20*x2230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2235=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2235.valid){
continue;
}
CheckValue<IkReal> x2236 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2235.value)))+(x2236.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2237=IKsin(j4);
IkReal x2238=IKcos(j4);
IkReal x2239=(cj5*r00);
IkReal x2240=((1.0)*x2238);
IkReal x2241=(sj5*x2238);
IkReal x2242=(cj5*x2237);
IkReal x2243=((1.0)*x2237);
IkReal x2244=(sj5*x2243);
evalcond[0]=((((-1.0)*r22*x2240))+((r20*x2242))+(((-1.0)*r21*x2244)));
evalcond[1]=((((-1.0)*r02*x2240))+((x2237*x2239))+(((-1.0)*r01*x2244)));
evalcond[2]=(((r11*x2241))+(((-1.0)*r12*x2243))+(((-1.0)*cj5*r10*x2240)));
evalcond[3]=((-1.0)+((r10*x2242))+(((-1.0)*r11*x2244))+(((-1.0)*r12*x2240)));
evalcond[4]=((((-1.0)*r02*x2243))+((sj1*sj2))+((r01*x2241))+(((-1.0)*x2239*x2240))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r22*x2243))+(((-1.0)*cj5*r20*x2240))+(((-1.0)*cj1*sj2))+((r21*x2241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2245=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2245;
j4eval[1]=IKsign(x2245);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2246=((1.0)*sj5);
IkReal x2247=((((-1.0)*cj5*r21))+(((-1.0)*r20*x2246)));
j4eval[0]=x2247;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x2246))+((cj5*r00))))));
j4eval[2]=IKsign(x2247);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2248=cj5*cj5;
IkReal x2249=r11*r11;
IkReal x2250=(r11*sj5);
IkReal x2251=(cj5*r10);
IkReal x2252=((r12*r12)+x2249+(((-1.0)*x2248*x2249))+(((-2.0)*x2250*x2251))+((x2248*(r10*r10))));
j4eval[0]=x2252;
j4eval[1]=IKsign(x2252);
j4eval[2]=((IKabs(r12))+(IKabs((x2250+(((-1.0)*x2251))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2253=cj5*cj5;
IkReal x2254=r11*r11;
IkReal x2255=(cj5*r10);
IkReal x2256=(r11*sj5);
CheckValue<IkReal> x2257 = IKatan2WithCheck(IkReal((x2256+(((-1.0)*x2255)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2257.valid){
continue;
}
CheckValue<IkReal> x2258=IKPowWithIntegerCheck(IKsign(((r12*r12)+x2254+(((-1.0)*x2253*x2254))+((x2253*(r10*r10)))+(((-2.0)*x2255*x2256)))),-1);
if(!x2258.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2257.value)+(((1.5707963267949)*(x2258.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2259=IKsin(j4);
IkReal x2260=IKcos(j4);
IkReal x2261=(cj5*r00);
IkReal x2262=((1.0)*sj2);
IkReal x2263=((1.0)*x2260);
IkReal x2264=(sj5*x2260);
IkReal x2265=(cj5*x2259);
IkReal x2266=((1.0)*x2259);
IkReal x2267=(sj5*x2266);
evalcond[0]=((((-1.0)*r21*x2267))+(((-1.0)*r22*x2263))+((r20*x2265)));
evalcond[1]=(((x2259*x2261))+(((-1.0)*r01*x2267))+(((-1.0)*r02*x2263)));
evalcond[2]=(((r11*x2264))+(((-1.0)*cj5*r10*x2263))+(((-1.0)*r12*x2266)));
evalcond[3]=((1.0)+((r10*x2265))+(((-1.0)*r12*x2263))+(((-1.0)*r11*x2267)));
evalcond[4]=((((-1.0)*cj1*x2262))+((cj2*sj1))+(((-1.0)*cj5*r20*x2263))+((r21*x2264))+(((-1.0)*r22*x2266)));
evalcond[5]=(((r01*x2264))+(((-1.0)*cj1*cj2))+(((-1.0)*x2261*x2263))+(((-1.0)*sj1*x2262))+(((-1.0)*r02*x2266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2268=((1.0)*sj5);
CheckValue<IkReal> x2269=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2268))+(((-1.0)*cj5*r21)))),-1);
if(!x2269.valid){
continue;
}
CheckValue<IkReal> x2270 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x2268))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2269.value)))+(x2270.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2271=IKsin(j4);
IkReal x2272=IKcos(j4);
IkReal x2273=(cj5*r00);
IkReal x2274=((1.0)*sj2);
IkReal x2275=((1.0)*x2272);
IkReal x2276=(sj5*x2272);
IkReal x2277=(cj5*x2271);
IkReal x2278=((1.0)*x2271);
IkReal x2279=(sj5*x2278);
evalcond[0]=((((-1.0)*r21*x2279))+(((-1.0)*r22*x2275))+((r20*x2277)));
evalcond[1]=((((-1.0)*r01*x2279))+(((-1.0)*r02*x2275))+((x2271*x2273)));
evalcond[2]=(((r11*x2276))+(((-1.0)*r12*x2278))+(((-1.0)*cj5*r10*x2275)));
evalcond[3]=((1.0)+((r10*x2277))+(((-1.0)*r11*x2279))+(((-1.0)*r12*x2275)));
evalcond[4]=((((-1.0)*cj5*r20*x2275))+((cj2*sj1))+((r21*x2276))+(((-1.0)*cj1*x2274))+(((-1.0)*r22*x2278)));
evalcond[5]=(((r01*x2276))+(((-1.0)*x2273*x2275))+(((-1.0)*cj1*cj2))+(((-1.0)*sj1*x2274))+(((-1.0)*r02*x2278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2280=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2280.valid){
continue;
}
CheckValue<IkReal> x2281 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2281.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2280.value)))+(x2281.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2282=IKsin(j4);
IkReal x2283=IKcos(j4);
IkReal x2284=(cj5*r00);
IkReal x2285=((1.0)*sj2);
IkReal x2286=((1.0)*x2283);
IkReal x2287=(sj5*x2283);
IkReal x2288=(cj5*x2282);
IkReal x2289=((1.0)*x2282);
IkReal x2290=(sj5*x2289);
evalcond[0]=(((r20*x2288))+(((-1.0)*r22*x2286))+(((-1.0)*r21*x2290)));
evalcond[1]=((((-1.0)*r02*x2286))+((x2282*x2284))+(((-1.0)*r01*x2290)));
evalcond[2]=(((r11*x2287))+(((-1.0)*r12*x2289))+(((-1.0)*cj5*r10*x2286)));
evalcond[3]=((1.0)+((r10*x2288))+(((-1.0)*r12*x2286))+(((-1.0)*r11*x2290)));
evalcond[4]=(((cj2*sj1))+((r21*x2287))+(((-1.0)*cj5*r20*x2286))+(((-1.0)*cj1*x2285))+(((-1.0)*r22*x2289)));
evalcond[5]=((((-1.0)*r02*x2289))+(((-1.0)*x2284*x2286))+(((-1.0)*sj1*x2285))+(((-1.0)*cj1*cj2))+((r01*x2287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2291=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2291);
rxp0_2=(py*r00);
rxp1_0=(r21*x2291);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2292=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2292);
rxp0_2=(py*r00);
rxp1_0=(r21*x2292);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2293=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2293);
rxp0_2=(py*r00);
rxp1_0=(r21*x2293);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2296=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x2296.valid){
continue;
}
IkReal x2294=x2296.value;
IkReal x2295=((1.0)*cj0*x2294);
cj4array[0]=((((-1.0)*sj1*sj2*x2295))+(((-1.0)*cj1*cj2*x2295)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2297=IKsin(j4);
IkReal x2298=IKcos(j4);
IkReal x2299=(cj5*r20);
IkReal x2300=((1.0)*x2298);
IkReal x2301=((1.0)*sj5*x2297);
evalcond[0]=((-1.0)*r12*x2297);
evalcond[1]=((((-1.0)*cj0))+(((-1.0)*r12*x2300)));
evalcond[2]=((((-1.0)*r21*x2301))+((x2297*x2299)));
evalcond[3]=((((-1.0)*r01*x2301))+((cj5*r00*x2297)));
evalcond[4]=(((cj2*sj1))+((r21*sj5*x2298))+(((-1.0)*cj1*sj2))+(((-1.0)*x2299*x2300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2303=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x2303.valid){
continue;
}
IkReal x2302=x2303.value;
cj4array[0]=(((cj1*sj2*x2302))+(((-1.0)*cj2*sj1*x2302)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2304=IKsin(j4);
IkReal x2305=IKcos(j4);
IkReal x2306=(cj5*r00);
IkReal x2307=(r01*sj5);
IkReal x2308=((1.0)*x2305);
IkReal x2309=((1.0)*x2304);
evalcond[0]=((-1.0)*r12*x2304);
evalcond[1]=((((-1.0)*cj0))+(((-1.0)*r12*x2308)));
evalcond[2]=(((cj5*r20*x2304))+(((-1.0)*r21*sj5*x2309)));
evalcond[3]=(((x2304*x2306))+(((-1.0)*x2307*x2309)));
evalcond[4]=((((-1.0)*x2306*x2308))+((x2305*x2307))+((cj0*cj1*cj2))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2310=IKPowWithIntegerCheck(r12,-1);
if(!x2310.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x2310.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2311=IKsin(j4);
IkReal x2312=IKcos(j4);
IkReal x2313=(r01*sj5);
IkReal x2314=(r21*sj5);
IkReal x2315=((1.0)*x2311);
IkReal x2316=(cj5*x2311);
IkReal x2317=((1.0)*cj5*x2312);
evalcond[0]=((-1.0)*r12*x2311);
evalcond[1]=((((-1.0)*x2314*x2315))+((r20*x2316)));
evalcond[2]=((((-1.0)*x2313*x2315))+((r00*x2316)));
evalcond[3]=(((x2312*x2314))+(((-1.0)*r20*x2317))+((cj2*sj1))+(((-1.0)*cj1*sj2)));
evalcond[4]=(((x2312*x2313))+((cj0*cj1*cj2))+(((-1.0)*r00*x2317))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2318=((1.0)*sj5);
CheckValue<IkReal> x2319 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x2318))+(((-1.0)*cj0*r01*x2318)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2319.valid){
continue;
}
CheckValue<IkReal> x2320=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2320.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2319.value)+(((1.5707963267949)*(x2320.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2321=IKsin(j4);
IkReal x2322=IKcos(j4);
IkReal x2323=(cj5*r00);
IkReal x2324=(cj1*cj2);
IkReal x2325=(sj1*sj2);
IkReal x2326=((1.0)*x2322);
IkReal x2327=(sj5*x2322);
IkReal x2328=(cj5*x2321);
IkReal x2329=((1.0)*x2321);
IkReal x2330=(sj5*x2329);
evalcond[0]=((((-1.0)*r22*x2326))+(((-1.0)*r21*x2330))+((r20*x2328)));
evalcond[1]=(sj0+((x2321*x2323))+(((-1.0)*r01*x2330))+(((-1.0)*r02*x2326)));
evalcond[2]=(((r10*x2328))+(((-1.0)*r12*x2326))+(((-1.0)*r11*x2330))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x2329))+((r21*x2327))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r20*x2326)));
evalcond[4]=(((cj0*x2324))+((cj0*x2325))+(((-1.0)*x2323*x2326))+((r01*x2327))+(((-1.0)*r02*x2329)));
evalcond[5]=(((r11*x2327))+((sj0*x2324))+((sj0*x2325))+(((-1.0)*r12*x2329))+(((-1.0)*cj5*r10*x2326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2331=((1.0)*sj5);
CheckValue<IkReal> x2332=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2331))+(((-1.0)*cj5*r01)))),-1);
if(!x2332.valid){
continue;
}
CheckValue<IkReal> x2333 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x2331))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2332.value)))+(x2333.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2334=IKsin(j4);
IkReal x2335=IKcos(j4);
IkReal x2336=(cj5*r00);
IkReal x2337=(cj1*cj2);
IkReal x2338=(sj1*sj2);
IkReal x2339=((1.0)*x2335);
IkReal x2340=(sj5*x2335);
IkReal x2341=(cj5*x2334);
IkReal x2342=((1.0)*x2334);
IkReal x2343=(sj5*x2342);
evalcond[0]=((((-1.0)*r21*x2343))+(((-1.0)*r22*x2339))+((r20*x2341)));
evalcond[1]=(sj0+(((-1.0)*r01*x2343))+((x2334*x2336))+(((-1.0)*r02*x2339)));
evalcond[2]=(((r10*x2341))+(((-1.0)*r11*x2343))+(((-1.0)*r12*x2339))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*cj5*r20*x2339))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2342))+((r21*x2340)));
evalcond[4]=(((r01*x2340))+(((-1.0)*r02*x2342))+((cj0*x2338))+((cj0*x2337))+(((-1.0)*x2336*x2339)));
evalcond[5]=((((-1.0)*cj5*r10*x2339))+((sj0*x2338))+((sj0*x2337))+((r11*x2340))+(((-1.0)*r12*x2342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2344=((1.0)*sj5);
CheckValue<IkReal> x2345=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x2344)))),-1);
if(!x2345.valid){
continue;
}
CheckValue<IkReal> x2346 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x2344))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2345.value)))+(x2346.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2347=IKsin(j4);
IkReal x2348=IKcos(j4);
IkReal x2349=(cj5*r00);
IkReal x2350=(cj1*cj2);
IkReal x2351=(sj1*sj2);
IkReal x2352=((1.0)*x2348);
IkReal x2353=(sj5*x2348);
IkReal x2354=(cj5*x2347);
IkReal x2355=((1.0)*x2347);
IkReal x2356=(sj5*x2355);
evalcond[0]=((((-1.0)*r21*x2356))+(((-1.0)*r22*x2352))+((r20*x2354)));
evalcond[1]=(sj0+(((-1.0)*r01*x2356))+(((-1.0)*r02*x2352))+((x2347*x2349)));
evalcond[2]=(((r10*x2354))+(((-1.0)*r12*x2352))+(((-1.0)*r11*x2356))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2355))+(((-1.0)*cj5*r20*x2352))+((r21*x2353)));
evalcond[4]=(((cj0*x2351))+((cj0*x2350))+((r01*x2353))+(((-1.0)*r02*x2355))+(((-1.0)*x2349*x2352)));
evalcond[5]=(((sj0*x2351))+((sj0*x2350))+((r11*x2353))+(((-1.0)*cj5*r10*x2352))+(((-1.0)*r12*x2355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2357=cj5*cj5;
IkReal x2358=r21*r21;
IkReal x2359=(cj5*r20);
IkReal x2360=(cj2*sj1);
IkReal x2361=(r21*sj5);
IkReal x2362=((1.0)*cj1*sj2);
CheckValue<IkReal> x2363=IKPowWithIntegerCheck(IKsign(((r22*r22)+x2358+(((-1.0)*x2357*x2358))+(((-2.0)*x2359*x2361))+((x2357*(r20*r20))))),-1);
if(!x2363.valid){
continue;
}
CheckValue<IkReal> x2364 = IKatan2WithCheck(IkReal((((r22*x2360))+(((-1.0)*r22*x2362)))),IkReal((((cj1*sj2*x2361))+(((-1.0)*x2360*x2361))+((x2359*x2360))+(((-1.0)*x2359*x2362)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2363.value)))+(x2364.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2365=IKsin(j4);
IkReal x2366=IKcos(j4);
IkReal x2367=(cj5*r20);
IkReal x2368=(r21*sj5);
IkReal x2369=((1.0)*x2366);
IkReal x2370=((1.0)*x2365);
evalcond[0]=(((x2365*x2367))+(((-1.0)*x2368*x2370))+(((-1.0)*r22*x2369)));
evalcond[1]=(((cj2*sj1))+((x2366*x2368))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2370))+(((-1.0)*x2367*x2369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2371=(cj5*sj4);
IkReal x2372=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x2371))+((r01*x2372))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x2371))+(((-1.0)*r11*x2372))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x2371))+((r01*x2372))+((cj4*r02))))+IKsqr((((r10*x2371))+(((-1.0)*r11*x2372))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x2371))+((r01*x2372))+((cj4*r02))), (((r10*x2371))+(((-1.0)*r11*x2372))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2373=IKcos(j0);
IkReal x2374=IKsin(j0);
IkReal x2375=((0.376)*sj1);
IkReal x2376=(cj5*r00);
IkReal x2377=(cj5*r01);
IkReal x2378=((1.0)*sj4);
IkReal x2379=(r01*sj5);
IkReal x2380=((1.0)*cj4);
IkReal x2381=((1.0)*sj1);
IkReal x2382=(cj5*r11);
IkReal x2383=((0.408)*sj1);
IkReal x2384=((1.0)*sj5);
IkReal x2385=(cj5*r10);
IkReal x2386=(sj1*sj2);
IkReal x2387=(r11*sj5);
IkReal x2388=((0.1025)*sj5);
IkReal x2389=(cj2*x2374);
IkReal x2390=(cj2*x2373);
IkReal x2391=(cj1*x2374);
IkReal x2392=(cj1*sj2*x2373);
evalcond[0]=((((-1.0)*r02*x2380))+x2374+(((-1.0)*x2378*x2379))+((sj4*x2376)));
evalcond[1]=((((-1.0)*r12*x2380))+((sj4*x2385))+(((-1.0)*x2378*x2387))+(((-1.0)*x2373)));
evalcond[2]=((((-1.0)*x2381*x2390))+(((-1.0)*r00*x2384))+x2392+(((-1.0)*x2377)));
evalcond[3]=((((-1.0)*r10*x2384))+(((-1.0)*x2381*x2389))+(((-1.0)*x2382))+((sj2*x2391)));
evalcond[4]=((((-1.0)*r02*x2378))+(((-1.0)*x2376*x2380))+((cj4*x2379))+((x2373*x2386))+((cj1*x2390)));
evalcond[5]=((((-1.0)*x2380*x2385))+((x2374*x2386))+(((-1.0)*r12*x2378))+((cj1*x2389))+((cj4*x2387)));
evalcond[6]=((((1.97e-6)*cj1*x2373))+(((-1.0)*x2375*x2390))+(((0.1025)*x2377))+((r00*x2388))+(((0.1215)*x2374))+(((8.9e-7)*x2373))+(((-1.0)*px))+(((-1.0)*x2373*x2383))+(((0.376)*x2392)));
evalcond[7]=((((-1.0)*x2374*x2383))+(((0.376)*sj2*x2391))+(((-1.0)*x2375*x2389))+(((8.9e-7)*x2374))+(((1.97e-6)*x2391))+(((-1.0)*py))+(((0.1025)*x2382))+(((-0.1215)*x2373))+((r10*x2388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2393=IKPowWithIntegerCheck(IKsign((((cj1*sj2))+(((-1.0)*cj2*sj1)))),-1);
if(!x2393.valid){
continue;
}
CheckValue<IkReal> x2394 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2394.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2393.value)))+(x2394.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2395=IKcos(j0);
IkReal x2396=IKsin(j0);
IkReal x2397=(cj2*sj1);
IkReal x2398=(cj5*r01);
IkReal x2399=(cj5*r11);
IkReal x2400=(cj1*sj2);
IkReal x2401=((0.408)*sj1);
IkReal x2402=((1.0)*sj5);
IkReal x2403=((1.97e-6)*cj1);
IkReal x2404=((0.1025)*sj5);
IkReal x2405=((0.376)*x2396);
IkReal x2406=((0.376)*x2395);
evalcond[0]=((((-1.0)*r00*x2402))+(((-1.0)*x2398))+(((-1.0)*x2395*x2397))+((x2395*x2400)));
evalcond[1]=((((-1.0)*x2399))+((x2396*x2400))+(((-1.0)*r10*x2402))+(((-1.0)*x2396*x2397)));
evalcond[2]=((((8.9e-7)*x2395))+((r00*x2404))+(((-1.0)*x2397*x2406))+(((0.1025)*x2398))+(((-1.0)*x2395*x2401))+(((-1.0)*px))+((x2400*x2406))+(((0.1215)*x2396))+((x2395*x2403)));
evalcond[3]=(((r10*x2404))+(((8.9e-7)*x2396))+(((-1.0)*x2397*x2405))+(((0.1025)*x2399))+(((-1.0)*py))+((x2400*x2405))+(((-1.0)*x2396*x2401))+((x2396*x2403))+(((-0.1215)*x2395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2407=((1.0)*sj5);
IkReal x2408=((((-1.0)*cj5*r11))+(((-1.0)*r10*x2407)));
j4eval[0]=x2408;
j4eval[1]=IKsign(x2408);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x2407))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2409=((1.0)*sj5);
IkReal x2410=((((-1.0)*r00*x2409))+(((-1.0)*cj5*r01)));
j4eval[0]=x2410;
j4eval[1]=IKsign(x2410);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x2409))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2411=((1.0)*sj5);
IkReal x2412=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2412;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs(((((-1.0)*r11*sj0*x2411))+((cj0*cj5*r00))+(((-1.0)*cj0*r01*x2411))+((cj5*r10*sj0))))));
j4eval[2]=IKsign(x2412);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2414 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2414)==0){
continue;
}
IkReal x2413=pow(x2414,-0.5);
CheckValue<IkReal> x2415 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2415.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2415.value));
IkReal gconst79=((-1.0)*r21*x2413);
IkReal gconst80=(r20*x2413);
CheckValue<IkReal> x2416 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2416.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2416.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x2419 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2419.valid){
continue;
}
IkReal x2417=((-1.0)*(x2419.value));
IkReal x2418=x2413;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2417;
IkReal gconst78=x2417;
IkReal gconst79=((-1.0)*r21*x2418);
IkReal gconst80=(r20*x2418);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2422 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2422.valid){
continue;
}
IkReal x2420=((-1.0)*(x2422.value));
IkReal x2421=x2413;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2420;
IkReal gconst78=x2420;
IkReal gconst79=((-1.0)*r21*x2421);
IkReal gconst80=(r20*x2421);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x2425 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2425.valid){
continue;
}
IkReal x2423=((-1.0)*(x2425.value));
IkReal x2424=x2413;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2423;
IkReal gconst78=x2423;
IkReal gconst79=((-1.0)*r21*x2424);
IkReal gconst80=(r20*x2424);
IkReal x2426=r22*r22;
CheckValue<IkReal> x2429=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2426))),-1);
if(!x2429.valid){
continue;
}
IkReal x2427=x2429.value;
IkReal x2428=(((x2427*(r21*r21*r21*r21)))+x2426+((x2427*(r20*r20*r20*r20)))+(((2.0)*x2427*(r20*r20)*(r21*r21))));
j4eval[0]=x2428;
j4eval[1]=IKsign(x2428);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2430=(cj1*sj2);
IkReal x2431=(gconst79*r21);
IkReal x2432=(cj2*sj1);
IkReal x2433=(gconst80*r20);
CheckValue<IkReal> x2434 = IKatan2WithCheck(IkReal((((r22*x2432))+(((-1.0)*r22*x2430)))),IkReal(((((-1.0)*x2431*x2432))+((x2432*x2433))+((x2430*x2431))+(((-1.0)*x2430*x2433)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2434.valid){
continue;
}
CheckValue<IkReal> x2435=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x2431*x2433))+(x2433*x2433)+(x2431*x2431))),-1);
if(!x2435.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2434.value)+(((1.5707963267949)*(x2435.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2436=IKsin(j4);
IkReal x2437=IKcos(j4);
IkReal x2438=(cj1*cj2);
IkReal x2439=(gconst80*r20);
IkReal x2440=(sj1*sj2);
IkReal x2441=(gconst79*r21);
IkReal x2442=(gconst80*r10);
IkReal x2443=(gconst79*r01);
IkReal x2444=(gconst79*r11);
IkReal x2445=(gconst80*r00);
IkReal x2446=((1.0)*x2437);
IkReal x2447=((1.0)*x2436);
evalcond[0]=((((-1.0)*x2441*x2447))+((x2436*x2439))+(((-1.0)*r22*x2446)));
evalcond[1]=((((-1.0)*x2443*x2447))+sj0+((x2436*x2445))+(((-1.0)*r02*x2446)));
evalcond[2]=((((-1.0)*x2444*x2447))+(((-1.0)*r12*x2446))+((x2436*x2442))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x2439*x2446))+((x2437*x2441))+(((-1.0)*r22*x2447)));
evalcond[4]=((((-1.0)*x2445*x2446))+((cj0*x2438))+((cj0*x2440))+((x2437*x2443))+(((-1.0)*r02*x2447)));
evalcond[5]=(((sj0*x2440))+(((-1.0)*r12*x2447))+((x2437*x2444))+((sj0*x2438))+(((-1.0)*x2442*x2446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2448=((1.0)*gconst79);
CheckValue<IkReal> x2449=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst80*r01))+(((-1.0)*r00*x2448)))),-1);
if(!x2449.valid){
continue;
}
CheckValue<IkReal> x2450 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x2448))+((cj0*gconst80*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2449.value)))+(x2450.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2451=IKsin(j4);
IkReal x2452=IKcos(j4);
IkReal x2453=(cj1*cj2);
IkReal x2454=(gconst80*r20);
IkReal x2455=(sj1*sj2);
IkReal x2456=(gconst79*r21);
IkReal x2457=(gconst80*r10);
IkReal x2458=(gconst79*r01);
IkReal x2459=(gconst79*r11);
IkReal x2460=(gconst80*r00);
IkReal x2461=((1.0)*x2452);
IkReal x2462=((1.0)*x2451);
evalcond[0]=((((-1.0)*r22*x2461))+(((-1.0)*x2456*x2462))+((x2451*x2454)));
evalcond[1]=(sj0+((x2451*x2460))+(((-1.0)*r02*x2461))+(((-1.0)*x2458*x2462)));
evalcond[2]=((((-1.0)*r12*x2461))+((x2451*x2457))+(((-1.0)*cj0))+(((-1.0)*x2459*x2462)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x2462))+(((-1.0)*x2454*x2461))+((x2452*x2456))+(((-1.0)*cj1*sj2)));
evalcond[4]=(((x2452*x2458))+((cj0*x2455))+((cj0*x2453))+(((-1.0)*x2460*x2461))+(((-1.0)*r02*x2462)));
evalcond[5]=(((sj0*x2453))+((sj0*x2455))+((x2452*x2459))+(((-1.0)*x2457*x2461))+(((-1.0)*r12*x2462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2463=((1.0)*gconst79);
CheckValue<IkReal> x2464 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst80*r20*sj0))+(((-1.0)*r21*sj0*x2463)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2464.valid){
continue;
}
CheckValue<IkReal> x2465=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2463))+(((-1.0)*gconst80*r11)))),-1);
if(!x2465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2464.value)+(((1.5707963267949)*(x2465.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2466=IKsin(j4);
IkReal x2467=IKcos(j4);
IkReal x2468=(cj1*cj2);
IkReal x2469=(gconst80*r20);
IkReal x2470=(sj1*sj2);
IkReal x2471=(gconst79*r21);
IkReal x2472=(gconst80*r10);
IkReal x2473=(gconst79*r01);
IkReal x2474=(gconst79*r11);
IkReal x2475=(gconst80*r00);
IkReal x2476=((1.0)*x2467);
IkReal x2477=((1.0)*x2466);
evalcond[0]=(((x2466*x2469))+(((-1.0)*x2471*x2477))+(((-1.0)*r22*x2476)));
evalcond[1]=(sj0+(((-1.0)*x2473*x2477))+(((-1.0)*r02*x2476))+((x2466*x2475)));
evalcond[2]=((((-1.0)*r12*x2476))+(((-1.0)*x2474*x2477))+((x2466*x2472))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((x2467*x2471))+(((-1.0)*cj1*sj2))+(((-1.0)*x2469*x2476))+(((-1.0)*r22*x2477)));
evalcond[4]=(((x2467*x2473))+((cj0*x2470))+(((-1.0)*x2475*x2476))+(((-1.0)*r02*x2477))+((cj0*x2468)));
evalcond[5]=((((-1.0)*r12*x2477))+((x2467*x2474))+(((-1.0)*x2472*x2476))+((sj0*x2470))+((sj0*x2468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2479 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2479)==0){
continue;
}
IkReal x2478=pow(x2479,-0.5);
CheckValue<IkReal> x2480 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2480.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2480.value))));
IkReal gconst82=((1.0)*r21*x2478);
IkReal gconst83=((-1.0)*r20*x2478);
CheckValue<IkReal> x2481 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2481.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2481.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x2484 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2484.valid){
continue;
}
IkReal x2482=((1.0)*(x2484.value));
IkReal x2483=x2478;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2482)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2482)));
IkReal gconst82=((1.0)*r21*x2483);
IkReal gconst83=((-1.0)*r20*x2483);
IkReal x2485=r22*r22;
IkReal x2486=((1.0)*x2485);
CheckValue<IkReal> x2490=IKPowWithIntegerCheck(((-1.0)+x2485),-1);
if(!x2490.valid){
continue;
}
IkReal x2487=x2490.value;
if((((1.0)+(((-1.0)*x2486)))) < -0.00001)
continue;
IkReal x2488=IKsqrt(((1.0)+(((-1.0)*x2486))));
IkReal x2489=(sj0*x2487*x2488);
j4eval[0]=((IKabs((x2489+(((-1.0)*x2486*x2489)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2493 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2493.valid){
continue;
}
IkReal x2491=((1.0)*(x2493.value));
IkReal x2492=x2478;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2491)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2491)));
IkReal gconst82=((1.0)*r21*x2492);
IkReal gconst83=((-1.0)*r20*x2492);
IkReal x2494=r22*r22;
IkReal x2495=((1.0)*x2494);
CheckValue<IkReal> x2499=IKPowWithIntegerCheck(((-1.0)+x2494),-1);
if(!x2499.valid){
continue;
}
IkReal x2496=x2499.value;
if((((1.0)+(((-1.0)*x2495)))) < -0.00001)
continue;
IkReal x2497=IKsqrt(((1.0)+(((-1.0)*x2495))));
IkReal x2498=(cj0*x2496*x2497);
j4eval[0]=((IKabs(((((-1.0)*x2495*x2498))+x2498)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x2502 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2502.valid){
continue;
}
IkReal x2500=((1.0)*(x2502.value));
IkReal x2501=x2478;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2500)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2500)));
IkReal gconst82=((1.0)*r21*x2501);
IkReal gconst83=((-1.0)*r20*x2501);
IkReal x2503=r22*r22;
IkReal x2504=(cj0*r02);
IkReal x2505=(r12*sj0);
CheckValue<IkReal> x2509=IKPowWithIntegerCheck(((-1.0)+x2503),-1);
if(!x2509.valid){
continue;
}
IkReal x2506=x2509.value;
if((((1.0)+(((-1.0)*x2503)))) < -0.00001)
continue;
IkReal x2507=IKsqrt(((1.0)+(((-1.0)*x2503))));
IkReal x2508=((1.0)*r22*x2506*x2507);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x2504*x2508))+(((-1.0)*x2505*x2508)))))+(IKabs((x2505+x2504))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2510=((1.0)*gconst82);
CheckValue<IkReal> x2511=IKPowWithIntegerCheck(IKsign((((gconst83*r21))+((gconst82*r20)))),-1);
if(!x2511.valid){
continue;
}
CheckValue<IkReal> x2512 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst83*r10*sj0))+((cj0*gconst83*r00))+(((-1.0)*cj0*r01*x2510))+(((-1.0)*r11*sj0*x2510)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2512.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2511.value)))+(x2512.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2513=IKsin(j4);
IkReal x2514=IKcos(j4);
IkReal x2515=(cj1*cj2);
IkReal x2516=(sj1*sj2);
IkReal x2517=(gconst82*r01);
IkReal x2518=(gconst82*r21);
IkReal x2519=(gconst82*r11);
IkReal x2520=((1.0)*x2514);
IkReal x2521=(gconst83*x2513);
IkReal x2522=((1.0)*x2513);
evalcond[0]=(((r20*x2521))+(((-1.0)*x2518*x2522))+(((-1.0)*r22*x2520)));
evalcond[1]=(sj0+((r00*x2521))+(((-1.0)*x2517*x2522))+(((-1.0)*r02*x2520)));
evalcond[2]=((((-1.0)*r12*x2520))+(((-1.0)*x2519*x2522))+((r10*x2521))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((x2514*x2518))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst83*r20*x2520))+(((-1.0)*r22*x2522)));
evalcond[4]=(((cj0*x2516))+((cj0*x2515))+((x2514*x2517))+(((-1.0)*gconst83*r00*x2520))+(((-1.0)*r02*x2522)));
evalcond[5]=((((-1.0)*gconst83*r10*x2520))+(((-1.0)*r12*x2522))+((x2514*x2519))+((sj0*x2516))+((sj0*x2515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2523=((1.0)*gconst82);
CheckValue<IkReal> x2524=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst83*r01))+(((-1.0)*r00*x2523)))),-1);
if(!x2524.valid){
continue;
}
CheckValue<IkReal> x2525 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst83*r20))+(((-1.0)*cj0*r21*x2523)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2524.value)))+(x2525.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2526=IKsin(j4);
IkReal x2527=IKcos(j4);
IkReal x2528=(cj1*cj2);
IkReal x2529=(sj1*sj2);
IkReal x2530=(gconst82*r01);
IkReal x2531=(gconst82*r21);
IkReal x2532=(gconst82*r11);
IkReal x2533=((1.0)*x2527);
IkReal x2534=(gconst83*x2526);
IkReal x2535=((1.0)*x2526);
evalcond[0]=(((r20*x2534))+(((-1.0)*x2531*x2535))+(((-1.0)*r22*x2533)));
evalcond[1]=(sj0+(((-1.0)*r02*x2533))+(((-1.0)*x2530*x2535))+((r00*x2534)));
evalcond[2]=(((r10*x2534))+(((-1.0)*r12*x2533))+(((-1.0)*x2532*x2535))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst83*r20*x2533))+((cj2*sj1))+(((-1.0)*cj1*sj2))+((x2527*x2531))+(((-1.0)*r22*x2535)));
evalcond[4]=((((-1.0)*r02*x2535))+((x2527*x2530))+(((-1.0)*gconst83*r00*x2533))+((cj0*x2528))+((cj0*x2529)));
evalcond[5]=(((x2527*x2532))+((sj0*x2528))+((sj0*x2529))+(((-1.0)*gconst83*r10*x2533))+(((-1.0)*r12*x2535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2536=((1.0)*gconst82);
CheckValue<IkReal> x2537 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x2536))+((gconst83*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2537.valid){
continue;
}
CheckValue<IkReal> x2538=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2536))+(((-1.0)*gconst83*r11)))),-1);
if(!x2538.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2537.value)+(((1.5707963267949)*(x2538.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2539=IKsin(j4);
IkReal x2540=IKcos(j4);
IkReal x2541=(cj1*cj2);
IkReal x2542=(sj1*sj2);
IkReal x2543=(gconst82*r01);
IkReal x2544=(gconst82*r21);
IkReal x2545=(gconst82*r11);
IkReal x2546=((1.0)*x2540);
IkReal x2547=(gconst83*x2539);
IkReal x2548=((1.0)*x2539);
evalcond[0]=((((-1.0)*x2544*x2548))+((r20*x2547))+(((-1.0)*r22*x2546)));
evalcond[1]=(sj0+(((-1.0)*x2543*x2548))+((r00*x2547))+(((-1.0)*r02*x2546)));
evalcond[2]=((((-1.0)*r12*x2546))+(((-1.0)*x2545*x2548))+(((-1.0)*cj0))+((r10*x2547)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst83*r20*x2546))+((x2540*x2544))+(((-1.0)*r22*x2548)));
evalcond[4]=((((-1.0)*gconst83*r00*x2546))+((x2540*x2543))+(((-1.0)*r02*x2548))+((cj0*x2542))+((cj0*x2541)));
evalcond[5]=((((-1.0)*r12*x2548))+((x2540*x2545))+((sj0*x2541))+((sj0*x2542))+(((-1.0)*gconst83*r10*x2546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2549=((-1.0)*r00);
IkReal x2551 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2551)==0){
continue;
}
IkReal x2550=pow(x2551,-0.5);
CheckValue<IkReal> x2552 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2549),IKFAST_ATAN2_MAGTHRESH);
if(!x2552.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2552.value));
IkReal gconst85=(r01*x2550);
IkReal gconst86=(x2549*x2550);
CheckValue<IkReal> x2553 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2553.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2553.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2554=((-1.0)*r00);
IkReal x2555=x2550;
CheckValue<IkReal> x2557 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2554),IKFAST_ATAN2_MAGTHRESH);
if(!x2557.valid){
continue;
}
IkReal x2556=((-1.0)*(x2557.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst85;
cj5=gconst86;
j5=x2556;
IkReal gconst84=x2556;
IkReal gconst85=(r01*x2555);
IkReal gconst86=(x2554*x2555);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2558=((1.0)*gconst85);
CheckValue<IkReal> x2559 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x2558))+((cj0*gconst86*r00))+(((-1.0)*r11*sj0*x2558))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2559.valid){
continue;
}
CheckValue<IkReal> x2560=IKPowWithIntegerCheck(IKsign((((gconst86*r21))+((gconst85*r20)))),-1);
if(!x2560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2559.value)+(((1.5707963267949)*(x2560.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2561=IKsin(j4);
IkReal x2562=IKcos(j4);
IkReal x2563=(cj1*cj2);
IkReal x2564=(sj1*sj2);
IkReal x2565=((1.0)*x2562);
IkReal x2566=(gconst86*x2561);
IkReal x2567=(gconst85*x2562);
IkReal x2568=((1.0)*x2561);
IkReal x2569=(gconst85*x2568);
evalcond[0]=((((-1.0)*r22*x2565))+(((-1.0)*r21*x2569))+((r20*x2566)));
evalcond[1]=(((r00*x2566))+sj0+(((-1.0)*r01*x2569))+(((-1.0)*r02*x2565)));
evalcond[2]=(((r10*x2566))+(((-1.0)*r12*x2565))+(((-1.0)*cj0))+(((-1.0)*r11*x2569)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x2568))+(((-1.0)*gconst86*r20*x2565))+(((-1.0)*cj1*sj2))+((r21*x2567)));
evalcond[4]=((((-1.0)*gconst86*r00*x2565))+((r01*x2567))+(((-1.0)*r02*x2568))+((cj0*x2563))+((cj0*x2564)));
evalcond[5]=(((r11*x2567))+((sj0*x2564))+((sj0*x2563))+(((-1.0)*r12*x2568))+(((-1.0)*gconst86*r10*x2565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2570=((1.0)*gconst85);
CheckValue<IkReal> x2571=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2570))+(((-1.0)*gconst86*r11)))),-1);
if(!x2571.valid){
continue;
}
CheckValue<IkReal> x2572 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst86*r20*sj0))+(((-1.0)*r21*sj0*x2570)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2572.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2571.value)))+(x2572.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2573=IKsin(j4);
IkReal x2574=IKcos(j4);
IkReal x2575=(cj1*cj2);
IkReal x2576=(sj1*sj2);
IkReal x2577=((1.0)*x2574);
IkReal x2578=(gconst86*x2573);
IkReal x2579=(gconst85*x2574);
IkReal x2580=((1.0)*x2573);
IkReal x2581=(gconst85*x2580);
evalcond[0]=((((-1.0)*r21*x2581))+((r20*x2578))+(((-1.0)*r22*x2577)));
evalcond[1]=((((-1.0)*r01*x2581))+sj0+((r00*x2578))+(((-1.0)*r02*x2577)));
evalcond[2]=(((r10*x2578))+(((-1.0)*r12*x2577))+(((-1.0)*r11*x2581))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x2579))+((cj2*sj1))+(((-1.0)*gconst86*r20*x2577))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2580)));
evalcond[4]=((((-1.0)*r02*x2580))+((r01*x2579))+(((-1.0)*gconst86*r00*x2577))+((cj0*x2575))+((cj0*x2576)));
evalcond[5]=(((r11*x2579))+(((-1.0)*gconst86*r10*x2577))+((sj0*x2575))+((sj0*x2576))+(((-1.0)*r12*x2580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2582=((-1.0)*r01);
IkReal x2584 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2584)==0){
continue;
}
IkReal x2583=pow(x2584,-0.5);
CheckValue<IkReal> x2585 = IKatan2WithCheck(IkReal(x2582),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2585.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2585.value))));
IkReal gconst88=(x2582*x2583);
IkReal gconst89=((1.0)*r00*x2583);
CheckValue<IkReal> x2586 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2586.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2586.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2587=((-1.0)*r01);
CheckValue<IkReal> x2590 = IKatan2WithCheck(IkReal(x2587),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2590.valid){
continue;
}
IkReal x2588=((1.0)*(x2590.value));
IkReal x2589=x2583;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2588)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2588)));
IkReal gconst88=(x2587*x2589);
IkReal gconst89=((1.0)*r00*x2589);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x2591=((-1.0)*r01);
CheckValue<IkReal> x2594 = IKatan2WithCheck(IkReal(x2591),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2594.valid){
continue;
}
IkReal x2592=((1.0)*(x2594.value));
IkReal x2593=x2583;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2592)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2592)));
IkReal gconst88=(x2591*x2593);
IkReal gconst89=((1.0)*r00*x2593);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2595=((-1.0)*r01);
CheckValue<IkReal> x2598 = IKatan2WithCheck(IkReal(x2595),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2598.valid){
continue;
}
IkReal x2596=((1.0)*(x2598.value));
IkReal x2597=x2583;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2596)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2596)));
IkReal gconst88=(x2595*x2597);
IkReal gconst89=((1.0)*r00*x2597);
IkReal x2599=r02*r02;
IkReal x2600=(r12*sj0);
IkReal x2601=x2583;
IkReal x2602=(cj0*x2601);
j4eval[0]=((IKabs(((((-1.0)*x2602))+((r02*x2600*x2601))+((x2599*x2602)))))+(IKabs((x2600+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2603=((1.0)*gconst88);
CheckValue<IkReal> x2604=IKPowWithIntegerCheck(IKsign((((gconst89*r21))+((gconst88*r20)))),-1);
if(!x2604.valid){
continue;
}
CheckValue<IkReal> x2605 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x2603))+(((-1.0)*cj0*r01*x2603))+((cj0*gconst89*r00))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2605.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2604.value)))+(x2605.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2606=IKsin(j4);
IkReal x2607=IKcos(j4);
IkReal x2608=(cj1*cj2);
IkReal x2609=(gconst89*r10);
IkReal x2610=(sj1*sj2);
IkReal x2611=((1.0)*x2607);
IkReal x2612=(gconst88*x2607);
IkReal x2613=(gconst89*x2606);
IkReal x2614=((1.0)*x2606);
evalcond[0]=(((r20*x2613))+(((-1.0)*gconst88*r21*x2614))+(((-1.0)*r22*x2611)));
evalcond[1]=(((r00*x2613))+(((-1.0)*gconst88*r01*x2614))+sj0+(((-1.0)*r02*x2611)));
evalcond[2]=((((-1.0)*gconst88*r11*x2614))+(((-1.0)*r12*x2611))+((x2606*x2609))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst89*r20*x2611))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2614))+((r21*x2612)));
evalcond[4]=(((r01*x2612))+((cj0*x2608))+(((-1.0)*r02*x2614))+(((-1.0)*gconst89*r00*x2611))+((cj0*x2610)));
evalcond[5]=((((-1.0)*x2609*x2611))+(((-1.0)*r12*x2614))+((sj0*x2608))+((r11*x2612))+((sj0*x2610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2615=((1.0)*gconst88);
CheckValue<IkReal> x2616 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x2615))+((cj0*gconst89*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2616.valid){
continue;
}
CheckValue<IkReal> x2617=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2615))+(((-1.0)*gconst89*r01)))),-1);
if(!x2617.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2616.value)+(((1.5707963267949)*(x2617.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2618=IKsin(j4);
IkReal x2619=IKcos(j4);
IkReal x2620=(cj1*cj2);
IkReal x2621=(gconst89*r10);
IkReal x2622=(sj1*sj2);
IkReal x2623=((1.0)*x2619);
IkReal x2624=(gconst88*x2619);
IkReal x2625=(gconst89*x2618);
IkReal x2626=((1.0)*x2618);
evalcond[0]=(((r20*x2625))+(((-1.0)*gconst88*r21*x2626))+(((-1.0)*r22*x2623)));
evalcond[1]=(((r00*x2625))+sj0+(((-1.0)*r02*x2623))+(((-1.0)*gconst88*r01*x2626)));
evalcond[2]=((((-1.0)*gconst88*r11*x2626))+(((-1.0)*r12*x2623))+((x2618*x2621))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst89*r20*x2623))+((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2626))+((r21*x2624)));
evalcond[4]=(((r01*x2624))+(((-1.0)*r02*x2626))+((cj0*x2620))+((cj0*x2622))+(((-1.0)*gconst89*r00*x2623)));
evalcond[5]=((((-1.0)*r12*x2626))+((r11*x2624))+((sj0*x2620))+((sj0*x2622))+(((-1.0)*x2621*x2623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2627=((1.0)*gconst88);
CheckValue<IkReal> x2628=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst89*r11))+(((-1.0)*r10*x2627)))),-1);
if(!x2628.valid){
continue;
}
CheckValue<IkReal> x2629 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst89*r20*sj0))+(((-1.0)*r21*sj0*x2627)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2629.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2628.value)))+(x2629.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2630=IKsin(j4);
IkReal x2631=IKcos(j4);
IkReal x2632=(cj1*cj2);
IkReal x2633=(gconst89*r10);
IkReal x2634=(sj1*sj2);
IkReal x2635=((1.0)*x2631);
IkReal x2636=(gconst88*x2631);
IkReal x2637=(gconst89*x2630);
IkReal x2638=((1.0)*x2630);
evalcond[0]=(((r20*x2637))+(((-1.0)*gconst88*r21*x2638))+(((-1.0)*r22*x2635)));
evalcond[1]=(sj0+(((-1.0)*r02*x2635))+((r00*x2637))+(((-1.0)*gconst88*r01*x2638)));
evalcond[2]=((((-1.0)*r12*x2635))+((x2630*x2633))+(((-1.0)*gconst88*r11*x2638))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((r21*x2636))+(((-1.0)*gconst89*r20*x2635))+(((-1.0)*r22*x2638)));
evalcond[4]=((((-1.0)*r02*x2638))+(((-1.0)*gconst89*r00*x2635))+((cj0*x2634))+((cj0*x2632))+((r01*x2636)));
evalcond[5]=(((sj0*x2634))+((sj0*x2632))+((r11*x2636))+(((-1.0)*r12*x2638))+(((-1.0)*x2633*x2635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2639=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2639;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x2639);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2640=((1.0)*sj5);
IkReal x2641=((((-1.0)*cj5*r11))+(((-1.0)*r10*x2640)));
j4eval[0]=x2641;
j4eval[1]=IKsign(x2641);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x2640))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2642=cj5*cj5;
IkReal x2643=r01*r01;
IkReal x2644=(cj5*r00);
IkReal x2645=(r01*sj5);
IkReal x2646=(((x2642*(r00*r00)))+(((-2.0)*x2644*x2645))+(r02*r02)+(((-1.0)*x2642*x2643))+x2643);
j4eval[0]=x2646;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x2644))+x2645))));
j4eval[2]=IKsign(x2646);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2647=cj5*cj5;
IkReal x2648=r01*r01;
IkReal x2649=(r01*sj5);
IkReal x2650=(cj5*r00);
CheckValue<IkReal> x2651 = IKatan2WithCheck(IkReal(((((-1.0)*x2650))+x2649)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2651.valid){
continue;
}
CheckValue<IkReal> x2652=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2649*x2650))+(((-1.0)*x2647*x2648))+((x2647*(r00*r00)))+(r02*r02)+x2648)),-1);
if(!x2652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2651.value)+(((1.5707963267949)*(x2652.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2653=IKsin(j4);
IkReal x2654=IKcos(j4);
IkReal x2655=(cj5*r00);
IkReal x2656=(cj5*r20);
IkReal x2657=(cj5*r10);
IkReal x2658=((1.0)*x2654);
IkReal x2659=(sj5*x2654);
IkReal x2660=((1.0)*x2653);
IkReal x2661=(sj5*x2660);
evalcond[0]=((((-1.0)*r22*x2658))+((x2653*x2656))+(((-1.0)*r21*x2661)));
evalcond[1]=((((-1.0)*r11*x2661))+(((-1.0)*r12*x2658))+((x2653*x2657)));
evalcond[2]=((((-1.0)*r02*x2660))+((r01*x2659))+(((-1.0)*x2655*x2658)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2658))+(((-1.0)*r01*x2661))+((x2653*x2655)));
evalcond[4]=((((-1.0)*r12*x2660))+((r11*x2659))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*x2657*x2658)));
evalcond[5]=(((cj2*sj1))+((r21*x2659))+(((-1.0)*cj1*sj2))+(((-1.0)*x2656*x2658))+(((-1.0)*r22*x2660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2662=((1.0)*sj5);
CheckValue<IkReal> x2663=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x2662)))),-1);
if(!x2663.valid){
continue;
}
CheckValue<IkReal> x2664 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x2662)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2663.value)))+(x2664.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2665=IKsin(j4);
IkReal x2666=IKcos(j4);
IkReal x2667=(cj5*r00);
IkReal x2668=(cj5*r20);
IkReal x2669=(cj5*r10);
IkReal x2670=((1.0)*x2666);
IkReal x2671=(sj5*x2666);
IkReal x2672=((1.0)*x2665);
IkReal x2673=(sj5*x2672);
evalcond[0]=((((-1.0)*r21*x2673))+(((-1.0)*r22*x2670))+((x2665*x2668)));
evalcond[1]=((((-1.0)*r12*x2670))+(((-1.0)*r11*x2673))+((x2665*x2669)));
evalcond[2]=((((-1.0)*r02*x2672))+(((-1.0)*x2667*x2670))+((r01*x2671)));
evalcond[3]=((1.0)+(((-1.0)*r01*x2673))+(((-1.0)*r02*x2670))+((x2665*x2667)));
evalcond[4]=((((-1.0)*r12*x2672))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*x2669*x2670))+((r11*x2671)));
evalcond[5]=(((cj2*sj1))+((r21*x2671))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2672))+(((-1.0)*x2668*x2670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2674 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2674.valid){
continue;
}
CheckValue<IkReal> x2675=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2674.value)+(((1.5707963267949)*(x2675.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2676=IKsin(j4);
IkReal x2677=IKcos(j4);
IkReal x2678=(cj5*r00);
IkReal x2679=(cj5*r20);
IkReal x2680=(cj5*r10);
IkReal x2681=((1.0)*x2677);
IkReal x2682=(sj5*x2677);
IkReal x2683=((1.0)*x2676);
IkReal x2684=(sj5*x2683);
evalcond[0]=((((-1.0)*r22*x2681))+(((-1.0)*r21*x2684))+((x2676*x2679)));
evalcond[1]=((((-1.0)*r12*x2681))+((x2676*x2680))+(((-1.0)*r11*x2684)));
evalcond[2]=((((-1.0)*r02*x2683))+((r01*x2682))+(((-1.0)*x2678*x2681)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2681))+(((-1.0)*r01*x2684))+((x2676*x2678)));
evalcond[4]=((((-1.0)*r12*x2683))+((r11*x2682))+(((-1.0)*x2680*x2681))+((sj1*sj2))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x2679*x2681))+((r21*x2682))+(((-1.0)*r22*x2683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2685=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2685;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x2685);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2686=((1.0)*sj5);
IkReal x2687=((((-1.0)*cj5*r21))+(((-1.0)*r20*x2686)));
j4eval[0]=x2687;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x2686))))));
j4eval[2]=IKsign(x2687);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2688=cj5*cj5;
IkReal x2689=r01*r01;
IkReal x2690=(r01*sj5);
IkReal x2691=(cj5*r00);
IkReal x2692=((((-1.0)*(r02*r02)))+(((2.0)*x2690*x2691))+(((-1.0)*x2688*(r00*r00)))+(((-1.0)*x2689))+((x2688*x2689)));
j4eval[0]=x2692;
j4eval[1]=IKsign(x2692);
j4eval[2]=((IKabs(((((-1.0)*x2691))+x2690)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2693=cj5*cj5;
IkReal x2694=r01*r01;
IkReal x2695=(r01*sj5);
IkReal x2696=(cj5*r00);
CheckValue<IkReal> x2697=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+((x2693*x2694))+(((-1.0)*x2693*(r00*r00)))+(((2.0)*x2695*x2696))+(((-1.0)*x2694)))),-1);
if(!x2697.valid){
continue;
}
CheckValue<IkReal> x2698 = IKatan2WithCheck(IkReal(((((-1.0)*x2696))+x2695)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2698.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2697.value)))+(x2698.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2699=IKsin(j4);
IkReal x2700=IKcos(j4);
IkReal x2701=(cj5*r00);
IkReal x2702=((1.0)*sj2);
IkReal x2703=(cj5*r20);
IkReal x2704=(cj5*r10);
IkReal x2705=((1.0)*x2700);
IkReal x2706=(sj5*x2700);
IkReal x2707=((1.0)*x2699);
IkReal x2708=(sj5*x2707);
evalcond[0]=((((-1.0)*r22*x2705))+((x2699*x2703))+(((-1.0)*r21*x2708)));
evalcond[1]=(((x2699*x2704))+(((-1.0)*r12*x2705))+(((-1.0)*r11*x2708)));
evalcond[2]=(((r01*x2706))+(((-1.0)*r02*x2707))+(((-1.0)*x2701*x2705)));
evalcond[3]=((-1.0)+((x2699*x2701))+(((-1.0)*r01*x2708))+(((-1.0)*r02*x2705)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x2707))+(((-1.0)*cj1*x2702))+((r21*x2706))+(((-1.0)*x2703*x2705)));
evalcond[5]=(((r11*x2706))+(((-1.0)*r12*x2707))+(((-1.0)*cj1*cj2))+(((-1.0)*x2704*x2705))+(((-1.0)*sj1*x2702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2709=((1.0)*sj5);
CheckValue<IkReal> x2710 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x2709)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2710.valid){
continue;
}
CheckValue<IkReal> x2711=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2709))+(((-1.0)*cj5*r21)))),-1);
if(!x2711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2710.value)+(((1.5707963267949)*(x2711.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2712=IKsin(j4);
IkReal x2713=IKcos(j4);
IkReal x2714=(cj5*r00);
IkReal x2715=((1.0)*sj2);
IkReal x2716=(cj5*r20);
IkReal x2717=(cj5*r10);
IkReal x2718=((1.0)*x2713);
IkReal x2719=(sj5*x2713);
IkReal x2720=((1.0)*x2712);
IkReal x2721=(sj5*x2720);
evalcond[0]=((((-1.0)*r21*x2721))+((x2712*x2716))+(((-1.0)*r22*x2718)));
evalcond[1]=(((x2712*x2717))+(((-1.0)*r11*x2721))+(((-1.0)*r12*x2718)));
evalcond[2]=((((-1.0)*x2714*x2718))+(((-1.0)*r02*x2720))+((r01*x2719)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x2721))+((x2712*x2714))+(((-1.0)*r02*x2718)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x2720))+(((-1.0)*x2716*x2718))+((r21*x2719))+(((-1.0)*cj1*x2715)));
evalcond[5]=((((-1.0)*cj1*cj2))+(((-1.0)*r12*x2720))+(((-1.0)*x2717*x2718))+((r11*x2719))+(((-1.0)*sj1*x2715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2722=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2722.valid){
continue;
}
CheckValue<IkReal> x2723 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2723.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2722.value)))+(x2723.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2724=IKsin(j4);
IkReal x2725=IKcos(j4);
IkReal x2726=(cj5*r00);
IkReal x2727=((1.0)*sj2);
IkReal x2728=(cj5*r20);
IkReal x2729=(cj5*r10);
IkReal x2730=((1.0)*x2725);
IkReal x2731=(sj5*x2725);
IkReal x2732=((1.0)*x2724);
IkReal x2733=(sj5*x2732);
evalcond[0]=(((x2724*x2728))+(((-1.0)*r22*x2730))+(((-1.0)*r21*x2733)));
evalcond[1]=(((x2724*x2729))+(((-1.0)*r11*x2733))+(((-1.0)*r12*x2730)));
evalcond[2]=((((-1.0)*x2726*x2730))+((r01*x2731))+(((-1.0)*r02*x2732)));
evalcond[3]=((-1.0)+((x2724*x2726))+(((-1.0)*r02*x2730))+(((-1.0)*r01*x2733)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2728*x2730))+((r21*x2731))+(((-1.0)*r22*x2732))+(((-1.0)*cj1*x2727)));
evalcond[5]=((((-1.0)*sj1*x2727))+(((-1.0)*cj1*cj2))+(((-1.0)*r12*x2732))+((r11*x2731))+(((-1.0)*x2729*x2730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2734=((-1.0)*r10);
IkReal x2736 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2736)==0){
continue;
}
IkReal x2735=pow(x2736,-0.5);
CheckValue<IkReal> x2737 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2734),IKFAST_ATAN2_MAGTHRESH);
if(!x2737.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2737.value));
IkReal gconst91=(r11*x2735);
IkReal gconst92=(x2734*x2735);
CheckValue<IkReal> x2738 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2738.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2738.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2739=((-1.0)*r10);
IkReal x2740=x2735;
CheckValue<IkReal> x2742 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2739),IKFAST_ATAN2_MAGTHRESH);
if(!x2742.valid){
continue;
}
IkReal x2741=((-1.0)*(x2742.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst91;
cj5=gconst92;
j5=x2741;
IkReal gconst90=x2741;
IkReal gconst91=(r11*x2740);
IkReal gconst92=(x2739*x2740);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2743=((1.0)*gconst91);
CheckValue<IkReal> x2744=IKPowWithIntegerCheck(IKsign((((gconst91*r20))+((gconst92*r21)))),-1);
if(!x2744.valid){
continue;
}
CheckValue<IkReal> x2745 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x2743))+(((-1.0)*cj0*r01*x2743))+((cj0*gconst92*r00))+((gconst92*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2745.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2744.value)))+(x2745.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2746=IKsin(j4);
IkReal x2747=IKcos(j4);
IkReal x2748=(cj1*cj2);
IkReal x2749=(gconst92*r00);
IkReal x2750=(sj1*sj2);
IkReal x2751=((1.0)*x2747);
IkReal x2752=(gconst91*x2747);
IkReal x2753=((1.0)*x2746);
IkReal x2754=(gconst92*x2746);
IkReal x2755=(gconst91*x2753);
evalcond[0]=((((-1.0)*r22*x2751))+((r20*x2754))+(((-1.0)*r21*x2755)));
evalcond[1]=(sj0+((x2746*x2749))+(((-1.0)*r01*x2755))+(((-1.0)*r02*x2751)));
evalcond[2]=(((r10*x2754))+(((-1.0)*r12*x2751))+(((-1.0)*r11*x2755))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x2753))+((cj2*sj1))+((r21*x2752))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst92*r20*x2751)));
evalcond[4]=(((cj0*x2748))+((cj0*x2750))+((r01*x2752))+(((-1.0)*x2749*x2751))+(((-1.0)*r02*x2753)));
evalcond[5]=(((r11*x2752))+(((-1.0)*gconst92*r10*x2751))+((sj0*x2748))+(((-1.0)*r12*x2753))+((sj0*x2750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2756=((1.0)*gconst91);
CheckValue<IkReal> x2757 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x2756))+((cj0*gconst92*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2757.valid){
continue;
}
CheckValue<IkReal> x2758=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2756))+(((-1.0)*gconst92*r01)))),-1);
if(!x2758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2757.value)+(((1.5707963267949)*(x2758.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2759=IKsin(j4);
IkReal x2760=IKcos(j4);
IkReal x2761=(cj1*cj2);
IkReal x2762=(gconst92*r00);
IkReal x2763=(sj1*sj2);
IkReal x2764=((1.0)*x2760);
IkReal x2765=(gconst91*x2760);
IkReal x2766=((1.0)*x2759);
IkReal x2767=(gconst92*x2759);
IkReal x2768=(gconst91*x2766);
evalcond[0]=(((r20*x2767))+(((-1.0)*r21*x2768))+(((-1.0)*r22*x2764)));
evalcond[1]=(sj0+((x2759*x2762))+(((-1.0)*r01*x2768))+(((-1.0)*r02*x2764)));
evalcond[2]=((((-1.0)*r12*x2764))+(((-1.0)*r11*x2768))+((r10*x2767))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst92*r20*x2764))+((r21*x2765))+(((-1.0)*r22*x2766)));
evalcond[4]=(((r01*x2765))+(((-1.0)*x2762*x2764))+((cj0*x2761))+((cj0*x2763))+(((-1.0)*r02*x2766)));
evalcond[5]=((((-1.0)*r12*x2766))+((sj0*x2761))+((sj0*x2763))+(((-1.0)*gconst92*r10*x2764))+((r11*x2765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2769=((-1.0)*r11);
IkReal x2771 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2771)==0){
continue;
}
IkReal x2770=pow(x2771,-0.5);
CheckValue<IkReal> x2772 = IKatan2WithCheck(IkReal(x2769),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2772.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2772.value))));
IkReal gconst94=(x2769*x2770);
IkReal gconst95=((1.0)*r10*x2770);
CheckValue<IkReal> x2773 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2773.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2773.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2774=((-1.0)*r11);
CheckValue<IkReal> x2777 = IKatan2WithCheck(IkReal(x2774),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2777.valid){
continue;
}
IkReal x2775=((1.0)*(x2777.value));
IkReal x2776=x2770;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2775)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2775)));
IkReal gconst94=(x2774*x2776);
IkReal gconst95=((1.0)*r10*x2776);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2778=((-1.0)*r11);
CheckValue<IkReal> x2781 = IKatan2WithCheck(IkReal(x2778),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2781.valid){
continue;
}
IkReal x2779=((1.0)*(x2781.value));
IkReal x2780=x2770;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2779)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2779)));
IkReal gconst94=(x2778*x2780);
IkReal gconst95=((1.0)*r10*x2780);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2782=((-1.0)*r11);
CheckValue<IkReal> x2785 = IKatan2WithCheck(IkReal(x2782),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2785.valid){
continue;
}
IkReal x2783=((1.0)*(x2785.value));
IkReal x2784=x2770;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2783)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2783)));
IkReal gconst94=(x2782*x2784);
IkReal gconst95=((1.0)*r10*x2784);
IkReal x2786=r12*r12;
IkReal x2787=(cj0*r02);
IkReal x2788=x2770;
IkReal x2789=(sj0*x2788);
j4eval[0]=((IKabs((x2787+((r12*sj0)))))+(IKabs((((r12*x2787*x2788))+(((-1.0)*x2789))+((x2786*x2789))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2790=((1.0)*gconst94);
CheckValue<IkReal> x2791=IKPowWithIntegerCheck(IKsign((((gconst95*r21))+((gconst94*r20)))),-1);
if(!x2791.valid){
continue;
}
CheckValue<IkReal> x2792 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x2790))+((gconst95*r10*sj0))+(((-1.0)*cj0*r01*x2790))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2791.value)))+(x2792.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2793=IKsin(j4);
IkReal x2794=IKcos(j4);
IkReal x2795=(cj1*cj2);
IkReal x2796=(gconst95*r10);
IkReal x2797=(sj1*sj2);
IkReal x2798=((1.0)*x2794);
IkReal x2799=(gconst95*x2793);
IkReal x2800=(gconst94*x2794);
IkReal x2801=((1.0)*x2793);
IkReal x2802=(gconst94*x2801);
evalcond[0]=((((-1.0)*r21*x2802))+(((-1.0)*r22*x2798))+((r20*x2799)));
evalcond[1]=((((-1.0)*r01*x2802))+sj0+((r00*x2799))+(((-1.0)*r02*x2798)));
evalcond[2]=(((x2793*x2796))+(((-1.0)*r11*x2802))+(((-1.0)*cj0))+(((-1.0)*r12*x2798)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2801))+(((-1.0)*gconst95*r20*x2798))+((r21*x2800)));
evalcond[4]=((((-1.0)*gconst95*r00*x2798))+(((-1.0)*r02*x2801))+((cj0*x2797))+((cj0*x2795))+((r01*x2800)));
evalcond[5]=((((-1.0)*x2796*x2798))+(((-1.0)*r12*x2801))+((sj0*x2797))+((sj0*x2795))+((r11*x2800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2803=((1.0)*gconst94);
CheckValue<IkReal> x2804=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r01))+(((-1.0)*r00*x2803)))),-1);
if(!x2804.valid){
continue;
}
CheckValue<IkReal> x2805 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x2803))+((cj0*gconst95*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2804.value)))+(x2805.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2806=IKsin(j4);
IkReal x2807=IKcos(j4);
IkReal x2808=(cj1*cj2);
IkReal x2809=(gconst95*r10);
IkReal x2810=(sj1*sj2);
IkReal x2811=((1.0)*x2807);
IkReal x2812=(gconst95*x2806);
IkReal x2813=(gconst94*x2807);
IkReal x2814=((1.0)*x2806);
IkReal x2815=(gconst94*x2814);
evalcond[0]=((((-1.0)*r22*x2811))+(((-1.0)*r21*x2815))+((r20*x2812)));
evalcond[1]=(((r00*x2812))+(((-1.0)*r02*x2811))+sj0+(((-1.0)*r01*x2815)));
evalcond[2]=((((-1.0)*r12*x2811))+(((-1.0)*r11*x2815))+((x2806*x2809))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((r21*x2813))+(((-1.0)*r22*x2814))+(((-1.0)*gconst95*r20*x2811)));
evalcond[4]=(((r01*x2813))+(((-1.0)*r02*x2814))+(((-1.0)*gconst95*r00*x2811))+((cj0*x2808))+((cj0*x2810)));
evalcond[5]=((((-1.0)*r12*x2814))+(((-1.0)*x2809*x2811))+((sj0*x2810))+((r11*x2813))+((sj0*x2808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2816=((1.0)*gconst94);
CheckValue<IkReal> x2817=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r11))+(((-1.0)*r10*x2816)))),-1);
if(!x2817.valid){
continue;
}
CheckValue<IkReal> x2818 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst95*r20*sj0))+(((-1.0)*r21*sj0*x2816)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2818.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2817.value)))+(x2818.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2819=IKsin(j4);
IkReal x2820=IKcos(j4);
IkReal x2821=(cj1*cj2);
IkReal x2822=(gconst95*r10);
IkReal x2823=(sj1*sj2);
IkReal x2824=((1.0)*x2820);
IkReal x2825=(gconst95*x2819);
IkReal x2826=(gconst94*x2820);
IkReal x2827=((1.0)*x2819);
IkReal x2828=(gconst94*x2827);
evalcond[0]=(((r20*x2825))+(((-1.0)*r21*x2828))+(((-1.0)*r22*x2824)));
evalcond[1]=(sj0+(((-1.0)*r01*x2828))+((r00*x2825))+(((-1.0)*r02*x2824)));
evalcond[2]=((((-1.0)*r12*x2824))+(((-1.0)*r11*x2828))+((x2819*x2822))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((r21*x2826))+(((-1.0)*r22*x2827))+(((-1.0)*gconst95*r20*x2824)));
evalcond[4]=((((-1.0)*gconst95*r00*x2824))+(((-1.0)*r02*x2827))+((r01*x2826))+((cj0*x2823))+((cj0*x2821)));
evalcond[5]=((((-1.0)*r12*x2827))+(((-1.0)*x2822*x2824))+((sj0*x2823))+((sj0*x2821))+((r11*x2826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2829=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2829;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x2829);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2830=((1.0)*sj5);
IkReal x2831=((((-1.0)*r00*x2830))+(((-1.0)*cj5*r01)));
j4eval[0]=x2831;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x2830)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2831);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2832=cj5*cj5;
IkReal x2833=r11*r11;
IkReal x2834=(cj5*r10);
IkReal x2835=(r11*sj5);
IkReal x2836=((((-1.0)*x2833))+(((-1.0)*x2832*(r10*r10)))+(((-1.0)*(r12*r12)))+((x2832*x2833))+(((2.0)*x2834*x2835)));
j4eval[0]=x2836;
j4eval[1]=((IKabs(((((-1.0)*x2834))+x2835)))+(IKabs(r12)));
j4eval[2]=IKsign(x2836);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2837=cj5*cj5;
IkReal x2838=r11*r11;
IkReal x2839=(cj5*r10);
IkReal x2840=(r11*sj5);
CheckValue<IkReal> x2841=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2838))+(((2.0)*x2839*x2840))+(((-1.0)*(r12*r12)))+(((-1.0)*x2837*(r10*r10)))+((x2837*x2838)))),-1);
if(!x2841.valid){
continue;
}
CheckValue<IkReal> x2842 = IKatan2WithCheck(IkReal(((((-1.0)*x2839))+x2840)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2842.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2841.value)))+(x2842.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2843=IKsin(j4);
IkReal x2844=IKcos(j4);
IkReal x2845=(cj5*r00);
IkReal x2846=((1.0)*x2844);
IkReal x2847=(sj5*x2844);
IkReal x2848=(cj5*x2843);
IkReal x2849=((1.0)*x2843);
IkReal x2850=(sj5*x2849);
evalcond[0]=((((-1.0)*r21*x2850))+((r20*x2848))+(((-1.0)*r22*x2846)));
evalcond[1]=((((-1.0)*r01*x2850))+((x2843*x2845))+(((-1.0)*r02*x2846)));
evalcond[2]=(((r11*x2847))+(((-1.0)*r12*x2849))+(((-1.0)*cj5*r10*x2846)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2846))+(((-1.0)*r11*x2850))+((r10*x2848)));
evalcond[4]=((((-1.0)*x2845*x2846))+((sj1*sj2))+(((-1.0)*r02*x2849))+((cj1*cj2))+((r01*x2847)));
evalcond[5]=(((cj2*sj1))+((r21*x2847))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r20*x2846))+(((-1.0)*r22*x2849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2851=((1.0)*sj5);
CheckValue<IkReal> x2852 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x2851)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2852.valid){
continue;
}
CheckValue<IkReal> x2853=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2851))+(((-1.0)*cj5*r01)))),-1);
if(!x2853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2852.value)+(((1.5707963267949)*(x2853.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2854=IKsin(j4);
IkReal x2855=IKcos(j4);
IkReal x2856=(cj5*r00);
IkReal x2857=((1.0)*x2855);
IkReal x2858=(sj5*x2855);
IkReal x2859=(cj5*x2854);
IkReal x2860=((1.0)*x2854);
IkReal x2861=(sj5*x2860);
evalcond[0]=(((r20*x2859))+(((-1.0)*r21*x2861))+(((-1.0)*r22*x2857)));
evalcond[1]=((((-1.0)*r02*x2857))+(((-1.0)*r01*x2861))+((x2854*x2856)));
evalcond[2]=((((-1.0)*r12*x2860))+((r11*x2858))+(((-1.0)*cj5*r10*x2857)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2857))+((r10*x2859))+(((-1.0)*r11*x2861)));
evalcond[4]=((((-1.0)*r02*x2860))+((sj1*sj2))+(((-1.0)*x2856*x2857))+((r01*x2858))+((cj1*cj2)));
evalcond[5]=(((r21*x2858))+((cj2*sj1))+(((-1.0)*cj5*r20*x2857))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2862=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2862.valid){
continue;
}
CheckValue<IkReal> x2863 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2862.value)))+(x2863.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2864=IKsin(j4);
IkReal x2865=IKcos(j4);
IkReal x2866=(cj5*r00);
IkReal x2867=((1.0)*x2865);
IkReal x2868=(sj5*x2865);
IkReal x2869=(cj5*x2864);
IkReal x2870=((1.0)*x2864);
IkReal x2871=(sj5*x2870);
evalcond[0]=((((-1.0)*r22*x2867))+((r20*x2869))+(((-1.0)*r21*x2871)));
evalcond[1]=((((-1.0)*r02*x2867))+(((-1.0)*r01*x2871))+((x2864*x2866)));
evalcond[2]=((((-1.0)*cj5*r10*x2867))+((r11*x2868))+(((-1.0)*r12*x2870)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2867))+((r10*x2869))+(((-1.0)*r11*x2871)));
evalcond[4]=((((-1.0)*r02*x2870))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*x2866*x2867))+((r01*x2868)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r22*x2870))+((r21*x2868))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r20*x2867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2872=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2872;
j4eval[1]=IKsign(x2872);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2873=((1.0)*sj5);
IkReal x2874=((((-1.0)*r20*x2873))+(((-1.0)*cj5*r21)));
j4eval[0]=x2874;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x2873))+((cj5*r00))))));
j4eval[2]=IKsign(x2874);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2875=cj5*cj5;
IkReal x2876=r11*r11;
IkReal x2877=(r11*sj5);
IkReal x2878=(cj5*r10);
IkReal x2879=((((-1.0)*x2875*x2876))+(r12*r12)+((x2875*(r10*r10)))+x2876+(((-2.0)*x2877*x2878)));
j4eval[0]=x2879;
j4eval[1]=IKsign(x2879);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x2878))+x2877))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2880=cj5*cj5;
IkReal x2881=r11*r11;
IkReal x2882=(cj5*r10);
IkReal x2883=(r11*sj5);
CheckValue<IkReal> x2884 = IKatan2WithCheck(IkReal(((((-1.0)*x2882))+x2883)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2884.valid){
continue;
}
CheckValue<IkReal> x2885=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x2880*x2881))+((x2880*(r10*r10)))+x2881+(((-2.0)*x2882*x2883)))),-1);
if(!x2885.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2884.value)+(((1.5707963267949)*(x2885.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2886=IKsin(j4);
IkReal x2887=IKcos(j4);
IkReal x2888=(cj5*r00);
IkReal x2889=((1.0)*sj2);
IkReal x2890=((1.0)*x2887);
IkReal x2891=(sj5*x2887);
IkReal x2892=(cj5*x2886);
IkReal x2893=((1.0)*x2886);
IkReal x2894=(sj5*x2893);
evalcond[0]=((((-1.0)*r22*x2890))+(((-1.0)*r21*x2894))+((r20*x2892)));
evalcond[1]=((((-1.0)*r02*x2890))+(((-1.0)*r01*x2894))+((x2886*x2888)));
evalcond[2]=(((r11*x2891))+(((-1.0)*cj5*r10*x2890))+(((-1.0)*r12*x2893)));
evalcond[3]=((1.0)+((r10*x2892))+(((-1.0)*r11*x2894))+(((-1.0)*r12*x2890)));
evalcond[4]=((((-1.0)*r22*x2893))+((cj2*sj1))+(((-1.0)*cj5*r20*x2890))+((r21*x2891))+(((-1.0)*cj1*x2889)));
evalcond[5]=((((-1.0)*r02*x2893))+(((-1.0)*x2888*x2890))+(((-1.0)*cj1*cj2))+((r01*x2891))+(((-1.0)*sj1*x2889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2895=((1.0)*sj5);
CheckValue<IkReal> x2896 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x2895))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2896.valid){
continue;
}
CheckValue<IkReal> x2897=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x2895)))),-1);
if(!x2897.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2896.value)+(((1.5707963267949)*(x2897.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2898=IKsin(j4);
IkReal x2899=IKcos(j4);
IkReal x2900=(cj5*r00);
IkReal x2901=((1.0)*sj2);
IkReal x2902=((1.0)*x2899);
IkReal x2903=(sj5*x2899);
IkReal x2904=(cj5*x2898);
IkReal x2905=((1.0)*x2898);
IkReal x2906=(sj5*x2905);
evalcond[0]=((((-1.0)*r21*x2906))+((r20*x2904))+(((-1.0)*r22*x2902)));
evalcond[1]=((((-1.0)*r02*x2902))+(((-1.0)*r01*x2906))+((x2898*x2900)));
evalcond[2]=((((-1.0)*r12*x2905))+((r11*x2903))+(((-1.0)*cj5*r10*x2902)));
evalcond[3]=((1.0)+((r10*x2904))+(((-1.0)*r12*x2902))+(((-1.0)*r11*x2906)));
evalcond[4]=(((cj2*sj1))+((r21*x2903))+(((-1.0)*cj5*r20*x2902))+(((-1.0)*cj1*x2901))+(((-1.0)*r22*x2905)));
evalcond[5]=((((-1.0)*r02*x2905))+(((-1.0)*x2900*x2902))+(((-1.0)*cj1*cj2))+((r01*x2903))+(((-1.0)*sj1*x2901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2907=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2907.valid){
continue;
}
CheckValue<IkReal> x2908 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2907.value)))+(x2908.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2909=IKsin(j4);
IkReal x2910=IKcos(j4);
IkReal x2911=(cj5*r00);
IkReal x2912=((1.0)*sj2);
IkReal x2913=((1.0)*x2910);
IkReal x2914=(sj5*x2910);
IkReal x2915=(cj5*x2909);
IkReal x2916=((1.0)*x2909);
IkReal x2917=(sj5*x2916);
evalcond[0]=(((r20*x2915))+(((-1.0)*r21*x2917))+(((-1.0)*r22*x2913)));
evalcond[1]=(((x2909*x2911))+(((-1.0)*r02*x2913))+(((-1.0)*r01*x2917)));
evalcond[2]=(((r11*x2914))+(((-1.0)*cj5*r10*x2913))+(((-1.0)*r12*x2916)));
evalcond[3]=((1.0)+(((-1.0)*r11*x2917))+(((-1.0)*r12*x2913))+((r10*x2915)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*cj5*r20*x2913))+(((-1.0)*cj1*x2912))+((r21*x2914))+(((-1.0)*r22*x2916)));
evalcond[5]=(((r01*x2914))+(((-1.0)*sj1*x2912))+(((-1.0)*cj1*cj2))+(((-1.0)*x2911*x2913))+(((-1.0)*r02*x2916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2918=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2918);
rxp0_2=(py*r00);
rxp1_0=(r21*x2918);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2919=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2919);
rxp0_2=(py*r00);
rxp1_0=(r21*x2919);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2920=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2920);
rxp0_2=(py*r00);
rxp1_0=(r21*x2920);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2923=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x2923.valid){
continue;
}
IkReal x2921=x2923.value;
IkReal x2922=((1.0)*cj0*x2921);
cj4array[0]=((((-1.0)*sj1*sj2*x2922))+(((-1.0)*cj1*cj2*x2922)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2924=IKsin(j4);
IkReal x2925=IKcos(j4);
IkReal x2926=(cj5*r20);
IkReal x2927=((1.0)*x2925);
IkReal x2928=((1.0)*sj5*x2924);
evalcond[0]=((-1.0)*r12*x2924);
evalcond[1]=((((-1.0)*r12*x2927))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x2928))+((x2924*x2926)));
evalcond[3]=((((-1.0)*r01*x2928))+((cj5*r00*x2924)));
evalcond[4]=(((r21*sj5*x2925))+((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x2926*x2927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2930=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x2930.valid){
continue;
}
IkReal x2929=x2930.value;
cj4array[0]=((((-1.0)*cj2*sj1*x2929))+((cj1*sj2*x2929)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2931=IKsin(j4);
IkReal x2932=IKcos(j4);
IkReal x2933=(cj5*r00);
IkReal x2934=(r01*sj5);
IkReal x2935=((1.0)*x2932);
IkReal x2936=((1.0)*x2931);
evalcond[0]=((-1.0)*r12*x2931);
evalcond[1]=((((-1.0)*r12*x2935))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*sj5*x2936))+((cj5*r20*x2931)));
evalcond[3]=((((-1.0)*x2934*x2936))+((x2931*x2933)));
evalcond[4]=((((-1.0)*x2933*x2935))+((x2932*x2934))+((cj0*cj1*cj2))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2937=IKPowWithIntegerCheck(r12,-1);
if(!x2937.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x2937.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2938=IKsin(j4);
IkReal x2939=IKcos(j4);
IkReal x2940=(r01*sj5);
IkReal x2941=(r21*sj5);
IkReal x2942=((1.0)*x2938);
IkReal x2943=(cj5*x2938);
IkReal x2944=((1.0)*cj5*x2939);
evalcond[0]=((-1.0)*r12*x2938);
evalcond[1]=(((r20*x2943))+(((-1.0)*x2941*x2942)));
evalcond[2]=((((-1.0)*x2940*x2942))+((r00*x2943)));
evalcond[3]=(((cj2*sj1))+((x2939*x2941))+(((-1.0)*r20*x2944))+(((-1.0)*cj1*sj2)));
evalcond[4]=(((x2939*x2940))+(((-1.0)*r00*x2944))+((cj0*cj1*cj2))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2945=((1.0)*sj5);
CheckValue<IkReal> x2946=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2946.valid){
continue;
}
CheckValue<IkReal> x2947 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x2945))+(((-1.0)*r11*sj0*x2945)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2946.value)))+(x2947.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2948=IKsin(j4);
IkReal x2949=IKcos(j4);
IkReal x2950=(cj5*r00);
IkReal x2951=(cj1*cj2);
IkReal x2952=(sj1*sj2);
IkReal x2953=((1.0)*x2949);
IkReal x2954=(sj5*x2949);
IkReal x2955=(cj5*x2948);
IkReal x2956=((1.0)*x2948);
IkReal x2957=(sj5*x2956);
evalcond[0]=((((-1.0)*r21*x2957))+((r20*x2955))+(((-1.0)*r22*x2953)));
evalcond[1]=((((-1.0)*r02*x2953))+sj0+((x2948*x2950))+(((-1.0)*r01*x2957)));
evalcond[2]=(((r10*x2955))+(((-1.0)*r11*x2957))+(((-1.0)*r12*x2953))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r21*x2954))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r20*x2953))+(((-1.0)*r22*x2956)));
evalcond[4]=((((-1.0)*r02*x2956))+((cj0*x2951))+((cj0*x2952))+((r01*x2954))+(((-1.0)*x2950*x2953)));
evalcond[5]=(((sj0*x2952))+((sj0*x2951))+(((-1.0)*r12*x2956))+((r11*x2954))+(((-1.0)*cj5*r10*x2953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2958=((1.0)*sj5);
CheckValue<IkReal> x2959 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x2958))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2959.valid){
continue;
}
CheckValue<IkReal> x2960=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2958))+(((-1.0)*cj5*r01)))),-1);
if(!x2960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2959.value)+(((1.5707963267949)*(x2960.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2961=IKsin(j4);
IkReal x2962=IKcos(j4);
IkReal x2963=(cj5*r00);
IkReal x2964=(cj1*cj2);
IkReal x2965=(sj1*sj2);
IkReal x2966=((1.0)*x2962);
IkReal x2967=(sj5*x2962);
IkReal x2968=(cj5*x2961);
IkReal x2969=((1.0)*x2961);
IkReal x2970=(sj5*x2969);
evalcond[0]=((((-1.0)*r21*x2970))+(((-1.0)*r22*x2966))+((r20*x2968)));
evalcond[1]=(sj0+(((-1.0)*r01*x2970))+((x2961*x2963))+(((-1.0)*r02*x2966)));
evalcond[2]=((((-1.0)*r11*x2970))+((r10*x2968))+(((-1.0)*cj0))+(((-1.0)*r12*x2966)));
evalcond[3]=(((cj2*sj1))+((r21*x2967))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2969))+(((-1.0)*cj5*r20*x2966)));
evalcond[4]=((((-1.0)*x2963*x2966))+(((-1.0)*r02*x2969))+((cj0*x2964))+((cj0*x2965))+((r01*x2967)));
evalcond[5]=(((sj0*x2964))+((sj0*x2965))+((r11*x2967))+(((-1.0)*cj5*r10*x2966))+(((-1.0)*r12*x2969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2971=((1.0)*sj5);
CheckValue<IkReal> x2972 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x2971)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2972.valid){
continue;
}
CheckValue<IkReal> x2973=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x2971)))),-1);
if(!x2973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2972.value)+(((1.5707963267949)*(x2973.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2974=IKsin(j4);
IkReal x2975=IKcos(j4);
IkReal x2976=(cj5*r00);
IkReal x2977=(cj1*cj2);
IkReal x2978=(sj1*sj2);
IkReal x2979=((1.0)*x2975);
IkReal x2980=(sj5*x2975);
IkReal x2981=(cj5*x2974);
IkReal x2982=((1.0)*x2974);
IkReal x2983=(sj5*x2982);
evalcond[0]=(((r20*x2981))+(((-1.0)*r21*x2983))+(((-1.0)*r22*x2979)));
evalcond[1]=(sj0+(((-1.0)*r01*x2983))+((x2974*x2976))+(((-1.0)*r02*x2979)));
evalcond[2]=((((-1.0)*r12*x2979))+(((-1.0)*r11*x2983))+(((-1.0)*cj0))+((r10*x2981)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r20*x2979))+(((-1.0)*r22*x2982))+((r21*x2980)));
evalcond[4]=(((cj0*x2977))+((cj0*x2978))+(((-1.0)*x2976*x2979))+((r01*x2980))+(((-1.0)*r02*x2982)));
evalcond[5]=(((r11*x2980))+(((-1.0)*r12*x2982))+((sj0*x2978))+((sj0*x2977))+(((-1.0)*cj5*r10*x2979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x2984=((1.0)*cj5);
IkReal x2985=((1.0)*sj5);
IkReal x2986=(((cj1*sj2))+(((-1.0)*cj2*sj1)));
j0eval[0]=x2986;
j0eval[1]=IKsign(x2986);
j0eval[2]=((IKabs(((((-1.0)*r00*x2985))+(((-1.0)*r01*x2984)))))+(IKabs(((((-1.0)*r10*x2985))+(((-1.0)*r11*x2984))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x2987=r21*r21;
IkReal x2988=cj5*cj5;
IkReal x2989=(cj5*r20);
IkReal x2990=(r21*sj5);
IkReal x2991=(cj2*sj1);
IkReal x2992=((1.0)*cj1*sj2);
IkReal x2993=((((2.0)*x2989*x2990))+(((-1.0)*x2987))+((x2987*x2988))+(((-1.0)*(r22*r22)))+(((-1.0)*x2988*(r20*r20))));
j4eval[0]=x2993;
j4eval[1]=IKsign(x2993);
j4eval[2]=((IKabs(((((-1.0)*x2989*x2992))+((cj1*sj2*x2990))+((x2989*x2991))+(((-1.0)*x2990*x2991)))))+(IKabs(((((-1.0)*r22*x2992))+((r22*x2991))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=(((cj1*sj2))+(((-1.0)*cj2*sj1)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((8.23045267033672)*px))+(((0.000193737404421095)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-8.23045267033672)*py))+(((0.000193737404421095)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.23045267033672)*px))+(((0.000193737404421095)*py))))+IKsqr(((((-8.23045267033672)*py))+(((0.000193737404421095)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((8.23045267033672)*px))+(((0.000193737404421095)*py))), ((((-8.23045267033672)*py))+(((0.000193737404421095)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2994=IKsin(j0);
IkReal x2995=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((2.86e-6)*x2995))+(((0.1215)*x2994)));
evalcond[1]=((((-0.1215)*x2995))+(((-1.0)*py))+(((2.86e-6)*x2994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2996=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2996;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x2996);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2997=((1.0)*sj5);
IkReal x2998=((((-1.0)*r00*x2997))+(((-1.0)*cj5*r01)));
j4eval[0]=x2998;
j4eval[1]=IKsign(x2998);
j4eval[2]=((IKabs(((((-1.0)*r21*sj0*x2997))+((cj5*r20*sj0)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2999=cj5*cj5;
IkReal x3000=((1.0)*r21);
IkReal x3001=(cj5*r20);
IkReal x3002=((((-1.0)*r00*r20*x2999))+(((-1.0)*r02*r22))+(((-1.0)*r01*x3000))+((cj5*r00*r21*sj5))+((r01*r21*x2999))+((r01*sj5*x3001)));
j4eval[0]=x3002;
j4eval[1]=IKsign(x3002);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x3000))+((cj0*x3001)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3003=cj5*cj5;
IkReal x3004=((1.0)*r21);
IkReal x3005=(cj5*r20);
CheckValue<IkReal> x3006=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*r01*x3004))+(((-1.0)*r00*r20*x3003))+((cj5*r00*r21*sj5))+((r01*r21*x3003))+((r01*sj5*x3005)))),-1);
if(!x3006.valid){
continue;
}
CheckValue<IkReal> x3007 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x3004))+((cj0*x3005)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3006.value)))+(x3007.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3008=IKcos(j4);
IkReal x3009=IKsin(j4);
IkReal x3010=(r11*sj5);
IkReal x3011=(r21*sj5);
IkReal x3012=(r01*sj5);
IkReal x3013=((1.0)*x3008);
IkReal x3014=((1.0)*x3009);
IkReal x3015=(cj5*x3008);
IkReal x3016=(cj5*x3009);
evalcond[0]=(((r22*x3009))+(((-1.0)*x3011*x3013))+((r20*x3015)));
evalcond[1]=((((-1.0)*r22*x3013))+(((-1.0)*x3011*x3014))+((r20*x3016)));
evalcond[2]=(((r00*x3015))+cj0+((r02*x3009))+(((-1.0)*x3012*x3013)));
evalcond[3]=(sj0+((r10*x3015))+((r12*x3009))+(((-1.0)*x3010*x3013)));
evalcond[4]=(((r00*x3016))+sj0+(((-1.0)*r02*x3013))+(((-1.0)*x3012*x3014)));
evalcond[5]=(((r10*x3016))+(((-1.0)*r12*x3013))+(((-1.0)*x3010*x3014))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3017=((1.0)*sj5);
CheckValue<IkReal> x3018=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3017))+(((-1.0)*cj5*r01)))),-1);
if(!x3018.valid){
continue;
}
CheckValue<IkReal> x3019 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3017)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3018.value)))+(x3019.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3020=IKcos(j4);
IkReal x3021=IKsin(j4);
IkReal x3022=(r11*sj5);
IkReal x3023=(r21*sj5);
IkReal x3024=(r01*sj5);
IkReal x3025=((1.0)*x3020);
IkReal x3026=((1.0)*x3021);
IkReal x3027=(cj5*x3020);
IkReal x3028=(cj5*x3021);
evalcond[0]=(((r20*x3027))+((r22*x3021))+(((-1.0)*x3023*x3025)));
evalcond[1]=(((r20*x3028))+(((-1.0)*x3023*x3026))+(((-1.0)*r22*x3025)));
evalcond[2]=(cj0+((r02*x3021))+(((-1.0)*x3024*x3025))+((r00*x3027)));
evalcond[3]=(((r10*x3027))+((r12*x3021))+sj0+(((-1.0)*x3022*x3025)));
evalcond[4]=(sj0+(((-1.0)*x3024*x3026))+((r00*x3028))+(((-1.0)*r02*x3025)));
evalcond[5]=(((r10*x3028))+(((-1.0)*r12*x3025))+(((-1.0)*x3022*x3026))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3029 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3029.valid){
continue;
}
CheckValue<IkReal> x3030=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3029.value)+(((1.5707963267949)*(x3030.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3031=IKcos(j4);
IkReal x3032=IKsin(j4);
IkReal x3033=(r11*sj5);
IkReal x3034=(r21*sj5);
IkReal x3035=(r01*sj5);
IkReal x3036=((1.0)*x3031);
IkReal x3037=((1.0)*x3032);
IkReal x3038=(cj5*x3031);
IkReal x3039=(cj5*x3032);
evalcond[0]=(((r22*x3032))+((r20*x3038))+(((-1.0)*x3034*x3036)));
evalcond[1]=((((-1.0)*r22*x3036))+((r20*x3039))+(((-1.0)*x3034*x3037)));
evalcond[2]=(((r02*x3032))+cj0+(((-1.0)*x3035*x3036))+((r00*x3038)));
evalcond[3]=(sj0+((r12*x3032))+(((-1.0)*x3033*x3036))+((r10*x3038)));
evalcond[4]=(sj0+(((-1.0)*x3035*x3037))+((r00*x3039))+(((-1.0)*r02*x3036)));
evalcond[5]=((((-1.0)*x3033*x3037))+(((-1.0)*r12*x3036))+((r10*x3039))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((8.23045267033672)*px))+(((0.000193737404421095)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-8.23045267033672)*py))+(((0.000193737404421095)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.23045267033672)*px))+(((0.000193737404421095)*py))))+IKsqr(((((-8.23045267033672)*py))+(((0.000193737404421095)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((8.23045267033672)*px))+(((0.000193737404421095)*py))), ((((-8.23045267033672)*py))+(((0.000193737404421095)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3040=IKsin(j0);
IkReal x3041=IKcos(j0);
evalcond[0]=((((0.1215)*x3040))+(((2.86e-6)*x3041))+(((-1.0)*px)));
evalcond[1]=((((2.86e-6)*x3040))+(((-1.0)*py))+(((-0.1215)*x3041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3042=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3042;
j4eval[1]=IKsign(x3042);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3043=((1.0)*sj5);
IkReal x3044=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3043)));
j4eval[0]=x3044;
j4eval[1]=IKsign(x3044);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3043))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3045=((1.0)*sj5);
IkReal x3046=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3045)));
j4eval[0]=x3046;
j4eval[1]=IKsign(x3046);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x3045)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3047=((1.0)*sj5);
CheckValue<IkReal> x3048 = IKatan2WithCheck(IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x3047)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3048.valid){
continue;
}
CheckValue<IkReal> x3049=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3047)))),-1);
if(!x3049.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3048.value)+(((1.5707963267949)*(x3049.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3050=IKcos(j4);
IkReal x3051=IKsin(j4);
IkReal x3052=((1.0)*cj0);
IkReal x3053=(r11*sj5);
IkReal x3054=(r21*sj5);
IkReal x3055=(r01*sj5);
IkReal x3056=((1.0)*x3050);
IkReal x3057=(cj5*x3050);
IkReal x3058=((1.0)*x3051);
IkReal x3059=(cj5*x3051);
evalcond[0]=(((r22*x3051))+(((-1.0)*x3054*x3056))+((r20*x3057)));
evalcond[1]=((((-1.0)*x3054*x3058))+(((-1.0)*r22*x3056))+((r20*x3059)));
evalcond[2]=((((-1.0)*x3055*x3058))+sj0+((r00*x3059))+(((-1.0)*r02*x3056)));
evalcond[3]=((((-1.0)*x3055*x3056))+((r02*x3051))+((r00*x3057))+(((-1.0)*x3052)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3053*x3056))+((r12*x3051))+((r10*x3057)));
evalcond[5]=((((-1.0)*x3053*x3058))+((r10*x3059))+(((-1.0)*x3052))+(((-1.0)*r12*x3056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3060=((1.0)*sj5);
CheckValue<IkReal> x3061 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3060)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3061.valid){
continue;
}
CheckValue<IkReal> x3062=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3060)))),-1);
if(!x3062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3061.value)+(((1.5707963267949)*(x3062.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3063=IKcos(j4);
IkReal x3064=IKsin(j4);
IkReal x3065=((1.0)*cj0);
IkReal x3066=(r11*sj5);
IkReal x3067=(r21*sj5);
IkReal x3068=(r01*sj5);
IkReal x3069=((1.0)*x3063);
IkReal x3070=(cj5*x3063);
IkReal x3071=((1.0)*x3064);
IkReal x3072=(cj5*x3064);
evalcond[0]=(((r22*x3064))+(((-1.0)*x3067*x3069))+((r20*x3070)));
evalcond[1]=((((-1.0)*r22*x3069))+(((-1.0)*x3067*x3071))+((r20*x3072)));
evalcond[2]=(sj0+((r00*x3072))+(((-1.0)*r02*x3069))+(((-1.0)*x3068*x3071)));
evalcond[3]=(((r00*x3070))+(((-1.0)*x3065))+((r02*x3064))+(((-1.0)*x3068*x3069)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3066*x3069))+((r10*x3070))+((r12*x3064)));
evalcond[5]=((((-1.0)*x3066*x3071))+(((-1.0)*r12*x3069))+(((-1.0)*x3065))+((r10*x3072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3073 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3073.valid){
continue;
}
CheckValue<IkReal> x3074=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3074.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3073.value)+(((1.5707963267949)*(x3074.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3075=IKcos(j4);
IkReal x3076=IKsin(j4);
IkReal x3077=((1.0)*cj0);
IkReal x3078=(r11*sj5);
IkReal x3079=(r21*sj5);
IkReal x3080=(r01*sj5);
IkReal x3081=((1.0)*x3075);
IkReal x3082=(cj5*x3075);
IkReal x3083=((1.0)*x3076);
IkReal x3084=(cj5*x3076);
evalcond[0]=((((-1.0)*x3079*x3081))+((r20*x3082))+((r22*x3076)));
evalcond[1]=((((-1.0)*x3079*x3083))+((r20*x3084))+(((-1.0)*r22*x3081)));
evalcond[2]=((((-1.0)*x3080*x3083))+sj0+((r00*x3084))+(((-1.0)*r02*x3081)));
evalcond[3]=((((-1.0)*x3080*x3081))+(((-1.0)*x3077))+((r00*x3082))+((r02*x3076)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3078*x3081))+((r12*x3076))+((r10*x3082)));
evalcond[5]=((((-1.0)*x3077))+(((-1.0)*x3078*x3083))+(((-1.0)*r12*x3081))+((r10*x3084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.670435364062589)*px))+(((-2.25133359547376)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.670435364062589)*py))+(((-2.25133359547376)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.670435364062589)*px))+(((-2.25133359547376)*py))))+IKsqr(((((-0.670435364062589)*py))+(((-2.25133359547376)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.670435364062589)*px))+(((-2.25133359547376)*py))), ((((-0.670435364062589)*py))+(((-2.25133359547376)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3085=IKcos(j0);
IkReal x3086=IKsin(j0);
evalcond[0]=((((0.1215)*x3086))+(((-1.0)*px))+(((-0.40799911)*x3085)));
evalcond[1]=((((-0.1215)*x3085))+(((-1.0)*py))+(((-0.40799911)*x3086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3087=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3087;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x3087);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3088=((1.0)*sj5);
IkReal x3089=((((-1.0)*r00*x3088))+(((-1.0)*cj5*r01)));
j4eval[0]=x3089;
j4eval[1]=IKsign(x3089);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3088))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3090=cj5*cj5;
IkReal x3091=((1.0)*r21);
IkReal x3092=(cj5*r20);
IkReal x3093=(((r01*sj5*x3092))+(((-1.0)*r02*r22))+(((-1.0)*r00*r20*x3090))+((r01*r21*x3090))+(((-1.0)*r01*x3091))+((cj5*r00*r21*sj5)));
j4eval[0]=x3093;
j4eval[1]=IKsign(x3093);
j4eval[2]=((IKabs((((cj0*x3092))+(((-1.0)*cj0*sj5*x3091)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3094=cj5*cj5;
IkReal x3095=((1.0)*r21);
IkReal x3096=(cj5*r20);
CheckValue<IkReal> x3097 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3096))+(((-1.0)*cj0*sj5*x3095)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3097.valid){
continue;
}
CheckValue<IkReal> x3098=IKPowWithIntegerCheck(IKsign((((r01*sj5*x3096))+(((-1.0)*r02*r22))+(((-1.0)*r00*r20*x3094))+((r01*r21*x3094))+(((-1.0)*r01*x3095))+((cj5*r00*r21*sj5)))),-1);
if(!x3098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3097.value)+(((1.5707963267949)*(x3098.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3099=IKcos(j4);
IkReal x3100=IKsin(j4);
IkReal x3101=(r11*sj5);
IkReal x3102=(r21*sj5);
IkReal x3103=(r01*sj5);
IkReal x3104=((1.0)*x3099);
IkReal x3105=((1.0)*x3100);
IkReal x3106=(cj5*x3099);
IkReal x3107=(cj5*x3100);
evalcond[0]=((((-1.0)*x3102*x3104))+((r22*x3100))+((r20*x3106)));
evalcond[1]=((((-1.0)*x3102*x3105))+(((-1.0)*r22*x3104))+((r20*x3107)));
evalcond[2]=((((-1.0)*x3103*x3104))+cj0+((r02*x3100))+((r00*x3106)));
evalcond[3]=(sj0+((r10*x3106))+(((-1.0)*x3101*x3104))+((r12*x3100)));
evalcond[4]=((((-1.0)*x3103*x3105))+sj0+((r00*x3107))+(((-1.0)*r02*x3104)));
evalcond[5]=(((r10*x3107))+(((-1.0)*r12*x3104))+(((-1.0)*x3101*x3105))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3108=((1.0)*sj5);
CheckValue<IkReal> x3109 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3108)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3109.valid){
continue;
}
CheckValue<IkReal> x3110=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3108))+(((-1.0)*cj5*r01)))),-1);
if(!x3110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3109.value)+(((1.5707963267949)*(x3110.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3111=IKcos(j4);
IkReal x3112=IKsin(j4);
IkReal x3113=(r11*sj5);
IkReal x3114=(r21*sj5);
IkReal x3115=(r01*sj5);
IkReal x3116=((1.0)*x3111);
IkReal x3117=((1.0)*x3112);
IkReal x3118=(cj5*x3111);
IkReal x3119=(cj5*x3112);
evalcond[0]=((((-1.0)*x3114*x3116))+((r22*x3112))+((r20*x3118)));
evalcond[1]=((((-1.0)*x3114*x3117))+(((-1.0)*r22*x3116))+((r20*x3119)));
evalcond[2]=((((-1.0)*x3115*x3116))+cj0+((r02*x3112))+((r00*x3118)));
evalcond[3]=((((-1.0)*x3113*x3116))+((r12*x3112))+sj0+((r10*x3118)));
evalcond[4]=((((-1.0)*x3115*x3117))+(((-1.0)*r02*x3116))+sj0+((r00*x3119)));
evalcond[5]=((((-1.0)*x3113*x3117))+(((-1.0)*r12*x3116))+((r10*x3119))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3120 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3120.valid){
continue;
}
CheckValue<IkReal> x3121=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3121.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3120.value)+(((1.5707963267949)*(x3121.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3122=IKcos(j4);
IkReal x3123=IKsin(j4);
IkReal x3124=(r11*sj5);
IkReal x3125=(r21*sj5);
IkReal x3126=(r01*sj5);
IkReal x3127=((1.0)*x3122);
IkReal x3128=((1.0)*x3123);
IkReal x3129=(cj5*x3122);
IkReal x3130=(cj5*x3123);
evalcond[0]=((((-1.0)*x3125*x3127))+((r20*x3129))+((r22*x3123)));
evalcond[1]=((((-1.0)*x3125*x3128))+((r20*x3130))+(((-1.0)*r22*x3127)));
evalcond[2]=(((r00*x3129))+cj0+((r02*x3123))+(((-1.0)*x3126*x3127)));
evalcond[3]=(sj0+(((-1.0)*x3124*x3127))+((r10*x3129))+((r12*x3123)));
evalcond[4]=(((r00*x3130))+sj0+(((-1.0)*r02*x3127))+(((-1.0)*x3126*x3128)));
evalcond[5]=((((-1.0)*x3124*x3128))+(((-1.0)*r12*x3127))+((r10*x3130))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.670435364062589)*px))+(((-2.25133359547376)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.670435364062589)*py))+(((-2.25133359547376)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.670435364062589)*px))+(((-2.25133359547376)*py))))+IKsqr(((((-0.670435364062589)*py))+(((-2.25133359547376)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.670435364062589)*px))+(((-2.25133359547376)*py))), ((((-0.670435364062589)*py))+(((-2.25133359547376)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3131=IKcos(j0);
IkReal x3132=IKsin(j0);
evalcond[0]=((((-0.40799911)*x3131))+(((-1.0)*px))+(((0.1215)*x3132)));
evalcond[1]=((((-0.40799911)*x3132))+(((-0.1215)*x3131))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3133=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3133;
j4eval[1]=IKsign(x3133);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3134=((1.0)*sj5);
IkReal x3135=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3134)));
j4eval[0]=x3135;
j4eval[1]=IKsign(x3135);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3134)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3136=((1.0)*sj5);
IkReal x3137=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3136)));
j4eval[0]=x3137;
j4eval[1]=IKsign(x3137);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x3136))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3138=((1.0)*sj5);
CheckValue<IkReal> x3139 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x3138))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3139.valid){
continue;
}
CheckValue<IkReal> x3140=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3138)))),-1);
if(!x3140.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3139.value)+(((1.5707963267949)*(x3140.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3141=IKcos(j4);
IkReal x3142=IKsin(j4);
IkReal x3143=((1.0)*cj0);
IkReal x3144=(r11*sj5);
IkReal x3145=(r21*sj5);
IkReal x3146=(r01*sj5);
IkReal x3147=((1.0)*x3141);
IkReal x3148=(cj5*x3141);
IkReal x3149=((1.0)*x3142);
IkReal x3150=(cj5*x3142);
evalcond[0]=(((r22*x3142))+(((-1.0)*x3145*x3147))+((r20*x3148)));
evalcond[1]=((((-1.0)*r22*x3147))+(((-1.0)*x3145*x3149))+((r20*x3150)));
evalcond[2]=((((-1.0)*x3146*x3149))+sj0+((r00*x3150))+(((-1.0)*r02*x3147)));
evalcond[3]=((((-1.0)*x3146*x3147))+(((-1.0)*x3143))+((r02*x3142))+((r00*x3148)));
evalcond[4]=(((r10*x3148))+(((-1.0)*sj0))+((r12*x3142))+(((-1.0)*x3144*x3147)));
evalcond[5]=((((-1.0)*x3143))+(((-1.0)*r12*x3147))+((r10*x3150))+(((-1.0)*x3144*x3149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3151=((1.0)*sj5);
CheckValue<IkReal> x3152=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3151)))),-1);
if(!x3152.valid){
continue;
}
CheckValue<IkReal> x3153 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3151)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3152.value)))+(x3153.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3154=IKcos(j4);
IkReal x3155=IKsin(j4);
IkReal x3156=((1.0)*cj0);
IkReal x3157=(r11*sj5);
IkReal x3158=(r21*sj5);
IkReal x3159=(r01*sj5);
IkReal x3160=((1.0)*x3154);
IkReal x3161=(cj5*x3154);
IkReal x3162=((1.0)*x3155);
IkReal x3163=(cj5*x3155);
evalcond[0]=(((r22*x3155))+(((-1.0)*x3158*x3160))+((r20*x3161)));
evalcond[1]=((((-1.0)*x3158*x3162))+((r20*x3163))+(((-1.0)*r22*x3160)));
evalcond[2]=(sj0+((r00*x3163))+(((-1.0)*r02*x3160))+(((-1.0)*x3159*x3162)));
evalcond[3]=((((-1.0)*x3156))+((r02*x3155))+((r00*x3161))+(((-1.0)*x3159*x3160)));
evalcond[4]=((((-1.0)*x3157*x3160))+(((-1.0)*sj0))+((r10*x3161))+((r12*x3155)));
evalcond[5]=((((-1.0)*x3156))+(((-1.0)*r12*x3160))+(((-1.0)*x3157*x3162))+((r10*x3163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3164 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3164.valid){
continue;
}
CheckValue<IkReal> x3165=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3165.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3164.value)+(((1.5707963267949)*(x3165.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3166=IKcos(j4);
IkReal x3167=IKsin(j4);
IkReal x3168=((1.0)*cj0);
IkReal x3169=(r11*sj5);
IkReal x3170=(r21*sj5);
IkReal x3171=(r01*sj5);
IkReal x3172=((1.0)*x3166);
IkReal x3173=(cj5*x3166);
IkReal x3174=((1.0)*x3167);
IkReal x3175=(cj5*x3167);
evalcond[0]=(((r22*x3167))+((r20*x3173))+(((-1.0)*x3170*x3172)));
evalcond[1]=(((r20*x3175))+(((-1.0)*r22*x3172))+(((-1.0)*x3170*x3174)));
evalcond[2]=(sj0+((r00*x3175))+(((-1.0)*x3171*x3174))+(((-1.0)*r02*x3172)));
evalcond[3]=(((r02*x3167))+((r00*x3173))+(((-1.0)*x3171*x3172))+(((-1.0)*x3168)));
evalcond[4]=((((-1.0)*x3169*x3172))+(((-1.0)*sj0))+((r12*x3167))+((r10*x3173)));
evalcond[5]=((((-1.0)*x3169*x3174))+((r10*x3175))+(((-1.0)*r12*x3172))+(((-1.0)*x3168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-7.31595793266383e-5)*py))+(((8.23045267424681)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-8.23045267424681)*py))+(((-7.31595793266383e-5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.31595793266383e-5)*py))+(((8.23045267424681)*px))))+IKsqr(((((-8.23045267424681)*py))+(((-7.31595793266383e-5)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-7.31595793266383e-5)*py))+(((8.23045267424681)*px))), ((((-8.23045267424681)*py))+(((-7.31595793266383e-5)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3176=IKcos(j0);
IkReal x3177=IKsin(j0);
evalcond[0]=((((-1.08e-6)*x3176))+(((0.1215)*x3177))+(((-1.0)*px)));
evalcond[1]=((((-1.08e-6)*x3177))+(((-0.1215)*x3176))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3178=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3178;
j4eval[1]=IKsign(x3178);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3179=((1.0)*sj5);
IkReal x3180=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3179)));
j4eval[0]=x3180;
j4eval[1]=IKsign(x3180);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3179))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3181=((1.0)*sj5);
IkReal x3182=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3181)));
j4eval[0]=x3182;
j4eval[1]=IKsign(x3182);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x3181))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3183=((1.0)*sj5);
CheckValue<IkReal> x3184=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3183)))),-1);
if(!x3184.valid){
continue;
}
CheckValue<IkReal> x3185 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x3183))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3184.value)))+(x3185.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3186=IKcos(j4);
IkReal x3187=IKsin(j4);
IkReal x3188=((1.0)*cj0);
IkReal x3189=(r11*sj5);
IkReal x3190=(r21*sj5);
IkReal x3191=(r01*sj5);
IkReal x3192=((1.0)*x3186);
IkReal x3193=(cj5*x3186);
IkReal x3194=((1.0)*x3187);
IkReal x3195=(cj5*x3187);
evalcond[0]=((((-1.0)*x3190*x3192))+((r22*x3187))+((r20*x3193)));
evalcond[1]=((((-1.0)*x3190*x3194))+(((-1.0)*r22*x3192))+((r20*x3195)));
evalcond[2]=(sj0+(((-1.0)*x3191*x3194))+((r00*x3195))+(((-1.0)*r02*x3192)));
evalcond[3]=((((-1.0)*x3191*x3192))+((r00*x3193))+(((-1.0)*x3188))+((r02*x3187)));
evalcond[4]=((((-1.0)*sj0))+((r12*x3187))+(((-1.0)*x3189*x3192))+((r10*x3193)));
evalcond[5]=((((-1.0)*r12*x3192))+(((-1.0)*x3189*x3194))+(((-1.0)*x3188))+((r10*x3195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3196=((1.0)*sj5);
CheckValue<IkReal> x3197 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3196)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3197.valid){
continue;
}
CheckValue<IkReal> x3198=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3196)))),-1);
if(!x3198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3197.value)+(((1.5707963267949)*(x3198.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3199=IKcos(j4);
IkReal x3200=IKsin(j4);
IkReal x3201=((1.0)*cj0);
IkReal x3202=(r11*sj5);
IkReal x3203=(r21*sj5);
IkReal x3204=(r01*sj5);
IkReal x3205=((1.0)*x3199);
IkReal x3206=(cj5*x3199);
IkReal x3207=((1.0)*x3200);
IkReal x3208=(cj5*x3200);
evalcond[0]=(((r22*x3200))+((r20*x3206))+(((-1.0)*x3203*x3205)));
evalcond[1]=(((r20*x3208))+(((-1.0)*x3203*x3207))+(((-1.0)*r22*x3205)));
evalcond[2]=((((-1.0)*r02*x3205))+sj0+(((-1.0)*x3204*x3207))+((r00*x3208)));
evalcond[3]=((((-1.0)*x3204*x3205))+((r00*x3206))+(((-1.0)*x3201))+((r02*x3200)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3202*x3205))+((r12*x3200))+((r10*x3206)));
evalcond[5]=((((-1.0)*r12*x3205))+(((-1.0)*x3202*x3207))+(((-1.0)*x3201))+((r10*x3208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3209 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3209.valid){
continue;
}
CheckValue<IkReal> x3210=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3210.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3209.value)+(((1.5707963267949)*(x3210.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3211=IKcos(j4);
IkReal x3212=IKsin(j4);
IkReal x3213=((1.0)*cj0);
IkReal x3214=(r11*sj5);
IkReal x3215=(r21*sj5);
IkReal x3216=(r01*sj5);
IkReal x3217=((1.0)*x3211);
IkReal x3218=(cj5*x3211);
IkReal x3219=((1.0)*x3212);
IkReal x3220=(cj5*x3212);
evalcond[0]=((((-1.0)*x3215*x3217))+((r22*x3212))+((r20*x3218)));
evalcond[1]=((((-1.0)*x3215*x3219))+(((-1.0)*r22*x3217))+((r20*x3220)));
evalcond[2]=(sj0+(((-1.0)*x3216*x3219))+((r00*x3220))+(((-1.0)*r02*x3217)));
evalcond[3]=(((r00*x3218))+(((-1.0)*x3216*x3217))+(((-1.0)*x3213))+((r02*x3212)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3214*x3217))+((r12*x3212))+((r10*x3218)));
evalcond[5]=(((r10*x3220))+(((-1.0)*x3214*x3219))+(((-1.0)*r12*x3217))+(((-1.0)*x3213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-7.31595793266383e-5)*py))+(((8.23045267424681)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-8.23045267424681)*py))+(((-7.31595793266383e-5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.31595793266383e-5)*py))+(((8.23045267424681)*px))))+IKsqr(((((-8.23045267424681)*py))+(((-7.31595793266383e-5)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-7.31595793266383e-5)*py))+(((8.23045267424681)*px))), ((((-8.23045267424681)*py))+(((-7.31595793266383e-5)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3221=IKcos(j0);
IkReal x3222=IKsin(j0);
evalcond[0]=((((-1.08e-6)*x3221))+(((-1.0)*px))+(((0.1215)*x3222)));
evalcond[1]=((((-1.08e-6)*x3222))+(((-1.0)*py))+(((-0.1215)*x3221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3223=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3223;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x3223);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3224=((1.0)*sj5);
IkReal x3225=((((-1.0)*cj5*r01))+(((-1.0)*r00*x3224)));
j4eval[0]=x3225;
j4eval[1]=IKsign(x3225);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3224)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3226=cj5*cj5;
IkReal x3227=((1.0)*r21);
IkReal x3228=(cj5*r20);
IkReal x3229=((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x3226))+((r01*sj5*x3228))+((cj5*r00*r21*sj5))+((r01*r21*x3226))+(((-1.0)*r01*x3227)));
j4eval[0]=x3229;
j4eval[1]=IKsign(x3229);
j4eval[2]=((IKabs((((cj0*x3228))+(((-1.0)*cj0*sj5*x3227)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3230=cj5*cj5;
IkReal x3231=((1.0)*r21);
IkReal x3232=(cj5*r20);
CheckValue<IkReal> x3233 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3232))+(((-1.0)*cj0*sj5*x3231)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3233.valid){
continue;
}
CheckValue<IkReal> x3234=IKPowWithIntegerCheck(IKsign((((r01*r21*x3230))+(((-1.0)*r02*r22))+(((-1.0)*r01*x3231))+((cj5*r00*r21*sj5))+((r01*sj5*x3232))+(((-1.0)*r00*r20*x3230)))),-1);
if(!x3234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3233.value)+(((1.5707963267949)*(x3234.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3235=IKcos(j4);
IkReal x3236=IKsin(j4);
IkReal x3237=(r11*sj5);
IkReal x3238=(r21*sj5);
IkReal x3239=(r01*sj5);
IkReal x3240=((1.0)*x3235);
IkReal x3241=((1.0)*x3236);
IkReal x3242=(cj5*x3235);
IkReal x3243=(cj5*x3236);
evalcond[0]=(((r22*x3236))+(((-1.0)*x3238*x3240))+((r20*x3242)));
evalcond[1]=((((-1.0)*x3238*x3241))+((r20*x3243))+(((-1.0)*r22*x3240)));
evalcond[2]=((((-1.0)*x3239*x3240))+((r00*x3242))+cj0+((r02*x3236)));
evalcond[3]=(sj0+(((-1.0)*x3237*x3240))+((r12*x3236))+((r10*x3242)));
evalcond[4]=((((-1.0)*x3239*x3241))+((r00*x3243))+sj0+(((-1.0)*r02*x3240)));
evalcond[5]=((((-1.0)*x3237*x3241))+(((-1.0)*r12*x3240))+((r10*x3243))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3244=((1.0)*sj5);
CheckValue<IkReal> x3245=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3244))+(((-1.0)*cj5*r01)))),-1);
if(!x3245.valid){
continue;
}
CheckValue<IkReal> x3246 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3244)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3246.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3245.value)))+(x3246.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3247=IKcos(j4);
IkReal x3248=IKsin(j4);
IkReal x3249=(r11*sj5);
IkReal x3250=(r21*sj5);
IkReal x3251=(r01*sj5);
IkReal x3252=((1.0)*x3247);
IkReal x3253=((1.0)*x3248);
IkReal x3254=(cj5*x3247);
IkReal x3255=(cj5*x3248);
evalcond[0]=(((r22*x3248))+(((-1.0)*x3250*x3252))+((r20*x3254)));
evalcond[1]=((((-1.0)*r22*x3252))+(((-1.0)*x3250*x3253))+((r20*x3255)));
evalcond[2]=(cj0+((r00*x3254))+(((-1.0)*x3251*x3252))+((r02*x3248)));
evalcond[3]=(((r10*x3254))+sj0+(((-1.0)*x3249*x3252))+((r12*x3248)));
evalcond[4]=(sj0+(((-1.0)*r02*x3252))+((r00*x3255))+(((-1.0)*x3251*x3253)));
evalcond[5]=(((r10*x3255))+(((-1.0)*x3249*x3253))+(((-1.0)*r12*x3252))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3256 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3256.valid){
continue;
}
CheckValue<IkReal> x3257=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3257.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3256.value)+(((1.5707963267949)*(x3257.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3258=IKcos(j4);
IkReal x3259=IKsin(j4);
IkReal x3260=(r11*sj5);
IkReal x3261=(r21*sj5);
IkReal x3262=(r01*sj5);
IkReal x3263=((1.0)*x3258);
IkReal x3264=((1.0)*x3259);
IkReal x3265=(cj5*x3258);
IkReal x3266=(cj5*x3259);
evalcond[0]=((((-1.0)*x3261*x3263))+((r20*x3265))+((r22*x3259)));
evalcond[1]=((((-1.0)*x3261*x3264))+((r20*x3266))+(((-1.0)*r22*x3263)));
evalcond[2]=(cj0+((r00*x3265))+((r02*x3259))+(((-1.0)*x3262*x3263)));
evalcond[3]=((((-1.0)*x3260*x3263))+((r12*x3259))+sj0+((r10*x3265)));
evalcond[4]=(sj0+((r00*x3266))+(((-1.0)*x3262*x3264))+(((-1.0)*r02*x3263)));
evalcond[5]=((((-1.0)*x3260*x3264))+(((-1.0)*r12*x3263))+((r10*x3266))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.670429990723709)*px))+(((2.2513253736458)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.2513253736458)*px))+(((-0.670429990723709)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.670429990723709)*px))+(((2.2513253736458)*py))))+IKsqr(((((2.2513253736458)*px))+(((-0.670429990723709)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.670429990723709)*px))+(((2.2513253736458)*py))), ((((2.2513253736458)*px))+(((-0.670429990723709)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3267=IKsin(j0);
IkReal x3268=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.1215)*x3267))+(((0.40800089)*x3268)));
evalcond[1]=((((-0.1215)*x3268))+(((-1.0)*py))+(((0.40800089)*x3267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3269=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3269;
j4eval[1]=IKsign(x3269);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3270=((1.0)*sj5);
IkReal x3271=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3270)));
j4eval[0]=x3271;
j4eval[1]=IKsign(x3271);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3270))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3272=((1.0)*sj5);
IkReal x3273=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3272)));
j4eval[0]=x3273;
j4eval[1]=IKsign(x3273);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x3272))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3274=((1.0)*sj5);
CheckValue<IkReal> x3275=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3274)))),-1);
if(!x3275.valid){
continue;
}
CheckValue<IkReal> x3276 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x3274))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3276.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3275.value)))+(x3276.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3277=IKcos(j4);
IkReal x3278=IKsin(j4);
IkReal x3279=((1.0)*cj0);
IkReal x3280=(r11*sj5);
IkReal x3281=(r21*sj5);
IkReal x3282=(r01*sj5);
IkReal x3283=((1.0)*x3277);
IkReal x3284=(cj5*x3277);
IkReal x3285=((1.0)*x3278);
IkReal x3286=(cj5*x3278);
evalcond[0]=(((r20*x3284))+(((-1.0)*x3281*x3283))+((r22*x3278)));
evalcond[1]=(((r20*x3286))+(((-1.0)*x3281*x3285))+(((-1.0)*r22*x3283)));
evalcond[2]=(((r00*x3286))+sj0+(((-1.0)*x3282*x3285))+(((-1.0)*r02*x3283)));
evalcond[3]=(((r00*x3284))+(((-1.0)*x3282*x3283))+(((-1.0)*x3279))+((r02*x3278)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3280*x3283))+((r10*x3284))+((r12*x3278)));
evalcond[5]=((((-1.0)*r12*x3283))+(((-1.0)*x3280*x3285))+(((-1.0)*x3279))+((r10*x3286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3287=((1.0)*sj5);
CheckValue<IkReal> x3288 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3287)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3288.valid){
continue;
}
CheckValue<IkReal> x3289=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3287)))),-1);
if(!x3289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3288.value)+(((1.5707963267949)*(x3289.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3290=IKcos(j4);
IkReal x3291=IKsin(j4);
IkReal x3292=((1.0)*cj0);
IkReal x3293=(r11*sj5);
IkReal x3294=(r21*sj5);
IkReal x3295=(r01*sj5);
IkReal x3296=((1.0)*x3290);
IkReal x3297=(cj5*x3290);
IkReal x3298=((1.0)*x3291);
IkReal x3299=(cj5*x3291);
evalcond[0]=(((r20*x3297))+((r22*x3291))+(((-1.0)*x3294*x3296)));
evalcond[1]=(((r20*x3299))+(((-1.0)*r22*x3296))+(((-1.0)*x3294*x3298)));
evalcond[2]=(((r00*x3299))+sj0+(((-1.0)*r02*x3296))+(((-1.0)*x3295*x3298)));
evalcond[3]=(((r00*x3297))+(((-1.0)*x3292))+((r02*x3291))+(((-1.0)*x3295*x3296)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3293*x3296))+((r10*x3297))+((r12*x3291)));
evalcond[5]=((((-1.0)*r12*x3296))+(((-1.0)*x3292))+(((-1.0)*x3293*x3298))+((r10*x3299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3300 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3300.valid){
continue;
}
CheckValue<IkReal> x3301=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3300.value)+(((1.5707963267949)*(x3301.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3302=IKcos(j4);
IkReal x3303=IKsin(j4);
IkReal x3304=((1.0)*cj0);
IkReal x3305=(r11*sj5);
IkReal x3306=(r21*sj5);
IkReal x3307=(r01*sj5);
IkReal x3308=((1.0)*x3302);
IkReal x3309=(cj5*x3302);
IkReal x3310=((1.0)*x3303);
IkReal x3311=(cj5*x3303);
evalcond[0]=(((r22*x3303))+(((-1.0)*x3306*x3308))+((r20*x3309)));
evalcond[1]=((((-1.0)*r22*x3308))+(((-1.0)*x3306*x3310))+((r20*x3311)));
evalcond[2]=(sj0+(((-1.0)*r02*x3308))+((r00*x3311))+(((-1.0)*x3307*x3310)));
evalcond[3]=(((r02*x3303))+(((-1.0)*x3304))+((r00*x3309))+(((-1.0)*x3307*x3308)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3305*x3308))+((r10*x3309))+((r12*x3303)));
evalcond[5]=((((-1.0)*x3305*x3310))+((r10*x3311))+(((-1.0)*x3304))+(((-1.0)*r12*x3308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.670429990723709)*px))+(((2.2513253736458)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.2513253736458)*px))+(((-0.670429990723709)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.670429990723709)*px))+(((2.2513253736458)*py))))+IKsqr(((((2.2513253736458)*px))+(((-0.670429990723709)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.670429990723709)*px))+(((2.2513253736458)*py))), ((((2.2513253736458)*px))+(((-0.670429990723709)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3312=IKsin(j0);
IkReal x3313=IKcos(j0);
evalcond[0]=((((0.40800089)*x3313))+(((0.1215)*x3312))+(((-1.0)*px)));
evalcond[1]=((((0.40800089)*x3312))+(((-0.1215)*x3313))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3314=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3314;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x3314);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3315=((1.0)*sj5);
IkReal x3316=((((-1.0)*r00*x3315))+(((-1.0)*cj5*r01)));
j4eval[0]=x3316;
j4eval[1]=IKsign(x3316);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3315))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3317=cj5*cj5;
IkReal x3318=((1.0)*r21);
IkReal x3319=(cj5*r20);
IkReal x3320=(((r01*r21*x3317))+(((-1.0)*r02*r22))+((r01*sj5*x3319))+(((-1.0)*r00*r20*x3317))+((cj5*r00*r21*sj5))+(((-1.0)*r01*x3318)));
j4eval[0]=x3320;
j4eval[1]=IKsign(x3320);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x3318))+((cj0*x3319)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3321=cj5*cj5;
IkReal x3322=((1.0)*r21);
IkReal x3323=(cj5*r20);
CheckValue<IkReal> x3324 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x3322))+((cj0*x3323)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3324.valid){
continue;
}
CheckValue<IkReal> x3325=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+((r01*r21*x3321))+((r01*sj5*x3323))+(((-1.0)*r00*r20*x3321))+((cj5*r00*r21*sj5))+(((-1.0)*r01*x3322)))),-1);
if(!x3325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3324.value)+(((1.5707963267949)*(x3325.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3326=IKcos(j4);
IkReal x3327=IKsin(j4);
IkReal x3328=(r11*sj5);
IkReal x3329=(r21*sj5);
IkReal x3330=(r01*sj5);
IkReal x3331=((1.0)*x3326);
IkReal x3332=((1.0)*x3327);
IkReal x3333=(cj5*x3326);
IkReal x3334=(cj5*x3327);
evalcond[0]=(((r22*x3327))+(((-1.0)*x3329*x3331))+((r20*x3333)));
evalcond[1]=((((-1.0)*r22*x3331))+(((-1.0)*x3329*x3332))+((r20*x3334)));
evalcond[2]=((((-1.0)*x3330*x3331))+cj0+((r00*x3333))+((r02*x3327)));
evalcond[3]=(((r12*x3327))+sj0+((r10*x3333))+(((-1.0)*x3328*x3331)));
evalcond[4]=(sj0+(((-1.0)*x3330*x3332))+(((-1.0)*r02*x3331))+((r00*x3334)));
evalcond[5]=(((r10*x3334))+(((-1.0)*cj0))+(((-1.0)*x3328*x3332))+(((-1.0)*r12*x3331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3335=((1.0)*sj5);
CheckValue<IkReal> x3336=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3335))+(((-1.0)*cj5*r01)))),-1);
if(!x3336.valid){
continue;
}
CheckValue<IkReal> x3337 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3335)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3336.value)))+(x3337.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3338=IKcos(j4);
IkReal x3339=IKsin(j4);
IkReal x3340=(r11*sj5);
IkReal x3341=(r21*sj5);
IkReal x3342=(r01*sj5);
IkReal x3343=((1.0)*x3338);
IkReal x3344=((1.0)*x3339);
IkReal x3345=(cj5*x3338);
IkReal x3346=(cj5*x3339);
evalcond[0]=((((-1.0)*x3341*x3343))+((r22*x3339))+((r20*x3345)));
evalcond[1]=((((-1.0)*x3341*x3344))+((r20*x3346))+(((-1.0)*r22*x3343)));
evalcond[2]=(((r00*x3345))+cj0+((r02*x3339))+(((-1.0)*x3342*x3343)));
evalcond[3]=((((-1.0)*x3340*x3343))+sj0+((r10*x3345))+((r12*x3339)));
evalcond[4]=(((r00*x3346))+sj0+(((-1.0)*r02*x3343))+(((-1.0)*x3342*x3344)));
evalcond[5]=((((-1.0)*x3340*x3344))+((r10*x3346))+(((-1.0)*r12*x3343))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3347 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3347.valid){
continue;
}
CheckValue<IkReal> x3348=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3347.value)+(((1.5707963267949)*(x3348.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3349=IKcos(j4);
IkReal x3350=IKsin(j4);
IkReal x3351=(r11*sj5);
IkReal x3352=(r21*sj5);
IkReal x3353=(r01*sj5);
IkReal x3354=((1.0)*x3349);
IkReal x3355=((1.0)*x3350);
IkReal x3356=(cj5*x3349);
IkReal x3357=(cj5*x3350);
evalcond[0]=((((-1.0)*x3352*x3354))+((r20*x3356))+((r22*x3350)));
evalcond[1]=((((-1.0)*x3352*x3355))+((r20*x3357))+(((-1.0)*r22*x3354)));
evalcond[2]=(cj0+((r00*x3356))+(((-1.0)*x3353*x3354))+((r02*x3350)));
evalcond[3]=(((r12*x3350))+sj0+(((-1.0)*x3351*x3354))+((r10*x3356)));
evalcond[4]=(sj0+((r00*x3357))+(((-1.0)*r02*x3354))+(((-1.0)*x3353*x3355)));
evalcond[5]=((((-1.0)*x3351*x3355))+(((-1.0)*r12*x3354))+((r10*x3357))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3358=(cj5*r01);
IkReal x3359=(cj2*sj1);
IkReal x3360=((0.00394)*cj1);
IkReal x3361=(r00*sj5);
IkReal x3362=((816.0)*sj1);
IkReal x3363=((2000.0)*px);
IkReal x3364=(cj1*sj2);
CheckValue<IkReal> x3365=IKPowWithIntegerCheck(((((-243.0)*x3359))+(((243.0)*x3364))),-1);
if(!x3365.valid){
continue;
}
CheckValue<IkReal> x3366=IKPowWithIntegerCheck((x3364+(((-1.0)*x3359))),-1);
if(!x3366.valid){
continue;
}
if( IKabs(((x3365.value)*(((((-1.0)*x3361*x3362))+((x3363*x3364))+(((-1.0)*x3359*x3363))+(((0.00178)*x3361))+(((0.00178)*x3358))+((x3358*x3360))+(((-547.0)*x3359*x3361))+((x3360*x3361))+(((-547.0)*x3358*x3359))+(((547.0)*x3361*x3364))+(((547.0)*x3358*x3364))+(((-1.0)*x3358*x3362)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3366.value)*(((((-1.0)*x3361))+(((-1.0)*x3358)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3365.value)*(((((-1.0)*x3361*x3362))+((x3363*x3364))+(((-1.0)*x3359*x3363))+(((0.00178)*x3361))+(((0.00178)*x3358))+((x3358*x3360))+(((-547.0)*x3359*x3361))+((x3360*x3361))+(((-547.0)*x3358*x3359))+(((547.0)*x3361*x3364))+(((547.0)*x3358*x3364))+(((-1.0)*x3358*x3362))))))+IKsqr(((x3366.value)*(((((-1.0)*x3361))+(((-1.0)*x3358))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3365.value)*(((((-1.0)*x3361*x3362))+((x3363*x3364))+(((-1.0)*x3359*x3363))+(((0.00178)*x3361))+(((0.00178)*x3358))+((x3358*x3360))+(((-547.0)*x3359*x3361))+((x3360*x3361))+(((-547.0)*x3358*x3359))+(((547.0)*x3361*x3364))+(((547.0)*x3358*x3364))+(((-1.0)*x3358*x3362))))), ((x3366.value)*(((((-1.0)*x3361))+(((-1.0)*x3358))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3367=IKcos(j0);
IkReal x3368=IKsin(j0);
IkReal x3369=(cj2*sj1);
IkReal x3370=(cj5*r01);
IkReal x3371=(cj1*sj2);
IkReal x3372=((0.408)*sj1);
IkReal x3373=(r00*sj5);
IkReal x3374=((1.97e-6)*cj1);
IkReal x3375=(cj5*r11);
IkReal x3376=(r10*sj5);
IkReal x3377=((0.376)*x3368);
IkReal x3378=((0.376)*x3367);
evalcond[0]=((((-1.0)*x3367*x3369))+x3373+x3370+((x3367*x3371)));
evalcond[1]=(x3376+x3375+((x3368*x3371))+(((-1.0)*x3368*x3369)));
evalcond[2]=((((-1.0)*x3367*x3372))+(((8.9e-7)*x3367))+((x3367*x3374))+(((-1.0)*px))+(((0.1215)*x3368))+((x3371*x3378))+(((0.1025)*x3373))+(((0.1025)*x3370))+(((-1.0)*x3369*x3378)));
evalcond[3]=((((-0.1215)*x3367))+(((8.9e-7)*x3368))+((x3368*x3374))+(((-1.0)*py))+((x3371*x3377))+(((0.1025)*x3376))+(((0.1025)*x3375))+(((-1.0)*x3369*x3377))+(((-1.0)*x3368*x3372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3379=((1.0)*sj5);
IkReal x3380=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3379)));
j4eval[0]=x3380;
j4eval[1]=IKsign(x3380);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x3379))+((cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3381=((1.0)*sj5);
IkReal x3382=((((-1.0)*r00*x3381))+(((-1.0)*cj5*r01)));
j4eval[0]=x3382;
j4eval[1]=IKsign(x3382);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x3381))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3383=((1.0)*sj5);
IkReal x3384=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3384;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x3383))+(((-1.0)*r11*sj0*x3383))))));
j4eval[2]=IKsign(x3384);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3386 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3386)==0){
continue;
}
IkReal x3385=pow(x3386,-0.5);
CheckValue<IkReal> x3387 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3387.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3387.value));
IkReal gconst97=((-1.0)*r21*x3385);
IkReal gconst98=(r20*x3385);
CheckValue<IkReal> x3388 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3388.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3388.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x3391 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3391.valid){
continue;
}
IkReal x3389=((-1.0)*(x3391.value));
IkReal x3390=x3385;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3389;
IkReal gconst96=x3389;
IkReal gconst97=((-1.0)*r21*x3390);
IkReal gconst98=(r20*x3390);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3394 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3394.valid){
continue;
}
IkReal x3392=((-1.0)*(x3394.value));
IkReal x3393=x3385;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3392;
IkReal gconst96=x3392;
IkReal gconst97=((-1.0)*r21*x3393);
IkReal gconst98=(r20*x3393);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x3397 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3397.valid){
continue;
}
IkReal x3395=((-1.0)*(x3397.value));
IkReal x3396=x3385;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3395;
IkReal gconst96=x3395;
IkReal gconst97=((-1.0)*r21*x3396);
IkReal gconst98=(r20*x3396);
IkReal x3398=((1.0)*(r22*r22));
CheckValue<IkReal> x3402=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3398))),-1);
if(!x3402.valid){
continue;
}
IkReal x3399=x3402.value;
IkReal x3400=((1.0)*x3399);
IkReal x3401=((((-1.0)*x3400*(r20*r20*r20*r20)))+(((-2.0)*x3399*(r20*r20)*(r21*r21)))+(((-1.0)*x3400*(r21*r21*r21*r21)))+(((-1.0)*x3398)));
j4eval[0]=x3401;
j4eval[1]=IKsign(x3401);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3403=(cj1*sj2);
IkReal x3404=(cj2*sj1);
IkReal x3405=(gconst98*r20);
IkReal x3406=(gconst97*r21);
CheckValue<IkReal> x3407=IKPowWithIntegerCheck(IKsign(((((2.0)*x3405*x3406))+(((-1.0)*(x3406*x3406)))+(((-1.0)*(x3405*x3405)))+(((-1.0)*(r22*r22))))),-1);
if(!x3407.valid){
continue;
}
CheckValue<IkReal> x3408 = IKatan2WithCheck(IkReal((((r22*x3404))+(((-1.0)*r22*x3403)))),IkReal(((((-1.0)*x3404*x3406))+((x3403*x3406))+(((-1.0)*x3403*x3405))+((x3404*x3405)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3407.value)))+(x3408.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3409=IKsin(j4);
IkReal x3410=IKcos(j4);
IkReal x3411=(gconst98*r00);
IkReal x3412=(sj1*sj2);
IkReal x3413=(cj1*cj2);
IkReal x3414=((1.0)*x3410);
IkReal x3415=(gconst98*x3409);
IkReal x3416=(gconst98*x3410);
IkReal x3417=((1.0)*gconst97*x3409);
evalcond[0]=((((-1.0)*r22*x3414))+(((-1.0)*r21*x3417))+((r20*x3415)));
evalcond[1]=(((x3409*x3411))+sj0+(((-1.0)*r02*x3414))+(((-1.0)*r01*x3417)));
evalcond[2]=((((-1.0)*r11*x3417))+(((-1.0)*r12*x3414))+((r10*x3415))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r22*x3409))+(((-1.0)*cj1*sj2))+((r20*x3416))+(((-1.0)*gconst97*r21*x3414)));
evalcond[4]=(((r02*x3409))+((cj0*x3413))+((cj0*x3412))+((x3410*x3411))+(((-1.0)*gconst97*r01*x3414)));
evalcond[5]=(((sj0*x3413))+((sj0*x3412))+((r12*x3409))+(((-1.0)*gconst97*r11*x3414))+((r10*x3416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3418=((1.0)*gconst97);
CheckValue<IkReal> x3419 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst98*r20))+(((-1.0)*cj0*r21*x3418)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3419.valid){
continue;
}
CheckValue<IkReal> x3420=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst98*r01))+(((-1.0)*r00*x3418)))),-1);
if(!x3420.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3419.value)+(((1.5707963267949)*(x3420.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3421=IKsin(j4);
IkReal x3422=IKcos(j4);
IkReal x3423=(gconst98*r00);
IkReal x3424=(sj1*sj2);
IkReal x3425=(cj1*cj2);
IkReal x3426=((1.0)*x3422);
IkReal x3427=(gconst98*x3421);
IkReal x3428=(gconst98*x3422);
IkReal x3429=((1.0)*gconst97*x3421);
evalcond[0]=(((r20*x3427))+(((-1.0)*r22*x3426))+(((-1.0)*r21*x3429)));
evalcond[1]=(sj0+(((-1.0)*r01*x3429))+((x3421*x3423))+(((-1.0)*r02*x3426)));
evalcond[2]=((((-1.0)*r11*x3429))+(((-1.0)*r12*x3426))+((r10*x3427))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r20*x3428))+(((-1.0)*gconst97*r21*x3426))+(((-1.0)*cj1*sj2))+((r22*x3421)));
evalcond[4]=((((-1.0)*gconst97*r01*x3426))+((x3422*x3423))+((r02*x3421))+((cj0*x3424))+((cj0*x3425)));
evalcond[5]=(((r10*x3428))+(((-1.0)*gconst97*r11*x3426))+((sj0*x3424))+((sj0*x3425))+((r12*x3421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3430=((1.0)*gconst97);
CheckValue<IkReal> x3431=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x3430))+(((-1.0)*gconst98*r11)))),-1);
if(!x3431.valid){
continue;
}
CheckValue<IkReal> x3432 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst98*r20*sj0))+(((-1.0)*r21*sj0*x3430)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3431.value)))+(x3432.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3433=IKsin(j4);
IkReal x3434=IKcos(j4);
IkReal x3435=(gconst98*r00);
IkReal x3436=(sj1*sj2);
IkReal x3437=(cj1*cj2);
IkReal x3438=((1.0)*x3434);
IkReal x3439=(gconst98*x3433);
IkReal x3440=(gconst98*x3434);
IkReal x3441=((1.0)*gconst97*x3433);
evalcond[0]=(((r20*x3439))+(((-1.0)*r21*x3441))+(((-1.0)*r22*x3438)));
evalcond[1]=(sj0+((x3433*x3435))+(((-1.0)*r01*x3441))+(((-1.0)*r02*x3438)));
evalcond[2]=(((r10*x3439))+(((-1.0)*r12*x3438))+(((-1.0)*r11*x3441))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst97*r21*x3438))+(((-1.0)*cj1*sj2))+((r20*x3440))+((r22*x3433)));
evalcond[4]=(((cj0*x3437))+((cj0*x3436))+((x3434*x3435))+(((-1.0)*gconst97*r01*x3438))+((r02*x3433)));
evalcond[5]=(((r10*x3440))+(((-1.0)*gconst97*r11*x3438))+((sj0*x3437))+((sj0*x3436))+((r12*x3433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3443 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3443)==0){
continue;
}
IkReal x3442=pow(x3443,-0.5);
CheckValue<IkReal> x3444 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3444.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3444.value))));
IkReal gconst100=((1.0)*r21*x3442);
IkReal gconst101=((-1.0)*r20*x3442);
CheckValue<IkReal> x3445 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3445.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3445.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x3448 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3448.valid){
continue;
}
IkReal x3446=((1.0)*(x3448.value));
IkReal x3447=x3442;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3446)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3446)));
IkReal gconst100=((1.0)*r21*x3447);
IkReal gconst101=((-1.0)*r20*x3447);
IkReal x3449=r22*r22;
IkReal x3450=((1.0)*x3449);
CheckValue<IkReal> x3454=IKPowWithIntegerCheck(((-1.0)+x3449),-1);
if(!x3454.valid){
continue;
}
IkReal x3451=x3454.value;
if((((1.0)+(((-1.0)*x3450)))) < -0.00001)
continue;
IkReal x3452=IKsqrt(((1.0)+(((-1.0)*x3450))));
IkReal x3453=(sj0*x3451*x3452);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x3453+(((-1.0)*x3450*x3453))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3457 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3457.valid){
continue;
}
IkReal x3455=((1.0)*(x3457.value));
IkReal x3456=x3442;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3455)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3455)));
IkReal gconst100=((1.0)*r21*x3456);
IkReal gconst101=((-1.0)*r20*x3456);
IkReal x3458=r22*r22;
IkReal x3459=((1.0)*x3458);
CheckValue<IkReal> x3463=IKPowWithIntegerCheck(((-1.0)+x3458),-1);
if(!x3463.valid){
continue;
}
IkReal x3460=x3463.value;
if((((1.0)+(((-1.0)*x3459)))) < -0.00001)
continue;
IkReal x3461=IKsqrt(((1.0)+(((-1.0)*x3459))));
IkReal x3462=(cj0*x3460*x3461);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x3462+(((-1.0)*x3459*x3462))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x3466 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3466.valid){
continue;
}
IkReal x3464=((1.0)*(x3466.value));
IkReal x3465=x3442;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3464)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3464)));
IkReal gconst100=((1.0)*r21*x3465);
IkReal gconst101=((-1.0)*r20*x3465);
IkReal x3467=r22*r22;
IkReal x3468=(cj0*r02);
IkReal x3469=(r12*sj0);
CheckValue<IkReal> x3473=IKPowWithIntegerCheck(((-1.0)+x3467),-1);
if(!x3473.valid){
continue;
}
IkReal x3470=x3473.value;
if((((1.0)+(((-1.0)*x3467)))) < -0.00001)
continue;
IkReal x3471=IKsqrt(((1.0)+(((-1.0)*x3467))));
IkReal x3472=((1.0)*r22*x3470*x3471);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x3469*x3472))+(((-1.0)*x3468*x3472)))))+(IKabs((x3469+x3468))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3474=((1.0)*gconst100);
CheckValue<IkReal> x3475=IKPowWithIntegerCheck(IKsign((((gconst100*r20))+((gconst101*r21)))),-1);
if(!x3475.valid){
continue;
}
CheckValue<IkReal> x3476 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x3474))+((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*cj0*r01*x3474)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3475.value)))+(x3476.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3477=IKsin(j4);
IkReal x3478=IKcos(j4);
IkReal x3479=(cj1*cj2);
IkReal x3480=(sj1*sj2);
IkReal x3481=(gconst101*r10);
IkReal x3482=((1.0)*x3478);
IkReal x3483=(gconst101*x3478);
IkReal x3484=(gconst101*x3477);
IkReal x3485=((1.0)*gconst100*x3477);
evalcond[0]=((((-1.0)*r21*x3485))+((r20*x3484))+(((-1.0)*r22*x3482)));
evalcond[1]=((((-1.0)*r01*x3485))+sj0+(((-1.0)*r02*x3482))+((r00*x3484)));
evalcond[2]=(((x3477*x3481))+(((-1.0)*r12*x3482))+(((-1.0)*r11*x3485))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((r20*x3483))+((r22*x3477))+(((-1.0)*gconst100*r21*x3482)));
evalcond[4]=(((r00*x3483))+((cj0*x3479))+((cj0*x3480))+(((-1.0)*gconst100*r01*x3482))+((r02*x3477)));
evalcond[5]=((((-1.0)*gconst100*r11*x3482))+((r12*x3477))+((sj0*x3479))+((sj0*x3480))+((x3478*x3481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3486=((1.0)*gconst100);
CheckValue<IkReal> x3487 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x3486))+((cj0*gconst101*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3487.valid){
continue;
}
CheckValue<IkReal> x3488=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3486))+(((-1.0)*gconst101*r01)))),-1);
if(!x3488.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3487.value)+(((1.5707963267949)*(x3488.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3489=IKsin(j4);
IkReal x3490=IKcos(j4);
IkReal x3491=(cj1*cj2);
IkReal x3492=(sj1*sj2);
IkReal x3493=(gconst101*r10);
IkReal x3494=((1.0)*x3490);
IkReal x3495=(gconst101*x3490);
IkReal x3496=(gconst101*x3489);
IkReal x3497=((1.0)*gconst100*x3489);
evalcond[0]=(((r20*x3496))+(((-1.0)*r22*x3494))+(((-1.0)*r21*x3497)));
evalcond[1]=((((-1.0)*r02*x3494))+sj0+((r00*x3496))+(((-1.0)*r01*x3497)));
evalcond[2]=((((-1.0)*r12*x3494))+((x3489*x3493))+(((-1.0)*cj0))+(((-1.0)*r11*x3497)));
evalcond[3]=(((r20*x3495))+((cj2*sj1))+(((-1.0)*gconst100*r21*x3494))+(((-1.0)*cj1*sj2))+((r22*x3489)));
evalcond[4]=(((cj0*x3492))+((cj0*x3491))+(((-1.0)*gconst100*r01*x3494))+((r00*x3495))+((r02*x3489)));
evalcond[5]=((((-1.0)*gconst100*r11*x3494))+((r12*x3489))+((x3490*x3493))+((sj0*x3492))+((sj0*x3491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3498=((1.0)*gconst100);
CheckValue<IkReal> x3499=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x3498))+(((-1.0)*gconst101*r11)))),-1);
if(!x3499.valid){
continue;
}
CheckValue<IkReal> x3500 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x3498))+((gconst101*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3500.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3499.value)))+(x3500.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3501=IKsin(j4);
IkReal x3502=IKcos(j4);
IkReal x3503=(cj1*cj2);
IkReal x3504=(sj1*sj2);
IkReal x3505=(gconst101*r10);
IkReal x3506=((1.0)*x3502);
IkReal x3507=(gconst101*x3502);
IkReal x3508=(gconst101*x3501);
IkReal x3509=((1.0)*gconst100*x3501);
evalcond[0]=(((r20*x3508))+(((-1.0)*r22*x3506))+(((-1.0)*r21*x3509)));
evalcond[1]=(sj0+((r00*x3508))+(((-1.0)*r01*x3509))+(((-1.0)*r02*x3506)));
evalcond[2]=((((-1.0)*r12*x3506))+((x3501*x3505))+(((-1.0)*r11*x3509))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r20*x3507))+(((-1.0)*gconst100*r21*x3506))+(((-1.0)*cj1*sj2))+((r22*x3501)));
evalcond[4]=(((cj0*x3504))+((cj0*x3503))+(((-1.0)*gconst100*r01*x3506))+((r00*x3507))+((r02*x3501)));
evalcond[5]=(((r12*x3501))+((sj0*x3504))+((sj0*x3503))+(((-1.0)*gconst100*r11*x3506))+((x3502*x3505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3510=((-1.0)*r00);
IkReal x3512 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3512)==0){
continue;
}
IkReal x3511=pow(x3512,-0.5);
CheckValue<IkReal> x3513 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3510),IKFAST_ATAN2_MAGTHRESH);
if(!x3513.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3513.value));
IkReal gconst103=(r01*x3511);
IkReal gconst104=(x3510*x3511);
CheckValue<IkReal> x3514 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3514.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3514.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3515=((-1.0)*r00);
IkReal x3516=x3511;
CheckValue<IkReal> x3518 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3515),IKFAST_ATAN2_MAGTHRESH);
if(!x3518.valid){
continue;
}
IkReal x3517=((-1.0)*(x3518.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst103;
cj5=gconst104;
j5=x3517;
IkReal gconst102=x3517;
IkReal gconst103=(r01*x3516);
IkReal gconst104=(x3515*x3516);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3519=((1.0)*gconst103);
CheckValue<IkReal> x3520 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3519))+(((-1.0)*r11*sj0*x3519))+((gconst104*r10*sj0))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3520.valid){
continue;
}
CheckValue<IkReal> x3521=IKPowWithIntegerCheck(IKsign((((gconst104*r21))+((gconst103*r20)))),-1);
if(!x3521.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3520.value)+(((1.5707963267949)*(x3521.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3522=IKsin(j4);
IkReal x3523=IKcos(j4);
IkReal x3524=(cj1*cj2);
IkReal x3525=(sj1*sj2);
IkReal x3526=((1.0)*x3523);
IkReal x3527=(gconst104*x3523);
IkReal x3528=(gconst104*x3522);
IkReal x3529=((1.0)*gconst103*x3522);
evalcond[0]=(((r20*x3528))+(((-1.0)*r22*x3526))+(((-1.0)*r21*x3529)));
evalcond[1]=((((-1.0)*r02*x3526))+sj0+((r00*x3528))+(((-1.0)*r01*x3529)));
evalcond[2]=(((r10*x3528))+(((-1.0)*r11*x3529))+(((-1.0)*r12*x3526))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r20*x3527))+(((-1.0)*gconst103*r21*x3526))+(((-1.0)*cj1*sj2))+((r22*x3522)));
evalcond[4]=(((cj0*x3525))+((cj0*x3524))+((r00*x3527))+((r02*x3522))+(((-1.0)*gconst103*r01*x3526)));
evalcond[5]=(((r10*x3527))+(((-1.0)*gconst103*r11*x3526))+((r12*x3522))+((sj0*x3525))+((sj0*x3524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3530=((1.0)*gconst103);
CheckValue<IkReal> x3531=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x3530))+(((-1.0)*gconst104*r11)))),-1);
if(!x3531.valid){
continue;
}
CheckValue<IkReal> x3532 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst104*r20*sj0))+(((-1.0)*r21*sj0*x3530)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3531.value)))+(x3532.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3533=IKsin(j4);
IkReal x3534=IKcos(j4);
IkReal x3535=(cj1*cj2);
IkReal x3536=(sj1*sj2);
IkReal x3537=((1.0)*x3534);
IkReal x3538=(gconst104*x3534);
IkReal x3539=(gconst104*x3533);
IkReal x3540=((1.0)*gconst103*x3533);
evalcond[0]=((((-1.0)*r21*x3540))+((r20*x3539))+(((-1.0)*r22*x3537)));
evalcond[1]=(sj0+(((-1.0)*r01*x3540))+(((-1.0)*r02*x3537))+((r00*x3539)));
evalcond[2]=((((-1.0)*r12*x3537))+(((-1.0)*r11*x3540))+((r10*x3539))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst103*r21*x3537))+((r22*x3533))+(((-1.0)*cj1*sj2))+((r20*x3538)));
evalcond[4]=(((r02*x3533))+((cj0*x3536))+((cj0*x3535))+((r00*x3538))+(((-1.0)*gconst103*r01*x3537)));
evalcond[5]=(((r12*x3533))+(((-1.0)*gconst103*r11*x3537))+((sj0*x3536))+((sj0*x3535))+((r10*x3538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3541=((-1.0)*r01);
IkReal x3543 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3543)==0){
continue;
}
IkReal x3542=pow(x3543,-0.5);
CheckValue<IkReal> x3544 = IKatan2WithCheck(IkReal(x3541),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3544.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3544.value))));
IkReal gconst106=(x3541*x3542);
IkReal gconst107=((1.0)*r00*x3542);
CheckValue<IkReal> x3545 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3545.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3545.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3546=((-1.0)*r01);
CheckValue<IkReal> x3549 = IKatan2WithCheck(IkReal(x3546),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3549.valid){
continue;
}
IkReal x3547=((1.0)*(x3549.value));
IkReal x3548=x3542;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3547)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3547)));
IkReal gconst106=(x3546*x3548);
IkReal gconst107=((1.0)*r00*x3548);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x3550=((-1.0)*r01);
CheckValue<IkReal> x3553 = IKatan2WithCheck(IkReal(x3550),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3553.valid){
continue;
}
IkReal x3551=((1.0)*(x3553.value));
IkReal x3552=x3542;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3551)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3551)));
IkReal gconst106=(x3550*x3552);
IkReal gconst107=((1.0)*r00*x3552);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3554=((-1.0)*r01);
CheckValue<IkReal> x3557 = IKatan2WithCheck(IkReal(x3554),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3557.valid){
continue;
}
IkReal x3555=((1.0)*(x3557.value));
IkReal x3556=x3542;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3555)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3555)));
IkReal gconst106=(x3554*x3556);
IkReal gconst107=((1.0)*r00*x3556);
IkReal x3558=r02*r02;
IkReal x3559=(r12*sj0);
IkReal x3560=x3542;
IkReal x3561=(cj0*x3560);
j4eval[0]=((IKabs(((((-1.0)*x3561))+((r02*x3559*x3560))+((x3558*x3561)))))+(IKabs((x3559+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3562=((1.0)*gconst106);
CheckValue<IkReal> x3563=IKPowWithIntegerCheck(IKsign((((gconst107*r21))+((gconst106*r20)))),-1);
if(!x3563.valid){
continue;
}
CheckValue<IkReal> x3564 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst107*r10*sj0))+(((-1.0)*cj0*r01*x3562))+(((-1.0)*r11*sj0*x3562))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3564.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3563.value)))+(x3564.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3565=IKsin(j4);
IkReal x3566=IKcos(j4);
IkReal x3567=(gconst106*r01);
IkReal x3568=(cj1*cj2);
IkReal x3569=(sj1*sj2);
IkReal x3570=(gconst106*r21);
IkReal x3571=(gconst106*r11);
IkReal x3572=((1.0)*x3566);
IkReal x3573=((1.0)*x3565);
IkReal x3574=(gconst107*x3565);
IkReal x3575=(gconst107*x3566);
evalcond[0]=(((r20*x3574))+(((-1.0)*r22*x3572))+(((-1.0)*x3570*x3573)));
evalcond[1]=(((r00*x3574))+sj0+(((-1.0)*x3567*x3573))+(((-1.0)*r02*x3572)));
evalcond[2]=(((r10*x3574))+(((-1.0)*x3571*x3573))+(((-1.0)*r12*x3572))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((r20*x3575))+((r22*x3565))+(((-1.0)*x3570*x3572)));
evalcond[4]=(((r00*x3575))+((cj0*x3569))+((cj0*x3568))+(((-1.0)*x3567*x3572))+((r02*x3565)));
evalcond[5]=(((r10*x3575))+((sj0*x3568))+((sj0*x3569))+(((-1.0)*x3571*x3572))+((r12*x3565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3576=((1.0)*gconst106);
CheckValue<IkReal> x3577 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst107*r20))+(((-1.0)*cj0*r21*x3576)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3577.valid){
continue;
}
CheckValue<IkReal> x3578=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r01))+(((-1.0)*r00*x3576)))),-1);
if(!x3578.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3577.value)+(((1.5707963267949)*(x3578.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3579=IKsin(j4);
IkReal x3580=IKcos(j4);
IkReal x3581=(gconst106*r01);
IkReal x3582=(cj1*cj2);
IkReal x3583=(sj1*sj2);
IkReal x3584=(gconst106*r21);
IkReal x3585=(gconst106*r11);
IkReal x3586=((1.0)*x3580);
IkReal x3587=((1.0)*x3579);
IkReal x3588=(gconst107*x3579);
IkReal x3589=(gconst107*x3580);
evalcond[0]=((((-1.0)*r22*x3586))+((r20*x3588))+(((-1.0)*x3584*x3587)));
evalcond[1]=(sj0+(((-1.0)*r02*x3586))+(((-1.0)*x3581*x3587))+((r00*x3588)));
evalcond[2]=(((r10*x3588))+(((-1.0)*x3585*x3587))+(((-1.0)*r12*x3586))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r20*x3589))+(((-1.0)*cj1*sj2))+(((-1.0)*x3584*x3586))+((r22*x3579)));
evalcond[4]=((((-1.0)*x3581*x3586))+((r00*x3589))+((r02*x3579))+((cj0*x3582))+((cj0*x3583)));
evalcond[5]=(((r10*x3589))+((r12*x3579))+(((-1.0)*x3585*x3586))+((sj0*x3583))+((sj0*x3582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3590=((1.0)*gconst106);
CheckValue<IkReal> x3591 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst107*r20*sj0))+(((-1.0)*r21*sj0*x3590)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3591.valid){
continue;
}
CheckValue<IkReal> x3592=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x3590))+(((-1.0)*gconst107*r11)))),-1);
if(!x3592.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3591.value)+(((1.5707963267949)*(x3592.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3593=IKsin(j4);
IkReal x3594=IKcos(j4);
IkReal x3595=(gconst106*r01);
IkReal x3596=(cj1*cj2);
IkReal x3597=(sj1*sj2);
IkReal x3598=(gconst106*r21);
IkReal x3599=(gconst106*r11);
IkReal x3600=((1.0)*x3594);
IkReal x3601=((1.0)*x3593);
IkReal x3602=(gconst107*x3593);
IkReal x3603=(gconst107*x3594);
evalcond[0]=((((-1.0)*x3598*x3601))+(((-1.0)*r22*x3600))+((r20*x3602)));
evalcond[1]=(sj0+(((-1.0)*r02*x3600))+((r00*x3602))+(((-1.0)*x3595*x3601)));
evalcond[2]=((((-1.0)*r12*x3600))+((r10*x3602))+(((-1.0)*x3599*x3601))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x3598*x3600))+(((-1.0)*cj1*sj2))+((r22*x3593))+((r20*x3603)));
evalcond[4]=(((r02*x3593))+((r00*x3603))+(((-1.0)*x3595*x3600))+((cj0*x3596))+((cj0*x3597)));
evalcond[5]=(((sj0*x3596))+((sj0*x3597))+((r12*x3593))+((r10*x3603))+(((-1.0)*x3599*x3600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3604=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3604;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x3604);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3605=((1.0)*sj5);
IkReal x3606=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3605)));
j4eval[0]=x3606;
j4eval[1]=IKsign(x3606);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x3605))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3607=(r01*sj5);
IkReal x3608=(cj5*r00);
IkReal x3609=((1.0)*sj1*sj2);
IkReal x3610=((1.0)*cj1*cj2);
IkReal x3611=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3611;
j4eval[1]=((IKabs(((((-1.0)*r02*x3609))+(((-1.0)*r02*x3610)))))+(IKabs((((sj1*sj2*x3608))+(((-1.0)*x3607*x3609))+(((-1.0)*x3607*x3610))+((cj1*cj2*x3608))))));
j4eval[2]=IKsign(x3611);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3612=(r01*sj5);
IkReal x3613=(cj5*r00);
IkReal x3614=((1.0)*sj1*sj2);
IkReal x3615=((1.0)*cj1*cj2);
CheckValue<IkReal> x3616=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3616.valid){
continue;
}
CheckValue<IkReal> x3617 = IKatan2WithCheck(IkReal((((sj1*sj2*x3613))+(((-1.0)*x3612*x3615))+(((-1.0)*x3612*x3614))+((cj1*cj2*x3613)))),IkReal(((((-1.0)*r02*x3615))+(((-1.0)*r02*x3614)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3617.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3616.value)))+(x3617.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3618=IKcos(j4);
IkReal x3619=IKsin(j4);
IkReal x3620=((1.0)*x3618);
IkReal x3621=(cj5*x3618);
IkReal x3622=(cj5*x3619);
IkReal x3623=((1.0)*sj5*x3619);
evalcond[0]=((((-1.0)*r01*sj5*x3620))+((r02*x3619))+((r00*x3621)));
evalcond[1]=((((-1.0)*r21*x3623))+((r20*x3622))+(((-1.0)*r22*x3620)));
evalcond[2]=(((r10*x3622))+(((-1.0)*r11*x3623))+(((-1.0)*r12*x3620)));
evalcond[3]=((1.0)+((r00*x3622))+(((-1.0)*r01*x3623))+(((-1.0)*r02*x3620)));
evalcond[4]=((((-1.0)*r11*sj5*x3620))+((r10*x3621))+((sj1*sj2))+((cj1*cj2))+((r12*x3619)));
evalcond[5]=(((cj2*sj1))+((r20*x3621))+((r22*x3619))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x3620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3624=((1.0)*sj5);
CheckValue<IkReal> x3625 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x3624)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3625.valid){
continue;
}
CheckValue<IkReal> x3626=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3624)))),-1);
if(!x3626.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3625.value)+(((1.5707963267949)*(x3626.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3627=IKcos(j4);
IkReal x3628=IKsin(j4);
IkReal x3629=((1.0)*x3627);
IkReal x3630=(cj5*x3627);
IkReal x3631=(cj5*x3628);
IkReal x3632=((1.0)*sj5*x3628);
evalcond[0]=((((-1.0)*r01*sj5*x3629))+((r02*x3628))+((r00*x3630)));
evalcond[1]=(((r20*x3631))+(((-1.0)*r22*x3629))+(((-1.0)*r21*x3632)));
evalcond[2]=((((-1.0)*r11*x3632))+(((-1.0)*r12*x3629))+((r10*x3631)));
evalcond[3]=((1.0)+(((-1.0)*r01*x3632))+((r00*x3631))+(((-1.0)*r02*x3629)));
evalcond[4]=((((-1.0)*r11*sj5*x3629))+((sj1*sj2))+((r12*x3628))+((r10*x3630))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x3629))+((r22*x3628))+((r20*x3630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3633 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3633.valid){
continue;
}
CheckValue<IkReal> x3634=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3634.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3633.value)+(((1.5707963267949)*(x3634.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3635=IKcos(j4);
IkReal x3636=IKsin(j4);
IkReal x3637=((1.0)*x3635);
IkReal x3638=(cj5*x3635);
IkReal x3639=(cj5*x3636);
IkReal x3640=((1.0)*sj5*x3636);
evalcond[0]=(((r02*x3636))+(((-1.0)*r01*sj5*x3637))+((r00*x3638)));
evalcond[1]=((((-1.0)*r22*x3637))+(((-1.0)*r21*x3640))+((r20*x3639)));
evalcond[2]=((((-1.0)*r12*x3637))+(((-1.0)*r11*x3640))+((r10*x3639)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3637))+((r00*x3639))+(((-1.0)*r01*x3640)));
evalcond[4]=(((r12*x3636))+((sj1*sj2))+(((-1.0)*r11*sj5*x3637))+((r10*x3638))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r21*sj5*x3637))+((r22*x3636))+(((-1.0)*cj1*sj2))+((r20*x3638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3641=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3641;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x3641);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3642=((1.0)*sj5);
IkReal x3643=((((-1.0)*r20*x3642))+(((-1.0)*cj5*r21)));
j4eval[0]=x3643;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x3642))))));
j4eval[2]=IKsign(x3643);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3644=cj5*cj5;
IkReal x3645=r01*r01;
IkReal x3646=(cj5*r00);
IkReal x3647=(r01*sj5);
IkReal x3648=((((-2.0)*x3646*x3647))+x3645+((x3644*(r00*r00)))+(((-1.0)*x3644*x3645))+(r02*r02));
j4eval[0]=x3648;
j4eval[1]=((IKabs(r02))+(IKabs((x3646+(((-1.0)*x3647))))));
j4eval[2]=IKsign(x3648);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3649=cj5*cj5;
IkReal x3650=r01*r01;
IkReal x3651=(r01*sj5);
IkReal x3652=(cj5*r00);
CheckValue<IkReal> x3653=IKPowWithIntegerCheck(IKsign(((((-2.0)*x3651*x3652))+((x3649*(r00*r00)))+x3650+(((-1.0)*x3649*x3650))+(r02*r02))),-1);
if(!x3653.valid){
continue;
}
CheckValue<IkReal> x3654 = IKatan2WithCheck(IkReal((x3652+(((-1.0)*x3651)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3653.value)))+(x3654.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3655=IKcos(j4);
IkReal x3656=IKsin(j4);
IkReal x3657=((1.0)*sj2);
IkReal x3658=((1.0)*x3655);
IkReal x3659=(cj5*x3655);
IkReal x3660=(cj5*x3656);
IkReal x3661=((1.0)*sj5*x3656);
evalcond[0]=(((r00*x3659))+((r02*x3656))+(((-1.0)*r01*sj5*x3658)));
evalcond[1]=(((r20*x3660))+(((-1.0)*r21*x3661))+(((-1.0)*r22*x3658)));
evalcond[2]=(((r10*x3660))+(((-1.0)*r12*x3658))+(((-1.0)*r11*x3661)));
evalcond[3]=((-1.0)+((r00*x3660))+(((-1.0)*r01*x3661))+(((-1.0)*r02*x3658)));
evalcond[4]=(((cj2*sj1))+((r20*x3659))+(((-1.0)*r21*sj5*x3658))+(((-1.0)*cj1*x3657))+((r22*x3656)));
evalcond[5]=(((r12*x3656))+(((-1.0)*cj1*cj2))+((r10*x3659))+(((-1.0)*sj1*x3657))+(((-1.0)*r11*sj5*x3658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3662=((1.0)*sj5);
CheckValue<IkReal> x3663=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3662))+(((-1.0)*cj5*r21)))),-1);
if(!x3663.valid){
continue;
}
CheckValue<IkReal> x3664 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x3662)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3663.value)))+(x3664.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3665=IKcos(j4);
IkReal x3666=IKsin(j4);
IkReal x3667=((1.0)*sj2);
IkReal x3668=((1.0)*x3665);
IkReal x3669=(cj5*x3665);
IkReal x3670=(cj5*x3666);
IkReal x3671=((1.0)*sj5*x3666);
evalcond[0]=(((r00*x3669))+((r02*x3666))+(((-1.0)*r01*sj5*x3668)));
evalcond[1]=(((r20*x3670))+(((-1.0)*r21*x3671))+(((-1.0)*r22*x3668)));
evalcond[2]=((((-1.0)*r11*x3671))+((r10*x3670))+(((-1.0)*r12*x3668)));
evalcond[3]=((-1.0)+((r00*x3670))+(((-1.0)*r02*x3668))+(((-1.0)*r01*x3671)));
evalcond[4]=(((r22*x3666))+((cj2*sj1))+((r20*x3669))+(((-1.0)*cj1*x3667))+(((-1.0)*r21*sj5*x3668)));
evalcond[5]=(((r12*x3666))+(((-1.0)*cj1*cj2))+(((-1.0)*sj1*x3667))+((r10*x3669))+(((-1.0)*r11*sj5*x3668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3672=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3672.valid){
continue;
}
CheckValue<IkReal> x3673 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3673.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3672.value)))+(x3673.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3674=IKcos(j4);
IkReal x3675=IKsin(j4);
IkReal x3676=((1.0)*sj2);
IkReal x3677=((1.0)*x3674);
IkReal x3678=(cj5*x3674);
IkReal x3679=(cj5*x3675);
IkReal x3680=((1.0)*sj5*x3675);
evalcond[0]=(((r00*x3678))+((r02*x3675))+(((-1.0)*r01*sj5*x3677)));
evalcond[1]=((((-1.0)*r21*x3680))+((r20*x3679))+(((-1.0)*r22*x3677)));
evalcond[2]=((((-1.0)*r12*x3677))+((r10*x3679))+(((-1.0)*r11*x3680)));
evalcond[3]=((-1.0)+((r00*x3679))+(((-1.0)*r01*x3680))+(((-1.0)*r02*x3677)));
evalcond[4]=(((cj2*sj1))+((r20*x3678))+(((-1.0)*r21*sj5*x3677))+((r22*x3675))+(((-1.0)*cj1*x3676)));
evalcond[5]=(((r12*x3675))+(((-1.0)*cj1*cj2))+(((-1.0)*sj1*x3676))+((r10*x3678))+(((-1.0)*r11*sj5*x3677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3681=((-1.0)*r10);
IkReal x3683 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3683)==0){
continue;
}
IkReal x3682=pow(x3683,-0.5);
CheckValue<IkReal> x3684 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3681),IKFAST_ATAN2_MAGTHRESH);
if(!x3684.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3684.value));
IkReal gconst109=(r11*x3682);
IkReal gconst110=(x3681*x3682);
CheckValue<IkReal> x3685 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3685.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3685.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3686=((-1.0)*r10);
IkReal x3687=x3682;
CheckValue<IkReal> x3689 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3686),IKFAST_ATAN2_MAGTHRESH);
if(!x3689.valid){
continue;
}
IkReal x3688=((-1.0)*(x3689.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst109;
cj5=gconst110;
j5=x3688;
IkReal gconst108=x3688;
IkReal gconst109=(r11*x3687);
IkReal gconst110=(x3686*x3687);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3690=((1.0)*gconst109);
CheckValue<IkReal> x3691 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3690))+((cj0*gconst110*r00))+(((-1.0)*r11*sj0*x3690))+((gconst110*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3691.valid){
continue;
}
CheckValue<IkReal> x3692=IKPowWithIntegerCheck(IKsign((((gconst109*r20))+((gconst110*r21)))),-1);
if(!x3692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3691.value)+(((1.5707963267949)*(x3692.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3693=IKsin(j4);
IkReal x3694=IKcos(j4);
IkReal x3695=(cj1*cj2);
IkReal x3696=(sj1*sj2);
IkReal x3697=(gconst110*r20);
IkReal x3698=(gconst109*r01);
IkReal x3699=(gconst109*r11);
IkReal x3700=(gconst109*r21);
IkReal x3701=((1.0)*x3694);
IkReal x3702=((1.0)*x3693);
IkReal x3703=(gconst110*x3694);
IkReal x3704=(gconst110*x3693);
evalcond[0]=((((-1.0)*x3700*x3702))+((x3693*x3697))+(((-1.0)*r22*x3701)));
evalcond[1]=((((-1.0)*x3698*x3702))+(((-1.0)*r02*x3701))+sj0+((r00*x3704)));
evalcond[2]=((((-1.0)*x3699*x3702))+((r10*x3704))+(((-1.0)*r12*x3701))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x3700*x3701))+(((-1.0)*cj1*sj2))+((x3694*x3697))+((r22*x3693)));
evalcond[4]=((((-1.0)*x3698*x3701))+((cj0*x3696))+((cj0*x3695))+((r02*x3693))+((r00*x3703)));
evalcond[5]=((((-1.0)*x3699*x3701))+((sj0*x3696))+((sj0*x3695))+((r10*x3703))+((r12*x3693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3705=((1.0)*gconst109);
CheckValue<IkReal> x3706=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3705))+(((-1.0)*gconst110*r01)))),-1);
if(!x3706.valid){
continue;
}
CheckValue<IkReal> x3707 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x3705))+((cj0*gconst110*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3706.value)))+(x3707.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3708=IKsin(j4);
IkReal x3709=IKcos(j4);
IkReal x3710=(cj1*cj2);
IkReal x3711=(sj1*sj2);
IkReal x3712=(gconst110*r20);
IkReal x3713=(gconst109*r01);
IkReal x3714=(gconst109*r11);
IkReal x3715=(gconst109*r21);
IkReal x3716=((1.0)*x3709);
IkReal x3717=((1.0)*x3708);
IkReal x3718=(gconst110*x3709);
IkReal x3719=(gconst110*x3708);
evalcond[0]=((((-1.0)*x3715*x3717))+((x3708*x3712))+(((-1.0)*r22*x3716)));
evalcond[1]=((((-1.0)*x3713*x3717))+sj0+(((-1.0)*r02*x3716))+((r00*x3719)));
evalcond[2]=((((-1.0)*x3714*x3717))+(((-1.0)*r12*x3716))+((r10*x3719))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x3715*x3716))+((x3709*x3712))+(((-1.0)*cj1*sj2))+((r22*x3708)));
evalcond[4]=((((-1.0)*x3713*x3716))+((r00*x3718))+((cj0*x3710))+((cj0*x3711))+((r02*x3708)));
evalcond[5]=(((r12*x3708))+(((-1.0)*x3714*x3716))+((sj0*x3710))+((sj0*x3711))+((r10*x3718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3720=((-1.0)*r11);
IkReal x3722 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3722)==0){
continue;
}
IkReal x3721=pow(x3722,-0.5);
CheckValue<IkReal> x3723 = IKatan2WithCheck(IkReal(x3720),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3723.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3723.value))));
IkReal gconst112=(x3720*x3721);
IkReal gconst113=((1.0)*r10*x3721);
CheckValue<IkReal> x3724 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3724.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3724.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x3725=((-1.0)*r11);
CheckValue<IkReal> x3728 = IKatan2WithCheck(IkReal(x3725),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3728.valid){
continue;
}
IkReal x3726=((1.0)*(x3728.value));
IkReal x3727=x3721;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3726)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3726)));
IkReal gconst112=(x3725*x3727);
IkReal gconst113=((1.0)*r10*x3727);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3729=((-1.0)*r11);
CheckValue<IkReal> x3732 = IKatan2WithCheck(IkReal(x3729),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3732.valid){
continue;
}
IkReal x3730=((1.0)*(x3732.value));
IkReal x3731=x3721;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3730)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3730)));
IkReal gconst112=(x3729*x3731);
IkReal gconst113=((1.0)*r10*x3731);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3733=((-1.0)*r11);
CheckValue<IkReal> x3736 = IKatan2WithCheck(IkReal(x3733),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3736.valid){
continue;
}
IkReal x3734=((1.0)*(x3736.value));
IkReal x3735=x3721;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3734)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3734)));
IkReal gconst112=(x3733*x3735);
IkReal gconst113=((1.0)*r10*x3735);
IkReal x3737=r12*r12;
IkReal x3738=(cj0*r02);
IkReal x3739=x3721;
IkReal x3740=(sj0*x3739);
j4eval[0]=((IKabs((((x3737*x3740))+((r12*x3738*x3739))+(((-1.0)*x3740)))))+(IKabs((x3738+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3741=((1.0)*gconst112);
CheckValue<IkReal> x3742 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x3741))+(((-1.0)*r11*sj0*x3741)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3742.valid){
continue;
}
CheckValue<IkReal> x3743=IKPowWithIntegerCheck(IKsign((((gconst112*r20))+((gconst113*r21)))),-1);
if(!x3743.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3742.value)+(((1.5707963267949)*(x3743.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3744=IKsin(j4);
IkReal x3745=IKcos(j4);
IkReal x3746=(gconst113*r10);
IkReal x3747=(cj1*cj2);
IkReal x3748=(gconst112*r01);
IkReal x3749=(sj1*sj2);
IkReal x3750=(gconst112*r11);
IkReal x3751=(gconst113*r20);
IkReal x3752=(gconst113*r00);
IkReal x3753=(gconst112*r21);
IkReal x3754=((1.0)*x3745);
IkReal x3755=((1.0)*x3744);
evalcond[0]=((((-1.0)*r22*x3754))+((x3744*x3751))+(((-1.0)*x3753*x3755)));
evalcond[1]=((((-1.0)*x3748*x3755))+sj0+((x3744*x3752))+(((-1.0)*r02*x3754)));
evalcond[2]=((((-1.0)*x3750*x3755))+((x3744*x3746))+(((-1.0)*r12*x3754))+(((-1.0)*cj0)));
evalcond[3]=(((x3745*x3751))+((cj2*sj1))+(((-1.0)*x3753*x3754))+(((-1.0)*cj1*sj2))+((r22*x3744)));
evalcond[4]=(((x3745*x3752))+(((-1.0)*x3748*x3754))+((cj0*x3749))+((cj0*x3747))+((r02*x3744)));
evalcond[5]=((((-1.0)*x3750*x3754))+((sj0*x3747))+((sj0*x3749))+((r12*x3744))+((x3745*x3746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3756=((1.0)*gconst112);
CheckValue<IkReal> x3757=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3756))+(((-1.0)*gconst113*r01)))),-1);
if(!x3757.valid){
continue;
}
CheckValue<IkReal> x3758 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst113*r20))+(((-1.0)*cj0*r21*x3756)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3757.value)))+(x3758.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3759=IKsin(j4);
IkReal x3760=IKcos(j4);
IkReal x3761=(gconst113*r10);
IkReal x3762=(cj1*cj2);
IkReal x3763=(gconst112*r01);
IkReal x3764=(sj1*sj2);
IkReal x3765=(gconst112*r11);
IkReal x3766=(gconst113*r20);
IkReal x3767=(gconst113*r00);
IkReal x3768=(gconst112*r21);
IkReal x3769=((1.0)*x3760);
IkReal x3770=((1.0)*x3759);
evalcond[0]=((((-1.0)*r22*x3769))+((x3759*x3766))+(((-1.0)*x3768*x3770)));
evalcond[1]=(sj0+(((-1.0)*x3763*x3770))+((x3759*x3767))+(((-1.0)*r02*x3769)));
evalcond[2]=((((-1.0)*x3765*x3770))+((x3759*x3761))+(((-1.0)*r12*x3769))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((r22*x3759))+((x3760*x3766))+(((-1.0)*x3768*x3769)));
evalcond[4]=(((cj0*x3762))+((cj0*x3764))+(((-1.0)*x3763*x3769))+((r02*x3759))+((x3760*x3767)));
evalcond[5]=(((r12*x3759))+(((-1.0)*x3765*x3769))+((sj0*x3762))+((sj0*x3764))+((x3760*x3761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3771=((1.0)*gconst112);
CheckValue<IkReal> x3772=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r11))+(((-1.0)*r10*x3771)))),-1);
if(!x3772.valid){
continue;
}
CheckValue<IkReal> x3773 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x3771))+((gconst113*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3773.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3772.value)))+(x3773.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3774=IKsin(j4);
IkReal x3775=IKcos(j4);
IkReal x3776=(gconst113*r10);
IkReal x3777=(cj1*cj2);
IkReal x3778=(gconst112*r01);
IkReal x3779=(sj1*sj2);
IkReal x3780=(gconst112*r11);
IkReal x3781=(gconst113*r20);
IkReal x3782=(gconst113*r00);
IkReal x3783=(gconst112*r21);
IkReal x3784=((1.0)*x3775);
IkReal x3785=((1.0)*x3774);
evalcond[0]=(((x3774*x3781))+(((-1.0)*r22*x3784))+(((-1.0)*x3783*x3785)));
evalcond[1]=((((-1.0)*x3778*x3785))+sj0+((x3774*x3782))+(((-1.0)*r02*x3784)));
evalcond[2]=((((-1.0)*x3780*x3785))+(((-1.0)*r12*x3784))+((x3774*x3776))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r22*x3774))+((x3775*x3781))+(((-1.0)*cj1*sj2))+(((-1.0)*x3783*x3784)));
evalcond[4]=(((r02*x3774))+(((-1.0)*x3778*x3784))+((cj0*x3777))+((cj0*x3779))+((x3775*x3782)));
evalcond[5]=(((x3775*x3776))+((sj0*x3777))+((sj0*x3779))+(((-1.0)*x3780*x3784))+((r12*x3774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3786=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3786;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x3786);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3787=((1.0)*sj5);
IkReal x3788=((((-1.0)*r00*x3787))+(((-1.0)*cj5*r01)));
j4eval[0]=x3788;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x3787)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3788);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3789=cj5*cj5;
IkReal x3790=r11*r11;
IkReal x3791=(r11*sj5);
IkReal x3792=(cj5*r10);
IkReal x3793=((r12*r12)+x3790+(((-2.0)*x3791*x3792))+((x3789*(r10*r10)))+(((-1.0)*x3789*x3790)));
j4eval[0]=x3793;
j4eval[1]=IKsign(x3793);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x3791))+x3792))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3794=cj5*cj5;
IkReal x3795=r11*r11;
IkReal x3796=(cj5*r10);
IkReal x3797=(r11*sj5);
CheckValue<IkReal> x3798=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x3794*(r10*r10)))+(((-2.0)*x3796*x3797))+x3795+(((-1.0)*x3794*x3795)))),-1);
if(!x3798.valid){
continue;
}
CheckValue<IkReal> x3799 = IKatan2WithCheck(IkReal(((((-1.0)*x3797))+x3796)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3799.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3798.value)))+(x3799.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3800=IKcos(j4);
IkReal x3801=IKsin(j4);
IkReal x3802=(cj5*r10);
IkReal x3803=((1.0)*x3800);
IkReal x3804=(cj5*x3801);
IkReal x3805=(cj5*x3800);
IkReal x3806=((1.0)*sj5*x3801);
evalcond[0]=((((-1.0)*r11*sj5*x3803))+((r12*x3801))+((x3800*x3802)));
evalcond[1]=(((r20*x3804))+(((-1.0)*r21*x3806))+(((-1.0)*r22*x3803)));
evalcond[2]=(((r00*x3804))+(((-1.0)*r01*x3806))+(((-1.0)*r02*x3803)));
evalcond[3]=((-1.0)+((x3801*x3802))+(((-1.0)*r12*x3803))+(((-1.0)*r11*x3806)));
evalcond[4]=(((r00*x3805))+(((-1.0)*r01*sj5*x3803))+((sj1*sj2))+((r02*x3801))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+((r22*x3801))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x3803))+((r20*x3805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3807=((1.0)*sj5);
CheckValue<IkReal> x3808=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3807))+(((-1.0)*cj5*r01)))),-1);
if(!x3808.valid){
continue;
}
CheckValue<IkReal> x3809 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x3807)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3808.value)))+(x3809.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3810=IKcos(j4);
IkReal x3811=IKsin(j4);
IkReal x3812=(cj5*r10);
IkReal x3813=((1.0)*x3810);
IkReal x3814=(cj5*x3811);
IkReal x3815=(cj5*x3810);
IkReal x3816=((1.0)*sj5*x3811);
evalcond[0]=(((r12*x3811))+((x3810*x3812))+(((-1.0)*r11*sj5*x3813)));
evalcond[1]=((((-1.0)*r22*x3813))+(((-1.0)*r21*x3816))+((r20*x3814)));
evalcond[2]=((((-1.0)*r01*x3816))+(((-1.0)*r02*x3813))+((r00*x3814)));
evalcond[3]=((-1.0)+((x3811*x3812))+(((-1.0)*r12*x3813))+(((-1.0)*r11*x3816)));
evalcond[4]=((((-1.0)*r01*sj5*x3813))+((sj1*sj2))+((r02*x3811))+((cj1*cj2))+((r00*x3815)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((r22*x3811))+(((-1.0)*r21*sj5*x3813))+((r20*x3815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3817=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3817.valid){
continue;
}
CheckValue<IkReal> x3818 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3818.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3817.value)))+(x3818.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3819=IKcos(j4);
IkReal x3820=IKsin(j4);
IkReal x3821=(cj5*r10);
IkReal x3822=((1.0)*x3819);
IkReal x3823=(cj5*x3820);
IkReal x3824=(cj5*x3819);
IkReal x3825=((1.0)*sj5*x3820);
evalcond[0]=(((x3819*x3821))+((r12*x3820))+(((-1.0)*r11*sj5*x3822)));
evalcond[1]=((((-1.0)*r22*x3822))+(((-1.0)*r21*x3825))+((r20*x3823)));
evalcond[2]=((((-1.0)*r01*x3825))+(((-1.0)*r02*x3822))+((r00*x3823)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3822))+((x3820*x3821))+(((-1.0)*r11*x3825)));
evalcond[4]=((((-1.0)*r01*sj5*x3822))+((sj1*sj2))+((r02*x3820))+((cj1*cj2))+((r00*x3824)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((r22*x3820))+(((-1.0)*r21*sj5*x3822))+((r20*x3824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3826=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3826;
j4eval[1]=IKsign(x3826);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3827=((1.0)*sj5);
IkReal x3828=((((-1.0)*r20*x3827))+(((-1.0)*cj5*r21)));
j4eval[0]=x3828;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x3827))+((cj5*r00))))));
j4eval[2]=IKsign(x3828);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3829=(cj2*sj1);
IkReal x3830=(cj5*r10);
IkReal x3831=(r11*sj5);
IkReal x3832=(cj1*sj2);
IkReal x3833=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3833;
j4eval[1]=IKsign(x3833);
j4eval[2]=((IKabs(((((-1.0)*x3830*x3832))+((x3829*x3830))+((x3831*x3832))+(((-1.0)*x3829*x3831)))))+(IKabs((((r12*x3832))+(((-1.0)*r12*x3829))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3834=(cj2*sj1);
IkReal x3835=(cj5*r10);
IkReal x3836=(r11*sj5);
IkReal x3837=(cj1*sj2);
CheckValue<IkReal> x3838=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3838.valid){
continue;
}
CheckValue<IkReal> x3839 = IKatan2WithCheck(IkReal((((x3834*x3835))+(((-1.0)*x3835*x3837))+(((-1.0)*x3834*x3836))+((x3836*x3837)))),IkReal(((((-1.0)*r12*x3834))+((r12*x3837)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3838.value)))+(x3839.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3840=IKcos(j4);
IkReal x3841=IKsin(j4);
IkReal x3842=(cj5*r10);
IkReal x3843=((1.0)*sj2);
IkReal x3844=((1.0)*x3840);
IkReal x3845=(cj5*x3841);
IkReal x3846=(cj5*x3840);
IkReal x3847=((1.0)*sj5*x3841);
evalcond[0]=(((r12*x3841))+(((-1.0)*r11*sj5*x3844))+((x3840*x3842)));
evalcond[1]=((((-1.0)*r21*x3847))+((r20*x3845))+(((-1.0)*r22*x3844)));
evalcond[2]=((((-1.0)*r02*x3844))+((r00*x3845))+(((-1.0)*r01*x3847)));
evalcond[3]=((1.0)+((x3841*x3842))+(((-1.0)*r11*x3847))+(((-1.0)*r12*x3844)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x3844))+((r20*x3846))+(((-1.0)*cj1*x3843))+((r22*x3841)));
evalcond[5]=((((-1.0)*r01*sj5*x3844))+(((-1.0)*sj1*x3843))+(((-1.0)*cj1*cj2))+((r00*x3846))+((r02*x3841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3848=((1.0)*sj5);
CheckValue<IkReal> x3849=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3848))+(((-1.0)*cj5*r21)))),-1);
if(!x3849.valid){
continue;
}
CheckValue<IkReal> x3850 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x3848))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3850.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3849.value)))+(x3850.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3851=IKcos(j4);
IkReal x3852=IKsin(j4);
IkReal x3853=(cj5*r10);
IkReal x3854=((1.0)*sj2);
IkReal x3855=((1.0)*x3851);
IkReal x3856=(cj5*x3852);
IkReal x3857=(cj5*x3851);
IkReal x3858=((1.0)*sj5*x3852);
evalcond[0]=((((-1.0)*r11*sj5*x3855))+((x3851*x3853))+((r12*x3852)));
evalcond[1]=((((-1.0)*r21*x3858))+((r20*x3856))+(((-1.0)*r22*x3855)));
evalcond[2]=((((-1.0)*r01*x3858))+((r00*x3856))+(((-1.0)*r02*x3855)));
evalcond[3]=((1.0)+((x3852*x3853))+(((-1.0)*r11*x3858))+(((-1.0)*r12*x3855)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x3855))+((r20*x3857))+(((-1.0)*cj1*x3854))+((r22*x3852)));
evalcond[5]=(((r02*x3852))+(((-1.0)*cj1*cj2))+(((-1.0)*sj1*x3854))+(((-1.0)*r01*sj5*x3855))+((r00*x3857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3859=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3859.valid){
continue;
}
CheckValue<IkReal> x3860 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3860.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3859.value)))+(x3860.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3861=IKcos(j4);
IkReal x3862=IKsin(j4);
IkReal x3863=(cj5*r10);
IkReal x3864=((1.0)*sj2);
IkReal x3865=((1.0)*x3861);
IkReal x3866=(cj5*x3862);
IkReal x3867=(cj5*x3861);
IkReal x3868=((1.0)*sj5*x3862);
evalcond[0]=((((-1.0)*r11*sj5*x3865))+((x3861*x3863))+((r12*x3862)));
evalcond[1]=((((-1.0)*r21*x3868))+((r20*x3866))+(((-1.0)*r22*x3865)));
evalcond[2]=((((-1.0)*r02*x3865))+((r00*x3866))+(((-1.0)*r01*x3868)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3865))+(((-1.0)*r11*x3868))+((x3862*x3863)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x3865))+((r20*x3867))+(((-1.0)*cj1*x3864))+((r22*x3862)));
evalcond[5]=(((r02*x3862))+(((-1.0)*r01*sj5*x3865))+(((-1.0)*cj1*cj2))+((r00*x3867))+(((-1.0)*sj1*x3864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3869=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3869);
rxp0_2=(py*r00);
rxp1_0=(r21*x3869);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3870=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3870);
rxp0_2=(py*r00);
rxp1_0=(r21*x3870);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3871=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3871);
rxp0_2=(py*r00);
rxp1_0=(r21*x3871);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3874=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x3874.valid){
continue;
}
IkReal x3872=x3874.value;
IkReal x3873=((1.0)*cj0*x3872);
cj4array[0]=((((-1.0)*sj1*sj2*x3873))+(((-1.0)*cj1*cj2*x3873)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3875=IKsin(j4);
IkReal x3876=IKcos(j4);
IkReal x3877=(cj5*r20);
IkReal x3878=((1.0)*sj5);
evalcond[0]=(r12*x3875);
evalcond[1]=((((-1.0)*r12*x3876))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x3875*x3878))+((x3875*x3877)));
evalcond[3]=((((-1.0)*r01*x3875*x3878))+((cj5*r00*x3875)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*x3876*x3878))+(((-1.0)*cj1*sj2))+((x3876*x3877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3880=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x3880.valid){
continue;
}
IkReal x3879=x3880.value;
cj4array[0]=(((cj1*sj2*x3879))+(((-1.0)*cj2*sj1*x3879)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3881=IKsin(j4);
IkReal x3882=IKcos(j4);
IkReal x3883=(cj5*r00);
IkReal x3884=((1.0)*r01*sj5);
evalcond[0]=(r12*x3881);
evalcond[1]=((((-1.0)*r12*x3882))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*sj5*x3881))+((cj5*r20*x3881)));
evalcond[3]=(((x3881*x3883))+(((-1.0)*x3881*x3884)));
evalcond[4]=(((x3882*x3883))+((cj0*cj1*cj2))+((cj0*sj1*sj2))+(((-1.0)*x3882*x3884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3885=IKPowWithIntegerCheck(r12,-1);
if(!x3885.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x3885.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3886=IKsin(j4);
IkReal x3887=IKcos(j4);
IkReal x3888=((1.0)*sj5);
IkReal x3889=(cj5*x3887);
IkReal x3890=(cj5*x3886);
evalcond[0]=(r12*x3886);
evalcond[1]=(((r20*x3890))+(((-1.0)*r21*x3886*x3888)));
evalcond[2]=(((r00*x3890))+(((-1.0)*r01*x3886*x3888)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x3887*x3888))+((r20*x3889)));
evalcond[4]=(((cj0*cj1*cj2))+((r00*x3889))+(((-1.0)*r01*x3887*x3888))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3891=((1.0)*sj5);
CheckValue<IkReal> x3892=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3892.valid){
continue;
}
CheckValue<IkReal> x3893 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj0*x3891))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x3891)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3892.value)))+(x3893.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3894=IKsin(j4);
IkReal x3895=IKcos(j4);
IkReal x3896=(cj1*cj2);
IkReal x3897=(sj1*sj2);
IkReal x3898=(cj5*r10);
IkReal x3899=((1.0)*x3895);
IkReal x3900=(cj5*x3894);
IkReal x3901=(cj5*x3895);
IkReal x3902=((1.0)*sj5*x3894);
evalcond[0]=((((-1.0)*r22*x3899))+((r20*x3900))+(((-1.0)*r21*x3902)));
evalcond[1]=(sj0+((r00*x3900))+(((-1.0)*r01*x3902))+(((-1.0)*r02*x3899)));
evalcond[2]=(((x3894*x3898))+(((-1.0)*r12*x3899))+(((-1.0)*cj0))+(((-1.0)*r11*x3902)));
evalcond[3]=((((-1.0)*r21*sj5*x3899))+((cj2*sj1))+(((-1.0)*cj1*sj2))+((r20*x3901))+((r22*x3894)));
evalcond[4]=(((cj0*x3897))+((cj0*x3896))+((r00*x3901))+(((-1.0)*r01*sj5*x3899))+((r02*x3894)));
evalcond[5]=(((x3895*x3898))+((sj0*x3897))+((sj0*x3896))+((r12*x3894))+(((-1.0)*r11*sj5*x3899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3903=((1.0)*sj5);
CheckValue<IkReal> x3904=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3903))+(((-1.0)*cj5*r01)))),-1);
if(!x3904.valid){
continue;
}
CheckValue<IkReal> x3905 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x3903)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3905.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3904.value)))+(x3905.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3906=IKsin(j4);
IkReal x3907=IKcos(j4);
IkReal x3908=(cj1*cj2);
IkReal x3909=(sj1*sj2);
IkReal x3910=(cj5*r10);
IkReal x3911=((1.0)*x3907);
IkReal x3912=(cj5*x3906);
IkReal x3913=(cj5*x3907);
IkReal x3914=((1.0)*sj5*x3906);
evalcond[0]=((((-1.0)*r21*x3914))+(((-1.0)*r22*x3911))+((r20*x3912)));
evalcond[1]=((((-1.0)*r01*x3914))+(((-1.0)*r02*x3911))+sj0+((r00*x3912)));
evalcond[2]=(((x3906*x3910))+(((-1.0)*r12*x3911))+(((-1.0)*r11*x3914))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r22*x3906))+(((-1.0)*r21*sj5*x3911))+(((-1.0)*cj1*sj2))+((r20*x3913)));
evalcond[4]=(((cj0*x3909))+((cj0*x3908))+((r00*x3913))+(((-1.0)*r01*sj5*x3911))+((r02*x3906)));
evalcond[5]=((((-1.0)*r11*sj5*x3911))+((sj0*x3909))+((sj0*x3908))+((x3907*x3910))+((r12*x3906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3915=((1.0)*sj5);
CheckValue<IkReal> x3916 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3915)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3916.valid){
continue;
}
CheckValue<IkReal> x3917=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3915)))),-1);
if(!x3917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3916.value)+(((1.5707963267949)*(x3917.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3918=IKsin(j4);
IkReal x3919=IKcos(j4);
IkReal x3920=(cj1*cj2);
IkReal x3921=(sj1*sj2);
IkReal x3922=(cj5*r10);
IkReal x3923=((1.0)*x3919);
IkReal x3924=(cj5*x3918);
IkReal x3925=(cj5*x3919);
IkReal x3926=((1.0)*sj5*x3918);
evalcond[0]=((((-1.0)*r21*x3926))+(((-1.0)*r22*x3923))+((r20*x3924)));
evalcond[1]=(sj0+(((-1.0)*r02*x3923))+(((-1.0)*r01*x3926))+((r00*x3924)));
evalcond[2]=(((x3918*x3922))+(((-1.0)*r11*x3926))+(((-1.0)*r12*x3923))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x3923))+((r22*x3918))+((r20*x3925)));
evalcond[4]=(((cj0*x3920))+((cj0*x3921))+(((-1.0)*r01*sj5*x3923))+((r02*x3918))+((r00*x3925)));
evalcond[5]=((((-1.0)*r11*sj5*x3923))+((x3919*x3922))+((r12*x3918))+((sj0*x3920))+((sj0*x3921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3927=r21*r21;
IkReal x3928=cj5*cj5;
IkReal x3929=(cj5*r20);
IkReal x3930=(r21*sj5);
IkReal x3931=(cj2*sj1);
IkReal x3932=((1.0)*cj1*sj2);
CheckValue<IkReal> x3933 = IKatan2WithCheck(IkReal((((r22*x3931))+(((-1.0)*r22*x3932)))),IkReal(((((-1.0)*x3929*x3932))+((x3929*x3931))+(((-1.0)*x3930*x3931))+((cj1*sj2*x3930)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3933.valid){
continue;
}
CheckValue<IkReal> x3934=IKPowWithIntegerCheck(IKsign(((((2.0)*x3929*x3930))+(((-1.0)*x3927))+(((-1.0)*(r22*r22)))+(((-1.0)*x3928*(r20*r20)))+((x3927*x3928)))),-1);
if(!x3934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3933.value)+(((1.5707963267949)*(x3934.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x3935=IKsin(j4);
IkReal x3936=IKcos(j4);
IkReal x3937=(r21*sj5);
IkReal x3938=(cj5*r20);
IkReal x3939=((1.0)*x3936);
evalcond[0]=((((-1.0)*x3935*x3937))+((x3935*x3938))+(((-1.0)*r22*x3939)));
evalcond[1]=(((cj2*sj1))+((r22*x3935))+(((-1.0)*cj1*sj2))+(((-1.0)*x3937*x3939))+((x3936*x3938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3940=(cj5*sj4);
IkReal x3941=(sj4*sj5);
if( IKabs((((r01*x3941))+(((-1.0)*r00*x3940))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x3941))+((r10*x3940))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x3941))+(((-1.0)*r00*x3940))+((cj4*r02))))+IKsqr(((((-1.0)*r11*x3941))+((r10*x3940))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x3941))+(((-1.0)*r00*x3940))+((cj4*r02))), ((((-1.0)*r11*x3941))+((r10*x3940))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x3942=IKcos(j0);
IkReal x3943=IKsin(j0);
IkReal x3944=(cj5*r10);
IkReal x3945=((0.376)*sj1);
IkReal x3946=(cj5*r00);
IkReal x3947=(cj5*r01);
IkReal x3948=((0.376)*sj2);
IkReal x3949=((0.408)*sj1);
IkReal x3950=(r00*sj5);
IkReal x3951=(cj5*r11);
IkReal x3952=((1.0)*cj4);
IkReal x3953=(r10*sj5);
IkReal x3954=(cj2*x3943);
IkReal x3955=(cj1*x3942);
IkReal x3956=((1.0)*sj4*sj5);
IkReal x3957=(cj1*x3943);
IkReal x3958=(sj1*x3942);
evalcond[0]=(((sj4*x3946))+(((-1.0)*r01*x3956))+x3943+(((-1.0)*r02*x3952)));
evalcond[1]=(((sj4*x3944))+(((-1.0)*x3942))+(((-1.0)*r12*x3952))+(((-1.0)*r11*x3956)));
evalcond[2]=(x3947+x3950+((sj2*x3955))+(((-1.0)*cj2*x3958)));
evalcond[3]=(x3953+x3951+((sj2*x3957))+(((-1.0)*sj1*x3954)));
evalcond[4]=(((r02*sj4))+((sj2*x3958))+((cj4*x3946))+(((-1.0)*r01*sj5*x3952))+((cj2*x3955)));
evalcond[5]=(((r12*sj4))+((cj4*x3944))+(((-1.0)*r11*sj5*x3952))+((sj1*sj2*x3943))+((cj1*x3954)));
evalcond[6]=((((0.1215)*x3943))+(((1.97e-6)*x3955))+(((-1.0)*x3942*x3949))+((x3948*x3955))+(((-1.0)*px))+(((-1.0)*cj2*x3942*x3945))+(((8.9e-7)*x3942))+(((0.1025)*x3947))+(((0.1025)*x3950)));
evalcond[7]=((((1.97e-6)*x3957))+(((-0.1215)*x3942))+((x3948*x3957))+(((-1.0)*py))+(((-1.0)*x3945*x3954))+(((8.9e-7)*x3943))+(((-1.0)*x3943*x3949))+(((0.1025)*x3953))+(((0.1025)*x3951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3959=((1.0)*cj5);
IkReal x3960=((1.0)*sj5);
CheckValue<IkReal> x3961=IKPowWithIntegerCheck(IKsign((((cj1*sj2))+(((-1.0)*cj2*sj1)))),-1);
if(!x3961.valid){
continue;
}
CheckValue<IkReal> x3962 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3960))+(((-1.0)*r11*x3959)))),IkReal(((((-1.0)*r01*x3959))+(((-1.0)*r00*x3960)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3962.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3961.value)))+(x3962.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3963=IKcos(j0);
IkReal x3964=IKsin(j0);
IkReal x3965=(cj2*sj1);
IkReal x3966=(cj5*r01);
IkReal x3967=(cj1*sj2);
IkReal x3968=((0.408)*sj1);
IkReal x3969=(r00*sj5);
IkReal x3970=((1.97e-6)*cj1);
IkReal x3971=(cj5*r11);
IkReal x3972=(r10*sj5);
IkReal x3973=((0.376)*x3964);
IkReal x3974=((0.376)*x3963);
evalcond[0]=(x3966+x3969+(((-1.0)*x3963*x3965))+((x3963*x3967)));
evalcond[1]=(x3971+x3972+((x3964*x3967))+(((-1.0)*x3964*x3965)));
evalcond[2]=((((-1.0)*x3963*x3968))+(((8.9e-7)*x3963))+(((0.1215)*x3964))+(((-1.0)*x3965*x3974))+(((-1.0)*px))+(((0.1025)*x3969))+(((0.1025)*x3966))+((x3967*x3974))+((x3963*x3970)));
evalcond[3]=((((8.9e-7)*x3964))+(((-1.0)*x3965*x3973))+(((-1.0)*py))+(((0.1025)*x3971))+(((0.1025)*x3972))+((x3964*x3970))+((x3967*x3973))+(((-0.1215)*x3963))+(((-1.0)*x3964*x3968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3975=((1.0)*sj5);
IkReal x3976=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3975)));
j4eval[0]=x3976;
j4eval[1]=IKsign(x3976);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3975))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3977=((1.0)*sj5);
IkReal x3978=((((-1.0)*cj5*r01))+(((-1.0)*r00*x3977)));
j4eval[0]=x3978;
j4eval[1]=IKsign(x3978);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x3977))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3979=((1.0)*sj5);
IkReal x3980=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3980;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x3979))+(((-1.0)*cj0*r01*x3979)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x3980);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3982 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3982)==0){
continue;
}
IkReal x3981=pow(x3982,-0.5);
CheckValue<IkReal> x3983 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3983.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3983.value));
IkReal gconst97=((-1.0)*r21*x3981);
IkReal gconst98=(r20*x3981);
CheckValue<IkReal> x3984 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3984.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3984.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x3987 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3987.valid){
continue;
}
IkReal x3985=((-1.0)*(x3987.value));
IkReal x3986=x3981;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3985;
IkReal gconst96=x3985;
IkReal gconst97=((-1.0)*r21*x3986);
IkReal gconst98=(r20*x3986);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3990 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3990.valid){
continue;
}
IkReal x3988=((-1.0)*(x3990.value));
IkReal x3989=x3981;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3988;
IkReal gconst96=x3988;
IkReal gconst97=((-1.0)*r21*x3989);
IkReal gconst98=(r20*x3989);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x3993 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3993.valid){
continue;
}
IkReal x3991=((-1.0)*(x3993.value));
IkReal x3992=x3981;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3991;
IkReal gconst96=x3991;
IkReal gconst97=((-1.0)*r21*x3992);
IkReal gconst98=(r20*x3992);
IkReal x3994=((1.0)*(r22*r22));
CheckValue<IkReal> x3998=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3994))),-1);
if(!x3998.valid){
continue;
}
IkReal x3995=x3998.value;
IkReal x3996=((1.0)*x3995);
IkReal x3997=((((-1.0)*x3994))+(((-1.0)*x3996*(r21*r21*r21*r21)))+(((-1.0)*x3996*(r20*r20*r20*r20)))+(((-2.0)*x3995*(r20*r20)*(r21*r21))));
j4eval[0]=x3997;
j4eval[1]=IKsign(x3997);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3999=(cj1*sj2);
IkReal x4000=(cj2*sj1);
IkReal x4001=(gconst98*r20);
IkReal x4002=(gconst97*r21);
CheckValue<IkReal> x4003=IKPowWithIntegerCheck(IKsign(((((2.0)*x4001*x4002))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4001*x4001)))+(((-1.0)*(x4002*x4002))))),-1);
if(!x4003.valid){
continue;
}
CheckValue<IkReal> x4004 = IKatan2WithCheck(IkReal((((r22*x4000))+(((-1.0)*r22*x3999)))),IkReal((((x4000*x4001))+(((-1.0)*x3999*x4001))+(((-1.0)*x4000*x4002))+((x3999*x4002)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4004.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4003.value)))+(x4004.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4005=IKsin(j4);
IkReal x4006=IKcos(j4);
IkReal x4007=(gconst98*r00);
IkReal x4008=(sj1*sj2);
IkReal x4009=(cj1*cj2);
IkReal x4010=((1.0)*x4006);
IkReal x4011=(gconst98*x4005);
IkReal x4012=(gconst98*x4006);
IkReal x4013=((1.0)*gconst97*x4005);
evalcond[0]=((((-1.0)*r22*x4010))+((r20*x4011))+(((-1.0)*r21*x4013)));
evalcond[1]=(sj0+(((-1.0)*r02*x4010))+((x4005*x4007))+(((-1.0)*r01*x4013)));
evalcond[2]=((((-1.0)*r12*x4010))+(((-1.0)*r11*x4013))+((r10*x4011))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r20*x4012))+(((-1.0)*cj1*sj2))+((r22*x4005))+(((-1.0)*gconst97*r21*x4010)));
evalcond[4]=(((cj0*x4009))+((cj0*x4008))+((r02*x4005))+(((-1.0)*gconst97*r01*x4010))+((x4006*x4007)));
evalcond[5]=(((r12*x4005))+((r10*x4012))+((sj0*x4009))+((sj0*x4008))+(((-1.0)*gconst97*r11*x4010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4014=((1.0)*gconst97);
CheckValue<IkReal> x4015=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4014))+(((-1.0)*gconst98*r01)))),-1);
if(!x4015.valid){
continue;
}
CheckValue<IkReal> x4016 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst98*r20))+(((-1.0)*cj0*r21*x4014)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4015.value)))+(x4016.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4017=IKsin(j4);
IkReal x4018=IKcos(j4);
IkReal x4019=(gconst98*r00);
IkReal x4020=(sj1*sj2);
IkReal x4021=(cj1*cj2);
IkReal x4022=((1.0)*x4018);
IkReal x4023=(gconst98*x4017);
IkReal x4024=(gconst98*x4018);
IkReal x4025=((1.0)*gconst97*x4017);
evalcond[0]=((((-1.0)*r22*x4022))+((r20*x4023))+(((-1.0)*r21*x4025)));
evalcond[1]=(sj0+((x4017*x4019))+(((-1.0)*r02*x4022))+(((-1.0)*r01*x4025)));
evalcond[2]=((((-1.0)*r11*x4025))+(((-1.0)*r12*x4022))+((r10*x4023))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r20*x4024))+(((-1.0)*cj1*sj2))+((r22*x4017))+(((-1.0)*gconst97*r21*x4022)));
evalcond[4]=(((r02*x4017))+((cj0*x4021))+((cj0*x4020))+((x4018*x4019))+(((-1.0)*gconst97*r01*x4022)));
evalcond[5]=(((sj0*x4021))+((sj0*x4020))+((r10*x4024))+(((-1.0)*gconst97*r11*x4022))+((r12*x4017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4026=((1.0)*gconst97);
CheckValue<IkReal> x4027 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst98*r20*sj0))+(((-1.0)*r21*sj0*x4026)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4027.valid){
continue;
}
CheckValue<IkReal> x4028=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x4026))+(((-1.0)*gconst98*r11)))),-1);
if(!x4028.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4027.value)+(((1.5707963267949)*(x4028.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4029=IKsin(j4);
IkReal x4030=IKcos(j4);
IkReal x4031=(gconst98*r00);
IkReal x4032=(sj1*sj2);
IkReal x4033=(cj1*cj2);
IkReal x4034=((1.0)*x4030);
IkReal x4035=(gconst98*x4029);
IkReal x4036=(gconst98*x4030);
IkReal x4037=((1.0)*gconst97*x4029);
evalcond[0]=((((-1.0)*r22*x4034))+(((-1.0)*r21*x4037))+((r20*x4035)));
evalcond[1]=((((-1.0)*r01*x4037))+sj0+((x4029*x4031))+(((-1.0)*r02*x4034)));
evalcond[2]=((((-1.0)*r12*x4034))+(((-1.0)*r11*x4037))+((r10*x4035))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst97*r21*x4034))+(((-1.0)*cj1*sj2))+((r20*x4036))+((r22*x4029)));
evalcond[4]=((((-1.0)*gconst97*r01*x4034))+((cj0*x4032))+((cj0*x4033))+((r02*x4029))+((x4030*x4031)));
evalcond[5]=(((r10*x4036))+(((-1.0)*gconst97*r11*x4034))+((r12*x4029))+((sj0*x4032))+((sj0*x4033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4039 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4039)==0){
continue;
}
IkReal x4038=pow(x4039,-0.5);
CheckValue<IkReal> x4040 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4040.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4040.value))));
IkReal gconst100=((1.0)*r21*x4038);
IkReal gconst101=((-1.0)*r20*x4038);
CheckValue<IkReal> x4041 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4041.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4041.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x4044 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4044.valid){
continue;
}
IkReal x4042=((1.0)*(x4044.value));
IkReal x4043=x4038;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4042)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4042)));
IkReal gconst100=((1.0)*r21*x4043);
IkReal gconst101=((-1.0)*r20*x4043);
IkReal x4045=r22*r22;
IkReal x4046=((1.0)*x4045);
CheckValue<IkReal> x4050=IKPowWithIntegerCheck(((-1.0)+x4045),-1);
if(!x4050.valid){
continue;
}
IkReal x4047=x4050.value;
if((((1.0)+(((-1.0)*x4046)))) < -0.00001)
continue;
IkReal x4048=IKsqrt(((1.0)+(((-1.0)*x4046))));
IkReal x4049=(sj0*x4047*x4048);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x4046*x4049))+x4049))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4053 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4053.valid){
continue;
}
IkReal x4051=((1.0)*(x4053.value));
IkReal x4052=x4038;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4051)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4051)));
IkReal gconst100=((1.0)*r21*x4052);
IkReal gconst101=((-1.0)*r20*x4052);
IkReal x4054=r22*r22;
IkReal x4055=((1.0)*x4054);
CheckValue<IkReal> x4059=IKPowWithIntegerCheck(((-1.0)+x4054),-1);
if(!x4059.valid){
continue;
}
IkReal x4056=x4059.value;
if((((1.0)+(((-1.0)*x4055)))) < -0.00001)
continue;
IkReal x4057=IKsqrt(((1.0)+(((-1.0)*x4055))));
IkReal x4058=(cj0*x4056*x4057);
j4eval[0]=((IKabs(((((-1.0)*x4055*x4058))+x4058)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x4062 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4062.valid){
continue;
}
IkReal x4060=((1.0)*(x4062.value));
IkReal x4061=x4038;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4060)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4060)));
IkReal gconst100=((1.0)*r21*x4061);
IkReal gconst101=((-1.0)*r20*x4061);
IkReal x4063=r22*r22;
IkReal x4064=(cj0*r02);
IkReal x4065=(r12*sj0);
CheckValue<IkReal> x4069=IKPowWithIntegerCheck(((-1.0)+x4063),-1);
if(!x4069.valid){
continue;
}
IkReal x4066=x4069.value;
if((((1.0)+(((-1.0)*x4063)))) < -0.00001)
continue;
IkReal x4067=IKsqrt(((1.0)+(((-1.0)*x4063))));
IkReal x4068=((1.0)*r22*x4066*x4067);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((x4064+x4065)))+(IKabs(((((-1.0)*x4065*x4068))+(((-1.0)*x4064*x4068))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4070=((1.0)*gconst100);
CheckValue<IkReal> x4071 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x4070))+(((-1.0)*cj0*r01*x4070))+((gconst101*r10*sj0))+((cj0*gconst101*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4071.valid){
continue;
}
CheckValue<IkReal> x4072=IKPowWithIntegerCheck(IKsign((((gconst100*r20))+((gconst101*r21)))),-1);
if(!x4072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4071.value)+(((1.5707963267949)*(x4072.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4073=IKsin(j4);
IkReal x4074=IKcos(j4);
IkReal x4075=(cj1*cj2);
IkReal x4076=(sj1*sj2);
IkReal x4077=(gconst101*r10);
IkReal x4078=((1.0)*x4074);
IkReal x4079=(gconst101*x4074);
IkReal x4080=(gconst101*x4073);
IkReal x4081=((1.0)*gconst100*x4073);
evalcond[0]=((((-1.0)*r21*x4081))+((r20*x4080))+(((-1.0)*r22*x4078)));
evalcond[1]=(((r00*x4080))+sj0+(((-1.0)*r02*x4078))+(((-1.0)*r01*x4081)));
evalcond[2]=((((-1.0)*r11*x4081))+((x4073*x4077))+(((-1.0)*r12*x4078))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r20*x4079))+((r22*x4073))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst100*r21*x4078)));
evalcond[4]=(((cj0*x4076))+((cj0*x4075))+((r00*x4079))+((r02*x4073))+(((-1.0)*gconst100*r01*x4078)));
evalcond[5]=(((r12*x4073))+((x4074*x4077))+(((-1.0)*gconst100*r11*x4078))+((sj0*x4076))+((sj0*x4075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4082=((1.0)*gconst100);
CheckValue<IkReal> x4083 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst101*r20))+(((-1.0)*cj0*r21*x4082)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4083.valid){
continue;
}
CheckValue<IkReal> x4084=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4082))+(((-1.0)*gconst101*r01)))),-1);
if(!x4084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4083.value)+(((1.5707963267949)*(x4084.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4085=IKsin(j4);
IkReal x4086=IKcos(j4);
IkReal x4087=(cj1*cj2);
IkReal x4088=(sj1*sj2);
IkReal x4089=(gconst101*r10);
IkReal x4090=((1.0)*x4086);
IkReal x4091=(gconst101*x4086);
IkReal x4092=(gconst101*x4085);
IkReal x4093=((1.0)*gconst100*x4085);
evalcond[0]=(((r20*x4092))+(((-1.0)*r21*x4093))+(((-1.0)*r22*x4090)));
evalcond[1]=(sj0+((r00*x4092))+(((-1.0)*r02*x4090))+(((-1.0)*r01*x4093)));
evalcond[2]=((((-1.0)*r12*x4090))+(((-1.0)*r11*x4093))+((x4085*x4089))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x4091))+((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst100*r21*x4090))+((r22*x4085)));
evalcond[4]=(((cj0*x4088))+((cj0*x4087))+((r00*x4091))+((r02*x4085))+(((-1.0)*gconst100*r01*x4090)));
evalcond[5]=(((x4086*x4089))+(((-1.0)*gconst100*r11*x4090))+((r12*x4085))+((sj0*x4088))+((sj0*x4087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4094=((1.0)*gconst100);
CheckValue<IkReal> x4095 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x4094))+((gconst101*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4095.valid){
continue;
}
CheckValue<IkReal> x4096=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x4094))+(((-1.0)*gconst101*r11)))),-1);
if(!x4096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4095.value)+(((1.5707963267949)*(x4096.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4097=IKsin(j4);
IkReal x4098=IKcos(j4);
IkReal x4099=(cj1*cj2);
IkReal x4100=(sj1*sj2);
IkReal x4101=(gconst101*r10);
IkReal x4102=((1.0)*x4098);
IkReal x4103=(gconst101*x4098);
IkReal x4104=(gconst101*x4097);
IkReal x4105=((1.0)*gconst100*x4097);
evalcond[0]=((((-1.0)*r22*x4102))+((r20*x4104))+(((-1.0)*r21*x4105)));
evalcond[1]=(sj0+((r00*x4104))+(((-1.0)*r01*x4105))+(((-1.0)*r02*x4102)));
evalcond[2]=((((-1.0)*r12*x4102))+(((-1.0)*r11*x4105))+((x4097*x4101))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst100*r21*x4102))+(((-1.0)*cj1*sj2))+((r22*x4097))+((r20*x4103)));
evalcond[4]=(((cj0*x4099))+((cj0*x4100))+(((-1.0)*gconst100*r01*x4102))+((r02*x4097))+((r00*x4103)));
evalcond[5]=(((x4098*x4101))+(((-1.0)*gconst100*r11*x4102))+((r12*x4097))+((sj0*x4100))+((sj0*x4099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4106=((-1.0)*r00);
IkReal x4108 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4108)==0){
continue;
}
IkReal x4107=pow(x4108,-0.5);
CheckValue<IkReal> x4109 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4106),IKFAST_ATAN2_MAGTHRESH);
if(!x4109.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4109.value));
IkReal gconst103=(r01*x4107);
IkReal gconst104=(x4106*x4107);
CheckValue<IkReal> x4110 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4110.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4110.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4111=((-1.0)*r00);
IkReal x4112=x4107;
CheckValue<IkReal> x4114 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4111),IKFAST_ATAN2_MAGTHRESH);
if(!x4114.valid){
continue;
}
IkReal x4113=((-1.0)*(x4114.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst103;
cj5=gconst104;
j5=x4113;
IkReal gconst102=x4113;
IkReal gconst103=(r01*x4112);
IkReal gconst104=(x4111*x4112);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4115=((1.0)*gconst103);
CheckValue<IkReal> x4116 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x4115))+(((-1.0)*cj0*r01*x4115))+((gconst104*r10*sj0))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4116.valid){
continue;
}
CheckValue<IkReal> x4117=IKPowWithIntegerCheck(IKsign((((gconst104*r21))+((gconst103*r20)))),-1);
if(!x4117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4116.value)+(((1.5707963267949)*(x4117.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4118=IKsin(j4);
IkReal x4119=IKcos(j4);
IkReal x4120=(cj1*cj2);
IkReal x4121=(sj1*sj2);
IkReal x4122=((1.0)*x4119);
IkReal x4123=(gconst104*x4119);
IkReal x4124=(gconst104*x4118);
IkReal x4125=((1.0)*gconst103*x4118);
evalcond[0]=((((-1.0)*r22*x4122))+((r20*x4124))+(((-1.0)*r21*x4125)));
evalcond[1]=(sj0+(((-1.0)*r01*x4125))+(((-1.0)*r02*x4122))+((r00*x4124)));
evalcond[2]=((((-1.0)*r12*x4122))+(((-1.0)*r11*x4125))+((r10*x4124))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst103*r21*x4122))+((r20*x4123))+(((-1.0)*cj1*sj2))+((r22*x4118)));
evalcond[4]=(((cj0*x4121))+((cj0*x4120))+((r02*x4118))+(((-1.0)*gconst103*r01*x4122))+((r00*x4123)));
evalcond[5]=(((sj0*x4121))+((sj0*x4120))+((r12*x4118))+(((-1.0)*gconst103*r11*x4122))+((r10*x4123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4126=((1.0)*gconst103);
CheckValue<IkReal> x4127=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r11))+(((-1.0)*r10*x4126)))),-1);
if(!x4127.valid){
continue;
}
CheckValue<IkReal> x4128 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst104*r20*sj0))+(((-1.0)*r21*sj0*x4126)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4127.value)))+(x4128.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4129=IKsin(j4);
IkReal x4130=IKcos(j4);
IkReal x4131=(cj1*cj2);
IkReal x4132=(sj1*sj2);
IkReal x4133=((1.0)*x4130);
IkReal x4134=(gconst104*x4130);
IkReal x4135=(gconst104*x4129);
IkReal x4136=((1.0)*gconst103*x4129);
evalcond[0]=((((-1.0)*r21*x4136))+((r20*x4135))+(((-1.0)*r22*x4133)));
evalcond[1]=(sj0+((r00*x4135))+(((-1.0)*r02*x4133))+(((-1.0)*r01*x4136)));
evalcond[2]=(((r10*x4135))+(((-1.0)*r12*x4133))+(((-1.0)*r11*x4136))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((r20*x4134))+((r22*x4129))+(((-1.0)*gconst103*r21*x4133)));
evalcond[4]=(((r00*x4134))+((r02*x4129))+(((-1.0)*gconst103*r01*x4133))+((cj0*x4132))+((cj0*x4131)));
evalcond[5]=(((r12*x4129))+((r10*x4134))+((sj0*x4132))+((sj0*x4131))+(((-1.0)*gconst103*r11*x4133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4137=((-1.0)*r01);
IkReal x4139 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4139)==0){
continue;
}
IkReal x4138=pow(x4139,-0.5);
CheckValue<IkReal> x4140 = IKatan2WithCheck(IkReal(x4137),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4140.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4140.value))));
IkReal gconst106=(x4137*x4138);
IkReal gconst107=((1.0)*r00*x4138);
CheckValue<IkReal> x4141 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4141.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4141.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4142=((-1.0)*r01);
CheckValue<IkReal> x4145 = IKatan2WithCheck(IkReal(x4142),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4145.valid){
continue;
}
IkReal x4143=((1.0)*(x4145.value));
IkReal x4144=x4138;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4143)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4143)));
IkReal gconst106=(x4142*x4144);
IkReal gconst107=((1.0)*r00*x4144);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x4146=((-1.0)*r01);
CheckValue<IkReal> x4149 = IKatan2WithCheck(IkReal(x4146),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4149.valid){
continue;
}
IkReal x4147=((1.0)*(x4149.value));
IkReal x4148=x4138;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4147)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4147)));
IkReal gconst106=(x4146*x4148);
IkReal gconst107=((1.0)*r00*x4148);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4150=((-1.0)*r01);
CheckValue<IkReal> x4153 = IKatan2WithCheck(IkReal(x4150),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4153.valid){
continue;
}
IkReal x4151=((1.0)*(x4153.value));
IkReal x4152=x4138;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4151)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4151)));
IkReal gconst106=(x4150*x4152);
IkReal gconst107=((1.0)*r00*x4152);
IkReal x4154=r02*r02;
IkReal x4155=(r12*sj0);
IkReal x4156=x4138;
IkReal x4157=(cj0*x4156);
j4eval[0]=((IKabs((((r02*x4155*x4156))+(((-1.0)*x4157))+((x4154*x4157)))))+(IKabs((x4155+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4158=((1.0)*gconst106);
CheckValue<IkReal> x4159=IKPowWithIntegerCheck(IKsign((((gconst107*r21))+((gconst106*r20)))),-1);
if(!x4159.valid){
continue;
}
CheckValue<IkReal> x4160 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4158))+((gconst107*r10*sj0))+(((-1.0)*r11*sj0*x4158))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4160.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4159.value)))+(x4160.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4161=IKsin(j4);
IkReal x4162=IKcos(j4);
IkReal x4163=(gconst106*r01);
IkReal x4164=(cj1*cj2);
IkReal x4165=(sj1*sj2);
IkReal x4166=(gconst106*r21);
IkReal x4167=(gconst106*r11);
IkReal x4168=((1.0)*x4162);
IkReal x4169=((1.0)*x4161);
IkReal x4170=(gconst107*x4161);
IkReal x4171=(gconst107*x4162);
evalcond[0]=((((-1.0)*x4166*x4169))+(((-1.0)*r22*x4168))+((r20*x4170)));
evalcond[1]=((((-1.0)*r02*x4168))+sj0+(((-1.0)*x4163*x4169))+((r00*x4170)));
evalcond[2]=((((-1.0)*r12*x4168))+((r10*x4170))+(((-1.0)*x4167*x4169))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x4161))+((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x4166*x4168))+((r20*x4171)));
evalcond[4]=(((cj0*x4164))+((cj0*x4165))+((r02*x4161))+(((-1.0)*x4163*x4168))+((r00*x4171)));
evalcond[5]=(((r12*x4161))+((sj0*x4164))+((sj0*x4165))+((r10*x4171))+(((-1.0)*x4167*x4168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4172=((1.0)*gconst106);
CheckValue<IkReal> x4173 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst107*r20))+(((-1.0)*cj0*r21*x4172)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4173.valid){
continue;
}
CheckValue<IkReal> x4174=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4172))+(((-1.0)*gconst107*r01)))),-1);
if(!x4174.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4173.value)+(((1.5707963267949)*(x4174.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4175=IKsin(j4);
IkReal x4176=IKcos(j4);
IkReal x4177=(gconst106*r01);
IkReal x4178=(cj1*cj2);
IkReal x4179=(sj1*sj2);
IkReal x4180=(gconst106*r21);
IkReal x4181=(gconst106*r11);
IkReal x4182=((1.0)*x4176);
IkReal x4183=((1.0)*x4175);
IkReal x4184=(gconst107*x4175);
IkReal x4185=(gconst107*x4176);
evalcond[0]=(((r20*x4184))+(((-1.0)*x4180*x4183))+(((-1.0)*r22*x4182)));
evalcond[1]=(sj0+(((-1.0)*x4177*x4183))+(((-1.0)*r02*x4182))+((r00*x4184)));
evalcond[2]=((((-1.0)*x4181*x4183))+(((-1.0)*r12*x4182))+((r10*x4184))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r20*x4185))+(((-1.0)*x4180*x4182))+((r22*x4175))+(((-1.0)*cj1*sj2)));
evalcond[4]=(((cj0*x4179))+((cj0*x4178))+(((-1.0)*x4177*x4182))+((r00*x4185))+((r02*x4175)));
evalcond[5]=((((-1.0)*x4181*x4182))+((r12*x4175))+((sj0*x4179))+((sj0*x4178))+((r10*x4185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4186=((1.0)*gconst106);
CheckValue<IkReal> x4187=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r11))+(((-1.0)*r10*x4186)))),-1);
if(!x4187.valid){
continue;
}
CheckValue<IkReal> x4188 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst107*r20*sj0))+(((-1.0)*r21*sj0*x4186)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4187.value)))+(x4188.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4189=IKsin(j4);
IkReal x4190=IKcos(j4);
IkReal x4191=(gconst106*r01);
IkReal x4192=(cj1*cj2);
IkReal x4193=(sj1*sj2);
IkReal x4194=(gconst106*r21);
IkReal x4195=(gconst106*r11);
IkReal x4196=((1.0)*x4190);
IkReal x4197=((1.0)*x4189);
IkReal x4198=(gconst107*x4189);
IkReal x4199=(gconst107*x4190);
evalcond[0]=((((-1.0)*x4194*x4197))+((r20*x4198))+(((-1.0)*r22*x4196)));
evalcond[1]=(sj0+((r00*x4198))+(((-1.0)*r02*x4196))+(((-1.0)*x4191*x4197)));
evalcond[2]=((((-1.0)*r12*x4196))+(((-1.0)*x4195*x4197))+((r10*x4198))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x4194*x4196))+((r20*x4199))+(((-1.0)*cj1*sj2))+((r22*x4189)));
evalcond[4]=(((cj0*x4193))+((cj0*x4192))+((r02*x4189))+((r00*x4199))+(((-1.0)*x4191*x4196)));
evalcond[5]=(((r12*x4189))+(((-1.0)*x4195*x4196))+((sj0*x4193))+((sj0*x4192))+((r10*x4199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4200=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4200;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x4200);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4201=((1.0)*sj5);
IkReal x4202=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4201)));
j4eval[0]=x4202;
j4eval[1]=IKsign(x4202);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x4201))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4203=(r01*sj5);
IkReal x4204=(cj5*r00);
IkReal x4205=((1.0)*sj1*sj2);
IkReal x4206=((1.0)*cj1*cj2);
IkReal x4207=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4207;
j4eval[1]=((IKabs(((((-1.0)*r02*x4205))+(((-1.0)*r02*x4206)))))+(IKabs((((sj1*sj2*x4204))+((cj1*cj2*x4204))+(((-1.0)*x4203*x4206))+(((-1.0)*x4203*x4205))))));
j4eval[2]=IKsign(x4207);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4208=(r01*sj5);
IkReal x4209=(cj5*r00);
IkReal x4210=((1.0)*sj1*sj2);
IkReal x4211=((1.0)*cj1*cj2);
CheckValue<IkReal> x4212=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4212.valid){
continue;
}
CheckValue<IkReal> x4213 = IKatan2WithCheck(IkReal(((((-1.0)*x4208*x4210))+(((-1.0)*x4208*x4211))+((sj1*sj2*x4209))+((cj1*cj2*x4209)))),IkReal(((((-1.0)*r02*x4210))+(((-1.0)*r02*x4211)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4212.value)))+(x4213.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4214=IKcos(j4);
IkReal x4215=IKsin(j4);
IkReal x4216=((1.0)*x4214);
IkReal x4217=(cj5*x4214);
IkReal x4218=(cj5*x4215);
IkReal x4219=((1.0)*sj5*x4215);
evalcond[0]=(((r02*x4215))+(((-1.0)*r01*sj5*x4216))+((r00*x4217)));
evalcond[1]=((((-1.0)*r21*x4219))+(((-1.0)*r22*x4216))+((r20*x4218)));
evalcond[2]=((((-1.0)*r11*x4219))+(((-1.0)*r12*x4216))+((r10*x4218)));
evalcond[3]=((1.0)+(((-1.0)*r01*x4219))+(((-1.0)*r02*x4216))+((r00*x4218)));
evalcond[4]=(((r12*x4215))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*r11*sj5*x4216))+((r10*x4217)));
evalcond[5]=(((cj2*sj1))+((r22*x4215))+(((-1.0)*cj1*sj2))+((r20*x4217))+(((-1.0)*r21*sj5*x4216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4220=((1.0)*sj5);
CheckValue<IkReal> x4221=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4220)))),-1);
if(!x4221.valid){
continue;
}
CheckValue<IkReal> x4222 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x4220)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4222.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4221.value)))+(x4222.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4223=IKcos(j4);
IkReal x4224=IKsin(j4);
IkReal x4225=((1.0)*x4223);
IkReal x4226=(cj5*x4223);
IkReal x4227=(cj5*x4224);
IkReal x4228=((1.0)*sj5*x4224);
evalcond[0]=(((r00*x4226))+((r02*x4224))+(((-1.0)*r01*sj5*x4225)));
evalcond[1]=((((-1.0)*r22*x4225))+((r20*x4227))+(((-1.0)*r21*x4228)));
evalcond[2]=(((r10*x4227))+(((-1.0)*r11*x4228))+(((-1.0)*r12*x4225)));
evalcond[3]=((1.0)+((r00*x4227))+(((-1.0)*r01*x4228))+(((-1.0)*r02*x4225)));
evalcond[4]=(((r10*x4226))+((sj1*sj2))+(((-1.0)*r11*sj5*x4225))+((cj1*cj2))+((r12*x4224)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((r22*x4224))+(((-1.0)*r21*sj5*x4225))+((r20*x4226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4229 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4229.valid){
continue;
}
CheckValue<IkReal> x4230=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4230.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4229.value)+(((1.5707963267949)*(x4230.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4231=IKcos(j4);
IkReal x4232=IKsin(j4);
IkReal x4233=((1.0)*x4231);
IkReal x4234=(cj5*x4231);
IkReal x4235=(cj5*x4232);
IkReal x4236=((1.0)*sj5*x4232);
evalcond[0]=(((r00*x4234))+((r02*x4232))+(((-1.0)*r01*sj5*x4233)));
evalcond[1]=((((-1.0)*r22*x4233))+((r20*x4235))+(((-1.0)*r21*x4236)));
evalcond[2]=(((r10*x4235))+(((-1.0)*r11*x4236))+(((-1.0)*r12*x4233)));
evalcond[3]=((1.0)+((r00*x4235))+(((-1.0)*r01*x4236))+(((-1.0)*r02*x4233)));
evalcond[4]=(((r12*x4232))+((r10*x4234))+((sj1*sj2))+(((-1.0)*r11*sj5*x4233))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((r22*x4232))+(((-1.0)*r21*sj5*x4233))+((r20*x4234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4237=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4237;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x4237);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4238=((1.0)*sj5);
IkReal x4239=((((-1.0)*cj5*r21))+(((-1.0)*r20*x4238)));
j4eval[0]=x4239;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x4238))))));
j4eval[2]=IKsign(x4239);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4240=cj5*cj5;
IkReal x4241=r01*r01;
IkReal x4242=(cj5*r00);
IkReal x4243=(r01*sj5);
IkReal x4244=((((-2.0)*x4242*x4243))+x4241+(r02*r02)+((x4240*(r00*r00)))+(((-1.0)*x4240*x4241)));
j4eval[0]=x4244;
j4eval[1]=((IKabs(r02))+(IKabs((x4242+(((-1.0)*x4243))))));
j4eval[2]=IKsign(x4244);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4245=cj5*cj5;
IkReal x4246=r01*r01;
IkReal x4247=(r01*sj5);
IkReal x4248=(cj5*r00);
CheckValue<IkReal> x4249=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4245*x4246))+(((-2.0)*x4247*x4248))+x4246+((x4245*(r00*r00)))+(r02*r02))),-1);
if(!x4249.valid){
continue;
}
CheckValue<IkReal> x4250 = IKatan2WithCheck(IkReal((x4248+(((-1.0)*x4247)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4250.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4249.value)))+(x4250.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4251=IKcos(j4);
IkReal x4252=IKsin(j4);
IkReal x4253=((1.0)*sj2);
IkReal x4254=((1.0)*x4251);
IkReal x4255=(cj5*x4251);
IkReal x4256=(cj5*x4252);
IkReal x4257=((1.0)*sj5*x4252);
evalcond[0]=(((r02*x4252))+((r00*x4255))+(((-1.0)*r01*sj5*x4254)));
evalcond[1]=(((r20*x4256))+(((-1.0)*r22*x4254))+(((-1.0)*r21*x4257)));
evalcond[2]=(((r10*x4256))+(((-1.0)*r11*x4257))+(((-1.0)*r12*x4254)));
evalcond[3]=((-1.0)+((r00*x4256))+(((-1.0)*r01*x4257))+(((-1.0)*r02*x4254)));
evalcond[4]=(((cj2*sj1))+((r22*x4252))+((r20*x4255))+(((-1.0)*cj1*x4253))+(((-1.0)*r21*sj5*x4254)));
evalcond[5]=((((-1.0)*sj1*x4253))+(((-1.0)*cj1*cj2))+((r10*x4255))+((r12*x4252))+(((-1.0)*r11*sj5*x4254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4258=((1.0)*sj5);
CheckValue<IkReal> x4259=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x4258)))),-1);
if(!x4259.valid){
continue;
}
CheckValue<IkReal> x4260 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x4258)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4260.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4259.value)))+(x4260.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4261=IKcos(j4);
IkReal x4262=IKsin(j4);
IkReal x4263=((1.0)*sj2);
IkReal x4264=((1.0)*x4261);
IkReal x4265=(cj5*x4261);
IkReal x4266=(cj5*x4262);
IkReal x4267=((1.0)*sj5*x4262);
evalcond[0]=(((r02*x4262))+(((-1.0)*r01*sj5*x4264))+((r00*x4265)));
evalcond[1]=((((-1.0)*r21*x4267))+(((-1.0)*r22*x4264))+((r20*x4266)));
evalcond[2]=((((-1.0)*r12*x4264))+(((-1.0)*r11*x4267))+((r10*x4266)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x4267))+(((-1.0)*r02*x4264))+((r00*x4266)));
evalcond[4]=(((cj2*sj1))+((r20*x4265))+(((-1.0)*r21*sj5*x4264))+(((-1.0)*cj1*x4263))+((r22*x4262)));
evalcond[5]=((((-1.0)*sj1*x4263))+((r12*x4262))+(((-1.0)*cj1*cj2))+(((-1.0)*r11*sj5*x4264))+((r10*x4265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4268=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4268.valid){
continue;
}
CheckValue<IkReal> x4269 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4268.value)))+(x4269.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4270=IKcos(j4);
IkReal x4271=IKsin(j4);
IkReal x4272=((1.0)*sj2);
IkReal x4273=((1.0)*x4270);
IkReal x4274=(cj5*x4270);
IkReal x4275=(cj5*x4271);
IkReal x4276=((1.0)*sj5*x4271);
evalcond[0]=(((r00*x4274))+((r02*x4271))+(((-1.0)*r01*sj5*x4273)));
evalcond[1]=((((-1.0)*r21*x4276))+(((-1.0)*r22*x4273))+((r20*x4275)));
evalcond[2]=((((-1.0)*r11*x4276))+(((-1.0)*r12*x4273))+((r10*x4275)));
evalcond[3]=((-1.0)+((r00*x4275))+(((-1.0)*r01*x4276))+(((-1.0)*r02*x4273)));
evalcond[4]=((((-1.0)*cj1*x4272))+((cj2*sj1))+((r20*x4274))+(((-1.0)*r21*sj5*x4273))+((r22*x4271)));
evalcond[5]=(((r12*x4271))+(((-1.0)*cj1*cj2))+(((-1.0)*r11*sj5*x4273))+(((-1.0)*sj1*x4272))+((r10*x4274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4277=((-1.0)*r10);
IkReal x4279 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4279)==0){
continue;
}
IkReal x4278=pow(x4279,-0.5);
CheckValue<IkReal> x4280 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4277),IKFAST_ATAN2_MAGTHRESH);
if(!x4280.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4280.value));
IkReal gconst109=(r11*x4278);
IkReal gconst110=(x4277*x4278);
CheckValue<IkReal> x4281 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4281.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4281.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4282=((-1.0)*r10);
IkReal x4283=x4278;
CheckValue<IkReal> x4285 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4282),IKFAST_ATAN2_MAGTHRESH);
if(!x4285.valid){
continue;
}
IkReal x4284=((-1.0)*(x4285.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst109;
cj5=gconst110;
j5=x4284;
IkReal gconst108=x4284;
IkReal gconst109=(r11*x4283);
IkReal gconst110=(x4282*x4283);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4286=((1.0)*gconst109);
CheckValue<IkReal> x4287=IKPowWithIntegerCheck(IKsign((((gconst109*r20))+((gconst110*r21)))),-1);
if(!x4287.valid){
continue;
}
CheckValue<IkReal> x4288 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*r11*sj0*x4286))+(((-1.0)*cj0*r01*x4286)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4287.value)))+(x4288.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4289=IKsin(j4);
IkReal x4290=IKcos(j4);
IkReal x4291=(cj1*cj2);
IkReal x4292=(sj1*sj2);
IkReal x4293=(gconst110*r20);
IkReal x4294=(gconst109*r01);
IkReal x4295=(gconst109*r11);
IkReal x4296=(gconst109*r21);
IkReal x4297=((1.0)*x4290);
IkReal x4298=((1.0)*x4289);
IkReal x4299=(gconst110*x4290);
IkReal x4300=(gconst110*x4289);
evalcond[0]=((((-1.0)*r22*x4297))+(((-1.0)*x4296*x4298))+((x4289*x4293)));
evalcond[1]=(sj0+(((-1.0)*x4294*x4298))+((r00*x4300))+(((-1.0)*r02*x4297)));
evalcond[2]=((((-1.0)*x4295*x4298))+((r10*x4300))+(((-1.0)*r12*x4297))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r22*x4289))+(((-1.0)*x4296*x4297))+(((-1.0)*cj1*sj2))+((x4290*x4293)));
evalcond[4]=(((r00*x4299))+((r02*x4289))+(((-1.0)*x4294*x4297))+((cj0*x4291))+((cj0*x4292)));
evalcond[5]=(((sj0*x4291))+((sj0*x4292))+((r10*x4299))+((r12*x4289))+(((-1.0)*x4295*x4297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4301=((1.0)*gconst109);
CheckValue<IkReal> x4302=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4301))+(((-1.0)*gconst110*r01)))),-1);
if(!x4302.valid){
continue;
}
CheckValue<IkReal> x4303 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x4301))+((cj0*gconst110*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4302.value)))+(x4303.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4304=IKsin(j4);
IkReal x4305=IKcos(j4);
IkReal x4306=(cj1*cj2);
IkReal x4307=(sj1*sj2);
IkReal x4308=(gconst110*r20);
IkReal x4309=(gconst109*r01);
IkReal x4310=(gconst109*r11);
IkReal x4311=(gconst109*r21);
IkReal x4312=((1.0)*x4305);
IkReal x4313=((1.0)*x4304);
IkReal x4314=(gconst110*x4305);
IkReal x4315=(gconst110*x4304);
evalcond[0]=((((-1.0)*r22*x4312))+(((-1.0)*x4311*x4313))+((x4304*x4308)));
evalcond[1]=(sj0+(((-1.0)*x4309*x4313))+((r00*x4315))+(((-1.0)*r02*x4312)));
evalcond[2]=((((-1.0)*x4310*x4313))+((r10*x4315))+(((-1.0)*r12*x4312))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r22*x4304))+(((-1.0)*x4311*x4312))+(((-1.0)*cj1*sj2))+((x4305*x4308)));
evalcond[4]=(((r02*x4304))+(((-1.0)*x4309*x4312))+((r00*x4314))+((cj0*x4306))+((cj0*x4307)));
evalcond[5]=(((sj0*x4306))+((sj0*x4307))+((r12*x4304))+(((-1.0)*x4310*x4312))+((r10*x4314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4316=((-1.0)*r11);
IkReal x4318 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4318)==0){
continue;
}
IkReal x4317=pow(x4318,-0.5);
CheckValue<IkReal> x4319 = IKatan2WithCheck(IkReal(x4316),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4319.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4319.value))));
IkReal gconst112=(x4316*x4317);
IkReal gconst113=((1.0)*r10*x4317);
CheckValue<IkReal> x4320 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4320.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4320.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x4321=((-1.0)*r11);
CheckValue<IkReal> x4324 = IKatan2WithCheck(IkReal(x4321),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4324.valid){
continue;
}
IkReal x4322=((1.0)*(x4324.value));
IkReal x4323=x4317;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4322)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4322)));
IkReal gconst112=(x4321*x4323);
IkReal gconst113=((1.0)*r10*x4323);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4325=((-1.0)*r11);
CheckValue<IkReal> x4328 = IKatan2WithCheck(IkReal(x4325),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4328.valid){
continue;
}
IkReal x4326=((1.0)*(x4328.value));
IkReal x4327=x4317;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4326)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4326)));
IkReal gconst112=(x4325*x4327);
IkReal gconst113=((1.0)*r10*x4327);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4329=((-1.0)*r11);
CheckValue<IkReal> x4332 = IKatan2WithCheck(IkReal(x4329),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4332.valid){
continue;
}
IkReal x4330=((1.0)*(x4332.value));
IkReal x4331=x4317;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4330)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4330)));
IkReal gconst112=(x4329*x4331);
IkReal gconst113=((1.0)*r10*x4331);
IkReal x4333=r12*r12;
IkReal x4334=(cj0*r02);
IkReal x4335=x4317;
IkReal x4336=(sj0*x4335);
j4eval[0]=((IKabs((((r12*sj0))+x4334)))+(IKabs(((((-1.0)*x4336))+((r12*x4334*x4335))+((x4333*x4336))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4337=((1.0)*gconst112);
CheckValue<IkReal> x4338=IKPowWithIntegerCheck(IKsign((((gconst112*r20))+((gconst113*r21)))),-1);
if(!x4338.valid){
continue;
}
CheckValue<IkReal> x4339 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*r11*sj0*x4337))+(((-1.0)*cj0*r01*x4337)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4338.value)))+(x4339.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4340=IKsin(j4);
IkReal x4341=IKcos(j4);
IkReal x4342=(gconst113*r10);
IkReal x4343=(cj1*cj2);
IkReal x4344=(gconst112*r01);
IkReal x4345=(sj1*sj2);
IkReal x4346=(gconst112*r11);
IkReal x4347=(gconst113*r20);
IkReal x4348=(gconst113*r00);
IkReal x4349=(gconst112*r21);
IkReal x4350=((1.0)*x4341);
IkReal x4351=((1.0)*x4340);
evalcond[0]=((((-1.0)*x4349*x4351))+((x4340*x4347))+(((-1.0)*r22*x4350)));
evalcond[1]=(sj0+(((-1.0)*x4344*x4351))+(((-1.0)*r02*x4350))+((x4340*x4348)));
evalcond[2]=((((-1.0)*r12*x4350))+((x4340*x4342))+(((-1.0)*cj0))+(((-1.0)*x4346*x4351)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x4349*x4350))+(((-1.0)*cj1*sj2))+((r22*x4340))+((x4341*x4347)));
evalcond[4]=((((-1.0)*x4344*x4350))+((r02*x4340))+((x4341*x4348))+((cj0*x4345))+((cj0*x4343)));
evalcond[5]=(((x4341*x4342))+((r12*x4340))+((sj0*x4345))+((sj0*x4343))+(((-1.0)*x4346*x4350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4352=((1.0)*gconst112);
CheckValue<IkReal> x4353=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r01))+(((-1.0)*r00*x4352)))),-1);
if(!x4353.valid){
continue;
}
CheckValue<IkReal> x4354 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst113*r20))+(((-1.0)*cj0*r21*x4352)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4354.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4353.value)))+(x4354.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4355=IKsin(j4);
IkReal x4356=IKcos(j4);
IkReal x4357=(gconst113*r10);
IkReal x4358=(cj1*cj2);
IkReal x4359=(gconst112*r01);
IkReal x4360=(sj1*sj2);
IkReal x4361=(gconst112*r11);
IkReal x4362=(gconst113*r20);
IkReal x4363=(gconst113*r00);
IkReal x4364=(gconst112*r21);
IkReal x4365=((1.0)*x4356);
IkReal x4366=((1.0)*x4355);
evalcond[0]=((((-1.0)*r22*x4365))+((x4355*x4362))+(((-1.0)*x4364*x4366)));
evalcond[1]=(sj0+(((-1.0)*x4359*x4366))+((x4355*x4363))+(((-1.0)*r02*x4365)));
evalcond[2]=((((-1.0)*x4361*x4366))+(((-1.0)*r12*x4365))+((x4355*x4357))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r22*x4355))+(((-1.0)*cj1*sj2))+((x4356*x4362))+(((-1.0)*x4364*x4365)));
evalcond[4]=(((cj0*x4358))+(((-1.0)*x4359*x4365))+((x4356*x4363))+((r02*x4355))+((cj0*x4360)));
evalcond[5]=((((-1.0)*x4361*x4365))+((sj0*x4360))+((r12*x4355))+((sj0*x4358))+((x4356*x4357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4367=((1.0)*gconst112);
CheckValue<IkReal> x4368 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst113*r20*sj0))+(((-1.0)*r21*sj0*x4367)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4368.valid){
continue;
}
CheckValue<IkReal> x4369=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r11))+(((-1.0)*r10*x4367)))),-1);
if(!x4369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4368.value)+(((1.5707963267949)*(x4369.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4370=IKsin(j4);
IkReal x4371=IKcos(j4);
IkReal x4372=(gconst113*r10);
IkReal x4373=(cj1*cj2);
IkReal x4374=(gconst112*r01);
IkReal x4375=(sj1*sj2);
IkReal x4376=(gconst112*r11);
IkReal x4377=(gconst113*r20);
IkReal x4378=(gconst113*r00);
IkReal x4379=(gconst112*r21);
IkReal x4380=((1.0)*x4371);
IkReal x4381=((1.0)*x4370);
evalcond[0]=(((x4370*x4377))+(((-1.0)*x4379*x4381))+(((-1.0)*r22*x4380)));
evalcond[1]=(((x4370*x4378))+(((-1.0)*r02*x4380))+sj0+(((-1.0)*x4374*x4381)));
evalcond[2]=(((x4370*x4372))+(((-1.0)*r12*x4380))+(((-1.0)*x4376*x4381))+(((-1.0)*cj0)));
evalcond[3]=(((x4371*x4377))+((cj2*sj1))+((r22*x4370))+(((-1.0)*x4379*x4380))+(((-1.0)*cj1*sj2)));
evalcond[4]=(((x4371*x4378))+((r02*x4370))+((cj0*x4373))+((cj0*x4375))+(((-1.0)*x4374*x4380)));
evalcond[5]=(((x4371*x4372))+((sj0*x4373))+((sj0*x4375))+((r12*x4370))+(((-1.0)*x4376*x4380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4382=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4382;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x4382);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4383=((1.0)*sj5);
IkReal x4384=((((-1.0)*r00*x4383))+(((-1.0)*cj5*r01)));
j4eval[0]=x4384;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x4383))))));
j4eval[2]=IKsign(x4384);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4385=cj5*cj5;
IkReal x4386=r11*r11;
IkReal x4387=(r11*sj5);
IkReal x4388=(cj5*r10);
IkReal x4389=((r12*r12)+((x4385*(r10*r10)))+(((-2.0)*x4387*x4388))+x4386+(((-1.0)*x4385*x4386)));
j4eval[0]=x4389;
j4eval[1]=IKsign(x4389);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x4387))+x4388))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4390=cj5*cj5;
IkReal x4391=r11*r11;
IkReal x4392=(cj5*r10);
IkReal x4393=(r11*sj5);
CheckValue<IkReal> x4394 = IKatan2WithCheck(IkReal(((((-1.0)*x4393))+x4392)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4394.valid){
continue;
}
CheckValue<IkReal> x4395=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x4390*x4391))+x4391+(((-2.0)*x4392*x4393))+((x4390*(r10*r10))))),-1);
if(!x4395.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4394.value)+(((1.5707963267949)*(x4395.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4396=IKcos(j4);
IkReal x4397=IKsin(j4);
IkReal x4398=(cj5*r10);
IkReal x4399=((1.0)*x4396);
IkReal x4400=(cj5*x4397);
IkReal x4401=(cj5*x4396);
IkReal x4402=((1.0)*sj5*x4397);
evalcond[0]=(((x4396*x4398))+(((-1.0)*r11*sj5*x4399))+((r12*x4397)));
evalcond[1]=((((-1.0)*r22*x4399))+(((-1.0)*r21*x4402))+((r20*x4400)));
evalcond[2]=((((-1.0)*r02*x4399))+((r00*x4400))+(((-1.0)*r01*x4402)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x4399))+(((-1.0)*r11*x4402))+((x4397*x4398)));
evalcond[4]=((((-1.0)*r01*sj5*x4399))+((sj1*sj2))+((r00*x4401))+((r02*x4397))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+((r22*x4397))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x4399))+((r20*x4401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4403=((1.0)*sj5);
CheckValue<IkReal> x4404 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x4403)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4404.valid){
continue;
}
CheckValue<IkReal> x4405=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4403))+(((-1.0)*cj5*r01)))),-1);
if(!x4405.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4404.value)+(((1.5707963267949)*(x4405.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4406=IKcos(j4);
IkReal x4407=IKsin(j4);
IkReal x4408=(cj5*r10);
IkReal x4409=((1.0)*x4406);
IkReal x4410=(cj5*x4407);
IkReal x4411=(cj5*x4406);
IkReal x4412=((1.0)*sj5*x4407);
evalcond[0]=((((-1.0)*r11*sj5*x4409))+((r12*x4407))+((x4406*x4408)));
evalcond[1]=((((-1.0)*r21*x4412))+((r20*x4410))+(((-1.0)*r22*x4409)));
evalcond[2]=((((-1.0)*r01*x4412))+((r00*x4410))+(((-1.0)*r02*x4409)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x4412))+(((-1.0)*r12*x4409))+((x4407*x4408)));
evalcond[4]=((((-1.0)*r01*sj5*x4409))+((sj1*sj2))+((r00*x4411))+((cj1*cj2))+((r02*x4407)));
evalcond[5]=(((r22*x4407))+((cj2*sj1))+(((-1.0)*r21*sj5*x4409))+(((-1.0)*cj1*sj2))+((r20*x4411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4413=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4413.valid){
continue;
}
CheckValue<IkReal> x4414 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4413.value)))+(x4414.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4415=IKcos(j4);
IkReal x4416=IKsin(j4);
IkReal x4417=(cj5*r10);
IkReal x4418=((1.0)*x4415);
IkReal x4419=(cj5*x4416);
IkReal x4420=(cj5*x4415);
IkReal x4421=((1.0)*sj5*x4416);
evalcond[0]=(((r12*x4416))+(((-1.0)*r11*sj5*x4418))+((x4415*x4417)));
evalcond[1]=(((r20*x4419))+(((-1.0)*r22*x4418))+(((-1.0)*r21*x4421)));
evalcond[2]=((((-1.0)*r01*x4421))+(((-1.0)*r02*x4418))+((r00*x4419)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x4418))+((x4416*x4417))+(((-1.0)*r11*x4421)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r01*sj5*x4418))+((r00*x4420))+((r02*x4416))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+((r20*x4420))+((r22*x4416))+(((-1.0)*r21*sj5*x4418))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4422=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4422;
j4eval[1]=IKsign(x4422);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4423=((1.0)*sj5);
IkReal x4424=((((-1.0)*r20*x4423))+(((-1.0)*cj5*r21)));
j4eval[0]=x4424;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x4423))+((cj5*r00))))));
j4eval[2]=IKsign(x4424);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4425=(cj2*sj1);
IkReal x4426=(cj5*r10);
IkReal x4427=(r11*sj5);
IkReal x4428=(cj1*sj2);
IkReal x4429=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4429;
j4eval[1]=IKsign(x4429);
j4eval[2]=((IKabs((((x4425*x4426))+(((-1.0)*x4426*x4428))+((x4427*x4428))+(((-1.0)*x4425*x4427)))))+(IKabs(((((-1.0)*r12*x4425))+((r12*x4428))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4430=(cj2*sj1);
IkReal x4431=(cj5*r10);
IkReal x4432=(r11*sj5);
IkReal x4433=(cj1*sj2);
CheckValue<IkReal> x4434 = IKatan2WithCheck(IkReal((((x4432*x4433))+(((-1.0)*x4431*x4433))+((x4430*x4431))+(((-1.0)*x4430*x4432)))),IkReal(((((-1.0)*r12*x4430))+((r12*x4433)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4434.valid){
continue;
}
CheckValue<IkReal> x4435=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4435.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4434.value)+(((1.5707963267949)*(x4435.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4436=IKcos(j4);
IkReal x4437=IKsin(j4);
IkReal x4438=(cj5*r10);
IkReal x4439=((1.0)*sj2);
IkReal x4440=((1.0)*x4436);
IkReal x4441=(cj5*x4437);
IkReal x4442=(cj5*x4436);
IkReal x4443=((1.0)*sj5*x4437);
evalcond[0]=(((x4436*x4438))+(((-1.0)*r11*sj5*x4440))+((r12*x4437)));
evalcond[1]=(((r20*x4441))+(((-1.0)*r22*x4440))+(((-1.0)*r21*x4443)));
evalcond[2]=(((r00*x4441))+(((-1.0)*r02*x4440))+(((-1.0)*r01*x4443)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4440))+(((-1.0)*r11*x4443))+((x4437*x4438)));
evalcond[4]=(((cj2*sj1))+((r22*x4437))+((r20*x4442))+(((-1.0)*cj1*x4439))+(((-1.0)*r21*sj5*x4440)));
evalcond[5]=(((r00*x4442))+(((-1.0)*cj1*cj2))+(((-1.0)*sj1*x4439))+((r02*x4437))+(((-1.0)*r01*sj5*x4440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4444=((1.0)*sj5);
CheckValue<IkReal> x4445=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x4444)))),-1);
if(!x4445.valid){
continue;
}
CheckValue<IkReal> x4446 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x4444))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4445.value)))+(x4446.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4447=IKcos(j4);
IkReal x4448=IKsin(j4);
IkReal x4449=(cj5*r10);
IkReal x4450=((1.0)*sj2);
IkReal x4451=((1.0)*x4447);
IkReal x4452=(cj5*x4448);
IkReal x4453=(cj5*x4447);
IkReal x4454=((1.0)*sj5*x4448);
evalcond[0]=((((-1.0)*r11*sj5*x4451))+((r12*x4448))+((x4447*x4449)));
evalcond[1]=(((r20*x4452))+(((-1.0)*r22*x4451))+(((-1.0)*r21*x4454)));
evalcond[2]=(((r00*x4452))+(((-1.0)*r02*x4451))+(((-1.0)*r01*x4454)));
evalcond[3]=((1.0)+(((-1.0)*r11*x4454))+(((-1.0)*r12*x4451))+((x4448*x4449)));
evalcond[4]=(((cj2*sj1))+((r20*x4453))+(((-1.0)*r21*sj5*x4451))+(((-1.0)*cj1*x4450))+((r22*x4448)));
evalcond[5]=((((-1.0)*r01*sj5*x4451))+((r00*x4453))+(((-1.0)*sj1*x4450))+(((-1.0)*cj1*cj2))+((r02*x4448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4455=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4455.valid){
continue;
}
CheckValue<IkReal> x4456 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4455.value)))+(x4456.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4457=IKcos(j4);
IkReal x4458=IKsin(j4);
IkReal x4459=(cj5*r10);
IkReal x4460=((1.0)*sj2);
IkReal x4461=((1.0)*x4457);
IkReal x4462=(cj5*x4458);
IkReal x4463=(cj5*x4457);
IkReal x4464=((1.0)*sj5*x4458);
evalcond[0]=(((x4457*x4459))+((r12*x4458))+(((-1.0)*r11*sj5*x4461)));
evalcond[1]=((((-1.0)*r21*x4464))+(((-1.0)*r22*x4461))+((r20*x4462)));
evalcond[2]=((((-1.0)*r01*x4464))+((r00*x4462))+(((-1.0)*r02*x4461)));
evalcond[3]=((1.0)+((x4458*x4459))+(((-1.0)*r12*x4461))+(((-1.0)*r11*x4464)));
evalcond[4]=(((cj2*sj1))+((r20*x4463))+(((-1.0)*cj1*x4460))+((r22*x4458))+(((-1.0)*r21*sj5*x4461)));
evalcond[5]=((((-1.0)*r01*sj5*x4461))+(((-1.0)*cj1*cj2))+((r00*x4463))+((r02*x4458))+(((-1.0)*sj1*x4460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4465=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4465);
rxp0_2=(py*r00);
rxp1_0=(r21*x4465);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4466=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4466);
rxp0_2=(py*r00);
rxp1_0=(r21*x4466);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4467=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4467);
rxp0_2=(py*r00);
rxp1_0=(r21*x4467);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4470=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x4470.valid){
continue;
}
IkReal x4468=x4470.value;
IkReal x4469=((1.0)*cj0*x4468);
cj4array[0]=((((-1.0)*cj1*cj2*x4469))+(((-1.0)*sj1*sj2*x4469)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4471=IKsin(j4);
IkReal x4472=IKcos(j4);
IkReal x4473=(cj5*r20);
IkReal x4474=((1.0)*sj5);
evalcond[0]=(r12*x4471);
evalcond[1]=((((-1.0)*r12*x4472))+(((-1.0)*cj0)));
evalcond[2]=(((x4471*x4473))+(((-1.0)*r21*x4471*x4474)));
evalcond[3]=(((cj5*r00*x4471))+(((-1.0)*r01*x4471*x4474)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x4472*x4474))+((x4472*x4473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4476=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x4476.valid){
continue;
}
IkReal x4475=x4476.value;
cj4array[0]=((((-1.0)*cj2*sj1*x4475))+((cj1*sj2*x4475)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4477=IKsin(j4);
IkReal x4478=IKcos(j4);
IkReal x4479=(cj5*r00);
IkReal x4480=((1.0)*r01*sj5);
evalcond[0]=(r12*x4477);
evalcond[1]=((((-1.0)*r12*x4478))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*sj5*x4477))+((cj5*r20*x4477)));
evalcond[3]=(((x4477*x4479))+(((-1.0)*x4477*x4480)));
evalcond[4]=(((x4478*x4479))+(((-1.0)*x4478*x4480))+((cj0*cj1*cj2))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4481=IKPowWithIntegerCheck(r12,-1);
if(!x4481.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x4481.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4482=IKsin(j4);
IkReal x4483=IKcos(j4);
IkReal x4484=((1.0)*sj5);
IkReal x4485=(cj5*x4483);
IkReal x4486=(cj5*x4482);
evalcond[0]=(r12*x4482);
evalcond[1]=(((r20*x4486))+(((-1.0)*r21*x4482*x4484)));
evalcond[2]=((((-1.0)*r01*x4482*x4484))+((r00*x4486)));
evalcond[3]=(((cj2*sj1))+((r20*x4485))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x4483*x4484)));
evalcond[4]=(((cj0*cj1*cj2))+((r00*x4485))+(((-1.0)*r01*x4483*x4484))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4487=((1.0)*sj5);
CheckValue<IkReal> x4488=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4488.valid){
continue;
}
CheckValue<IkReal> x4489 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x4487))+(((-1.0)*cj0*r01*x4487)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4489.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4488.value)))+(x4489.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4490=IKsin(j4);
IkReal x4491=IKcos(j4);
IkReal x4492=(cj1*cj2);
IkReal x4493=(sj1*sj2);
IkReal x4494=(cj5*r10);
IkReal x4495=((1.0)*x4491);
IkReal x4496=(cj5*x4490);
IkReal x4497=(cj5*x4491);
IkReal x4498=((1.0)*sj5*x4490);
evalcond[0]=((((-1.0)*r21*x4498))+(((-1.0)*r22*x4495))+((r20*x4496)));
evalcond[1]=((((-1.0)*r02*x4495))+sj0+((r00*x4496))+(((-1.0)*r01*x4498)));
evalcond[2]=((((-1.0)*r11*x4498))+((x4490*x4494))+(((-1.0)*cj0))+(((-1.0)*r12*x4495)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*sj5*x4495))+(((-1.0)*cj1*sj2))+((r22*x4490))+((r20*x4497)));
evalcond[4]=(((cj0*x4492))+((cj0*x4493))+(((-1.0)*r01*sj5*x4495))+((r02*x4490))+((r00*x4497)));
evalcond[5]=(((r12*x4490))+((sj0*x4492))+((sj0*x4493))+((x4491*x4494))+(((-1.0)*r11*sj5*x4495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4499=((1.0)*sj5);
CheckValue<IkReal> x4500=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4499))+(((-1.0)*cj5*r01)))),-1);
if(!x4500.valid){
continue;
}
CheckValue<IkReal> x4501 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x4499))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4500.value)))+(x4501.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4502=IKsin(j4);
IkReal x4503=IKcos(j4);
IkReal x4504=(cj1*cj2);
IkReal x4505=(sj1*sj2);
IkReal x4506=(cj5*r10);
IkReal x4507=((1.0)*x4503);
IkReal x4508=(cj5*x4502);
IkReal x4509=(cj5*x4503);
IkReal x4510=((1.0)*sj5*x4502);
evalcond[0]=((((-1.0)*r21*x4510))+(((-1.0)*r22*x4507))+((r20*x4508)));
evalcond[1]=(sj0+(((-1.0)*r02*x4507))+(((-1.0)*r01*x4510))+((r00*x4508)));
evalcond[2]=((((-1.0)*r11*x4510))+((x4502*x4506))+(((-1.0)*r12*x4507))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r22*x4502))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x4507))+((r20*x4509)));
evalcond[4]=(((cj0*x4504))+((cj0*x4505))+((r02*x4502))+((r00*x4509))+(((-1.0)*r01*sj5*x4507)));
evalcond[5]=(((r12*x4502))+((sj0*x4504))+((sj0*x4505))+(((-1.0)*r11*sj5*x4507))+((x4503*x4506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4511=((1.0)*sj5);
CheckValue<IkReal> x4512=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4511)))),-1);
if(!x4512.valid){
continue;
}
CheckValue<IkReal> x4513 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4511)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4512.value)))+(x4513.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4514=IKsin(j4);
IkReal x4515=IKcos(j4);
IkReal x4516=(cj1*cj2);
IkReal x4517=(sj1*sj2);
IkReal x4518=(cj5*r10);
IkReal x4519=((1.0)*x4515);
IkReal x4520=(cj5*x4514);
IkReal x4521=(cj5*x4515);
IkReal x4522=((1.0)*sj5*x4514);
evalcond[0]=((((-1.0)*r21*x4522))+((r20*x4520))+(((-1.0)*r22*x4519)));
evalcond[1]=(((r00*x4520))+sj0+(((-1.0)*r01*x4522))+(((-1.0)*r02*x4519)));
evalcond[2]=((((-1.0)*r12*x4519))+(((-1.0)*cj0))+(((-1.0)*r11*x4522))+((x4514*x4518)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*sj5*x4519))+(((-1.0)*cj1*sj2))+((r20*x4521))+((r22*x4514)));
evalcond[4]=(((r02*x4514))+((r00*x4521))+((cj0*x4517))+((cj0*x4516))+(((-1.0)*r01*sj5*x4519)));
evalcond[5]=(((sj0*x4517))+((sj0*x4516))+(((-1.0)*r11*sj5*x4519))+((r12*x4514))+((x4515*x4518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4523=((1.0)*cj5);
IkReal x4524=((1.0)*sj5);
IkReal x4525=(((sj1*sj2))+((cj1*cj2)));
j0eval[0]=x4525;
j0eval[1]=((IKabs(((((-1.0)*r01*x4523))+(((-1.0)*r00*x4524)))))+(IKabs(((((-1.0)*r10*x4524))+(((-1.0)*r11*x4523))))));
j0eval[2]=IKsign(x4525);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4526=cj5*cj5;
IkReal x4527=r21*r21;
IkReal x4528=(sj1*sj2);
IkReal x4529=(cj1*cj2);
IkReal x4530=(cj5*r20);
IkReal x4531=((1.0)*r21*sj5);
IkReal x4532=((((-2.0)*r21*sj5*x4530))+(r22*r22)+x4527+(((-1.0)*x4526*x4527))+((x4526*(r20*r20))));
j4eval[0]=x4532;
j4eval[1]=IKsign(x4532);
j4eval[2]=((IKabs((((r22*x4529))+((r22*x4528)))))+(IKabs((((x4528*x4530))+((x4529*x4530))+(((-1.0)*x4528*x4531))+(((-1.0)*x4529*x4531))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=(((sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.40810743565705)*py))+(((0.778145818976832)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.778145818976832)*py))+(((2.40810743565705)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.40810743565705)*py))+(((0.778145818976832)*px))))+IKsqr(((((-0.778145818976832)*py))+(((2.40810743565705)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.40810743565705)*py))+(((0.778145818976832)*px))), ((((-0.778145818976832)*py))+(((2.40810743565705)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4533=IKsin(j0);
IkReal x4534=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.1215)*x4533))+(((0.37600286)*x4534)));
evalcond[1]=((((-0.1215)*x4534))+(((-1.0)*py))+(((0.37600286)*x4533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4535=((1.0)*sj5);
IkReal x4536=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4535)));
j4eval[0]=x4536;
j4eval[1]=IKsign(x4536);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4535))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4537=cj5*cj5;
IkReal x4538=((1.0)*r21);
IkReal x4539=(cj5*sj5);
IkReal x4540=((((-1.0)*r01*r20*x4539))+((r00*r20*x4537))+((r01*r21))+(((-1.0)*r01*x4537*x4538))+((r02*r22))+(((-1.0)*r00*x4538*x4539)));
j4eval[0]=x4540;
j4eval[1]=IKsign(x4540);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x4538))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4541=cj5*cj5;
IkReal x4542=(cj5*r20);
IkReal x4543=((1.0)*sj5);
IkReal x4544=(r11*r21);
IkReal x4545=((((-1.0)*cj5*r10*r21*x4543))+(((-1.0)*x4541*x4544))+x4544+((r12*r22))+((r10*r20*x4541))+(((-1.0)*r11*x4542*x4543)));
j4eval[0]=x4545;
j4eval[1]=IKsign(x4545);
j4eval[2]=((IKabs((((sj0*x4542))+(((-1.0)*r21*sj0*x4543)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4546=cj5*cj5;
IkReal x4547=(cj5*r20);
IkReal x4548=((1.0)*sj5);
IkReal x4549=(r11*r21);
CheckValue<IkReal> x4550 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x4547))+(((-1.0)*r21*sj0*x4548)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4550.valid){
continue;
}
CheckValue<IkReal> x4551=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x4548))+x4549+((r12*r22))+((r10*r20*x4546))+(((-1.0)*x4546*x4549))+(((-1.0)*r11*x4547*x4548)))),-1);
if(!x4551.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4550.value)+(((1.5707963267949)*(x4551.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4552=IKsin(j4);
IkReal x4553=IKcos(j4);
IkReal x4554=(cj5*r00);
IkReal x4555=(r11*sj5);
IkReal x4556=(r01*sj5);
IkReal x4557=(cj5*r20);
IkReal x4558=(r21*sj5);
IkReal x4559=(cj5*r10);
IkReal x4560=((1.0)*x4553);
IkReal x4561=((1.0)*x4552);
evalcond[0]=(((x4552*x4557))+(((-1.0)*r22*x4560))+(((-1.0)*x4558*x4561)));
evalcond[1]=(((x4553*x4558))+(((-1.0)*r22*x4561))+(((-1.0)*x4557*x4560)));
evalcond[2]=(sj0+(((-1.0)*x4556*x4561))+((x4552*x4554))+(((-1.0)*r02*x4560)));
evalcond[3]=(cj0+((x4553*x4556))+(((-1.0)*r02*x4561))+(((-1.0)*x4554*x4560)));
evalcond[4]=(sj0+((x4553*x4555))+(((-1.0)*x4559*x4560))+(((-1.0)*r12*x4561)));
evalcond[5]=(((x4552*x4559))+(((-1.0)*x4555*x4561))+(((-1.0)*r12*x4560))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4562=cj5*cj5;
IkReal x4563=((1.0)*r21);
IkReal x4564=(cj5*sj5);
CheckValue<IkReal> x4565 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x4563))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4565.valid){
continue;
}
CheckValue<IkReal> x4566=IKPowWithIntegerCheck(IKsign((((r00*r20*x4562))+((r01*r21))+(((-1.0)*r00*x4563*x4564))+((r02*r22))+(((-1.0)*r01*r20*x4564))+(((-1.0)*r01*x4562*x4563)))),-1);
if(!x4566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4565.value)+(((1.5707963267949)*(x4566.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4567=IKsin(j4);
IkReal x4568=IKcos(j4);
IkReal x4569=(cj5*r00);
IkReal x4570=(r11*sj5);
IkReal x4571=(r01*sj5);
IkReal x4572=(cj5*r20);
IkReal x4573=(r21*sj5);
IkReal x4574=(cj5*r10);
IkReal x4575=((1.0)*x4568);
IkReal x4576=((1.0)*x4567);
evalcond[0]=(((x4567*x4572))+(((-1.0)*r22*x4575))+(((-1.0)*x4573*x4576)));
evalcond[1]=(((x4568*x4573))+(((-1.0)*x4572*x4575))+(((-1.0)*r22*x4576)));
evalcond[2]=(sj0+((x4567*x4569))+(((-1.0)*x4571*x4576))+(((-1.0)*r02*x4575)));
evalcond[3]=((((-1.0)*x4569*x4575))+cj0+(((-1.0)*r02*x4576))+((x4568*x4571)));
evalcond[4]=(sj0+((x4568*x4570))+(((-1.0)*x4574*x4575))+(((-1.0)*r12*x4576)));
evalcond[5]=(((x4567*x4574))+(((-1.0)*x4570*x4576))+(((-1.0)*r12*x4575))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4577=((1.0)*sj5);
CheckValue<IkReal> x4578=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4577)))),-1);
if(!x4578.valid){
continue;
}
CheckValue<IkReal> x4579 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4577)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4578.value)))+(x4579.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4580=IKsin(j4);
IkReal x4581=IKcos(j4);
IkReal x4582=(cj5*r00);
IkReal x4583=(r11*sj5);
IkReal x4584=(r01*sj5);
IkReal x4585=(cj5*r20);
IkReal x4586=(r21*sj5);
IkReal x4587=(cj5*r10);
IkReal x4588=((1.0)*x4581);
IkReal x4589=((1.0)*x4580);
evalcond[0]=((((-1.0)*r22*x4588))+(((-1.0)*x4586*x4589))+((x4580*x4585)));
evalcond[1]=((((-1.0)*r22*x4589))+((x4581*x4586))+(((-1.0)*x4585*x4588)));
evalcond[2]=(sj0+(((-1.0)*r02*x4588))+(((-1.0)*x4584*x4589))+((x4580*x4582)));
evalcond[3]=(cj0+((x4581*x4584))+(((-1.0)*r02*x4589))+(((-1.0)*x4582*x4588)));
evalcond[4]=(sj0+((x4581*x4583))+(((-1.0)*x4587*x4588))+(((-1.0)*r12*x4589)));
evalcond[5]=((((-1.0)*x4583*x4589))+(((-1.0)*r12*x4588))+(((-1.0)*cj0))+((x4580*x4587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.40813714262212)*py))+(((0.778167256348246)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.40813714262212)*px))+(((-0.778167256348246)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.40813714262212)*py))+(((0.778167256348246)*px))))+IKsqr(((((-2.40813714262212)*px))+(((-0.778167256348246)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.40813714262212)*py))+(((0.778167256348246)*px))), ((((-2.40813714262212)*px))+(((-0.778167256348246)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4590=IKcos(j0);
IkReal x4591=IKsin(j0);
evalcond[0]=((((-0.37599714)*x4590))+(((-1.0)*px))+(((0.1215)*x4591)));
evalcond[1]=((((-0.37599714)*x4591))+(((-1.0)*py))+(((-0.1215)*x4590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4592=((1.0)*sj5);
IkReal x4593=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4592)));
j4eval[0]=x4593;
j4eval[1]=IKsign(x4593);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x4592))+((cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4594=((1.0)*sj5);
IkReal x4595=((((-1.0)*r00*x4594))+(((-1.0)*cj5*r01)));
j4eval[0]=x4595;
j4eval[1]=IKsign(x4595);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x4594))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4596=cj5*cj5;
IkReal x4597=((1.0)*r21);
IkReal x4598=(cj5*sj5);
IkReal x4599=((1.0)*r20);
IkReal x4600=((((-1.0)*r01*x4598*x4599))+((r00*r20*x4596))+(((-1.0)*r01*x4596*x4597))+(((-1.0)*r00*x4597*x4598))+((r01*r21))+((r02*r22)));
j4eval[0]=x4600;
j4eval[1]=IKsign(x4600);
j4eval[2]=((IKabs(((((-1.0)*cj5*sj0*x4599))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4601=cj5*cj5;
IkReal x4602=((1.0)*r21);
IkReal x4603=(cj5*sj5);
IkReal x4604=((1.0)*r20);
CheckValue<IkReal> x4605 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*sj0*x4604))+((r21*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4605.valid){
continue;
}
CheckValue<IkReal> x4606=IKPowWithIntegerCheck(IKsign((((r01*r21))+((r00*r20*x4601))+(((-1.0)*r01*x4603*x4604))+(((-1.0)*r00*x4602*x4603))+(((-1.0)*r01*x4601*x4602))+((r02*r22)))),-1);
if(!x4606.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4605.value)+(((1.5707963267949)*(x4606.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4607=IKsin(j4);
IkReal x4608=IKcos(j4);
IkReal x4609=((1.0)*cj0);
IkReal x4610=(cj5*r00);
IkReal x4611=(r11*sj5);
IkReal x4612=(r01*sj5);
IkReal x4613=(cj5*r20);
IkReal x4614=(r21*sj5);
IkReal x4615=(cj5*r10);
IkReal x4616=((1.0)*x4608);
IkReal x4617=((1.0)*x4607);
evalcond[0]=((((-1.0)*x4614*x4617))+(((-1.0)*r22*x4616))+((x4607*x4613)));
evalcond[1]=(((x4608*x4614))+(((-1.0)*r22*x4617))+(((-1.0)*x4613*x4616)));
evalcond[2]=((((-1.0)*r02*x4616))+(((-1.0)*x4612*x4617))+sj0+((x4607*x4610)));
evalcond[3]=((((-1.0)*x4609))+(((-1.0)*r12*x4616))+(((-1.0)*x4611*x4617))+((x4607*x4615)));
evalcond[4]=((((-1.0)*r02*x4617))+(((-1.0)*x4609))+((x4608*x4612))+(((-1.0)*x4610*x4616)));
evalcond[5]=((((-1.0)*sj0))+((x4608*x4611))+(((-1.0)*r12*x4617))+(((-1.0)*x4615*x4616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4618=((1.0)*sj5);
CheckValue<IkReal> x4619=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4618))+(((-1.0)*cj5*r01)))),-1);
if(!x4619.valid){
continue;
}
CheckValue<IkReal> x4620 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x4618)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4619.value)))+(x4620.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4621=IKsin(j4);
IkReal x4622=IKcos(j4);
IkReal x4623=((1.0)*cj0);
IkReal x4624=(cj5*r00);
IkReal x4625=(r11*sj5);
IkReal x4626=(r01*sj5);
IkReal x4627=(cj5*r20);
IkReal x4628=(r21*sj5);
IkReal x4629=(cj5*r10);
IkReal x4630=((1.0)*x4622);
IkReal x4631=((1.0)*x4621);
evalcond[0]=(((x4621*x4627))+(((-1.0)*x4628*x4631))+(((-1.0)*r22*x4630)));
evalcond[1]=(((x4622*x4628))+(((-1.0)*x4627*x4630))+(((-1.0)*r22*x4631)));
evalcond[2]=(sj0+(((-1.0)*r02*x4630))+((x4621*x4624))+(((-1.0)*x4626*x4631)));
evalcond[3]=(((x4621*x4629))+(((-1.0)*r12*x4630))+(((-1.0)*x4625*x4631))+(((-1.0)*x4623)));
evalcond[4]=((((-1.0)*r02*x4631))+(((-1.0)*x4624*x4630))+((x4622*x4626))+(((-1.0)*x4623)));
evalcond[5]=((((-1.0)*sj0))+((x4622*x4625))+(((-1.0)*r12*x4631))+(((-1.0)*x4629*x4630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4632=((1.0)*sj5);
CheckValue<IkReal> x4633 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4632)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4633.valid){
continue;
}
CheckValue<IkReal> x4634=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4632)))),-1);
if(!x4634.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4633.value)+(((1.5707963267949)*(x4634.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4635=IKsin(j4);
IkReal x4636=IKcos(j4);
IkReal x4637=((1.0)*cj0);
IkReal x4638=(cj5*r00);
IkReal x4639=(r11*sj5);
IkReal x4640=(r01*sj5);
IkReal x4641=(cj5*r20);
IkReal x4642=(r21*sj5);
IkReal x4643=(cj5*r10);
IkReal x4644=((1.0)*x4636);
IkReal x4645=((1.0)*x4635);
evalcond[0]=(((x4635*x4641))+(((-1.0)*r22*x4644))+(((-1.0)*x4642*x4645)));
evalcond[1]=(((x4636*x4642))+(((-1.0)*r22*x4645))+(((-1.0)*x4641*x4644)));
evalcond[2]=(sj0+(((-1.0)*r02*x4644))+(((-1.0)*x4640*x4645))+((x4635*x4638)));
evalcond[3]=(((x4635*x4643))+(((-1.0)*x4637))+(((-1.0)*r12*x4644))+(((-1.0)*x4639*x4645)));
evalcond[4]=(((x4636*x4640))+(((-1.0)*r02*x4645))+(((-1.0)*x4637))+(((-1.0)*x4638*x4644)));
evalcond[5]=((((-1.0)*sj0))+((x4636*x4639))+(((-1.0)*r12*x4645))+(((-1.0)*x4643*x4644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.193035822182146)*px))+(((-1.24559599003227)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.193035822182146)*py))+(((-1.24559599003227)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.193035822182146)*px))+(((-1.24559599003227)*py))))+IKsqr(((((-0.193035822182146)*py))+(((-1.24559599003227)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.193035822182146)*px))+(((-1.24559599003227)*py))), ((((-0.193035822182146)*py))+(((-1.24559599003227)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4646=IKcos(j0);
IkReal x4647=IKsin(j0);
evalcond[0]=((((-0.78399911)*x4646))+(((0.1215)*x4647))+(((-1.0)*px)));
evalcond[1]=((((-0.78399911)*x4647))+(((-1.0)*py))+(((-0.1215)*x4646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4648=((1.0)*sj5);
IkReal x4649=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4648)));
j4eval[0]=x4649;
j4eval[1]=IKsign(x4649);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4648)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4650=((1.0)*sj5);
IkReal x4651=((((-1.0)*r00*x4650))+(((-1.0)*cj5*r01)));
j4eval[0]=x4651;
j4eval[1]=IKsign(x4651);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x4650))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4652=cj5*cj5;
IkReal x4653=((1.0)*r21);
IkReal x4654=(cj5*sj5);
IkReal x4655=((1.0)*r20);
IkReal x4656=(((r01*r21))+(((-1.0)*r01*x4652*x4653))+(((-1.0)*r00*x4653*x4654))+((r00*r20*x4652))+(((-1.0)*r01*x4654*x4655))+((r02*r22)));
j4eval[0]=x4656;
j4eval[1]=IKsign(x4656);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*cj5*sj0*x4655))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4657=cj5*cj5;
IkReal x4658=((1.0)*r21);
IkReal x4659=(cj5*sj5);
IkReal x4660=((1.0)*r20);
CheckValue<IkReal> x4661 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x4660)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4661.valid){
continue;
}
CheckValue<IkReal> x4662=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r00*x4658*x4659))+((r00*r20*x4657))+(((-1.0)*r01*x4657*x4658))+(((-1.0)*r01*x4659*x4660))+((r02*r22)))),-1);
if(!x4662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4661.value)+(((1.5707963267949)*(x4662.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4663=IKsin(j4);
IkReal x4664=IKcos(j4);
IkReal x4665=((1.0)*cj0);
IkReal x4666=(cj5*r00);
IkReal x4667=(r11*sj5);
IkReal x4668=(r01*sj5);
IkReal x4669=(cj5*r20);
IkReal x4670=(r21*sj5);
IkReal x4671=(cj5*r10);
IkReal x4672=((1.0)*x4664);
IkReal x4673=((1.0)*x4663);
evalcond[0]=(((x4663*x4669))+(((-1.0)*r22*x4672))+(((-1.0)*x4670*x4673)));
evalcond[1]=(((x4664*x4670))+(((-1.0)*r22*x4673))+(((-1.0)*x4669*x4672)));
evalcond[2]=((((-1.0)*r02*x4672))+sj0+((x4663*x4666))+(((-1.0)*x4668*x4673)));
evalcond[3]=((((-1.0)*x4667*x4673))+(((-1.0)*r12*x4672))+((x4663*x4671))+(((-1.0)*x4665)));
evalcond[4]=(((x4664*x4668))+(((-1.0)*r02*x4673))+(((-1.0)*x4665))+(((-1.0)*x4666*x4672)));
evalcond[5]=(((x4664*x4667))+(((-1.0)*sj0))+(((-1.0)*r12*x4673))+(((-1.0)*x4671*x4672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4674=((1.0)*sj5);
CheckValue<IkReal> x4675 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x4674))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4675.valid){
continue;
}
CheckValue<IkReal> x4676=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4674))+(((-1.0)*cj5*r01)))),-1);
if(!x4676.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4675.value)+(((1.5707963267949)*(x4676.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4677=IKsin(j4);
IkReal x4678=IKcos(j4);
IkReal x4679=((1.0)*cj0);
IkReal x4680=(cj5*r00);
IkReal x4681=(r11*sj5);
IkReal x4682=(r01*sj5);
IkReal x4683=(cj5*r20);
IkReal x4684=(r21*sj5);
IkReal x4685=(cj5*r10);
IkReal x4686=((1.0)*x4678);
IkReal x4687=((1.0)*x4677);
evalcond[0]=((((-1.0)*x4684*x4687))+((x4677*x4683))+(((-1.0)*r22*x4686)));
evalcond[1]=(((x4678*x4684))+(((-1.0)*x4683*x4686))+(((-1.0)*r22*x4687)));
evalcond[2]=(sj0+(((-1.0)*x4682*x4687))+((x4677*x4680))+(((-1.0)*r02*x4686)));
evalcond[3]=(((x4677*x4685))+(((-1.0)*x4681*x4687))+(((-1.0)*x4679))+(((-1.0)*r12*x4686)));
evalcond[4]=(((x4678*x4682))+(((-1.0)*x4680*x4686))+(((-1.0)*x4679))+(((-1.0)*r02*x4687)));
evalcond[5]=((((-1.0)*sj0))+((x4678*x4681))+(((-1.0)*x4685*x4686))+(((-1.0)*r12*x4687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4688=((1.0)*sj5);
CheckValue<IkReal> x4689 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4688)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4689.valid){
continue;
}
CheckValue<IkReal> x4690=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4688)))),-1);
if(!x4690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4689.value)+(((1.5707963267949)*(x4690.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4691=IKsin(j4);
IkReal x4692=IKcos(j4);
IkReal x4693=((1.0)*cj0);
IkReal x4694=(cj5*r00);
IkReal x4695=(r11*sj5);
IkReal x4696=(r01*sj5);
IkReal x4697=(cj5*r20);
IkReal x4698=(r21*sj5);
IkReal x4699=(cj5*r10);
IkReal x4700=((1.0)*x4692);
IkReal x4701=((1.0)*x4691);
evalcond[0]=((((-1.0)*r22*x4700))+(((-1.0)*x4698*x4701))+((x4691*x4697)));
evalcond[1]=((((-1.0)*r22*x4701))+(((-1.0)*x4697*x4700))+((x4692*x4698)));
evalcond[2]=(sj0+(((-1.0)*x4696*x4701))+(((-1.0)*r02*x4700))+((x4691*x4694)));
evalcond[3]=((((-1.0)*x4695*x4701))+(((-1.0)*r12*x4700))+((x4691*x4699))+(((-1.0)*x4693)));
evalcond[4]=((((-1.0)*r02*x4701))+(((-1.0)*x4694*x4700))+(((-1.0)*x4693))+((x4692*x4696)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x4701))+(((-1.0)*x4699*x4700))+((x4692*x4695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((7.69659915383269)*px))+(((-2.02703146460411)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-7.69659915383269)*py))+(((-2.02703146460411)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.69659915383269)*px))+(((-2.02703146460411)*py))))+IKsqr(((((-7.69659915383269)*py))+(((-2.02703146460411)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((7.69659915383269)*px))+(((-2.02703146460411)*py))), ((((-7.69659915383269)*py))+(((-2.02703146460411)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4702=IKcos(j0);
IkReal x4703=IKsin(j0);
evalcond[0]=((((-0.03199911)*x4702))+(((-1.0)*px))+(((0.1215)*x4703)));
evalcond[1]=((((-0.03199911)*x4703))+(((-1.0)*py))+(((-0.1215)*x4702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4704=((1.0)*sj5);
IkReal x4705=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4704)));
j4eval[0]=x4705;
j4eval[1]=IKsign(x4705);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4704))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4706=cj5*cj5;
IkReal x4707=((1.0)*r21);
IkReal x4708=(cj5*sj5);
IkReal x4709=((((-1.0)*r00*x4707*x4708))+((r01*r21))+(((-1.0)*r01*r20*x4708))+(((-1.0)*r01*x4706*x4707))+((r00*r20*x4706))+((r02*r22)));
j4eval[0]=x4709;
j4eval[1]=IKsign(x4709);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x4707)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4710=cj5*cj5;
IkReal x4711=(cj5*r20);
IkReal x4712=((1.0)*sj5);
IkReal x4713=(r11*r21);
IkReal x4714=((((-1.0)*x4710*x4713))+((r10*r20*x4710))+((r12*r22))+(((-1.0)*cj5*r10*r21*x4712))+x4713+(((-1.0)*r11*x4711*x4712)));
j4eval[0]=x4714;
j4eval[1]=IKsign(x4714);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((sj0*x4711))+(((-1.0)*r21*sj0*x4712))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4715=cj5*cj5;
IkReal x4716=(cj5*r20);
IkReal x4717=((1.0)*sj5);
IkReal x4718=(r11*r21);
CheckValue<IkReal> x4719=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4716*x4717))+((r10*r20*x4715))+(((-1.0)*x4715*x4718))+((r12*r22))+(((-1.0)*cj5*r10*r21*x4717))+x4718)),-1);
if(!x4719.valid){
continue;
}
CheckValue<IkReal> x4720 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x4716))+(((-1.0)*r21*sj0*x4717)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4720.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4719.value)))+(x4720.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4721=IKsin(j4);
IkReal x4722=IKcos(j4);
IkReal x4723=(cj5*r00);
IkReal x4724=(r11*sj5);
IkReal x4725=(r01*sj5);
IkReal x4726=(cj5*r20);
IkReal x4727=(r21*sj5);
IkReal x4728=(cj5*r10);
IkReal x4729=((1.0)*x4722);
IkReal x4730=((1.0)*x4721);
evalcond[0]=(((x4721*x4726))+(((-1.0)*x4727*x4730))+(((-1.0)*r22*x4729)));
evalcond[1]=(((x4722*x4727))+(((-1.0)*x4726*x4729))+(((-1.0)*r22*x4730)));
evalcond[2]=(((x4721*x4723))+sj0+(((-1.0)*x4725*x4730))+(((-1.0)*r02*x4729)));
evalcond[3]=((((-1.0)*x4723*x4729))+cj0+((x4722*x4725))+(((-1.0)*r02*x4730)));
evalcond[4]=(sj0+(((-1.0)*x4728*x4729))+(((-1.0)*r12*x4730))+((x4722*x4724)));
evalcond[5]=(((x4721*x4728))+(((-1.0)*x4724*x4730))+(((-1.0)*r12*x4729))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4731=cj5*cj5;
IkReal x4732=((1.0)*r21);
IkReal x4733=(cj5*sj5);
CheckValue<IkReal> x4734 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x4732))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4734.valid){
continue;
}
CheckValue<IkReal> x4735=IKPowWithIntegerCheck(IKsign((((r00*r20*x4731))+((r01*r21))+(((-1.0)*r01*r20*x4733))+(((-1.0)*r01*x4731*x4732))+((r02*r22))+(((-1.0)*r00*x4732*x4733)))),-1);
if(!x4735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4734.value)+(((1.5707963267949)*(x4735.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4736=IKsin(j4);
IkReal x4737=IKcos(j4);
IkReal x4738=(cj5*r00);
IkReal x4739=(r11*sj5);
IkReal x4740=(r01*sj5);
IkReal x4741=(cj5*r20);
IkReal x4742=(r21*sj5);
IkReal x4743=(cj5*r10);
IkReal x4744=((1.0)*x4737);
IkReal x4745=((1.0)*x4736);
evalcond[0]=((((-1.0)*r22*x4744))+((x4736*x4741))+(((-1.0)*x4742*x4745)));
evalcond[1]=(((x4737*x4742))+(((-1.0)*r22*x4745))+(((-1.0)*x4741*x4744)));
evalcond[2]=(sj0+((x4736*x4738))+(((-1.0)*x4740*x4745))+(((-1.0)*r02*x4744)));
evalcond[3]=(((x4737*x4740))+cj0+(((-1.0)*x4738*x4744))+(((-1.0)*r02*x4745)));
evalcond[4]=(sj0+(((-1.0)*r12*x4745))+((x4737*x4739))+(((-1.0)*x4743*x4744)));
evalcond[5]=((((-1.0)*r12*x4744))+((x4736*x4743))+(((-1.0)*x4739*x4745))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4746=((1.0)*sj5);
CheckValue<IkReal> x4747=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4746)))),-1);
if(!x4747.valid){
continue;
}
CheckValue<IkReal> x4748 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x4746))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4747.value)))+(x4748.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4749=IKsin(j4);
IkReal x4750=IKcos(j4);
IkReal x4751=(cj5*r00);
IkReal x4752=(r11*sj5);
IkReal x4753=(r01*sj5);
IkReal x4754=(cj5*r20);
IkReal x4755=(r21*sj5);
IkReal x4756=(cj5*r10);
IkReal x4757=((1.0)*x4750);
IkReal x4758=((1.0)*x4749);
evalcond[0]=((((-1.0)*x4755*x4758))+(((-1.0)*r22*x4757))+((x4749*x4754)));
evalcond[1]=((((-1.0)*x4754*x4757))+((x4750*x4755))+(((-1.0)*r22*x4758)));
evalcond[2]=((((-1.0)*x4753*x4758))+sj0+((x4749*x4751))+(((-1.0)*r02*x4757)));
evalcond[3]=(cj0+((x4750*x4753))+(((-1.0)*x4751*x4757))+(((-1.0)*r02*x4758)));
evalcond[4]=(sj0+(((-1.0)*x4756*x4757))+(((-1.0)*r12*x4758))+((x4750*x4752)));
evalcond[5]=((((-1.0)*r12*x4757))+(((-1.0)*x4752*x4758))+((x4749*x4756))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.778152489955319)*px))+(((-2.40811668006493)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.778152489955319)*py))+(((-2.40811668006493)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.778152489955319)*px))+(((-2.40811668006493)*py))))+IKsqr(((((-0.778152489955319)*py))+(((-2.40811668006493)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.778152489955319)*px))+(((-2.40811668006493)*py))), ((((-0.778152489955319)*py))+(((-2.40811668006493)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4759=IKcos(j0);
IkReal x4760=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.37600108)*x4759))+(((0.1215)*x4760)));
evalcond[1]=((((-0.1215)*x4759))+(((-0.37600108)*x4760))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4761=((1.0)*sj5);
IkReal x4762=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4761)));
j4eval[0]=x4762;
j4eval[1]=IKsign(x4762);
j4eval[2]=((IKabs(((((-1.0)*r21*sj0*x4761))+((cj5*r20*sj0)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4763=((1.0)*sj5);
IkReal x4764=((((-1.0)*r00*x4763))+(((-1.0)*cj5*r01)));
j4eval[0]=x4764;
j4eval[1]=IKsign(x4764);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x4763))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4765=cj5*cj5;
IkReal x4766=((1.0)*r21);
IkReal x4767=(cj5*sj5);
IkReal x4768=((1.0)*r20);
IkReal x4769=((((-1.0)*r00*x4766*x4767))+((r01*r21))+(((-1.0)*r01*x4767*x4768))+(((-1.0)*r01*x4765*x4766))+((r02*r22))+((r00*r20*x4765)));
j4eval[0]=x4769;
j4eval[1]=IKsign(x4769);
j4eval[2]=((IKabs(((((-1.0)*cj5*sj0*x4768))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4770=cj5*cj5;
IkReal x4771=((1.0)*r21);
IkReal x4772=(cj5*sj5);
IkReal x4773=((1.0)*r20);
CheckValue<IkReal> x4774 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x4773)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4774.valid){
continue;
}
CheckValue<IkReal> x4775=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4770*x4771))+(((-1.0)*r00*x4771*x4772))+((r00*r20*x4770))+((r01*r21))+(((-1.0)*r01*x4772*x4773))+((r02*r22)))),-1);
if(!x4775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4774.value)+(((1.5707963267949)*(x4775.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4776=IKsin(j4);
IkReal x4777=IKcos(j4);
IkReal x4778=((1.0)*cj0);
IkReal x4779=(cj5*r00);
IkReal x4780=(r11*sj5);
IkReal x4781=(r01*sj5);
IkReal x4782=(cj5*r20);
IkReal x4783=(r21*sj5);
IkReal x4784=(cj5*r10);
IkReal x4785=((1.0)*x4777);
IkReal x4786=((1.0)*x4776);
evalcond[0]=(((x4776*x4782))+(((-1.0)*x4783*x4786))+(((-1.0)*r22*x4785)));
evalcond[1]=(((x4777*x4783))+(((-1.0)*x4782*x4785))+(((-1.0)*r22*x4786)));
evalcond[2]=(sj0+(((-1.0)*x4781*x4786))+((x4776*x4779))+(((-1.0)*r02*x4785)));
evalcond[3]=(((x4776*x4784))+(((-1.0)*x4778))+(((-1.0)*x4780*x4786))+(((-1.0)*r12*x4785)));
evalcond[4]=((((-1.0)*x4779*x4785))+((x4777*x4781))+(((-1.0)*r02*x4786))+(((-1.0)*x4778)));
evalcond[5]=((((-1.0)*sj0))+((x4777*x4780))+(((-1.0)*x4784*x4785))+(((-1.0)*r12*x4786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4787=((1.0)*sj5);
CheckValue<IkReal> x4788=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4787))+(((-1.0)*cj5*r01)))),-1);
if(!x4788.valid){
continue;
}
CheckValue<IkReal> x4789 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x4787))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4788.value)))+(x4789.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4790=IKsin(j4);
IkReal x4791=IKcos(j4);
IkReal x4792=((1.0)*cj0);
IkReal x4793=(cj5*r00);
IkReal x4794=(r11*sj5);
IkReal x4795=(r01*sj5);
IkReal x4796=(cj5*r20);
IkReal x4797=(r21*sj5);
IkReal x4798=(cj5*r10);
IkReal x4799=((1.0)*x4791);
IkReal x4800=((1.0)*x4790);
evalcond[0]=(((x4790*x4796))+(((-1.0)*x4797*x4800))+(((-1.0)*r22*x4799)));
evalcond[1]=((((-1.0)*r22*x4800))+((x4791*x4797))+(((-1.0)*x4796*x4799)));
evalcond[2]=(((x4790*x4793))+sj0+(((-1.0)*r02*x4799))+(((-1.0)*x4795*x4800)));
evalcond[3]=(((x4790*x4798))+(((-1.0)*x4792))+(((-1.0)*r12*x4799))+(((-1.0)*x4794*x4800)));
evalcond[4]=((((-1.0)*x4792))+((x4791*x4795))+(((-1.0)*r02*x4800))+(((-1.0)*x4793*x4799)));
evalcond[5]=((((-1.0)*sj0))+((x4791*x4794))+(((-1.0)*r12*x4800))+(((-1.0)*x4798*x4799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4801=((1.0)*sj5);
CheckValue<IkReal> x4802 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4801)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4802.valid){
continue;
}
CheckValue<IkReal> x4803=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4801)))),-1);
if(!x4803.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4802.value)+(((1.5707963267949)*(x4803.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4804=IKsin(j4);
IkReal x4805=IKcos(j4);
IkReal x4806=((1.0)*cj0);
IkReal x4807=(cj5*r00);
IkReal x4808=(r11*sj5);
IkReal x4809=(r01*sj5);
IkReal x4810=(cj5*r20);
IkReal x4811=(r21*sj5);
IkReal x4812=(cj5*r10);
IkReal x4813=((1.0)*x4805);
IkReal x4814=((1.0)*x4804);
evalcond[0]=((((-1.0)*x4811*x4814))+(((-1.0)*r22*x4813))+((x4804*x4810)));
evalcond[1]=((((-1.0)*r22*x4814))+(((-1.0)*x4810*x4813))+((x4805*x4811)));
evalcond[2]=(sj0+(((-1.0)*x4809*x4814))+(((-1.0)*r02*x4813))+((x4804*x4807)));
evalcond[3]=((((-1.0)*x4808*x4814))+(((-1.0)*x4806))+((x4804*x4812))+(((-1.0)*r12*x4813)));
evalcond[4]=(((x4805*x4809))+(((-1.0)*r02*x4814))+(((-1.0)*x4807*x4813))+(((-1.0)*x4806)));
evalcond[5]=((((-1.0)*sj0))+((x4805*x4808))+(((-1.0)*r12*x4814))+(((-1.0)*x4812*x4813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.778160585186482)*px))+(((2.40812789807971)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.778160585186482)*py))+(((2.40812789807971)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.778160585186482)*px))+(((2.40812789807971)*py))))+IKsqr(((((-0.778160585186482)*py))+(((2.40812789807971)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.778160585186482)*px))+(((2.40812789807971)*py))), ((((-0.778160585186482)*py))+(((2.40812789807971)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4815=IKsin(j0);
IkReal x4816=IKcos(j0);
evalcond[0]=((((0.1215)*x4815))+(((0.37599892)*x4816))+(((-1.0)*px)));
evalcond[1]=((((0.37599892)*x4815))+(((-1.0)*py))+(((-0.1215)*x4816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4817=((1.0)*sj5);
IkReal x4818=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4817)));
j4eval[0]=x4818;
j4eval[1]=IKsign(x4818);
j4eval[2]=((IKabs(((((-1.0)*r21*sj0*x4817))+((cj5*r20*sj0)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4819=cj5*cj5;
IkReal x4820=((1.0)*r21);
IkReal x4821=(cj5*sj5);
IkReal x4822=(((r01*r21))+((r00*r20*x4819))+(((-1.0)*r00*x4820*x4821))+(((-1.0)*r01*x4819*x4820))+((r02*r22))+(((-1.0)*r01*r20*x4821)));
j4eval[0]=x4822;
j4eval[1]=IKsign(x4822);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x4820))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4823=cj5*cj5;
IkReal x4824=(cj5*r20);
IkReal x4825=((1.0)*sj5);
IkReal x4826=(r11*r21);
IkReal x4827=((((-1.0)*x4823*x4826))+((r10*r20*x4823))+((r12*r22))+(((-1.0)*r11*x4824*x4825))+(((-1.0)*cj5*r10*r21*x4825))+x4826);
j4eval[0]=x4827;
j4eval[1]=IKsign(x4827);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((sj0*x4824))+(((-1.0)*r21*sj0*x4825))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4828=cj5*cj5;
IkReal x4829=(cj5*r20);
IkReal x4830=((1.0)*sj5);
IkReal x4831=(r11*r21);
CheckValue<IkReal> x4832 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x4830))+((sj0*x4829)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4832.valid){
continue;
}
CheckValue<IkReal> x4833=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4829*x4830))+((r10*r20*x4828))+((r12*r22))+(((-1.0)*cj5*r10*r21*x4830))+(((-1.0)*x4828*x4831))+x4831)),-1);
if(!x4833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4832.value)+(((1.5707963267949)*(x4833.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4834=IKsin(j4);
IkReal x4835=IKcos(j4);
IkReal x4836=(cj5*r00);
IkReal x4837=(r11*sj5);
IkReal x4838=(r01*sj5);
IkReal x4839=(cj5*r20);
IkReal x4840=(r21*sj5);
IkReal x4841=(cj5*r10);
IkReal x4842=((1.0)*x4835);
IkReal x4843=((1.0)*x4834);
evalcond[0]=((((-1.0)*x4840*x4843))+((x4834*x4839))+(((-1.0)*r22*x4842)));
evalcond[1]=(((x4835*x4840))+(((-1.0)*x4839*x4842))+(((-1.0)*r22*x4843)));
evalcond[2]=(sj0+(((-1.0)*x4838*x4843))+(((-1.0)*r02*x4842))+((x4834*x4836)));
evalcond[3]=((((-1.0)*x4836*x4842))+cj0+(((-1.0)*r02*x4843))+((x4835*x4838)));
evalcond[4]=(sj0+(((-1.0)*x4841*x4842))+((x4835*x4837))+(((-1.0)*r12*x4843)));
evalcond[5]=((((-1.0)*x4837*x4843))+((x4834*x4841))+(((-1.0)*r12*x4842))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4844=cj5*cj5;
IkReal x4845=((1.0)*r21);
IkReal x4846=(cj5*sj5);
CheckValue<IkReal> x4847 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x4845))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4847.valid){
continue;
}
CheckValue<IkReal> x4848=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*r20*x4846))+((r01*r21))+((r00*r20*x4844))+(((-1.0)*r01*x4844*x4845))+(((-1.0)*r00*x4845*x4846))+((r02*r22)))),-1);
if(!x4848.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4847.value)+(((1.5707963267949)*(x4848.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4849=IKsin(j4);
IkReal x4850=IKcos(j4);
IkReal x4851=(cj5*r00);
IkReal x4852=(r11*sj5);
IkReal x4853=(r01*sj5);
IkReal x4854=(cj5*r20);
IkReal x4855=(r21*sj5);
IkReal x4856=(cj5*r10);
IkReal x4857=((1.0)*x4850);
IkReal x4858=((1.0)*x4849);
evalcond[0]=(((x4849*x4854))+(((-1.0)*r22*x4857))+(((-1.0)*x4855*x4858)));
evalcond[1]=((((-1.0)*r22*x4858))+((x4850*x4855))+(((-1.0)*x4854*x4857)));
evalcond[2]=((((-1.0)*x4853*x4858))+sj0+((x4849*x4851))+(((-1.0)*r02*x4857)));
evalcond[3]=(cj0+(((-1.0)*r02*x4858))+(((-1.0)*x4851*x4857))+((x4850*x4853)));
evalcond[4]=(sj0+(((-1.0)*x4856*x4857))+(((-1.0)*r12*x4858))+((x4850*x4852)));
evalcond[5]=((((-1.0)*r12*x4857))+((x4849*x4856))+(((-1.0)*x4852*x4858))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4859=((1.0)*sj5);
CheckValue<IkReal> x4860 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4859)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4860.valid){
continue;
}
CheckValue<IkReal> x4861=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4859)))),-1);
if(!x4861.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4860.value)+(((1.5707963267949)*(x4861.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4862=IKsin(j4);
IkReal x4863=IKcos(j4);
IkReal x4864=(cj5*r00);
IkReal x4865=(r11*sj5);
IkReal x4866=(r01*sj5);
IkReal x4867=(cj5*r20);
IkReal x4868=(r21*sj5);
IkReal x4869=(cj5*r10);
IkReal x4870=((1.0)*x4863);
IkReal x4871=((1.0)*x4862);
evalcond[0]=((((-1.0)*x4868*x4871))+(((-1.0)*r22*x4870))+((x4862*x4867)));
evalcond[1]=((((-1.0)*r22*x4871))+((x4863*x4868))+(((-1.0)*x4867*x4870)));
evalcond[2]=(sj0+(((-1.0)*x4866*x4871))+((x4862*x4864))+(((-1.0)*r02*x4870)));
evalcond[3]=(cj0+((x4863*x4866))+(((-1.0)*r02*x4871))+(((-1.0)*x4864*x4870)));
evalcond[4]=(sj0+(((-1.0)*x4869*x4870))+((x4863*x4865))+(((-1.0)*r12*x4871)));
evalcond[5]=(((x4862*x4869))+(((-1.0)*x4865*x4871))+(((-1.0)*r12*x4870))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.24559329467911)*py))+(((0.19303496620203)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.24559329467911)*px))+(((-0.19303496620203)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.24559329467911)*py))+(((0.19303496620203)*px))))+IKsqr(((((1.24559329467911)*px))+(((-0.19303496620203)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.24559329467911)*py))+(((0.19303496620203)*px))), ((((1.24559329467911)*px))+(((-0.19303496620203)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4872=IKsin(j0);
IkReal x4873=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.78400089)*x4873))+(((0.1215)*x4872)));
evalcond[1]=((((-0.1215)*x4873))+(((-1.0)*py))+(((0.78400089)*x4872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4874=((1.0)*sj5);
IkReal x4875=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4874)));
j4eval[0]=x4875;
j4eval[1]=IKsign(x4875);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4874))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4876=cj5*cj5;
IkReal x4877=((1.0)*r21);
IkReal x4878=(cj5*sj5);
IkReal x4879=(((r00*r20*x4876))+((r01*r21))+(((-1.0)*r01*r20*x4878))+(((-1.0)*r01*x4876*x4877))+(((-1.0)*r00*x4877*x4878))+((r02*r22)));
j4eval[0]=x4879;
j4eval[1]=IKsign(x4879);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x4877)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4880=cj5*cj5;
IkReal x4881=(cj5*r20);
IkReal x4882=((1.0)*sj5);
IkReal x4883=(r11*r21);
IkReal x4884=(((r10*r20*x4880))+(((-1.0)*cj5*r10*r21*x4882))+((r12*r22))+(((-1.0)*x4880*x4883))+(((-1.0)*r11*x4881*x4882))+x4883);
j4eval[0]=x4884;
j4eval[1]=IKsign(x4884);
j4eval[2]=((IKabs((((sj0*x4881))+(((-1.0)*r21*sj0*x4882)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4885=cj5*cj5;
IkReal x4886=(cj5*r20);
IkReal x4887=((1.0)*sj5);
IkReal x4888=(r11*r21);
CheckValue<IkReal> x4889 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x4886))+(((-1.0)*r21*sj0*x4887)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4889.valid){
continue;
}
CheckValue<IkReal> x4890=IKPowWithIntegerCheck(IKsign((((r10*r20*x4885))+(((-1.0)*cj5*r10*r21*x4887))+(((-1.0)*r11*x4886*x4887))+((r12*r22))+(((-1.0)*x4885*x4888))+x4888)),-1);
if(!x4890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4889.value)+(((1.5707963267949)*(x4890.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4891=IKsin(j4);
IkReal x4892=IKcos(j4);
IkReal x4893=(cj5*r00);
IkReal x4894=(r11*sj5);
IkReal x4895=(r01*sj5);
IkReal x4896=(cj5*r20);
IkReal x4897=(r21*sj5);
IkReal x4898=(cj5*r10);
IkReal x4899=((1.0)*x4892);
IkReal x4900=((1.0)*x4891);
evalcond[0]=((((-1.0)*x4897*x4900))+((x4891*x4896))+(((-1.0)*r22*x4899)));
evalcond[1]=(((x4892*x4897))+(((-1.0)*r22*x4900))+(((-1.0)*x4896*x4899)));
evalcond[2]=(sj0+((x4891*x4893))+(((-1.0)*r02*x4899))+(((-1.0)*x4895*x4900)));
evalcond[3]=(cj0+((x4892*x4895))+(((-1.0)*x4893*x4899))+(((-1.0)*r02*x4900)));
evalcond[4]=((((-1.0)*r12*x4900))+(((-1.0)*x4898*x4899))+sj0+((x4892*x4894)));
evalcond[5]=((((-1.0)*r12*x4899))+(((-1.0)*x4894*x4900))+((x4891*x4898))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4901=cj5*cj5;
IkReal x4902=((1.0)*r21);
IkReal x4903=(cj5*sj5);
CheckValue<IkReal> x4904 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x4902)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4904.valid){
continue;
}
CheckValue<IkReal> x4905=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4902*x4903))+((r01*r21))+(((-1.0)*r01*x4901*x4902))+(((-1.0)*r01*r20*x4903))+((r00*r20*x4901))+((r02*r22)))),-1);
if(!x4905.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4904.value)+(((1.5707963267949)*(x4905.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4906=IKsin(j4);
IkReal x4907=IKcos(j4);
IkReal x4908=(cj5*r00);
IkReal x4909=(r11*sj5);
IkReal x4910=(r01*sj5);
IkReal x4911=(cj5*r20);
IkReal x4912=(r21*sj5);
IkReal x4913=(cj5*r10);
IkReal x4914=((1.0)*x4907);
IkReal x4915=((1.0)*x4906);
evalcond[0]=((((-1.0)*x4912*x4915))+((x4906*x4911))+(((-1.0)*r22*x4914)));
evalcond[1]=((((-1.0)*x4911*x4914))+((x4907*x4912))+(((-1.0)*r22*x4915)));
evalcond[2]=(sj0+(((-1.0)*r02*x4914))+(((-1.0)*x4910*x4915))+((x4906*x4908)));
evalcond[3]=((((-1.0)*r02*x4915))+cj0+(((-1.0)*x4908*x4914))+((x4907*x4910)));
evalcond[4]=(sj0+(((-1.0)*r12*x4915))+(((-1.0)*x4913*x4914))+((x4907*x4909)));
evalcond[5]=((((-1.0)*x4909*x4915))+(((-1.0)*r12*x4914))+((x4906*x4913))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4916=((1.0)*sj5);
CheckValue<IkReal> x4917 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4916)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4917.valid){
continue;
}
CheckValue<IkReal> x4918=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4916)))),-1);
if(!x4918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4917.value)+(((1.5707963267949)*(x4918.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4919=IKsin(j4);
IkReal x4920=IKcos(j4);
IkReal x4921=(cj5*r00);
IkReal x4922=(r11*sj5);
IkReal x4923=(r01*sj5);
IkReal x4924=(cj5*r20);
IkReal x4925=(r21*sj5);
IkReal x4926=(cj5*r10);
IkReal x4927=((1.0)*x4920);
IkReal x4928=((1.0)*x4919);
evalcond[0]=(((x4919*x4924))+(((-1.0)*r22*x4927))+(((-1.0)*x4925*x4928)));
evalcond[1]=(((x4920*x4925))+(((-1.0)*x4924*x4927))+(((-1.0)*r22*x4928)));
evalcond[2]=(((x4919*x4921))+(((-1.0)*r02*x4927))+sj0+(((-1.0)*x4923*x4928)));
evalcond[3]=((((-1.0)*r02*x4928))+cj0+((x4920*x4923))+(((-1.0)*x4921*x4927)));
evalcond[4]=(sj0+((x4920*x4922))+(((-1.0)*x4926*x4927))+(((-1.0)*r12*x4928)));
evalcond[5]=(((x4919*x4926))+(((-1.0)*x4922*x4928))+(((-1.0)*r12*x4927))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((7.69654361224353)*px))+(((2.02712959272105)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-7.69654361224353)*py))+(((2.02712959272105)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.69654361224353)*px))+(((2.02712959272105)*py))))+IKsqr(((((-7.69654361224353)*py))+(((2.02712959272105)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((7.69654361224353)*px))+(((2.02712959272105)*py))), ((((-7.69654361224353)*py))+(((2.02712959272105)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4929=IKsin(j0);
IkReal x4930=IKcos(j0);
evalcond[0]=((((0.1215)*x4929))+(((0.03200089)*x4930))+(((-1.0)*px)));
evalcond[1]=((((0.03200089)*x4929))+(((-1.0)*py))+(((-0.1215)*x4930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4931=((1.0)*sj5);
IkReal x4932=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4931)));
j4eval[0]=x4932;
j4eval[1]=IKsign(x4932);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4931))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4933=((1.0)*sj5);
IkReal x4934=((((-1.0)*r00*x4933))+(((-1.0)*cj5*r01)));
j4eval[0]=x4934;
j4eval[1]=IKsign(x4934);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x4933))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4935=cj5*cj5;
IkReal x4936=((1.0)*r21);
IkReal x4937=(cj5*sj5);
IkReal x4938=((1.0)*r20);
IkReal x4939=((((-1.0)*r01*x4935*x4936))+((r01*r21))+((r00*r20*x4935))+(((-1.0)*r01*x4937*x4938))+((r02*r22))+(((-1.0)*r00*x4936*x4937)));
j4eval[0]=x4939;
j4eval[1]=IKsign(x4939);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x4938))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4940=cj5*cj5;
IkReal x4941=((1.0)*r21);
IkReal x4942=(cj5*sj5);
IkReal x4943=((1.0)*r20);
CheckValue<IkReal> x4944 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*sj0*x4943))+((r21*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4944.valid){
continue;
}
CheckValue<IkReal> x4945=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4940*x4941))+((r01*r21))+(((-1.0)*r01*x4942*x4943))+((r02*r22))+((r00*r20*x4940))+(((-1.0)*r00*x4941*x4942)))),-1);
if(!x4945.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4944.value)+(((1.5707963267949)*(x4945.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4946=IKsin(j4);
IkReal x4947=IKcos(j4);
IkReal x4948=((1.0)*cj0);
IkReal x4949=(cj5*r00);
IkReal x4950=(r11*sj5);
IkReal x4951=(r01*sj5);
IkReal x4952=(cj5*r20);
IkReal x4953=(r21*sj5);
IkReal x4954=(cj5*r10);
IkReal x4955=((1.0)*x4947);
IkReal x4956=((1.0)*x4946);
evalcond[0]=((((-1.0)*r22*x4955))+((x4946*x4952))+(((-1.0)*x4953*x4956)));
evalcond[1]=((((-1.0)*r22*x4956))+((x4947*x4953))+(((-1.0)*x4952*x4955)));
evalcond[2]=(sj0+((x4946*x4949))+(((-1.0)*r02*x4955))+(((-1.0)*x4951*x4956)));
evalcond[3]=((((-1.0)*x4948))+(((-1.0)*r12*x4955))+((x4946*x4954))+(((-1.0)*x4950*x4956)));
evalcond[4]=((((-1.0)*x4948))+(((-1.0)*r02*x4956))+((x4947*x4951))+(((-1.0)*x4949*x4955)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x4956))+(((-1.0)*x4954*x4955))+((x4947*x4950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4957=((1.0)*sj5);
CheckValue<IkReal> x4958 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x4957))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4958.valid){
continue;
}
CheckValue<IkReal> x4959=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4957))+(((-1.0)*cj5*r01)))),-1);
if(!x4959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4958.value)+(((1.5707963267949)*(x4959.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4960=IKsin(j4);
IkReal x4961=IKcos(j4);
IkReal x4962=((1.0)*cj0);
IkReal x4963=(cj5*r00);
IkReal x4964=(r11*sj5);
IkReal x4965=(r01*sj5);
IkReal x4966=(cj5*r20);
IkReal x4967=(r21*sj5);
IkReal x4968=(cj5*r10);
IkReal x4969=((1.0)*x4961);
IkReal x4970=((1.0)*x4960);
evalcond[0]=((((-1.0)*r22*x4969))+(((-1.0)*x4967*x4970))+((x4960*x4966)));
evalcond[1]=(((x4961*x4967))+(((-1.0)*r22*x4970))+(((-1.0)*x4966*x4969)));
evalcond[2]=(sj0+(((-1.0)*r02*x4969))+(((-1.0)*x4965*x4970))+((x4960*x4963)));
evalcond[3]=((((-1.0)*x4962))+(((-1.0)*r12*x4969))+((x4960*x4968))+(((-1.0)*x4964*x4970)));
evalcond[4]=(((x4961*x4965))+(((-1.0)*x4962))+(((-1.0)*x4963*x4969))+(((-1.0)*r02*x4970)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4968*x4969))+((x4961*x4964))+(((-1.0)*r12*x4970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4971=((1.0)*sj5);
CheckValue<IkReal> x4972=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4971)))),-1);
if(!x4972.valid){
continue;
}
CheckValue<IkReal> x4973 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4971)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4972.value)))+(x4973.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4974=IKsin(j4);
IkReal x4975=IKcos(j4);
IkReal x4976=((1.0)*cj0);
IkReal x4977=(cj5*r00);
IkReal x4978=(r11*sj5);
IkReal x4979=(r01*sj5);
IkReal x4980=(cj5*r20);
IkReal x4981=(r21*sj5);
IkReal x4982=(cj5*r10);
IkReal x4983=((1.0)*x4975);
IkReal x4984=((1.0)*x4974);
evalcond[0]=((((-1.0)*r22*x4983))+((x4974*x4980))+(((-1.0)*x4981*x4984)));
evalcond[1]=((((-1.0)*r22*x4984))+((x4975*x4981))+(((-1.0)*x4980*x4983)));
evalcond[2]=(sj0+((x4974*x4977))+(((-1.0)*x4979*x4984))+(((-1.0)*r02*x4983)));
evalcond[3]=(((x4974*x4982))+(((-1.0)*x4976))+(((-1.0)*r12*x4983))+(((-1.0)*x4978*x4984)));
evalcond[4]=((((-1.0)*x4977*x4983))+(((-1.0)*x4976))+(((-1.0)*r02*x4984))+((x4975*x4979)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4982*x4983))+(((-1.0)*r12*x4984))+((x4975*x4978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4985=(cj5*r01);
IkReal x4986=(cj1*cj2);
IkReal x4987=(r00*sj5);
IkReal x4988=(sj1*sj2);
IkReal x4989=((2000.0)*px);
IkReal x4990=((816.0)*sj1);
IkReal x4991=((0.00394)*cj1);
IkReal x4992=((752.0)*cj2*sj1);
IkReal x4993=((752.0)*cj1*sj2);
CheckValue<IkReal> x4994=IKPowWithIntegerCheck(((((243.0)*x4986))+(((243.0)*x4988))),-1);
if(!x4994.valid){
continue;
}
CheckValue<IkReal> x4995=IKPowWithIntegerCheck((x4986+x4988),-1);
if(!x4995.valid){
continue;
}
if( IKabs(((x4994.value)*((((x4985*x4991))+((x4985*x4993))+(((-205.0)*x4985*x4988))+(((-205.0)*x4985*x4986))+(((-205.0)*x4987*x4988))+(((0.00178)*x4987))+(((0.00178)*x4985))+((x4986*x4989))+(((-1.0)*x4985*x4992))+(((-1.0)*x4985*x4990))+((x4988*x4989))+(((-1.0)*x4987*x4992))+(((-1.0)*x4987*x4990))+(((-205.0)*x4986*x4987))+((x4987*x4993))+((x4987*x4991)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4995.value)*(((((-1.0)*x4987))+(((-1.0)*x4985)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4994.value)*((((x4985*x4991))+((x4985*x4993))+(((-205.0)*x4985*x4988))+(((-205.0)*x4985*x4986))+(((-205.0)*x4987*x4988))+(((0.00178)*x4987))+(((0.00178)*x4985))+((x4986*x4989))+(((-1.0)*x4985*x4992))+(((-1.0)*x4985*x4990))+((x4988*x4989))+(((-1.0)*x4987*x4992))+(((-1.0)*x4987*x4990))+(((-205.0)*x4986*x4987))+((x4987*x4993))+((x4987*x4991))))))+IKsqr(((x4995.value)*(((((-1.0)*x4987))+(((-1.0)*x4985))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x4994.value)*((((x4985*x4991))+((x4985*x4993))+(((-205.0)*x4985*x4988))+(((-205.0)*x4985*x4986))+(((-205.0)*x4987*x4988))+(((0.00178)*x4987))+(((0.00178)*x4985))+((x4986*x4989))+(((-1.0)*x4985*x4992))+(((-1.0)*x4985*x4990))+((x4988*x4989))+(((-1.0)*x4987*x4992))+(((-1.0)*x4987*x4990))+(((-205.0)*x4986*x4987))+((x4987*x4993))+((x4987*x4991))))), ((x4995.value)*(((((-1.0)*x4987))+(((-1.0)*x4985))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4996=IKcos(j0);
IkReal x4997=IKsin(j0);
IkReal x4998=((0.376)*sj1);
IkReal x4999=(cj5*r01);
IkReal x5000=((0.376)*sj2);
IkReal x5001=(r00*sj5);
IkReal x5002=(cj5*r11);
IkReal x5003=(r10*sj5);
IkReal x5004=(cj2*x4997);
IkReal x5005=(cj1*x4996);
IkReal x5006=(cj1*x4997);
IkReal x5007=(sj1*x4997);
IkReal x5008=(sj1*x4996);
evalcond[0]=(x4999+x5001+((cj2*x5005))+((sj2*x5008)));
evalcond[1]=(((cj1*x5004))+x5003+x5002+((sj2*x5007)));
evalcond[2]=((((8.9e-7)*x4996))+(((0.1025)*x4999))+(((0.1025)*x5001))+(((-1.0)*px))+((x5000*x5005))+(((0.1215)*x4997))+(((-0.408)*x5008))+(((-1.0)*cj2*x4996*x4998))+(((1.97e-6)*x5005)));
evalcond[3]=((((8.9e-7)*x4997))+(((0.1025)*x5003))+(((0.1025)*x5002))+(((-0.1215)*x4996))+(((-1.0)*x4998*x5004))+(((-1.0)*py))+((x5000*x5006))+(((-0.408)*x5007))+(((1.97e-6)*x5006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5009=((1.0)*sj5);
IkReal x5010=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5009)));
j4eval[0]=x5010;
j4eval[1]=IKsign(x5010);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5009)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5011=((1.0)*sj5);
IkReal x5012=((((-1.0)*cj5*r01))+(((-1.0)*r00*x5011)));
j4eval[0]=x5012;
j4eval[1]=IKsign(x5012);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x5011))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5013=((1.0)*sj5);
IkReal x5014=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5014;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x5013))+(((-1.0)*r11*sj0*x5013))))));
j4eval[2]=IKsign(x5014);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5016 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5016)==0){
continue;
}
IkReal x5015=pow(x5016,-0.5);
CheckValue<IkReal> x5017 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5017.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5017.value));
IkReal gconst115=((-1.0)*r21*x5015);
IkReal gconst116=(r20*x5015);
CheckValue<IkReal> x5018 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5018.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5018.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x5021 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5021.valid){
continue;
}
IkReal x5019=((-1.0)*(x5021.value));
IkReal x5020=x5015;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5019;
IkReal gconst114=x5019;
IkReal gconst115=((-1.0)*r21*x5020);
IkReal gconst116=(r20*x5020);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5024 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5024.valid){
continue;
}
IkReal x5022=((-1.0)*(x5024.value));
IkReal x5023=x5015;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5022;
IkReal gconst114=x5022;
IkReal gconst115=((-1.0)*r21*x5023);
IkReal gconst116=(r20*x5023);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x5027 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5027.valid){
continue;
}
IkReal x5025=((-1.0)*(x5027.value));
IkReal x5026=x5015;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5025;
IkReal gconst114=x5025;
IkReal gconst115=((-1.0)*r21*x5026);
IkReal gconst116=(r20*x5026);
IkReal x5028=r22*r22;
CheckValue<IkReal> x5031=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5028))),-1);
if(!x5031.valid){
continue;
}
IkReal x5029=x5031.value;
IkReal x5030=(((x5029*(r20*r20*r20*r20)))+(((2.0)*x5029*(r20*r20)*(r21*r21)))+x5028+((x5029*(r21*r21*r21*r21))));
j4eval[0]=x5030;
j4eval[1]=IKsign(x5030);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5032=(sj1*sj2);
IkReal x5033=(cj1*cj2);
IkReal x5034=(gconst116*r20);
IkReal x5035=((1.0)*gconst115*r21);
CheckValue<IkReal> x5036 = IKatan2WithCheck(IkReal((((r22*x5032))+((r22*x5033)))),IkReal(((((-1.0)*x5033*x5035))+(((-1.0)*x5032*x5035))+((x5033*x5034))+((x5032*x5034)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5036.valid){
continue;
}
CheckValue<IkReal> x5037=IKPowWithIntegerCheck(IKsign(((((gconst115*gconst115)*(r21*r21)))+(x5034*x5034)+(r22*r22)+(((-2.0)*gconst115*r21*x5034)))),-1);
if(!x5037.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5036.value)+(((1.5707963267949)*(x5037.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5038=IKsin(j4);
IkReal x5039=IKcos(j4);
IkReal x5040=(cj1*sj2);
IkReal x5041=((1.0)*x5039);
IkReal x5042=(gconst116*x5038);
IkReal x5043=(gconst115*x5039);
IkReal x5044=((1.0)*cj2*sj1);
IkReal x5045=((1.0)*x5038);
evalcond[0]=(((r20*x5042))+(((-1.0)*r22*x5041))+(((-1.0)*gconst115*r21*x5045)));
evalcond[1]=(sj0+(((-1.0)*r02*x5041))+(((-1.0)*gconst115*r01*x5045))+((r00*x5042)));
evalcond[2]=(((r10*x5042))+(((-1.0)*r12*x5041))+(((-1.0)*cj0))+(((-1.0)*gconst115*r11*x5045)));
evalcond[3]=((((-1.0)*gconst116*r20*x5041))+((sj1*sj2))+((r21*x5043))+((cj1*cj2))+(((-1.0)*r22*x5045)));
evalcond[4]=(((cj0*x5040))+(((-1.0)*gconst116*r00*x5041))+(((-1.0)*r02*x5045))+(((-1.0)*cj0*x5044))+((r01*x5043)));
evalcond[5]=((((-1.0)*gconst116*r10*x5041))+((sj0*x5040))+(((-1.0)*r12*x5045))+((r11*x5043))+(((-1.0)*sj0*x5044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5046=((1.0)*gconst115);
CheckValue<IkReal> x5047 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst116*r20))+(((-1.0)*cj0*r21*x5046)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5047.valid){
continue;
}
CheckValue<IkReal> x5048=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst116*r01))+(((-1.0)*r00*x5046)))),-1);
if(!x5048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5047.value)+(((1.5707963267949)*(x5048.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5049=IKsin(j4);
IkReal x5050=IKcos(j4);
IkReal x5051=(cj1*sj2);
IkReal x5052=((1.0)*x5050);
IkReal x5053=(gconst116*x5049);
IkReal x5054=(gconst115*x5050);
IkReal x5055=((1.0)*cj2*sj1);
IkReal x5056=((1.0)*x5049);
evalcond[0]=(((r20*x5053))+(((-1.0)*r22*x5052))+(((-1.0)*gconst115*r21*x5056)));
evalcond[1]=(sj0+(((-1.0)*gconst115*r01*x5056))+((r00*x5053))+(((-1.0)*r02*x5052)));
evalcond[2]=((((-1.0)*gconst115*r11*x5056))+((r10*x5053))+(((-1.0)*r12*x5052))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x5054))+(((-1.0)*r22*x5056))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst116*r20*x5052)));
evalcond[4]=(((r01*x5054))+((cj0*x5051))+(((-1.0)*r02*x5056))+(((-1.0)*cj0*x5055))+(((-1.0)*gconst116*r00*x5052)));
evalcond[5]=((((-1.0)*r12*x5056))+((r11*x5054))+(((-1.0)*sj0*x5055))+(((-1.0)*gconst116*r10*x5052))+((sj0*x5051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5057=((1.0)*gconst115);
CheckValue<IkReal> x5058 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x5057))+((gconst116*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5058.valid){
continue;
}
CheckValue<IkReal> x5059=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x5057))+(((-1.0)*gconst116*r11)))),-1);
if(!x5059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5058.value)+(((1.5707963267949)*(x5059.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5060=IKsin(j4);
IkReal x5061=IKcos(j4);
IkReal x5062=(cj1*sj2);
IkReal x5063=((1.0)*x5061);
IkReal x5064=(gconst116*x5060);
IkReal x5065=(gconst115*x5061);
IkReal x5066=((1.0)*cj2*sj1);
IkReal x5067=((1.0)*x5060);
evalcond[0]=(((r20*x5064))+(((-1.0)*r22*x5063))+(((-1.0)*gconst115*r21*x5067)));
evalcond[1]=(sj0+(((-1.0)*r02*x5063))+(((-1.0)*gconst115*r01*x5067))+((r00*x5064)));
evalcond[2]=((((-1.0)*r12*x5063))+((r10*x5064))+(((-1.0)*gconst115*r11*x5067))+(((-1.0)*cj0)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x5067))+(((-1.0)*gconst116*r20*x5063))+((r21*x5065))+((cj1*cj2)));
evalcond[4]=(((cj0*x5062))+(((-1.0)*gconst116*r00*x5063))+(((-1.0)*r02*x5067))+(((-1.0)*cj0*x5066))+((r01*x5065)));
evalcond[5]=((((-1.0)*sj0*x5066))+(((-1.0)*gconst116*r10*x5063))+((sj0*x5062))+(((-1.0)*r12*x5067))+((r11*x5065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5069 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5069)==0){
continue;
}
IkReal x5068=pow(x5069,-0.5);
CheckValue<IkReal> x5070 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5070.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5070.value))));
IkReal gconst118=((1.0)*r21*x5068);
IkReal gconst119=((-1.0)*r20*x5068);
CheckValue<IkReal> x5071 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5071.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5071.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x5074 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5074.valid){
continue;
}
IkReal x5072=((1.0)*(x5074.value));
IkReal x5073=x5068;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5072)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5072)));
IkReal gconst118=((1.0)*r21*x5073);
IkReal gconst119=((-1.0)*r20*x5073);
IkReal x5075=r22*r22;
IkReal x5076=((1.0)*x5075);
CheckValue<IkReal> x5080=IKPowWithIntegerCheck(((-1.0)+x5075),-1);
if(!x5080.valid){
continue;
}
IkReal x5077=x5080.value;
if((((1.0)+(((-1.0)*x5076)))) < -0.00001)
continue;
IkReal x5078=IKsqrt(((1.0)+(((-1.0)*x5076))));
IkReal x5079=(sj0*x5077*x5078);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x5079+(((-1.0)*x5076*x5079))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5083 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5083.valid){
continue;
}
IkReal x5081=((1.0)*(x5083.value));
IkReal x5082=x5068;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5081)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5081)));
IkReal gconst118=((1.0)*r21*x5082);
IkReal gconst119=((-1.0)*r20*x5082);
IkReal x5084=r22*r22;
IkReal x5085=((1.0)*x5084);
CheckValue<IkReal> x5089=IKPowWithIntegerCheck(((-1.0)+x5084),-1);
if(!x5089.valid){
continue;
}
IkReal x5086=x5089.value;
if((((1.0)+(((-1.0)*x5085)))) < -0.00001)
continue;
IkReal x5087=IKsqrt(((1.0)+(((-1.0)*x5085))));
IkReal x5088=(cj0*x5086*x5087);
j4eval[0]=((IKabs(((((-1.0)*x5085*x5088))+x5088)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x5092 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5092.valid){
continue;
}
IkReal x5090=((1.0)*(x5092.value));
IkReal x5091=x5068;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5090)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5090)));
IkReal gconst118=((1.0)*r21*x5091);
IkReal gconst119=((-1.0)*r20*x5091);
IkReal x5093=r22*r22;
IkReal x5094=(cj0*r02);
IkReal x5095=(r12*sj0);
CheckValue<IkReal> x5099=IKPowWithIntegerCheck(((-1.0)+x5093),-1);
if(!x5099.valid){
continue;
}
IkReal x5096=x5099.value;
if((((1.0)+(((-1.0)*x5093)))) < -0.00001)
continue;
IkReal x5097=IKsqrt(((1.0)+(((-1.0)*x5093))));
IkReal x5098=((1.0)*r22*x5096*x5097);
j4eval[0]=0;
j4eval[1]=((IKabs((x5094+x5095)))+(IKabs(((((-1.0)*x5094*x5098))+(((-1.0)*x5095*x5098))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5100=((1.0)*gconst118);
CheckValue<IkReal> x5101=IKPowWithIntegerCheck(IKsign((((gconst119*r21))+((gconst118*r20)))),-1);
if(!x5101.valid){
continue;
}
CheckValue<IkReal> x5102 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*cj0*r01*x5100))+((cj0*gconst119*r00))+(((-1.0)*r11*sj0*x5100)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5101.value)))+(x5102.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5103=IKsin(j4);
IkReal x5104=IKcos(j4);
IkReal x5105=(gconst118*r01);
IkReal x5106=(gconst119*r10);
IkReal x5107=(gconst119*r20);
IkReal x5108=(gconst118*r21);
IkReal x5109=(gconst119*r00);
IkReal x5110=(gconst118*r11);
IkReal x5111=(cj1*sj2);
IkReal x5112=((1.0)*x5104);
IkReal x5113=((1.0)*x5103);
IkReal x5114=((1.0)*cj2*sj1);
evalcond[0]=((((-1.0)*r22*x5112))+(((-1.0)*x5108*x5113))+((x5103*x5107)));
evalcond[1]=(sj0+(((-1.0)*r02*x5112))+((x5103*x5109))+(((-1.0)*x5105*x5113)));
evalcond[2]=((((-1.0)*x5110*x5113))+((x5103*x5106))+(((-1.0)*r12*x5112))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x5113))+((x5104*x5108))+((sj1*sj2))+(((-1.0)*x5107*x5112))+((cj1*cj2)));
evalcond[4]=(((x5104*x5105))+(((-1.0)*r02*x5113))+((cj0*x5111))+(((-1.0)*x5109*x5112))+(((-1.0)*cj0*x5114)));
evalcond[5]=(((x5104*x5110))+(((-1.0)*x5106*x5112))+((sj0*x5111))+(((-1.0)*sj0*x5114))+(((-1.0)*r12*x5113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5115=((1.0)*gconst118);
CheckValue<IkReal> x5116 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x5115))+((cj0*gconst119*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5116.valid){
continue;
}
CheckValue<IkReal> x5117=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r01))+(((-1.0)*r00*x5115)))),-1);
if(!x5117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5116.value)+(((1.5707963267949)*(x5117.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5118=IKsin(j4);
IkReal x5119=IKcos(j4);
IkReal x5120=(gconst118*r01);
IkReal x5121=(gconst119*r10);
IkReal x5122=(gconst119*r20);
IkReal x5123=(gconst118*r21);
IkReal x5124=(gconst119*r00);
IkReal x5125=(gconst118*r11);
IkReal x5126=(cj1*sj2);
IkReal x5127=((1.0)*x5119);
IkReal x5128=((1.0)*x5118);
IkReal x5129=((1.0)*cj2*sj1);
evalcond[0]=((((-1.0)*x5123*x5128))+((x5118*x5122))+(((-1.0)*r22*x5127)));
evalcond[1]=(sj0+(((-1.0)*r02*x5127))+((x5118*x5124))+(((-1.0)*x5120*x5128)));
evalcond[2]=((((-1.0)*x5125*x5128))+(((-1.0)*r12*x5127))+((x5118*x5121))+(((-1.0)*cj0)));
evalcond[3]=(((x5119*x5123))+((sj1*sj2))+(((-1.0)*x5122*x5127))+((cj1*cj2))+(((-1.0)*r22*x5128)));
evalcond[4]=((((-1.0)*x5124*x5127))+((x5119*x5120))+(((-1.0)*cj0*x5129))+((cj0*x5126))+(((-1.0)*r02*x5128)));
evalcond[5]=(((x5119*x5125))+(((-1.0)*x5121*x5127))+(((-1.0)*r12*x5128))+((sj0*x5126))+(((-1.0)*sj0*x5129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5130=((1.0)*gconst118);
CheckValue<IkReal> x5131=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x5130))+(((-1.0)*gconst119*r11)))),-1);
if(!x5131.valid){
continue;
}
CheckValue<IkReal> x5132 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x5130))+((gconst119*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5131.value)))+(x5132.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5133=IKsin(j4);
IkReal x5134=IKcos(j4);
IkReal x5135=(gconst118*r01);
IkReal x5136=(gconst119*r10);
IkReal x5137=(gconst119*r20);
IkReal x5138=(gconst118*r21);
IkReal x5139=(gconst119*r00);
IkReal x5140=(gconst118*r11);
IkReal x5141=(cj1*sj2);
IkReal x5142=((1.0)*x5134);
IkReal x5143=((1.0)*x5133);
IkReal x5144=((1.0)*cj2*sj1);
evalcond[0]=(((x5133*x5137))+(((-1.0)*r22*x5142))+(((-1.0)*x5138*x5143)));
evalcond[1]=(sj0+(((-1.0)*x5135*x5143))+(((-1.0)*r02*x5142))+((x5133*x5139)));
evalcond[2]=((((-1.0)*x5140*x5143))+(((-1.0)*r12*x5142))+((x5133*x5136))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x5137*x5142))+((sj1*sj2))+((cj1*cj2))+((x5134*x5138))+(((-1.0)*r22*x5143)));
evalcond[4]=((((-1.0)*cj0*x5144))+(((-1.0)*r02*x5143))+((cj0*x5141))+(((-1.0)*x5139*x5142))+((x5134*x5135)));
evalcond[5]=((((-1.0)*sj0*x5144))+((x5134*x5140))+(((-1.0)*x5136*x5142))+(((-1.0)*r12*x5143))+((sj0*x5141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5145=((-1.0)*r00);
IkReal x5147 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5147)==0){
continue;
}
IkReal x5146=pow(x5147,-0.5);
CheckValue<IkReal> x5148 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5145),IKFAST_ATAN2_MAGTHRESH);
if(!x5148.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5148.value));
IkReal gconst121=(r01*x5146);
IkReal gconst122=(x5145*x5146);
CheckValue<IkReal> x5149 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5149.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5149.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5150=((-1.0)*r00);
IkReal x5151=x5146;
CheckValue<IkReal> x5153 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5150),IKFAST_ATAN2_MAGTHRESH);
if(!x5153.valid){
continue;
}
IkReal x5152=((-1.0)*(x5153.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst121;
cj5=gconst122;
j5=x5152;
IkReal gconst120=x5152;
IkReal gconst121=(r01*x5151);
IkReal gconst122=(x5150*x5151);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5154=((1.0)*gconst121);
CheckValue<IkReal> x5155=IKPowWithIntegerCheck(IKsign((((gconst122*r21))+((gconst121*r20)))),-1);
if(!x5155.valid){
continue;
}
CheckValue<IkReal> x5156 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x5154))+((cj0*gconst122*r00))+(((-1.0)*cj0*r01*x5154))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5156.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5155.value)))+(x5156.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5157=IKsin(j4);
IkReal x5158=IKcos(j4);
IkReal x5159=(gconst121*r11);
IkReal x5160=(gconst122*r00);
IkReal x5161=(gconst121*r01);
IkReal x5162=(gconst121*r21);
IkReal x5163=(cj1*sj2);
IkReal x5164=((1.0)*x5158);
IkReal x5165=((1.0)*cj2*sj1);
IkReal x5166=(gconst122*x5157);
IkReal x5167=((1.0)*x5157);
evalcond[0]=((((-1.0)*r22*x5164))+((r20*x5166))+(((-1.0)*x5162*x5167)));
evalcond[1]=(sj0+(((-1.0)*x5161*x5167))+(((-1.0)*r02*x5164))+((x5157*x5160)));
evalcond[2]=(((r10*x5166))+(((-1.0)*r12*x5164))+(((-1.0)*x5159*x5167))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst122*r20*x5164))+(((-1.0)*r22*x5167))+((sj1*sj2))+((x5158*x5162))+((cj1*cj2)));
evalcond[4]=((((-1.0)*cj0*x5165))+(((-1.0)*x5160*x5164))+(((-1.0)*r02*x5167))+((cj0*x5163))+((x5158*x5161)));
evalcond[5]=((((-1.0)*sj0*x5165))+(((-1.0)*gconst122*r10*x5164))+(((-1.0)*r12*x5167))+((x5158*x5159))+((sj0*x5163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5168=((1.0)*gconst121);
CheckValue<IkReal> x5169 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x5168))+((gconst122*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5169.valid){
continue;
}
CheckValue<IkReal> x5170=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r11))+(((-1.0)*r10*x5168)))),-1);
if(!x5170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5169.value)+(((1.5707963267949)*(x5170.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5171=IKsin(j4);
IkReal x5172=IKcos(j4);
IkReal x5173=(gconst121*r11);
IkReal x5174=(gconst122*r00);
IkReal x5175=(gconst121*r01);
IkReal x5176=(gconst121*r21);
IkReal x5177=(cj1*sj2);
IkReal x5178=((1.0)*x5172);
IkReal x5179=((1.0)*cj2*sj1);
IkReal x5180=(gconst122*x5171);
IkReal x5181=((1.0)*x5171);
evalcond[0]=((((-1.0)*x5176*x5181))+((r20*x5180))+(((-1.0)*r22*x5178)));
evalcond[1]=(sj0+(((-1.0)*x5175*x5181))+(((-1.0)*r02*x5178))+((x5171*x5174)));
evalcond[2]=((((-1.0)*r12*x5178))+((r10*x5180))+(((-1.0)*x5173*x5181))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst122*r20*x5178))+(((-1.0)*r22*x5181))+((sj1*sj2))+((cj1*cj2))+((x5172*x5176)));
evalcond[4]=((((-1.0)*cj0*x5179))+(((-1.0)*r02*x5181))+(((-1.0)*x5174*x5178))+((cj0*x5177))+((x5172*x5175)));
evalcond[5]=((((-1.0)*sj0*x5179))+(((-1.0)*gconst122*r10*x5178))+(((-1.0)*r12*x5181))+((sj0*x5177))+((x5172*x5173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5182=((-1.0)*r01);
IkReal x5184 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5184)==0){
continue;
}
IkReal x5183=pow(x5184,-0.5);
CheckValue<IkReal> x5185 = IKatan2WithCheck(IkReal(x5182),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5185.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5185.value))));
IkReal gconst124=(x5182*x5183);
IkReal gconst125=((1.0)*r00*x5183);
CheckValue<IkReal> x5186 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5186.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5186.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5187=((-1.0)*r01);
CheckValue<IkReal> x5190 = IKatan2WithCheck(IkReal(x5187),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5190.valid){
continue;
}
IkReal x5188=((1.0)*(x5190.value));
IkReal x5189=x5183;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5188)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5188)));
IkReal gconst124=(x5187*x5189);
IkReal gconst125=((1.0)*r00*x5189);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x5191=((-1.0)*r01);
CheckValue<IkReal> x5194 = IKatan2WithCheck(IkReal(x5191),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5194.valid){
continue;
}
IkReal x5192=((1.0)*(x5194.value));
IkReal x5193=x5183;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5192)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5192)));
IkReal gconst124=(x5191*x5193);
IkReal gconst125=((1.0)*r00*x5193);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5195=((-1.0)*r01);
CheckValue<IkReal> x5198 = IKatan2WithCheck(IkReal(x5195),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5198.valid){
continue;
}
IkReal x5196=((1.0)*(x5198.value));
IkReal x5197=x5183;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5196)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5196)));
IkReal gconst124=(x5195*x5197);
IkReal gconst125=((1.0)*r00*x5197);
IkReal x5199=r02*r02;
IkReal x5200=(r12*sj0);
IkReal x5201=x5183;
IkReal x5202=(cj0*x5201);
j4eval[0]=((IKabs((((r02*x5200*x5201))+(((-1.0)*x5202))+((x5199*x5202)))))+(IKabs((x5200+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5203=((1.0)*gconst124);
CheckValue<IkReal> x5204 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*r11*sj0*x5203))+(((-1.0)*cj0*r01*x5203))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5204.valid){
continue;
}
CheckValue<IkReal> x5205=IKPowWithIntegerCheck(IKsign((((gconst124*r20))+((gconst125*r21)))),-1);
if(!x5205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5204.value)+(((1.5707963267949)*(x5205.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5206=IKsin(j4);
IkReal x5207=IKcos(j4);
IkReal x5208=(cj1*sj2);
IkReal x5209=((1.0)*x5207);
IkReal x5210=(gconst125*x5206);
IkReal x5211=(gconst124*x5207);
IkReal x5212=((1.0)*x5206);
IkReal x5213=((1.0)*cj2*sj1);
evalcond[0]=((((-1.0)*gconst124*r21*x5212))+((r20*x5210))+(((-1.0)*r22*x5209)));
evalcond[1]=((((-1.0)*r02*x5209))+sj0+(((-1.0)*gconst124*r01*x5212))+((r00*x5210)));
evalcond[2]=((((-1.0)*gconst124*r11*x5212))+((r10*x5210))+(((-1.0)*r12*x5209))+(((-1.0)*cj0)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x5212))+((cj1*cj2))+((r21*x5211))+(((-1.0)*gconst125*r20*x5209)));
evalcond[4]=(((r01*x5211))+(((-1.0)*cj0*x5213))+(((-1.0)*gconst125*r00*x5209))+((cj0*x5208))+(((-1.0)*r02*x5212)));
evalcond[5]=(((r11*x5211))+((sj0*x5208))+(((-1.0)*gconst125*r10*x5209))+(((-1.0)*sj0*x5213))+(((-1.0)*r12*x5212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5214=((1.0)*gconst124);
CheckValue<IkReal> x5215=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5214))+(((-1.0)*gconst125*r01)))),-1);
if(!x5215.valid){
continue;
}
CheckValue<IkReal> x5216 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x5214))+((cj0*gconst125*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5215.value)))+(x5216.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5217=IKsin(j4);
IkReal x5218=IKcos(j4);
IkReal x5219=(cj1*sj2);
IkReal x5220=((1.0)*x5218);
IkReal x5221=(gconst125*x5217);
IkReal x5222=(gconst124*x5218);
IkReal x5223=((1.0)*x5217);
IkReal x5224=((1.0)*cj2*sj1);
evalcond[0]=((((-1.0)*gconst124*r21*x5223))+(((-1.0)*r22*x5220))+((r20*x5221)));
evalcond[1]=(sj0+(((-1.0)*gconst124*r01*x5223))+(((-1.0)*r02*x5220))+((r00*x5221)));
evalcond[2]=((((-1.0)*gconst124*r11*x5223))+(((-1.0)*r12*x5220))+((r10*x5221))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst125*r20*x5220))+((r21*x5222))+((sj1*sj2))+(((-1.0)*r22*x5223))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r02*x5223))+((cj0*x5219))+((r01*x5222))+(((-1.0)*cj0*x5224))+(((-1.0)*gconst125*r00*x5220)));
evalcond[5]=((((-1.0)*sj0*x5224))+((sj0*x5219))+(((-1.0)*r12*x5223))+((r11*x5222))+(((-1.0)*gconst125*r10*x5220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5225=((1.0)*gconst124);
CheckValue<IkReal> x5226=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x5225))+(((-1.0)*gconst125*r11)))),-1);
if(!x5226.valid){
continue;
}
CheckValue<IkReal> x5227 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst125*r20*sj0))+(((-1.0)*r21*sj0*x5225)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5226.value)))+(x5227.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5228=IKsin(j4);
IkReal x5229=IKcos(j4);
IkReal x5230=(cj1*sj2);
IkReal x5231=((1.0)*x5229);
IkReal x5232=(gconst125*x5228);
IkReal x5233=(gconst124*x5229);
IkReal x5234=((1.0)*x5228);
IkReal x5235=((1.0)*cj2*sj1);
evalcond[0]=(((r20*x5232))+(((-1.0)*r22*x5231))+(((-1.0)*gconst124*r21*x5234)));
evalcond[1]=(sj0+(((-1.0)*r02*x5231))+((r00*x5232))+(((-1.0)*gconst124*r01*x5234)));
evalcond[2]=(((r10*x5232))+(((-1.0)*r12*x5231))+(((-1.0)*gconst124*r11*x5234))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x5234))+((sj1*sj2))+((r21*x5233))+(((-1.0)*gconst125*r20*x5231))+((cj1*cj2)));
evalcond[4]=(((cj0*x5230))+(((-1.0)*r02*x5234))+((r01*x5233))+(((-1.0)*gconst125*r00*x5231))+(((-1.0)*cj0*x5235)));
evalcond[5]=(((r11*x5233))+(((-1.0)*r12*x5234))+(((-1.0)*gconst125*r10*x5231))+((sj0*x5230))+(((-1.0)*sj0*x5235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5236=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5236;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x5236);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5237=((1.0)*sj5);
IkReal x5238=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5237)));
j4eval[0]=x5238;
j4eval[1]=IKsign(x5238);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x5237)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5239=cj5*cj5;
IkReal x5240=r01*r01;
IkReal x5241=(cj5*r00);
IkReal x5242=(r01*sj5);
IkReal x5243=((((-2.0)*x5241*x5242))+(((-1.0)*x5239*x5240))+x5240+((x5239*(r00*r00)))+(r02*r02));
j4eval[0]=x5243;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x5241))+x5242))));
j4eval[2]=IKsign(x5243);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5244=cj5*cj5;
IkReal x5245=r01*r01;
IkReal x5246=(r01*sj5);
IkReal x5247=(cj5*r00);
CheckValue<IkReal> x5248 = IKatan2WithCheck(IkReal(((((-1.0)*x5247))+x5246)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x5248.valid){
continue;
}
CheckValue<IkReal> x5249=IKPowWithIntegerCheck(IKsign(((((-2.0)*x5246*x5247))+x5245+(((-1.0)*x5244*x5245))+((x5244*(r00*r00)))+(r02*r02))),-1);
if(!x5249.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5248.value)+(((1.5707963267949)*(x5249.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5250=IKsin(j4);
IkReal x5251=IKcos(j4);
IkReal x5252=(cj5*r00);
IkReal x5253=(cj5*r20);
IkReal x5254=(cj5*r10);
IkReal x5255=((1.0)*x5251);
IkReal x5256=(sj5*x5251);
IkReal x5257=((1.0)*x5250);
IkReal x5258=(sj5*x5257);
evalcond[0]=(((x5250*x5253))+(((-1.0)*r22*x5255))+(((-1.0)*r21*x5258)));
evalcond[1]=((((-1.0)*r11*x5258))+((x5250*x5254))+(((-1.0)*r12*x5255)));
evalcond[2]=((((-1.0)*r02*x5257))+((r01*x5256))+(((-1.0)*x5252*x5255)));
evalcond[3]=((1.0)+(((-1.0)*r02*x5255))+((x5250*x5252))+(((-1.0)*r01*x5258)));
evalcond[4]=(((sj1*sj2))+((r21*x5256))+(((-1.0)*r22*x5257))+((cj1*cj2))+(((-1.0)*x5253*x5255)));
evalcond[5]=((((-1.0)*x5254*x5255))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x5257))+((r11*x5256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5259=((1.0)*sj5);
CheckValue<IkReal> x5260=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5259)))),-1);
if(!x5260.valid){
continue;
}
CheckValue<IkReal> x5261 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x5259)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5260.value)))+(x5261.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5262=IKsin(j4);
IkReal x5263=IKcos(j4);
IkReal x5264=(cj5*r00);
IkReal x5265=(cj5*r20);
IkReal x5266=(cj5*r10);
IkReal x5267=((1.0)*x5263);
IkReal x5268=(sj5*x5263);
IkReal x5269=((1.0)*x5262);
IkReal x5270=(sj5*x5269);
evalcond[0]=(((x5262*x5265))+(((-1.0)*r21*x5270))+(((-1.0)*r22*x5267)));
evalcond[1]=(((x5262*x5266))+(((-1.0)*r12*x5267))+(((-1.0)*r11*x5270)));
evalcond[2]=((((-1.0)*x5264*x5267))+((r01*x5268))+(((-1.0)*r02*x5269)));
evalcond[3]=((1.0)+(((-1.0)*r01*x5270))+((x5262*x5264))+(((-1.0)*r02*x5267)));
evalcond[4]=(((sj1*sj2))+((r21*x5268))+(((-1.0)*r22*x5269))+((cj1*cj2))+(((-1.0)*x5265*x5267)));
evalcond[5]=((((-1.0)*r12*x5269))+((r11*x5268))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x5266*x5267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5271 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5271.valid){
continue;
}
CheckValue<IkReal> x5272=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5271.value)+(((1.5707963267949)*(x5272.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5273=IKsin(j4);
IkReal x5274=IKcos(j4);
IkReal x5275=(cj5*r00);
IkReal x5276=(cj5*r20);
IkReal x5277=(cj5*r10);
IkReal x5278=((1.0)*x5274);
IkReal x5279=(sj5*x5274);
IkReal x5280=((1.0)*x5273);
IkReal x5281=(sj5*x5280);
evalcond[0]=(((x5273*x5276))+(((-1.0)*r21*x5281))+(((-1.0)*r22*x5278)));
evalcond[1]=(((x5273*x5277))+(((-1.0)*r11*x5281))+(((-1.0)*r12*x5278)));
evalcond[2]=((((-1.0)*x5275*x5278))+((r01*x5279))+(((-1.0)*r02*x5280)));
evalcond[3]=((1.0)+((x5273*x5275))+(((-1.0)*r01*x5281))+(((-1.0)*r02*x5278)));
evalcond[4]=((((-1.0)*r22*x5280))+((r21*x5279))+((sj1*sj2))+(((-1.0)*x5276*x5278))+((cj1*cj2)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x5280))+(((-1.0)*x5277*x5278))+((r11*x5279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5282=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5282;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x5282);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5283=((1.0)*sj5);
IkReal x5284=((((-1.0)*r20*x5283))+(((-1.0)*cj5*r21)));
j4eval[0]=x5284;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x5283))))));
j4eval[2]=IKsign(x5284);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5285=cj5*cj5;
IkReal x5286=r01*r01;
IkReal x5287=(r01*sj5);
IkReal x5288=(cj5*r00);
IkReal x5289=((((-1.0)*x5285*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x5286))+((x5285*x5286))+(((2.0)*x5287*x5288)));
j4eval[0]=x5289;
j4eval[1]=IKsign(x5289);
j4eval[2]=((IKabs(r02))+(IKabs((x5287+(((-1.0)*x5288))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5290=cj5*cj5;
IkReal x5291=r01*r01;
IkReal x5292=(r01*sj5);
IkReal x5293=(cj5*r00);
CheckValue<IkReal> x5294 = IKatan2WithCheck(IkReal((x5292+(((-1.0)*x5293)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x5294.valid){
continue;
}
CheckValue<IkReal> x5295=IKPowWithIntegerCheck(IKsign((((x5290*x5291))+(((-1.0)*(r02*r02)))+(((-1.0)*x5290*(r00*r00)))+(((-1.0)*x5291))+(((2.0)*x5292*x5293)))),-1);
if(!x5295.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5294.value)+(((1.5707963267949)*(x5295.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5296=IKsin(j4);
IkReal x5297=IKcos(j4);
IkReal x5298=(cj5*r00);
IkReal x5299=(cj5*r20);
IkReal x5300=(cj5*r10);
IkReal x5301=((1.0)*x5297);
IkReal x5302=(sj5*x5297);
IkReal x5303=((1.0)*x5296);
IkReal x5304=(sj5*x5303);
evalcond[0]=((((-1.0)*r22*x5301))+(((-1.0)*r21*x5304))+((x5296*x5299)));
evalcond[1]=((((-1.0)*r11*x5304))+(((-1.0)*r12*x5301))+((x5296*x5300)));
evalcond[2]=((((-1.0)*r02*x5303))+(((-1.0)*x5298*x5301))+((r01*x5302)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x5304))+(((-1.0)*r02*x5301))+((x5296*x5298)));
evalcond[4]=((((-1.0)*r22*x5303))+((r21*x5302))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*x5299*x5301)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r12*x5303))+(((-1.0)*x5300*x5301))+(((-1.0)*cj1*sj2))+((r11*x5302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5305=((1.0)*sj5);
CheckValue<IkReal> x5306 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x5305)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5306.valid){
continue;
}
CheckValue<IkReal> x5307=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5305))+(((-1.0)*cj5*r21)))),-1);
if(!x5307.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5306.value)+(((1.5707963267949)*(x5307.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5308=IKsin(j4);
IkReal x5309=IKcos(j4);
IkReal x5310=(cj5*r00);
IkReal x5311=(cj5*r20);
IkReal x5312=(cj5*r10);
IkReal x5313=((1.0)*x5309);
IkReal x5314=(sj5*x5309);
IkReal x5315=((1.0)*x5308);
IkReal x5316=(sj5*x5315);
evalcond[0]=(((x5308*x5311))+(((-1.0)*r21*x5316))+(((-1.0)*r22*x5313)));
evalcond[1]=((((-1.0)*r12*x5313))+(((-1.0)*r11*x5316))+((x5308*x5312)));
evalcond[2]=((((-1.0)*x5310*x5313))+((r01*x5314))+(((-1.0)*r02*x5315)));
evalcond[3]=((-1.0)+((x5308*x5310))+(((-1.0)*r01*x5316))+(((-1.0)*r02*x5313)));
evalcond[4]=(((r21*x5314))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*r22*x5315))+(((-1.0)*x5311*x5313)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r12*x5315))+(((-1.0)*x5312*x5313))+(((-1.0)*cj1*sj2))+((r11*x5314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5317=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5317.valid){
continue;
}
CheckValue<IkReal> x5318 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5317.value)))+(x5318.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5319=IKsin(j4);
IkReal x5320=IKcos(j4);
IkReal x5321=(cj5*r00);
IkReal x5322=(cj5*r20);
IkReal x5323=(cj5*r10);
IkReal x5324=((1.0)*x5320);
IkReal x5325=(sj5*x5320);
IkReal x5326=((1.0)*x5319);
IkReal x5327=(sj5*x5326);
evalcond[0]=((((-1.0)*r21*x5327))+(((-1.0)*r22*x5324))+((x5319*x5322)));
evalcond[1]=((((-1.0)*r12*x5324))+(((-1.0)*r11*x5327))+((x5319*x5323)));
evalcond[2]=((((-1.0)*x5321*x5324))+(((-1.0)*r02*x5326))+((r01*x5325)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x5324))+((x5319*x5321))+(((-1.0)*r01*x5327)));
evalcond[4]=((((-1.0)*r22*x5326))+((sj1*sj2))+(((-1.0)*x5322*x5324))+((cj1*cj2))+((r21*x5325)));
evalcond[5]=(((cj2*sj1))+((r11*x5325))+(((-1.0)*x5323*x5324))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x5326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5328=((-1.0)*r10);
IkReal x5330 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5330)==0){
continue;
}
IkReal x5329=pow(x5330,-0.5);
CheckValue<IkReal> x5331 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5328),IKFAST_ATAN2_MAGTHRESH);
if(!x5331.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5331.value));
IkReal gconst127=(r11*x5329);
IkReal gconst128=(x5328*x5329);
CheckValue<IkReal> x5332 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5332.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5332.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5333=((-1.0)*r10);
IkReal x5334=x5329;
CheckValue<IkReal> x5336 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5333),IKFAST_ATAN2_MAGTHRESH);
if(!x5336.valid){
continue;
}
IkReal x5335=((-1.0)*(x5336.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst127;
cj5=gconst128;
j5=x5335;
IkReal gconst126=x5335;
IkReal gconst127=(r11*x5334);
IkReal gconst128=(x5333*x5334);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5337=((1.0)*gconst127);
CheckValue<IkReal> x5338 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*cj0*r01*x5337))+(((-1.0)*r11*sj0*x5337))+((cj0*gconst128*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5338.valid){
continue;
}
CheckValue<IkReal> x5339=IKPowWithIntegerCheck(IKsign((((gconst127*r20))+((gconst128*r21)))),-1);
if(!x5339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5338.value)+(((1.5707963267949)*(x5339.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5340=IKsin(j4);
IkReal x5341=IKcos(j4);
IkReal x5342=(gconst128*r10);
IkReal x5343=(cj1*sj2);
IkReal x5344=((1.0)*x5341);
IkReal x5345=(gconst127*x5341);
IkReal x5346=((1.0)*cj2*sj1);
IkReal x5347=((1.0)*x5340);
IkReal x5348=(gconst128*x5340);
evalcond[0]=(((r20*x5348))+(((-1.0)*gconst127*r21*x5347))+(((-1.0)*r22*x5344)));
evalcond[1]=((((-1.0)*r02*x5344))+sj0+((r00*x5348))+(((-1.0)*gconst127*r01*x5347)));
evalcond[2]=((((-1.0)*r12*x5344))+(((-1.0)*gconst127*r11*x5347))+(((-1.0)*cj0))+((x5340*x5342)));
evalcond[3]=((((-1.0)*gconst128*r20*x5344))+((sj1*sj2))+(((-1.0)*r22*x5347))+((cj1*cj2))+((r21*x5345)));
evalcond[4]=((((-1.0)*r02*x5347))+((r01*x5345))+((cj0*x5343))+(((-1.0)*cj0*x5346))+(((-1.0)*gconst128*r00*x5344)));
evalcond[5]=(((sj0*x5343))+((r11*x5345))+(((-1.0)*r12*x5347))+(((-1.0)*sj0*x5346))+(((-1.0)*x5342*x5344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5349=((1.0)*gconst127);
CheckValue<IkReal> x5350=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r01))+(((-1.0)*r00*x5349)))),-1);
if(!x5350.valid){
continue;
}
CheckValue<IkReal> x5351 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst128*r20))+(((-1.0)*cj0*r21*x5349)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5351.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5350.value)))+(x5351.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5352=IKsin(j4);
IkReal x5353=IKcos(j4);
IkReal x5354=(gconst128*r10);
IkReal x5355=(cj1*sj2);
IkReal x5356=((1.0)*x5353);
IkReal x5357=(gconst127*x5353);
IkReal x5358=((1.0)*cj2*sj1);
IkReal x5359=((1.0)*x5352);
IkReal x5360=(gconst128*x5352);
evalcond[0]=((((-1.0)*gconst127*r21*x5359))+((r20*x5360))+(((-1.0)*r22*x5356)));
evalcond[1]=(sj0+(((-1.0)*r02*x5356))+((r00*x5360))+(((-1.0)*gconst127*r01*x5359)));
evalcond[2]=((((-1.0)*r12*x5356))+((x5352*x5354))+(((-1.0)*cj0))+(((-1.0)*gconst127*r11*x5359)));
evalcond[3]=((((-1.0)*gconst128*r20*x5356))+((sj1*sj2))+(((-1.0)*r22*x5359))+((cj1*cj2))+((r21*x5357)));
evalcond[4]=((((-1.0)*r02*x5359))+((r01*x5357))+(((-1.0)*gconst128*r00*x5356))+((cj0*x5355))+(((-1.0)*cj0*x5358)));
evalcond[5]=(((sj0*x5355))+((r11*x5357))+(((-1.0)*r12*x5359))+(((-1.0)*x5354*x5356))+(((-1.0)*sj0*x5358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5361=((-1.0)*r11);
IkReal x5363 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5363)==0){
continue;
}
IkReal x5362=pow(x5363,-0.5);
CheckValue<IkReal> x5364 = IKatan2WithCheck(IkReal(x5361),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5364.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5364.value))));
IkReal gconst130=(x5361*x5362);
IkReal gconst131=((1.0)*r10*x5362);
CheckValue<IkReal> x5365 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5365.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5365.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x5366=((-1.0)*r11);
CheckValue<IkReal> x5369 = IKatan2WithCheck(IkReal(x5366),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5369.valid){
continue;
}
IkReal x5367=((1.0)*(x5369.value));
IkReal x5368=x5362;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5367)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5367)));
IkReal gconst130=(x5366*x5368);
IkReal gconst131=((1.0)*r10*x5368);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5370=((-1.0)*r11);
CheckValue<IkReal> x5373 = IKatan2WithCheck(IkReal(x5370),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5373.valid){
continue;
}
IkReal x5371=((1.0)*(x5373.value));
IkReal x5372=x5362;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5371)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5371)));
IkReal gconst130=(x5370*x5372);
IkReal gconst131=((1.0)*r10*x5372);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5374=((-1.0)*r11);
CheckValue<IkReal> x5377 = IKatan2WithCheck(IkReal(x5374),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5377.valid){
continue;
}
IkReal x5375=((1.0)*(x5377.value));
IkReal x5376=x5362;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5375)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5375)));
IkReal gconst130=(x5374*x5376);
IkReal gconst131=((1.0)*r10*x5376);
IkReal x5378=r12*r12;
IkReal x5379=(cj0*r02);
IkReal x5380=x5362;
IkReal x5381=(sj0*x5380);
j4eval[0]=((IKabs((((x5378*x5381))+((r12*x5379*x5380))+(((-1.0)*x5381)))))+(IKabs((x5379+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5382=((1.0)*gconst130);
CheckValue<IkReal> x5383 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x5382))+((gconst131*r10*sj0))+(((-1.0)*cj0*r01*x5382))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5383.valid){
continue;
}
CheckValue<IkReal> x5384=IKPowWithIntegerCheck(IKsign((((gconst131*r21))+((gconst130*r20)))),-1);
if(!x5384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5383.value)+(((1.5707963267949)*(x5384.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5385=IKsin(j4);
IkReal x5386=IKcos(j4);
IkReal x5387=(gconst131*r10);
IkReal x5388=(gconst131*r20);
IkReal x5389=(gconst131*r00);
IkReal x5390=(cj1*sj2);
IkReal x5391=((1.0)*x5386);
IkReal x5392=(gconst130*x5386);
IkReal x5393=((1.0)*cj2*sj1);
IkReal x5394=((1.0)*x5385);
evalcond[0]=(((x5385*x5388))+(((-1.0)*r22*x5391))+(((-1.0)*gconst130*r21*x5394)));
evalcond[1]=((((-1.0)*gconst130*r01*x5394))+sj0+(((-1.0)*r02*x5391))+((x5385*x5389)));
evalcond[2]=((((-1.0)*gconst130*r11*x5394))+((x5385*x5387))+(((-1.0)*r12*x5391))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x5388*x5391))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*r22*x5394))+((r21*x5392)));
evalcond[4]=((((-1.0)*cj0*x5393))+((cj0*x5390))+(((-1.0)*r02*x5394))+(((-1.0)*x5389*x5391))+((r01*x5392)));
evalcond[5]=((((-1.0)*sj0*x5393))+((r11*x5392))+(((-1.0)*x5387*x5391))+(((-1.0)*r12*x5394))+((sj0*x5390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5395=((1.0)*gconst130);
CheckValue<IkReal> x5396 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst131*r20))+(((-1.0)*cj0*r21*x5395)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5396.valid){
continue;
}
CheckValue<IkReal> x5397=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r01))+(((-1.0)*r00*x5395)))),-1);
if(!x5397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5396.value)+(((1.5707963267949)*(x5397.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5398=IKsin(j4);
IkReal x5399=IKcos(j4);
IkReal x5400=(gconst131*r10);
IkReal x5401=(gconst131*r20);
IkReal x5402=(gconst131*r00);
IkReal x5403=(cj1*sj2);
IkReal x5404=((1.0)*x5399);
IkReal x5405=(gconst130*x5399);
IkReal x5406=((1.0)*cj2*sj1);
IkReal x5407=((1.0)*x5398);
evalcond[0]=(((x5398*x5401))+(((-1.0)*gconst130*r21*x5407))+(((-1.0)*r22*x5404)));
evalcond[1]=(sj0+(((-1.0)*gconst130*r01*x5407))+(((-1.0)*r02*x5404))+((x5398*x5402)));
evalcond[2]=(((x5398*x5400))+(((-1.0)*r12*x5404))+(((-1.0)*gconst130*r11*x5407))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x5405))+((sj1*sj2))+(((-1.0)*r22*x5407))+((cj1*cj2))+(((-1.0)*x5401*x5404)));
evalcond[4]=((((-1.0)*r02*x5407))+(((-1.0)*x5402*x5404))+(((-1.0)*cj0*x5406))+((cj0*x5403))+((r01*x5405)));
evalcond[5]=((((-1.0)*x5400*x5404))+((sj0*x5403))+(((-1.0)*r12*x5407))+(((-1.0)*sj0*x5406))+((r11*x5405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5408=((1.0)*gconst130);
CheckValue<IkReal> x5409 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x5408))+((gconst131*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5409.valid){
continue;
}
CheckValue<IkReal> x5410=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r11))+(((-1.0)*r10*x5408)))),-1);
if(!x5410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5409.value)+(((1.5707963267949)*(x5410.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5411=IKsin(j4);
IkReal x5412=IKcos(j4);
IkReal x5413=(gconst131*r10);
IkReal x5414=(gconst131*r20);
IkReal x5415=(gconst131*r00);
IkReal x5416=(cj1*sj2);
IkReal x5417=((1.0)*x5412);
IkReal x5418=(gconst130*x5412);
IkReal x5419=((1.0)*cj2*sj1);
IkReal x5420=((1.0)*x5411);
evalcond[0]=(((x5411*x5414))+(((-1.0)*r22*x5417))+(((-1.0)*gconst130*r21*x5420)));
evalcond[1]=((((-1.0)*r02*x5417))+sj0+((x5411*x5415))+(((-1.0)*gconst130*r01*x5420)));
evalcond[2]=((((-1.0)*gconst130*r11*x5420))+((x5411*x5413))+(((-1.0)*r12*x5417))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x5414*x5417))+((sj1*sj2))+((cj1*cj2))+((r21*x5418))+(((-1.0)*r22*x5420)));
evalcond[4]=((((-1.0)*x5415*x5417))+(((-1.0)*cj0*x5419))+((cj0*x5416))+((r01*x5418))+(((-1.0)*r02*x5420)));
evalcond[5]=(((r11*x5418))+((sj0*x5416))+(((-1.0)*sj0*x5419))+(((-1.0)*r12*x5420))+(((-1.0)*x5413*x5417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5421=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5421;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x5421);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5422=((1.0)*sj5);
IkReal x5423=((((-1.0)*r00*x5422))+(((-1.0)*cj5*r01)));
j4eval[0]=x5423;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x5422)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5423);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5424=cj5*cj5;
IkReal x5425=r11*r11;
IkReal x5426=(cj5*r10);
IkReal x5427=(r11*sj5);
IkReal x5428=((((2.0)*x5426*x5427))+(((-1.0)*x5424*(r10*r10)))+((x5424*x5425))+(((-1.0)*(r12*r12)))+(((-1.0)*x5425)));
j4eval[0]=x5428;
j4eval[1]=((IKabs(r12))+(IKabs((x5427+(((-1.0)*x5426))))));
j4eval[2]=IKsign(x5428);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5429=cj5*cj5;
IkReal x5430=r11*r11;
IkReal x5431=(cj5*r10);
IkReal x5432=(r11*sj5);
CheckValue<IkReal> x5433 = IKatan2WithCheck(IkReal((x5432+(((-1.0)*x5431)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x5433.valid){
continue;
}
CheckValue<IkReal> x5434=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5430))+(((2.0)*x5431*x5432))+(((-1.0)*(r12*r12)))+((x5429*x5430))+(((-1.0)*x5429*(r10*r10))))),-1);
if(!x5434.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5433.value)+(((1.5707963267949)*(x5434.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5435=IKsin(j4);
IkReal x5436=IKcos(j4);
IkReal x5437=(cj5*r00);
IkReal x5438=((1.0)*x5436);
IkReal x5439=(sj5*x5436);
IkReal x5440=(cj5*x5435);
IkReal x5441=((1.0)*x5435);
IkReal x5442=(sj5*x5441);
evalcond[0]=(((r20*x5440))+(((-1.0)*r22*x5438))+(((-1.0)*r21*x5442)));
evalcond[1]=((((-1.0)*r02*x5438))+(((-1.0)*r01*x5442))+((x5435*x5437)));
evalcond[2]=((((-1.0)*cj5*r10*x5438))+(((-1.0)*r12*x5441))+((r11*x5439)));
evalcond[3]=((-1.0)+((r10*x5440))+(((-1.0)*r11*x5442))+(((-1.0)*r12*x5438)));
evalcond[4]=((((-1.0)*cj5*r20*x5438))+((sj1*sj2))+(((-1.0)*r22*x5441))+((cj1*cj2))+((r21*x5439)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x5437*x5438))+(((-1.0)*r02*x5441))+((r01*x5439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5443=((1.0)*sj5);
CheckValue<IkReal> x5444=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5443))+(((-1.0)*cj5*r01)))),-1);
if(!x5444.valid){
continue;
}
CheckValue<IkReal> x5445 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x5443)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5444.value)))+(x5445.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5446=IKsin(j4);
IkReal x5447=IKcos(j4);
IkReal x5448=(cj5*r00);
IkReal x5449=((1.0)*x5447);
IkReal x5450=(sj5*x5447);
IkReal x5451=(cj5*x5446);
IkReal x5452=((1.0)*x5446);
IkReal x5453=(sj5*x5452);
evalcond[0]=((((-1.0)*r22*x5449))+(((-1.0)*r21*x5453))+((r20*x5451)));
evalcond[1]=(((x5446*x5448))+(((-1.0)*r02*x5449))+(((-1.0)*r01*x5453)));
evalcond[2]=((((-1.0)*r12*x5452))+(((-1.0)*cj5*r10*x5449))+((r11*x5450)));
evalcond[3]=((-1.0)+((r10*x5451))+(((-1.0)*r12*x5449))+(((-1.0)*r11*x5453)));
evalcond[4]=(((r21*x5450))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*r22*x5452))+(((-1.0)*cj5*r20*x5449)));
evalcond[5]=(((r01*x5450))+(((-1.0)*x5448*x5449))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r02*x5452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5454=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5454.valid){
continue;
}
CheckValue<IkReal> x5455 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5455.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5454.value)))+(x5455.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5456=IKsin(j4);
IkReal x5457=IKcos(j4);
IkReal x5458=(cj5*r00);
IkReal x5459=((1.0)*x5457);
IkReal x5460=(sj5*x5457);
IkReal x5461=(cj5*x5456);
IkReal x5462=((1.0)*x5456);
IkReal x5463=(sj5*x5462);
evalcond[0]=((((-1.0)*r21*x5463))+(((-1.0)*r22*x5459))+((r20*x5461)));
evalcond[1]=((((-1.0)*r01*x5463))+((x5456*x5458))+(((-1.0)*r02*x5459)));
evalcond[2]=(((r11*x5460))+(((-1.0)*r12*x5462))+(((-1.0)*cj5*r10*x5459)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5459))+(((-1.0)*r11*x5463))+((r10*x5461)));
evalcond[4]=(((sj1*sj2))+((r21*x5460))+(((-1.0)*cj5*r20*x5459))+((cj1*cj2))+(((-1.0)*r22*x5462)));
evalcond[5]=((((-1.0)*x5458*x5459))+((r01*x5460))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r02*x5462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5464=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5464;
j4eval[1]=IKsign(x5464);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5465=((1.0)*sj5);
IkReal x5466=((((-1.0)*r20*x5465))+(((-1.0)*cj5*r21)));
j4eval[0]=x5466;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x5465))+((cj5*r00))))));
j4eval[2]=IKsign(x5466);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5467=cj5*cj5;
IkReal x5468=r11*r11;
IkReal x5469=(r11*sj5);
IkReal x5470=(cj5*r10);
IkReal x5471=((r12*r12)+x5468+(((-1.0)*x5467*x5468))+((x5467*(r10*r10)))+(((-2.0)*x5469*x5470)));
j4eval[0]=x5471;
j4eval[1]=IKsign(x5471);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5470))+x5469))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5472=cj5*cj5;
IkReal x5473=r11*r11;
IkReal x5474=(cj5*r10);
IkReal x5475=(r11*sj5);
CheckValue<IkReal> x5476 = IKatan2WithCheck(IkReal(((((-1.0)*x5474))+x5475)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x5476.valid){
continue;
}
CheckValue<IkReal> x5477=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x5474*x5475))+x5473+((x5472*(r10*r10)))+(((-1.0)*x5472*x5473)))),-1);
if(!x5477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5476.value)+(((1.5707963267949)*(x5477.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5478=IKsin(j4);
IkReal x5479=IKcos(j4);
IkReal x5480=(cj5*r00);
IkReal x5481=((1.0)*x5479);
IkReal x5482=(sj5*x5479);
IkReal x5483=(cj5*x5478);
IkReal x5484=((1.0)*x5478);
IkReal x5485=(sj5*x5484);
evalcond[0]=(((r20*x5483))+(((-1.0)*r21*x5485))+(((-1.0)*r22*x5481)));
evalcond[1]=(((x5478*x5480))+(((-1.0)*r01*x5485))+(((-1.0)*r02*x5481)));
evalcond[2]=((((-1.0)*r12*x5484))+((r11*x5482))+(((-1.0)*cj5*r10*x5481)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5481))+(((-1.0)*r11*x5485))+((r10*x5483)));
evalcond[4]=((((-1.0)*r22*x5484))+((sj1*sj2))+((r21*x5482))+(((-1.0)*cj5*r20*x5481))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+((r01*x5482))+(((-1.0)*cj1*sj2))+(((-1.0)*x5480*x5481))+(((-1.0)*r02*x5484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5486=((1.0)*sj5);
CheckValue<IkReal> x5487 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x5486))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5487.valid){
continue;
}
CheckValue<IkReal> x5488=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5486))+(((-1.0)*cj5*r21)))),-1);
if(!x5488.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5487.value)+(((1.5707963267949)*(x5488.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5489=IKsin(j4);
IkReal x5490=IKcos(j4);
IkReal x5491=(cj5*r00);
IkReal x5492=((1.0)*x5490);
IkReal x5493=(sj5*x5490);
IkReal x5494=(cj5*x5489);
IkReal x5495=((1.0)*x5489);
IkReal x5496=(sj5*x5495);
evalcond[0]=(((r20*x5494))+(((-1.0)*r22*x5492))+(((-1.0)*r21*x5496)));
evalcond[1]=(((x5489*x5491))+(((-1.0)*r01*x5496))+(((-1.0)*r02*x5492)));
evalcond[2]=((((-1.0)*cj5*r10*x5492))+(((-1.0)*r12*x5495))+((r11*x5493)));
evalcond[3]=((1.0)+(((-1.0)*r11*x5496))+(((-1.0)*r12*x5492))+((r10*x5494)));
evalcond[4]=(((r21*x5493))+(((-1.0)*r22*x5495))+(((-1.0)*cj5*r20*x5492))+((sj1*sj2))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+((r01*x5493))+(((-1.0)*x5491*x5492))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x5495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5497=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5497.valid){
continue;
}
CheckValue<IkReal> x5498 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5497.value)))+(x5498.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5499=IKsin(j4);
IkReal x5500=IKcos(j4);
IkReal x5501=(cj5*r00);
IkReal x5502=((1.0)*x5500);
IkReal x5503=(sj5*x5500);
IkReal x5504=(cj5*x5499);
IkReal x5505=((1.0)*x5499);
IkReal x5506=(sj5*x5505);
evalcond[0]=((((-1.0)*r22*x5502))+((r20*x5504))+(((-1.0)*r21*x5506)));
evalcond[1]=((((-1.0)*r01*x5506))+(((-1.0)*r02*x5502))+((x5499*x5501)));
evalcond[2]=((((-1.0)*r12*x5505))+((r11*x5503))+(((-1.0)*cj5*r10*x5502)));
evalcond[3]=((1.0)+((r10*x5504))+(((-1.0)*r12*x5502))+(((-1.0)*r11*x5506)));
evalcond[4]=((((-1.0)*r22*x5505))+((r21*x5503))+((sj1*sj2))+(((-1.0)*cj5*r20*x5502))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*x5501*x5502))+(((-1.0)*r02*x5505))+(((-1.0)*cj1*sj2))+((r01*x5503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5507=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5507);
rxp0_2=(py*r00);
rxp1_0=(r21*x5507);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5508=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5508);
rxp0_2=(py*r00);
rxp1_0=(r21*x5508);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5509=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5509);
rxp0_2=(py*r00);
rxp1_0=(r21*x5509);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5512=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x5512.valid){
continue;
}
IkReal x5510=x5512.value;
IkReal x5511=(cj0*x5510);
cj4array[0]=(((cj2*sj1*x5511))+(((-1.0)*cj1*sj2*x5511)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5513=IKsin(j4);
IkReal x5514=IKcos(j4);
IkReal x5515=(cj5*r20);
IkReal x5516=((1.0)*x5514);
IkReal x5517=((1.0)*sj5*x5513);
evalcond[0]=((-1.0)*r12*x5513);
evalcond[1]=((((-1.0)*r12*x5516))+(((-1.0)*cj0)));
evalcond[2]=(((x5513*x5515))+(((-1.0)*r21*x5517)));
evalcond[3]=((((-1.0)*r01*x5517))+((cj5*r00*x5513)));
evalcond[4]=(((r21*sj5*x5514))+(((-1.0)*x5515*x5516))+((sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5520=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x5520.valid){
continue;
}
IkReal x5518=x5520.value;
IkReal x5519=((1.0)*x5518);
cj4array[0]=((((-1.0)*cj1*cj2*x5519))+(((-1.0)*sj1*sj2*x5519)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5521=IKsin(j4);
IkReal x5522=IKcos(j4);
IkReal x5523=(cj5*r00);
IkReal x5524=(r01*sj5);
IkReal x5525=((1.0)*cj0);
IkReal x5526=((1.0)*x5522);
IkReal x5527=((1.0)*x5521);
evalcond[0]=((-1.0)*r12*x5521);
evalcond[1]=((((-1.0)*x5525))+(((-1.0)*r12*x5526)));
evalcond[2]=((((-1.0)*r21*sj5*x5527))+((cj5*r20*x5521)));
evalcond[3]=(((x5521*x5523))+(((-1.0)*x5524*x5527)));
evalcond[4]=((((-1.0)*x5523*x5526))+(((-1.0)*cj2*sj1*x5525))+((x5522*x5524))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5528=IKPowWithIntegerCheck(r12,-1);
if(!x5528.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x5528.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5529=IKsin(j4);
IkReal x5530=IKcos(j4);
IkReal x5531=(sj5*x5530);
IkReal x5532=(cj5*x5529);
IkReal x5533=((1.0)*cj5*x5530);
IkReal x5534=((1.0)*sj5*x5529);
evalcond[0]=((-1.0)*r12*x5529);
evalcond[1]=((((-1.0)*r21*x5534))+((r20*x5532)));
evalcond[2]=(((r00*x5532))+(((-1.0)*r01*x5534)));
evalcond[3]=(((sj1*sj2))+((r21*x5531))+(((-1.0)*r20*x5533))+((cj1*cj2)));
evalcond[4]=((((-1.0)*cj0*cj2*sj1))+((r01*x5531))+((cj0*cj1*sj2))+(((-1.0)*r00*x5533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5535=((1.0)*sj5);
CheckValue<IkReal> x5536=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5536.valid){
continue;
}
CheckValue<IkReal> x5537 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*cj5*r00))+(((-1.0)*cj0*r01*x5535))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x5535)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5537.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5536.value)))+(x5537.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5538=IKsin(j4);
IkReal x5539=IKcos(j4);
IkReal x5540=(cj5*r00);
IkReal x5541=(cj1*sj2);
IkReal x5542=((1.0)*x5539);
IkReal x5543=(sj5*x5539);
IkReal x5544=(cj5*x5538);
IkReal x5545=((1.0)*cj2*sj1);
IkReal x5546=((1.0)*x5538);
IkReal x5547=(sj5*x5546);
evalcond[0]=(((r20*x5544))+(((-1.0)*r22*x5542))+(((-1.0)*r21*x5547)));
evalcond[1]=(((x5538*x5540))+sj0+(((-1.0)*r02*x5542))+(((-1.0)*r01*x5547)));
evalcond[2]=(((r10*x5544))+(((-1.0)*r11*x5547))+(((-1.0)*r12*x5542))+(((-1.0)*cj0)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj5*r20*x5542))+((cj1*cj2))+(((-1.0)*r22*x5546))+((r21*x5543)));
evalcond[4]=(((cj0*x5541))+(((-1.0)*cj0*x5545))+(((-1.0)*r02*x5546))+(((-1.0)*x5540*x5542))+((r01*x5543)));
evalcond[5]=(((sj0*x5541))+((r11*x5543))+(((-1.0)*cj5*r10*x5542))+(((-1.0)*r12*x5546))+(((-1.0)*sj0*x5545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5548=((1.0)*sj5);
CheckValue<IkReal> x5549=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5548))+(((-1.0)*cj5*r01)))),-1);
if(!x5549.valid){
continue;
}
CheckValue<IkReal> x5550 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x5548)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5549.value)))+(x5550.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5551=IKsin(j4);
IkReal x5552=IKcos(j4);
IkReal x5553=(cj5*r00);
IkReal x5554=(cj1*sj2);
IkReal x5555=((1.0)*x5552);
IkReal x5556=(sj5*x5552);
IkReal x5557=(cj5*x5551);
IkReal x5558=((1.0)*cj2*sj1);
IkReal x5559=((1.0)*x5551);
IkReal x5560=(sj5*x5559);
evalcond[0]=(((r20*x5557))+(((-1.0)*r22*x5555))+(((-1.0)*r21*x5560)));
evalcond[1]=(sj0+((x5551*x5553))+(((-1.0)*r01*x5560))+(((-1.0)*r02*x5555)));
evalcond[2]=((((-1.0)*r11*x5560))+(((-1.0)*r12*x5555))+((r10*x5557))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x5556))+((sj1*sj2))+(((-1.0)*r22*x5559))+((cj1*cj2))+(((-1.0)*cj5*r20*x5555)));
evalcond[4]=(((r01*x5556))+(((-1.0)*x5553*x5555))+((cj0*x5554))+(((-1.0)*cj0*x5558))+(((-1.0)*r02*x5559)));
evalcond[5]=((((-1.0)*sj0*x5558))+((r11*x5556))+((sj0*x5554))+(((-1.0)*cj5*r10*x5555))+(((-1.0)*r12*x5559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5561=((1.0)*sj5);
CheckValue<IkReal> x5562=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5561)))),-1);
if(!x5562.valid){
continue;
}
CheckValue<IkReal> x5563 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5561)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5562.value)))+(x5563.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5564=IKsin(j4);
IkReal x5565=IKcos(j4);
IkReal x5566=(cj5*r00);
IkReal x5567=(cj1*sj2);
IkReal x5568=((1.0)*x5565);
IkReal x5569=(sj5*x5565);
IkReal x5570=(cj5*x5564);
IkReal x5571=((1.0)*cj2*sj1);
IkReal x5572=((1.0)*x5564);
IkReal x5573=(sj5*x5572);
evalcond[0]=((((-1.0)*r22*x5568))+(((-1.0)*r21*x5573))+((r20*x5570)));
evalcond[1]=(sj0+((x5564*x5566))+(((-1.0)*r01*x5573))+(((-1.0)*r02*x5568)));
evalcond[2]=((((-1.0)*r11*x5573))+(((-1.0)*r12*x5568))+((r10*x5570))+(((-1.0)*cj0)));
evalcond[3]=(((sj1*sj2))+((r21*x5569))+(((-1.0)*cj5*r20*x5568))+((cj1*cj2))+(((-1.0)*r22*x5572)));
evalcond[4]=(((cj0*x5567))+(((-1.0)*cj0*x5571))+(((-1.0)*r02*x5572))+(((-1.0)*x5566*x5568))+((r01*x5569)));
evalcond[5]=((((-1.0)*sj0*x5571))+(((-1.0)*r12*x5572))+((r11*x5569))+((sj0*x5567))+(((-1.0)*cj5*r10*x5568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5574=cj5*cj5;
IkReal x5575=r21*r21;
IkReal x5576=(sj1*sj2);
IkReal x5577=(cj1*cj2);
IkReal x5578=(cj5*r20);
IkReal x5579=((1.0)*r21*sj5);
CheckValue<IkReal> x5580=IKPowWithIntegerCheck(IKsign((x5575+(r22*r22)+(((-2.0)*r21*sj5*x5578))+(((-1.0)*x5574*x5575))+((x5574*(r20*r20))))),-1);
if(!x5580.valid){
continue;
}
CheckValue<IkReal> x5581 = IKatan2WithCheck(IkReal((((r22*x5577))+((r22*x5576)))),IkReal((((x5577*x5578))+((x5576*x5578))+(((-1.0)*x5576*x5579))+(((-1.0)*x5577*x5579)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5581.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5580.value)))+(x5581.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x5582=IKsin(j4);
IkReal x5583=IKcos(j4);
IkReal x5584=(cj5*r20);
IkReal x5585=(r21*sj5);
IkReal x5586=((1.0)*x5583);
IkReal x5587=((1.0)*x5582);
evalcond[0]=((((-1.0)*x5585*x5587))+((x5582*x5584))+(((-1.0)*r22*x5586)));
evalcond[1]=(((sj1*sj2))+(((-1.0)*x5584*x5586))+((x5583*x5585))+((cj1*cj2))+(((-1.0)*r22*x5587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5588=(cj5*sj4);
IkReal x5589=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x5588))+((r01*x5589))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x5589))+((r10*x5588))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x5588))+((r01*x5589))+((cj4*r02))))+IKsqr(((((-1.0)*r11*x5589))+((r10*x5588))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x5588))+((r01*x5589))+((cj4*r02))), ((((-1.0)*r11*x5589))+((r10*x5588))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x5590=IKcos(j0);
IkReal x5591=IKsin(j0);
IkReal x5592=((0.376)*sj1);
IkReal x5593=(cj5*r00);
IkReal x5594=(cj5*r01);
IkReal x5595=((1.0)*sj4);
IkReal x5596=(r01*sj5);
IkReal x5597=((1.0)*cj4);
IkReal x5598=((0.376)*sj2);
IkReal x5599=((0.408)*sj1);
IkReal x5600=(cj5*r10);
IkReal x5601=(r00*sj5);
IkReal x5602=(cj5*r11);
IkReal x5603=(r11*sj5);
IkReal x5604=(r10*sj5);
IkReal x5605=(cj2*x5591);
IkReal x5606=(cj1*x5590);
IkReal x5607=(sj1*x5590);
IkReal x5608=(cj1*x5591);
evalcond[0]=(x5591+(((-1.0)*x5595*x5596))+(((-1.0)*r02*x5597))+((sj4*x5593)));
evalcond[1]=((((-1.0)*r12*x5597))+(((-1.0)*x5590))+((sj4*x5600))+(((-1.0)*x5595*x5603)));
evalcond[2]=(((sj2*x5607))+x5601+x5594+((cj2*x5606)));
evalcond[3]=(x5604+x5602+((sj1*sj2*x5591))+((cj1*x5605)));
evalcond[4]=(((sj2*x5606))+(((-1.0)*cj2*x5607))+(((-1.0)*x5593*x5597))+(((-1.0)*r02*x5595))+((cj4*x5596)));
evalcond[5]=(((sj2*x5608))+(((-1.0)*r12*x5595))+(((-1.0)*x5597*x5600))+(((-1.0)*sj1*x5605))+((cj4*x5603)));
evalcond[6]=((((-1.0)*x5590*x5599))+(((8.9e-7)*x5590))+(((1.97e-6)*x5606))+(((-1.0)*cj2*x5590*x5592))+(((-1.0)*px))+(((0.1025)*x5601))+(((0.1215)*x5591))+(((0.1025)*x5594))+((x5598*x5606)));
evalcond[7]=((((-1.0)*x5592*x5605))+(((8.9e-7)*x5591))+(((1.97e-6)*x5608))+(((-1.0)*py))+(((0.1025)*x5602))+(((0.1025)*x5604))+(((-0.1215)*x5590))+(((-1.0)*x5591*x5599))+((x5598*x5608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5609=((1.0)*cj5);
IkReal x5610=((1.0)*sj5);
CheckValue<IkReal> x5611 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5610))+(((-1.0)*r11*x5609)))),IkReal(((((-1.0)*r01*x5609))+(((-1.0)*r00*x5610)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5611.valid){
continue;
}
CheckValue<IkReal> x5612=IKPowWithIntegerCheck(IKsign((((sj1*sj2))+((cj1*cj2)))),-1);
if(!x5612.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x5611.value)+(((1.5707963267949)*(x5612.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5613=IKcos(j0);
IkReal x5614=IKsin(j0);
IkReal x5615=((0.376)*sj1);
IkReal x5616=(cj5*r01);
IkReal x5617=((0.376)*sj2);
IkReal x5618=(r00*sj5);
IkReal x5619=(cj5*r11);
IkReal x5620=(r10*sj5);
IkReal x5621=(cj2*x5614);
IkReal x5622=(cj1*x5613);
IkReal x5623=(cj1*x5614);
IkReal x5624=(sj1*x5614);
IkReal x5625=(sj1*x5613);
evalcond[0]=(x5618+x5616+((sj2*x5625))+((cj2*x5622)));
evalcond[1]=(x5620+x5619+((sj2*x5624))+((cj1*x5621)));
evalcond[2]=((((-1.0)*cj2*x5613*x5615))+((x5617*x5622))+(((1.97e-6)*x5622))+(((-1.0)*px))+(((0.1025)*x5618))+(((0.1025)*x5616))+(((8.9e-7)*x5613))+(((0.1215)*x5614))+(((-0.408)*x5625)));
evalcond[3]=(((x5617*x5623))+(((1.97e-6)*x5623))+(((-0.1215)*x5613))+(((-1.0)*py))+(((0.1025)*x5620))+(((0.1025)*x5619))+(((8.9e-7)*x5614))+(((-1.0)*x5615*x5621))+(((-0.408)*x5624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5626=((1.0)*sj5);
IkReal x5627=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5626)));
j4eval[0]=x5627;
j4eval[1]=IKsign(x5627);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5626)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5628=((1.0)*sj5);
IkReal x5629=((((-1.0)*r00*x5628))+(((-1.0)*cj5*r01)));
j4eval[0]=x5629;
j4eval[1]=IKsign(x5629);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x5628)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5630=((1.0)*sj5);
IkReal x5631=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5631;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x5630))+(((-1.0)*r11*sj0*x5630))))));
j4eval[2]=IKsign(x5631);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5633 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5633)==0){
continue;
}
IkReal x5632=pow(x5633,-0.5);
CheckValue<IkReal> x5634 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5634.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5634.value));
IkReal gconst115=((-1.0)*r21*x5632);
IkReal gconst116=(r20*x5632);
CheckValue<IkReal> x5635 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5635.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5635.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x5638 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5638.valid){
continue;
}
IkReal x5636=((-1.0)*(x5638.value));
IkReal x5637=x5632;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5636;
IkReal gconst114=x5636;
IkReal gconst115=((-1.0)*r21*x5637);
IkReal gconst116=(r20*x5637);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5641 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5641.valid){
continue;
}
IkReal x5639=((-1.0)*(x5641.value));
IkReal x5640=x5632;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5639;
IkReal gconst114=x5639;
IkReal gconst115=((-1.0)*r21*x5640);
IkReal gconst116=(r20*x5640);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x5644 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5644.valid){
continue;
}
IkReal x5642=((-1.0)*(x5644.value));
IkReal x5643=x5632;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5642;
IkReal gconst114=x5642;
IkReal gconst115=((-1.0)*r21*x5643);
IkReal gconst116=(r20*x5643);
IkReal x5645=r22*r22;
CheckValue<IkReal> x5648=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5645))),-1);
if(!x5648.valid){
continue;
}
IkReal x5646=x5648.value;
IkReal x5647=(x5645+((x5646*(r20*r20*r20*r20)))+((x5646*(r21*r21*r21*r21)))+(((2.0)*x5646*(r20*r20)*(r21*r21))));
j4eval[0]=x5647;
j4eval[1]=IKsign(x5647);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5649=(sj1*sj2);
IkReal x5650=(cj1*cj2);
IkReal x5651=(gconst116*r20);
IkReal x5652=((1.0)*gconst115*r21);
CheckValue<IkReal> x5653=IKPowWithIntegerCheck(IKsign(((((gconst115*gconst115)*(r21*r21)))+(r22*r22)+(((-2.0)*gconst115*r21*x5651))+(x5651*x5651))),-1);
if(!x5653.valid){
continue;
}
CheckValue<IkReal> x5654 = IKatan2WithCheck(IkReal((((r22*x5650))+((r22*x5649)))),IkReal(((((-1.0)*x5649*x5652))+((x5649*x5651))+((x5650*x5651))+(((-1.0)*x5650*x5652)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5653.value)))+(x5654.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5655=IKsin(j4);
IkReal x5656=IKcos(j4);
IkReal x5657=(cj1*sj2);
IkReal x5658=((1.0)*x5656);
IkReal x5659=(gconst116*x5655);
IkReal x5660=(gconst115*x5656);
IkReal x5661=((1.0)*cj2*sj1);
IkReal x5662=((1.0)*x5655);
evalcond[0]=(((r20*x5659))+(((-1.0)*r22*x5658))+(((-1.0)*gconst115*r21*x5662)));
evalcond[1]=(((r00*x5659))+sj0+(((-1.0)*r02*x5658))+(((-1.0)*gconst115*r01*x5662)));
evalcond[2]=((((-1.0)*r12*x5658))+(((-1.0)*gconst115*r11*x5662))+((r10*x5659))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x5662))+((sj1*sj2))+(((-1.0)*gconst116*r20*x5658))+((cj1*cj2))+((r21*x5660)));
evalcond[4]=(((r01*x5660))+((cj0*x5657))+(((-1.0)*r02*x5662))+(((-1.0)*gconst116*r00*x5658))+(((-1.0)*cj0*x5661)));
evalcond[5]=(((sj0*x5657))+(((-1.0)*gconst116*r10*x5658))+(((-1.0)*sj0*x5661))+((r11*x5660))+(((-1.0)*r12*x5662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5663=((1.0)*gconst115);
CheckValue<IkReal> x5664 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst116*r20))+(((-1.0)*cj0*r21*x5663)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5664.valid){
continue;
}
CheckValue<IkReal> x5665=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5663))+(((-1.0)*gconst116*r01)))),-1);
if(!x5665.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5664.value)+(((1.5707963267949)*(x5665.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5666=IKsin(j4);
IkReal x5667=IKcos(j4);
IkReal x5668=(cj1*sj2);
IkReal x5669=((1.0)*x5667);
IkReal x5670=(gconst116*x5666);
IkReal x5671=(gconst115*x5667);
IkReal x5672=((1.0)*cj2*sj1);
IkReal x5673=((1.0)*x5666);
evalcond[0]=((((-1.0)*r22*x5669))+((r20*x5670))+(((-1.0)*gconst115*r21*x5673)));
evalcond[1]=(sj0+(((-1.0)*r02*x5669))+(((-1.0)*gconst115*r01*x5673))+((r00*x5670)));
evalcond[2]=(((r10*x5670))+(((-1.0)*r12*x5669))+(((-1.0)*gconst115*r11*x5673))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x5673))+((sj1*sj2))+((r21*x5671))+((cj1*cj2))+(((-1.0)*gconst116*r20*x5669)));
evalcond[4]=((((-1.0)*cj0*x5672))+((r01*x5671))+(((-1.0)*gconst116*r00*x5669))+((cj0*x5668))+(((-1.0)*r02*x5673)));
evalcond[5]=((((-1.0)*r12*x5673))+((r11*x5671))+((sj0*x5668))+(((-1.0)*sj0*x5672))+(((-1.0)*gconst116*r10*x5669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5674=((1.0)*gconst115);
CheckValue<IkReal> x5675 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x5674))+((gconst116*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5675.valid){
continue;
}
CheckValue<IkReal> x5676=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst116*r11))+(((-1.0)*r10*x5674)))),-1);
if(!x5676.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5675.value)+(((1.5707963267949)*(x5676.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5677=IKsin(j4);
IkReal x5678=IKcos(j4);
IkReal x5679=(cj1*sj2);
IkReal x5680=((1.0)*x5678);
IkReal x5681=(gconst116*x5677);
IkReal x5682=(gconst115*x5678);
IkReal x5683=((1.0)*cj2*sj1);
IkReal x5684=((1.0)*x5677);
evalcond[0]=((((-1.0)*gconst115*r21*x5684))+(((-1.0)*r22*x5680))+((r20*x5681)));
evalcond[1]=((((-1.0)*r02*x5680))+sj0+(((-1.0)*gconst115*r01*x5684))+((r00*x5681)));
evalcond[2]=(((r10*x5681))+(((-1.0)*gconst115*r11*x5684))+(((-1.0)*r12*x5680))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x5684))+((sj1*sj2))+(((-1.0)*gconst116*r20*x5680))+((cj1*cj2))+((r21*x5682)));
evalcond[4]=((((-1.0)*r02*x5684))+((cj0*x5679))+(((-1.0)*cj0*x5683))+(((-1.0)*gconst116*r00*x5680))+((r01*x5682)));
evalcond[5]=(((sj0*x5679))+(((-1.0)*sj0*x5683))+(((-1.0)*gconst116*r10*x5680))+((r11*x5682))+(((-1.0)*r12*x5684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5686 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5686)==0){
continue;
}
IkReal x5685=pow(x5686,-0.5);
CheckValue<IkReal> x5687 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5687.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5687.value))));
IkReal gconst118=((1.0)*r21*x5685);
IkReal gconst119=((-1.0)*r20*x5685);
CheckValue<IkReal> x5688 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5688.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5688.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x5691 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5691.valid){
continue;
}
IkReal x5689=((1.0)*(x5691.value));
IkReal x5690=x5685;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5689)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5689)));
IkReal gconst118=((1.0)*r21*x5690);
IkReal gconst119=((-1.0)*r20*x5690);
IkReal x5692=r22*r22;
IkReal x5693=((1.0)*x5692);
CheckValue<IkReal> x5697=IKPowWithIntegerCheck(((-1.0)+x5692),-1);
if(!x5697.valid){
continue;
}
IkReal x5694=x5697.value;
if((((1.0)+(((-1.0)*x5693)))) < -0.00001)
continue;
IkReal x5695=IKsqrt(((1.0)+(((-1.0)*x5693))));
IkReal x5696=(sj0*x5694*x5695);
j4eval[0]=((IKabs((x5696+(((-1.0)*x5693*x5696)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5700 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5700.valid){
continue;
}
IkReal x5698=((1.0)*(x5700.value));
IkReal x5699=x5685;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5698)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5698)));
IkReal gconst118=((1.0)*r21*x5699);
IkReal gconst119=((-1.0)*r20*x5699);
IkReal x5701=r22*r22;
IkReal x5702=((1.0)*x5701);
CheckValue<IkReal> x5706=IKPowWithIntegerCheck(((-1.0)+x5701),-1);
if(!x5706.valid){
continue;
}
IkReal x5703=x5706.value;
if((((1.0)+(((-1.0)*x5702)))) < -0.00001)
continue;
IkReal x5704=IKsqrt(((1.0)+(((-1.0)*x5702))));
IkReal x5705=(cj0*x5703*x5704);
j4eval[0]=((IKabs(((((-1.0)*x5702*x5705))+x5705)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x5709 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5709.valid){
continue;
}
IkReal x5707=((1.0)*(x5709.value));
IkReal x5708=x5685;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5707)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5707)));
IkReal gconst118=((1.0)*r21*x5708);
IkReal gconst119=((-1.0)*r20*x5708);
IkReal x5710=r22*r22;
IkReal x5711=(cj0*r02);
IkReal x5712=(r12*sj0);
CheckValue<IkReal> x5716=IKPowWithIntegerCheck(((-1.0)+x5710),-1);
if(!x5716.valid){
continue;
}
IkReal x5713=x5716.value;
if((((1.0)+(((-1.0)*x5710)))) < -0.00001)
continue;
IkReal x5714=IKsqrt(((1.0)+(((-1.0)*x5710))));
IkReal x5715=((1.0)*r22*x5713*x5714);
j4eval[0]=0;
j4eval[1]=((IKabs((x5712+x5711)))+(IKabs(((((-1.0)*x5712*x5715))+(((-1.0)*x5711*x5715))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5717=((1.0)*gconst118);
CheckValue<IkReal> x5718=IKPowWithIntegerCheck(IKsign((((gconst119*r21))+((gconst118*r20)))),-1);
if(!x5718.valid){
continue;
}
CheckValue<IkReal> x5719 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst119*r10*sj0))+((cj0*gconst119*r00))+(((-1.0)*r11*sj0*x5717))+(((-1.0)*cj0*r01*x5717)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5718.value)))+(x5719.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5720=IKsin(j4);
IkReal x5721=IKcos(j4);
IkReal x5722=(gconst118*r01);
IkReal x5723=(gconst119*r10);
IkReal x5724=(gconst119*r20);
IkReal x5725=(gconst118*r21);
IkReal x5726=(gconst119*r00);
IkReal x5727=(gconst118*r11);
IkReal x5728=(cj1*sj2);
IkReal x5729=((1.0)*x5721);
IkReal x5730=((1.0)*x5720);
IkReal x5731=((1.0)*cj2*sj1);
evalcond[0]=((((-1.0)*x5725*x5730))+(((-1.0)*r22*x5729))+((x5720*x5724)));
evalcond[1]=(sj0+(((-1.0)*x5722*x5730))+(((-1.0)*r02*x5729))+((x5720*x5726)));
evalcond[2]=((((-1.0)*r12*x5729))+(((-1.0)*x5727*x5730))+(((-1.0)*cj0))+((x5720*x5723)));
evalcond[3]=(((x5721*x5725))+(((-1.0)*x5724*x5729))+((sj1*sj2))+(((-1.0)*r22*x5730))+((cj1*cj2)));
evalcond[4]=(((x5721*x5722))+(((-1.0)*r02*x5730))+(((-1.0)*cj0*x5731))+((cj0*x5728))+(((-1.0)*x5726*x5729)));
evalcond[5]=(((x5721*x5727))+((sj0*x5728))+(((-1.0)*x5723*x5729))+(((-1.0)*r12*x5730))+(((-1.0)*sj0*x5731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5732=((1.0)*gconst118);
CheckValue<IkReal> x5733 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x5732))+((cj0*gconst119*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5733.valid){
continue;
}
CheckValue<IkReal> x5734=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r01))+(((-1.0)*r00*x5732)))),-1);
if(!x5734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5733.value)+(((1.5707963267949)*(x5734.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5735=IKsin(j4);
IkReal x5736=IKcos(j4);
IkReal x5737=(gconst118*r01);
IkReal x5738=(gconst119*r10);
IkReal x5739=(gconst119*r20);
IkReal x5740=(gconst118*r21);
IkReal x5741=(gconst119*r00);
IkReal x5742=(gconst118*r11);
IkReal x5743=(cj1*sj2);
IkReal x5744=((1.0)*x5736);
IkReal x5745=((1.0)*x5735);
IkReal x5746=((1.0)*cj2*sj1);
evalcond[0]=(((x5735*x5739))+(((-1.0)*x5740*x5745))+(((-1.0)*r22*x5744)));
evalcond[1]=(sj0+(((-1.0)*x5737*x5745))+((x5735*x5741))+(((-1.0)*r02*x5744)));
evalcond[2]=(((x5735*x5738))+(((-1.0)*x5742*x5745))+(((-1.0)*r12*x5744))+(((-1.0)*cj0)));
evalcond[3]=(((x5736*x5740))+((sj1*sj2))+(((-1.0)*r22*x5745))+(((-1.0)*x5739*x5744))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r02*x5745))+(((-1.0)*cj0*x5746))+((x5736*x5737))+(((-1.0)*x5741*x5744))+((cj0*x5743)));
evalcond[5]=(((x5736*x5742))+((sj0*x5743))+(((-1.0)*x5738*x5744))+(((-1.0)*r12*x5745))+(((-1.0)*sj0*x5746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5747=((1.0)*gconst118);
CheckValue<IkReal> x5748=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r11))+(((-1.0)*r10*x5747)))),-1);
if(!x5748.valid){
continue;
}
CheckValue<IkReal> x5749 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x5747))+((gconst119*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5748.value)))+(x5749.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5750=IKsin(j4);
IkReal x5751=IKcos(j4);
IkReal x5752=(gconst118*r01);
IkReal x5753=(gconst119*r10);
IkReal x5754=(gconst119*r20);
IkReal x5755=(gconst118*r21);
IkReal x5756=(gconst119*r00);
IkReal x5757=(gconst118*r11);
IkReal x5758=(cj1*sj2);
IkReal x5759=((1.0)*x5751);
IkReal x5760=((1.0)*x5750);
IkReal x5761=((1.0)*cj2*sj1);
evalcond[0]=(((x5750*x5754))+(((-1.0)*r22*x5759))+(((-1.0)*x5755*x5760)));
evalcond[1]=(((x5750*x5756))+sj0+(((-1.0)*x5752*x5760))+(((-1.0)*r02*x5759)));
evalcond[2]=(((x5750*x5753))+(((-1.0)*x5757*x5760))+(((-1.0)*r12*x5759))+(((-1.0)*cj0)));
evalcond[3]=(((sj1*sj2))+((x5751*x5755))+(((-1.0)*r22*x5760))+((cj1*cj2))+(((-1.0)*x5754*x5759)));
evalcond[4]=((((-1.0)*cj0*x5761))+((x5751*x5752))+(((-1.0)*r02*x5760))+(((-1.0)*x5756*x5759))+((cj0*x5758)));
evalcond[5]=((((-1.0)*r12*x5760))+(((-1.0)*sj0*x5761))+((x5751*x5757))+(((-1.0)*x5753*x5759))+((sj0*x5758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5762=((-1.0)*r00);
IkReal x5764 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5764)==0){
continue;
}
IkReal x5763=pow(x5764,-0.5);
CheckValue<IkReal> x5765 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5762),IKFAST_ATAN2_MAGTHRESH);
if(!x5765.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5765.value));
IkReal gconst121=(r01*x5763);
IkReal gconst122=(x5762*x5763);
CheckValue<IkReal> x5766 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5766.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5766.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5767=((-1.0)*r00);
IkReal x5768=x5763;
CheckValue<IkReal> x5770 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5767),IKFAST_ATAN2_MAGTHRESH);
if(!x5770.valid){
continue;
}
IkReal x5769=((-1.0)*(x5770.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst121;
cj5=gconst122;
j5=x5769;
IkReal gconst120=x5769;
IkReal gconst121=(r01*x5768);
IkReal gconst122=(x5767*x5768);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5771=((1.0)*gconst121);
CheckValue<IkReal> x5772 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x5771))+((cj0*gconst122*r00))+(((-1.0)*cj0*r01*x5771))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5772.valid){
continue;
}
CheckValue<IkReal> x5773=IKPowWithIntegerCheck(IKsign((((gconst122*r21))+((gconst121*r20)))),-1);
if(!x5773.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5772.value)+(((1.5707963267949)*(x5773.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5774=IKsin(j4);
IkReal x5775=IKcos(j4);
IkReal x5776=(gconst121*r11);
IkReal x5777=(gconst122*r00);
IkReal x5778=(gconst121*r01);
IkReal x5779=(gconst121*r21);
IkReal x5780=(cj1*sj2);
IkReal x5781=((1.0)*x5775);
IkReal x5782=((1.0)*cj2*sj1);
IkReal x5783=(gconst122*x5774);
IkReal x5784=((1.0)*x5774);
evalcond[0]=(((r20*x5783))+(((-1.0)*x5779*x5784))+(((-1.0)*r22*x5781)));
evalcond[1]=(sj0+((x5774*x5777))+(((-1.0)*x5778*x5784))+(((-1.0)*r02*x5781)));
evalcond[2]=((((-1.0)*r12*x5781))+(((-1.0)*x5776*x5784))+((r10*x5783))+(((-1.0)*cj0)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*gconst122*r20*x5781))+((x5775*x5779))+((cj1*cj2))+(((-1.0)*r22*x5784)));
evalcond[4]=((((-1.0)*x5777*x5781))+((x5775*x5778))+(((-1.0)*cj0*x5782))+(((-1.0)*r02*x5784))+((cj0*x5780)));
evalcond[5]=((((-1.0)*r12*x5784))+((x5775*x5776))+((sj0*x5780))+(((-1.0)*gconst122*r10*x5781))+(((-1.0)*sj0*x5782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5785=((1.0)*gconst121);
CheckValue<IkReal> x5786 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x5785))+((gconst122*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5786.valid){
continue;
}
CheckValue<IkReal> x5787=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r11))+(((-1.0)*r10*x5785)))),-1);
if(!x5787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5786.value)+(((1.5707963267949)*(x5787.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5788=IKsin(j4);
IkReal x5789=IKcos(j4);
IkReal x5790=(gconst121*r11);
IkReal x5791=(gconst122*r00);
IkReal x5792=(gconst121*r01);
IkReal x5793=(gconst121*r21);
IkReal x5794=(cj1*sj2);
IkReal x5795=((1.0)*x5789);
IkReal x5796=((1.0)*cj2*sj1);
IkReal x5797=(gconst122*x5788);
IkReal x5798=((1.0)*x5788);
evalcond[0]=((((-1.0)*x5793*x5798))+((r20*x5797))+(((-1.0)*r22*x5795)));
evalcond[1]=(((x5788*x5791))+sj0+(((-1.0)*x5792*x5798))+(((-1.0)*r02*x5795)));
evalcond[2]=(((r10*x5797))+(((-1.0)*x5790*x5798))+(((-1.0)*r12*x5795))+(((-1.0)*cj0)));
evalcond[3]=(((sj1*sj2))+((x5789*x5793))+(((-1.0)*r22*x5798))+(((-1.0)*gconst122*r20*x5795))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x5791*x5795))+((x5789*x5792))+(((-1.0)*cj0*x5796))+((cj0*x5794))+(((-1.0)*r02*x5798)));
evalcond[5]=(((x5789*x5790))+(((-1.0)*gconst122*r10*x5795))+((sj0*x5794))+(((-1.0)*r12*x5798))+(((-1.0)*sj0*x5796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5799=((-1.0)*r01);
IkReal x5801 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5801)==0){
continue;
}
IkReal x5800=pow(x5801,-0.5);
CheckValue<IkReal> x5802 = IKatan2WithCheck(IkReal(x5799),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5802.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5802.value))));
IkReal gconst124=(x5799*x5800);
IkReal gconst125=((1.0)*r00*x5800);
CheckValue<IkReal> x5803 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5803.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5803.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5804=((-1.0)*r01);
CheckValue<IkReal> x5807 = IKatan2WithCheck(IkReal(x5804),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5807.valid){
continue;
}
IkReal x5805=((1.0)*(x5807.value));
IkReal x5806=x5800;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5805)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5805)));
IkReal gconst124=(x5804*x5806);
IkReal gconst125=((1.0)*r00*x5806);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x5808=((-1.0)*r01);
CheckValue<IkReal> x5811 = IKatan2WithCheck(IkReal(x5808),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5811.valid){
continue;
}
IkReal x5809=((1.0)*(x5811.value));
IkReal x5810=x5800;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5809)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5809)));
IkReal gconst124=(x5808*x5810);
IkReal gconst125=((1.0)*r00*x5810);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5812=((-1.0)*r01);
CheckValue<IkReal> x5815 = IKatan2WithCheck(IkReal(x5812),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5815.valid){
continue;
}
IkReal x5813=((1.0)*(x5815.value));
IkReal x5814=x5800;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5813)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5813)));
IkReal gconst124=(x5812*x5814);
IkReal gconst125=((1.0)*r00*x5814);
IkReal x5816=r02*r02;
IkReal x5817=(r12*sj0);
IkReal x5818=x5800;
IkReal x5819=(cj0*x5818);
j4eval[0]=((IKabs((x5817+((cj0*r02)))))+(IKabs(((((-1.0)*x5819))+((r02*x5817*x5818))+((x5816*x5819))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5820=((1.0)*gconst124);
CheckValue<IkReal> x5821 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*r11*sj0*x5820))+((cj0*gconst125*r00))+(((-1.0)*cj0*r01*x5820)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5821.valid){
continue;
}
CheckValue<IkReal> x5822=IKPowWithIntegerCheck(IKsign((((gconst124*r20))+((gconst125*r21)))),-1);
if(!x5822.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5821.value)+(((1.5707963267949)*(x5822.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5823=IKsin(j4);
IkReal x5824=IKcos(j4);
IkReal x5825=(cj1*sj2);
IkReal x5826=((1.0)*x5824);
IkReal x5827=(gconst125*x5823);
IkReal x5828=(gconst124*x5824);
IkReal x5829=((1.0)*x5823);
IkReal x5830=((1.0)*cj2*sj1);
evalcond[0]=((((-1.0)*r22*x5826))+((r20*x5827))+(((-1.0)*gconst124*r21*x5829)));
evalcond[1]=((((-1.0)*r02*x5826))+sj0+(((-1.0)*gconst124*r01*x5829))+((r00*x5827)));
evalcond[2]=((((-1.0)*gconst124*r11*x5829))+(((-1.0)*r12*x5826))+((r10*x5827))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x5829))+((r21*x5828))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst125*r20*x5826)));
evalcond[4]=((((-1.0)*r02*x5829))+(((-1.0)*gconst125*r00*x5826))+((r01*x5828))+((cj0*x5825))+(((-1.0)*cj0*x5830)));
evalcond[5]=((((-1.0)*gconst125*r10*x5826))+((r11*x5828))+((sj0*x5825))+(((-1.0)*sj0*x5830))+(((-1.0)*r12*x5829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5831=((1.0)*gconst124);
CheckValue<IkReal> x5832 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x5831))+((cj0*gconst125*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5832.valid){
continue;
}
CheckValue<IkReal> x5833=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5831))+(((-1.0)*gconst125*r01)))),-1);
if(!x5833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5832.value)+(((1.5707963267949)*(x5833.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5834=IKsin(j4);
IkReal x5835=IKcos(j4);
IkReal x5836=(cj1*sj2);
IkReal x5837=((1.0)*x5835);
IkReal x5838=(gconst125*x5834);
IkReal x5839=(gconst124*x5835);
IkReal x5840=((1.0)*x5834);
IkReal x5841=((1.0)*cj2*sj1);
evalcond[0]=((((-1.0)*r22*x5837))+((r20*x5838))+(((-1.0)*gconst124*r21*x5840)));
evalcond[1]=((((-1.0)*r02*x5837))+sj0+((r00*x5838))+(((-1.0)*gconst124*r01*x5840)));
evalcond[2]=((((-1.0)*r12*x5837))+(((-1.0)*gconst124*r11*x5840))+((r10*x5838))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x5839))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*r22*x5840))+(((-1.0)*gconst125*r20*x5837)));
evalcond[4]=((((-1.0)*r02*x5840))+(((-1.0)*gconst125*r00*x5837))+((r01*x5839))+((cj0*x5836))+(((-1.0)*cj0*x5841)));
evalcond[5]=((((-1.0)*gconst125*r10*x5837))+((sj0*x5836))+((r11*x5839))+(((-1.0)*sj0*x5841))+(((-1.0)*r12*x5840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5842=((1.0)*gconst124);
CheckValue<IkReal> x5843 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst125*r20*sj0))+(((-1.0)*r21*sj0*x5842)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5843.valid){
continue;
}
CheckValue<IkReal> x5844=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x5842))+(((-1.0)*gconst125*r11)))),-1);
if(!x5844.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5843.value)+(((1.5707963267949)*(x5844.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5845=IKsin(j4);
IkReal x5846=IKcos(j4);
IkReal x5847=(cj1*sj2);
IkReal x5848=((1.0)*x5846);
IkReal x5849=(gconst125*x5845);
IkReal x5850=(gconst124*x5846);
IkReal x5851=((1.0)*x5845);
IkReal x5852=((1.0)*cj2*sj1);
evalcond[0]=(((r20*x5849))+(((-1.0)*gconst124*r21*x5851))+(((-1.0)*r22*x5848)));
evalcond[1]=(sj0+(((-1.0)*gconst124*r01*x5851))+(((-1.0)*r02*x5848))+((r00*x5849)));
evalcond[2]=(((r10*x5849))+(((-1.0)*gconst124*r11*x5851))+(((-1.0)*r12*x5848))+(((-1.0)*cj0)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*gconst125*r20*x5848))+(((-1.0)*r22*x5851))+((r21*x5850))+((cj1*cj2)));
evalcond[4]=(((r01*x5850))+(((-1.0)*gconst125*r00*x5848))+(((-1.0)*cj0*x5852))+((cj0*x5847))+(((-1.0)*r02*x5851)));
evalcond[5]=((((-1.0)*gconst125*r10*x5848))+((r11*x5850))+(((-1.0)*r12*x5851))+((sj0*x5847))+(((-1.0)*sj0*x5852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5853=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5853;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x5853);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5854=((1.0)*sj5);
IkReal x5855=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5854)));
j4eval[0]=x5855;
j4eval[1]=IKsign(x5855);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x5854))+((cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5856=cj5*cj5;
IkReal x5857=r01*r01;
IkReal x5858=(cj5*r00);
IkReal x5859=(r01*sj5);
IkReal x5860=((((-2.0)*x5858*x5859))+((x5856*(r00*r00)))+(((-1.0)*x5856*x5857))+(r02*r02)+x5857);
j4eval[0]=x5860;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x5858))+x5859))));
j4eval[2]=IKsign(x5860);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5861=cj5*cj5;
IkReal x5862=r01*r01;
IkReal x5863=(r01*sj5);
IkReal x5864=(cj5*r00);
CheckValue<IkReal> x5865=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5861*x5862))+((x5861*(r00*r00)))+(((-2.0)*x5863*x5864))+(r02*r02)+x5862)),-1);
if(!x5865.valid){
continue;
}
CheckValue<IkReal> x5866 = IKatan2WithCheck(IkReal(((((-1.0)*x5864))+x5863)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x5866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5865.value)))+(x5866.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5867=IKsin(j4);
IkReal x5868=IKcos(j4);
IkReal x5869=(cj5*r00);
IkReal x5870=(cj5*r20);
IkReal x5871=(cj5*r10);
IkReal x5872=((1.0)*x5868);
IkReal x5873=(sj5*x5868);
IkReal x5874=((1.0)*x5867);
IkReal x5875=(sj5*x5874);
evalcond[0]=(((x5867*x5870))+(((-1.0)*r22*x5872))+(((-1.0)*r21*x5875)));
evalcond[1]=(((x5867*x5871))+(((-1.0)*r12*x5872))+(((-1.0)*r11*x5875)));
evalcond[2]=((((-1.0)*r02*x5874))+(((-1.0)*x5869*x5872))+((r01*x5873)));
evalcond[3]=((1.0)+((x5867*x5869))+(((-1.0)*r02*x5872))+(((-1.0)*r01*x5875)));
evalcond[4]=((((-1.0)*r22*x5874))+((sj1*sj2))+(((-1.0)*x5870*x5872))+((cj1*cj2))+((r21*x5873)));
evalcond[5]=((((-1.0)*r12*x5874))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((r11*x5873))+(((-1.0)*x5871*x5872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5876=((1.0)*sj5);
CheckValue<IkReal> x5877=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5876)))),-1);
if(!x5877.valid){
continue;
}
CheckValue<IkReal> x5878 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x5876)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5877.value)))+(x5878.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5879=IKsin(j4);
IkReal x5880=IKcos(j4);
IkReal x5881=(cj5*r00);
IkReal x5882=(cj5*r20);
IkReal x5883=(cj5*r10);
IkReal x5884=((1.0)*x5880);
IkReal x5885=(sj5*x5880);
IkReal x5886=((1.0)*x5879);
IkReal x5887=(sj5*x5886);
evalcond[0]=(((x5879*x5882))+(((-1.0)*r22*x5884))+(((-1.0)*r21*x5887)));
evalcond[1]=(((x5879*x5883))+(((-1.0)*r12*x5884))+(((-1.0)*r11*x5887)));
evalcond[2]=(((r01*x5885))+(((-1.0)*r02*x5886))+(((-1.0)*x5881*x5884)));
evalcond[3]=((1.0)+((x5879*x5881))+(((-1.0)*r01*x5887))+(((-1.0)*r02*x5884)));
evalcond[4]=((((-1.0)*x5882*x5884))+((sj1*sj2))+((r21*x5885))+((cj1*cj2))+(((-1.0)*r22*x5886)));
evalcond[5]=((((-1.0)*x5883*x5884))+((cj1*sj2))+((r11*x5885))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x5886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5888 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5888.valid){
continue;
}
CheckValue<IkReal> x5889=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5888.value)+(((1.5707963267949)*(x5889.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5890=IKsin(j4);
IkReal x5891=IKcos(j4);
IkReal x5892=(cj5*r00);
IkReal x5893=(cj5*r20);
IkReal x5894=(cj5*r10);
IkReal x5895=((1.0)*x5891);
IkReal x5896=(sj5*x5891);
IkReal x5897=((1.0)*x5890);
IkReal x5898=(sj5*x5897);
evalcond[0]=((((-1.0)*r22*x5895))+(((-1.0)*r21*x5898))+((x5890*x5893)));
evalcond[1]=((((-1.0)*r12*x5895))+(((-1.0)*r11*x5898))+((x5890*x5894)));
evalcond[2]=((((-1.0)*x5892*x5895))+(((-1.0)*r02*x5897))+((r01*x5896)));
evalcond[3]=((1.0)+(((-1.0)*r02*x5895))+(((-1.0)*r01*x5898))+((x5890*x5892)));
evalcond[4]=((((-1.0)*x5893*x5895))+((r21*x5896))+(((-1.0)*r22*x5897))+((sj1*sj2))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r12*x5897))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x5894*x5895))+((r11*x5896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5899=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5899;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x5899);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5900=((1.0)*sj5);
IkReal x5901=((((-1.0)*r20*x5900))+(((-1.0)*cj5*r21)));
j4eval[0]=x5901;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x5900))))));
j4eval[2]=IKsign(x5901);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5902=cj5*cj5;
IkReal x5903=r01*r01;
IkReal x5904=(r01*sj5);
IkReal x5905=(cj5*r00);
IkReal x5906=((((2.0)*x5904*x5905))+(((-1.0)*(r02*r02)))+((x5902*x5903))+(((-1.0)*x5902*(r00*r00)))+(((-1.0)*x5903)));
j4eval[0]=x5906;
j4eval[1]=IKsign(x5906);
j4eval[2]=((IKabs(r02))+(IKabs((x5904+(((-1.0)*x5905))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5907=cj5*cj5;
IkReal x5908=r01*r01;
IkReal x5909=(r01*sj5);
IkReal x5910=(cj5*r00);
CheckValue<IkReal> x5911=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5907*(r00*r00)))+(((-1.0)*(r02*r02)))+((x5907*x5908))+(((2.0)*x5909*x5910))+(((-1.0)*x5908)))),-1);
if(!x5911.valid){
continue;
}
CheckValue<IkReal> x5912 = IKatan2WithCheck(IkReal((x5909+(((-1.0)*x5910)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x5912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5911.value)))+(x5912.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5913=IKsin(j4);
IkReal x5914=IKcos(j4);
IkReal x5915=(cj5*r00);
IkReal x5916=(cj5*r20);
IkReal x5917=(cj5*r10);
IkReal x5918=((1.0)*x5914);
IkReal x5919=(sj5*x5914);
IkReal x5920=((1.0)*x5913);
IkReal x5921=(sj5*x5920);
evalcond[0]=((((-1.0)*r22*x5918))+(((-1.0)*r21*x5921))+((x5913*x5916)));
evalcond[1]=((((-1.0)*r12*x5918))+(((-1.0)*r11*x5921))+((x5913*x5917)));
evalcond[2]=(((r01*x5919))+(((-1.0)*r02*x5920))+(((-1.0)*x5915*x5918)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x5921))+(((-1.0)*r02*x5918))+((x5913*x5915)));
evalcond[4]=((((-1.0)*r22*x5920))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*x5916*x5918))+((r21*x5919)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x5920))+(((-1.0)*x5917*x5918))+((r11*x5919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5922=((1.0)*sj5);
CheckValue<IkReal> x5923=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x5922)))),-1);
if(!x5923.valid){
continue;
}
CheckValue<IkReal> x5924 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x5922)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5923.value)))+(x5924.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5925=IKsin(j4);
IkReal x5926=IKcos(j4);
IkReal x5927=(cj5*r00);
IkReal x5928=(cj5*r20);
IkReal x5929=(cj5*r10);
IkReal x5930=((1.0)*x5926);
IkReal x5931=(sj5*x5926);
IkReal x5932=((1.0)*x5925);
IkReal x5933=(sj5*x5932);
evalcond[0]=(((x5925*x5928))+(((-1.0)*r21*x5933))+(((-1.0)*r22*x5930)));
evalcond[1]=(((x5925*x5929))+(((-1.0)*r11*x5933))+(((-1.0)*r12*x5930)));
evalcond[2]=((((-1.0)*r02*x5932))+((r01*x5931))+(((-1.0)*x5927*x5930)));
evalcond[3]=((-1.0)+((x5925*x5927))+(((-1.0)*r01*x5933))+(((-1.0)*r02*x5930)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x5928*x5930))+((r21*x5931))+((cj1*cj2))+(((-1.0)*r22*x5932)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*x5929*x5930))+(((-1.0)*cj1*sj2))+((r11*x5931))+(((-1.0)*r12*x5932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5934=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5934.valid){
continue;
}
CheckValue<IkReal> x5935 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5934.value)))+(x5935.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5936=IKsin(j4);
IkReal x5937=IKcos(j4);
IkReal x5938=(cj5*r00);
IkReal x5939=(cj5*r20);
IkReal x5940=(cj5*r10);
IkReal x5941=((1.0)*x5937);
IkReal x5942=(sj5*x5937);
IkReal x5943=((1.0)*x5936);
IkReal x5944=(sj5*x5943);
evalcond[0]=((((-1.0)*r22*x5941))+(((-1.0)*r21*x5944))+((x5936*x5939)));
evalcond[1]=((((-1.0)*r11*x5944))+(((-1.0)*r12*x5941))+((x5936*x5940)));
evalcond[2]=(((r01*x5942))+(((-1.0)*x5938*x5941))+(((-1.0)*r02*x5943)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x5944))+((x5936*x5938))+(((-1.0)*r02*x5941)));
evalcond[4]=((((-1.0)*r22*x5943))+((sj1*sj2))+((r21*x5942))+(((-1.0)*x5939*x5941))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x5943))+(((-1.0)*x5940*x5941))+((r11*x5942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5945=((-1.0)*r10);
IkReal x5947 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5947)==0){
continue;
}
IkReal x5946=pow(x5947,-0.5);
CheckValue<IkReal> x5948 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5945),IKFAST_ATAN2_MAGTHRESH);
if(!x5948.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5948.value));
IkReal gconst127=(r11*x5946);
IkReal gconst128=(x5945*x5946);
CheckValue<IkReal> x5949 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5949.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5949.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5950=((-1.0)*r10);
IkReal x5951=x5946;
CheckValue<IkReal> x5953 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5950),IKFAST_ATAN2_MAGTHRESH);
if(!x5953.valid){
continue;
}
IkReal x5952=((-1.0)*(x5953.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst127;
cj5=gconst128;
j5=x5952;
IkReal gconst126=x5952;
IkReal gconst127=(r11*x5951);
IkReal gconst128=(x5950*x5951);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5954=((1.0)*gconst127);
CheckValue<IkReal> x5955 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*r11*sj0*x5954))+(((-1.0)*cj0*r01*x5954))+((cj0*gconst128*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5955.valid){
continue;
}
CheckValue<IkReal> x5956=IKPowWithIntegerCheck(IKsign((((gconst127*r20))+((gconst128*r21)))),-1);
if(!x5956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5955.value)+(((1.5707963267949)*(x5956.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5957=IKsin(j4);
IkReal x5958=IKcos(j4);
IkReal x5959=(gconst128*r10);
IkReal x5960=(cj1*sj2);
IkReal x5961=((1.0)*x5958);
IkReal x5962=(gconst127*x5958);
IkReal x5963=((1.0)*cj2*sj1);
IkReal x5964=((1.0)*x5957);
IkReal x5965=(gconst128*x5957);
evalcond[0]=((((-1.0)*r22*x5961))+((r20*x5965))+(((-1.0)*gconst127*r21*x5964)));
evalcond[1]=(sj0+((r00*x5965))+(((-1.0)*gconst127*r01*x5964))+(((-1.0)*r02*x5961)));
evalcond[2]=(((x5957*x5959))+(((-1.0)*gconst127*r11*x5964))+(((-1.0)*r12*x5961))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst128*r20*x5961))+(((-1.0)*r22*x5964))+((sj1*sj2))+((r21*x5962))+((cj1*cj2)));
evalcond[4]=((((-1.0)*gconst128*r00*x5961))+((cj0*x5960))+((r01*x5962))+(((-1.0)*cj0*x5963))+(((-1.0)*r02*x5964)));
evalcond[5]=((((-1.0)*sj0*x5963))+(((-1.0)*r12*x5964))+((r11*x5962))+((sj0*x5960))+(((-1.0)*x5959*x5961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5966=((1.0)*gconst127);
CheckValue<IkReal> x5967=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r01))+(((-1.0)*r00*x5966)))),-1);
if(!x5967.valid){
continue;
}
CheckValue<IkReal> x5968 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst128*r20))+(((-1.0)*cj0*r21*x5966)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5968.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5967.value)))+(x5968.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5969=IKsin(j4);
IkReal x5970=IKcos(j4);
IkReal x5971=(gconst128*r10);
IkReal x5972=(cj1*sj2);
IkReal x5973=((1.0)*x5970);
IkReal x5974=(gconst127*x5970);
IkReal x5975=((1.0)*cj2*sj1);
IkReal x5976=((1.0)*x5969);
IkReal x5977=(gconst128*x5969);
evalcond[0]=((((-1.0)*gconst127*r21*x5976))+(((-1.0)*r22*x5973))+((r20*x5977)));
evalcond[1]=((((-1.0)*r02*x5973))+sj0+((r00*x5977))+(((-1.0)*gconst127*r01*x5976)));
evalcond[2]=(((x5969*x5971))+(((-1.0)*r12*x5973))+(((-1.0)*gconst127*r11*x5976))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x5976))+((sj1*sj2))+((r21*x5974))+((cj1*cj2))+(((-1.0)*gconst128*r20*x5973)));
evalcond[4]=((((-1.0)*r02*x5976))+((cj0*x5972))+((r01*x5974))+(((-1.0)*cj0*x5975))+(((-1.0)*gconst128*r00*x5973)));
evalcond[5]=((((-1.0)*r12*x5976))+(((-1.0)*sj0*x5975))+(((-1.0)*x5971*x5973))+((r11*x5974))+((sj0*x5972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5978=((-1.0)*r11);
IkReal x5980 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5980)==0){
continue;
}
IkReal x5979=pow(x5980,-0.5);
CheckValue<IkReal> x5981 = IKatan2WithCheck(IkReal(x5978),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5981.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5981.value))));
IkReal gconst130=(x5978*x5979);
IkReal gconst131=((1.0)*r10*x5979);
CheckValue<IkReal> x5982 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5982.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5982.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x5983=((-1.0)*r11);
CheckValue<IkReal> x5986 = IKatan2WithCheck(IkReal(x5983),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5986.valid){
continue;
}
IkReal x5984=((1.0)*(x5986.value));
IkReal x5985=x5979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5984)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5984)));
IkReal gconst130=(x5983*x5985);
IkReal gconst131=((1.0)*r10*x5985);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5987=((-1.0)*r11);
CheckValue<IkReal> x5990 = IKatan2WithCheck(IkReal(x5987),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5990.valid){
continue;
}
IkReal x5988=((1.0)*(x5990.value));
IkReal x5989=x5979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5988)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5988)));
IkReal gconst130=(x5987*x5989);
IkReal gconst131=((1.0)*r10*x5989);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5991=((-1.0)*r11);
CheckValue<IkReal> x5994 = IKatan2WithCheck(IkReal(x5991),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5994.valid){
continue;
}
IkReal x5992=((1.0)*(x5994.value));
IkReal x5993=x5979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5992)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5992)));
IkReal gconst130=(x5991*x5993);
IkReal gconst131=((1.0)*r10*x5993);
IkReal x5995=r12*r12;
IkReal x5996=(cj0*r02);
IkReal x5997=x5979;
IkReal x5998=(sj0*x5997);
j4eval[0]=((IKabs((((r12*sj0))+x5996)))+(IKabs(((((-1.0)*x5998))+((x5995*x5998))+((r12*x5996*x5997))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5999=((1.0)*gconst130);
CheckValue<IkReal> x6000=IKPowWithIntegerCheck(IKsign((((gconst131*r21))+((gconst130*r20)))),-1);
if(!x6000.valid){
continue;
}
CheckValue<IkReal> x6001 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x5999))+((gconst131*r10*sj0))+(((-1.0)*cj0*r01*x5999))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6000.value)))+(x6001.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6002=IKsin(j4);
IkReal x6003=IKcos(j4);
IkReal x6004=(gconst131*r10);
IkReal x6005=(gconst131*r20);
IkReal x6006=(gconst131*r00);
IkReal x6007=(cj1*sj2);
IkReal x6008=((1.0)*x6003);
IkReal x6009=(gconst130*x6003);
IkReal x6010=((1.0)*cj2*sj1);
IkReal x6011=((1.0)*x6002);
evalcond[0]=((((-1.0)*gconst130*r21*x6011))+((x6002*x6005))+(((-1.0)*r22*x6008)));
evalcond[1]=(sj0+(((-1.0)*gconst130*r01*x6011))+((x6002*x6006))+(((-1.0)*r02*x6008)));
evalcond[2]=((((-1.0)*gconst130*r11*x6011))+(((-1.0)*r12*x6008))+((x6002*x6004))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x6009))+((sj1*sj2))+(((-1.0)*r22*x6011))+(((-1.0)*x6005*x6008))+((cj1*cj2)));
evalcond[4]=(((cj0*x6007))+(((-1.0)*r02*x6011))+(((-1.0)*x6006*x6008))+(((-1.0)*cj0*x6010))+((r01*x6009)));
evalcond[5]=((((-1.0)*r12*x6011))+((r11*x6009))+(((-1.0)*sj0*x6010))+((sj0*x6007))+(((-1.0)*x6004*x6008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6012=((1.0)*gconst130);
CheckValue<IkReal> x6013=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r01))+(((-1.0)*r00*x6012)))),-1);
if(!x6013.valid){
continue;
}
CheckValue<IkReal> x6014 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst131*r20))+(((-1.0)*cj0*r21*x6012)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6014.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6013.value)))+(x6014.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6015=IKsin(j4);
IkReal x6016=IKcos(j4);
IkReal x6017=(gconst131*r10);
IkReal x6018=(gconst131*r20);
IkReal x6019=(gconst131*r00);
IkReal x6020=(cj1*sj2);
IkReal x6021=((1.0)*x6016);
IkReal x6022=(gconst130*x6016);
IkReal x6023=((1.0)*cj2*sj1);
IkReal x6024=((1.0)*x6015);
evalcond[0]=((((-1.0)*gconst130*r21*x6024))+(((-1.0)*r22*x6021))+((x6015*x6018)));
evalcond[1]=((((-1.0)*gconst130*r01*x6024))+sj0+(((-1.0)*r02*x6021))+((x6015*x6019)));
evalcond[2]=((((-1.0)*gconst130*r11*x6024))+((x6015*x6017))+(((-1.0)*cj0))+(((-1.0)*r12*x6021)));
evalcond[3]=((((-1.0)*r22*x6024))+((sj1*sj2))+((r21*x6022))+((cj1*cj2))+(((-1.0)*x6018*x6021)));
evalcond[4]=((((-1.0)*cj0*x6023))+((r01*x6022))+((cj0*x6020))+(((-1.0)*r02*x6024))+(((-1.0)*x6019*x6021)));
evalcond[5]=(((sj0*x6020))+(((-1.0)*x6017*x6021))+(((-1.0)*sj0*x6023))+((r11*x6022))+(((-1.0)*r12*x6024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6025=((1.0)*gconst130);
CheckValue<IkReal> x6026 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst131*r20*sj0))+(((-1.0)*r21*sj0*x6025)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6026.valid){
continue;
}
CheckValue<IkReal> x6027=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6025))+(((-1.0)*gconst131*r11)))),-1);
if(!x6027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6026.value)+(((1.5707963267949)*(x6027.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6028=IKsin(j4);
IkReal x6029=IKcos(j4);
IkReal x6030=(gconst131*r10);
IkReal x6031=(gconst131*r20);
IkReal x6032=(gconst131*r00);
IkReal x6033=(cj1*sj2);
IkReal x6034=((1.0)*x6029);
IkReal x6035=(gconst130*x6029);
IkReal x6036=((1.0)*cj2*sj1);
IkReal x6037=((1.0)*x6028);
evalcond[0]=(((x6028*x6031))+(((-1.0)*gconst130*r21*x6037))+(((-1.0)*r22*x6034)));
evalcond[1]=(((x6028*x6032))+sj0+(((-1.0)*gconst130*r01*x6037))+(((-1.0)*r02*x6034)));
evalcond[2]=(((x6028*x6030))+(((-1.0)*r12*x6034))+(((-1.0)*gconst130*r11*x6037))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x6035))+(((-1.0)*x6031*x6034))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*r22*x6037)));
evalcond[4]=(((cj0*x6033))+(((-1.0)*x6032*x6034))+(((-1.0)*cj0*x6036))+((r01*x6035))+(((-1.0)*r02*x6037)));
evalcond[5]=((((-1.0)*sj0*x6036))+((r11*x6035))+(((-1.0)*r12*x6037))+((sj0*x6033))+(((-1.0)*x6030*x6034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6038=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6038;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x6038);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6039=((1.0)*sj5);
IkReal x6040=((((-1.0)*r00*x6039))+(((-1.0)*cj5*r01)));
j4eval[0]=x6040;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x6039)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6040);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6041=cj5*cj5;
IkReal x6042=r11*r11;
IkReal x6043=(cj5*r10);
IkReal x6044=(r11*sj5);
IkReal x6045=(((x6041*x6042))+(((-1.0)*x6042))+(((2.0)*x6043*x6044))+(((-1.0)*x6041*(r10*r10)))+(((-1.0)*(r12*r12))));
j4eval[0]=x6045;
j4eval[1]=((IKabs(r12))+(IKabs((x6044+(((-1.0)*x6043))))));
j4eval[2]=IKsign(x6045);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6046=cj5*cj5;
IkReal x6047=r11*r11;
IkReal x6048=(cj5*r10);
IkReal x6049=(r11*sj5);
CheckValue<IkReal> x6050 = IKatan2WithCheck(IkReal((x6049+(((-1.0)*x6048)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x6050.valid){
continue;
}
CheckValue<IkReal> x6051=IKPowWithIntegerCheck(IKsign((((x6046*x6047))+(((-1.0)*x6047))+(((-1.0)*x6046*(r10*r10)))+(((2.0)*x6048*x6049))+(((-1.0)*(r12*r12))))),-1);
if(!x6051.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6050.value)+(((1.5707963267949)*(x6051.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6052=IKsin(j4);
IkReal x6053=IKcos(j4);
IkReal x6054=(cj5*r00);
IkReal x6055=((1.0)*x6053);
IkReal x6056=(sj5*x6053);
IkReal x6057=(cj5*x6052);
IkReal x6058=((1.0)*x6052);
IkReal x6059=(sj5*x6058);
evalcond[0]=((((-1.0)*r21*x6059))+(((-1.0)*r22*x6055))+((r20*x6057)));
evalcond[1]=(((x6052*x6054))+(((-1.0)*r02*x6055))+(((-1.0)*r01*x6059)));
evalcond[2]=((((-1.0)*cj5*r10*x6055))+(((-1.0)*r12*x6058))+((r11*x6056)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6055))+(((-1.0)*r11*x6059))+((r10*x6057)));
evalcond[4]=((((-1.0)*cj5*r20*x6055))+((sj1*sj2))+(((-1.0)*r22*x6058))+((cj1*cj2))+((r21*x6056)));
evalcond[5]=(((r01*x6056))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x6054*x6055))+(((-1.0)*r02*x6058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6060=((1.0)*sj5);
CheckValue<IkReal> x6061=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6060))+(((-1.0)*cj5*r01)))),-1);
if(!x6061.valid){
continue;
}
CheckValue<IkReal> x6062 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x6060)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6061.value)))+(x6062.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6063=IKsin(j4);
IkReal x6064=IKcos(j4);
IkReal x6065=(cj5*r00);
IkReal x6066=((1.0)*x6064);
IkReal x6067=(sj5*x6064);
IkReal x6068=(cj5*x6063);
IkReal x6069=((1.0)*x6063);
IkReal x6070=(sj5*x6069);
evalcond[0]=((((-1.0)*r22*x6066))+(((-1.0)*r21*x6070))+((r20*x6068)));
evalcond[1]=((((-1.0)*r01*x6070))+((x6063*x6065))+(((-1.0)*r02*x6066)));
evalcond[2]=((((-1.0)*cj5*r10*x6066))+((r11*x6067))+(((-1.0)*r12*x6069)));
evalcond[3]=((-1.0)+((r10*x6068))+(((-1.0)*r11*x6070))+(((-1.0)*r12*x6066)));
evalcond[4]=((((-1.0)*r22*x6069))+((sj1*sj2))+(((-1.0)*cj5*r20*x6066))+((r21*x6067))+((cj1*cj2)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((r01*x6067))+(((-1.0)*r02*x6069))+(((-1.0)*x6065*x6066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6071=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6071.valid){
continue;
}
CheckValue<IkReal> x6072 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6071.value)))+(x6072.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6073=IKsin(j4);
IkReal x6074=IKcos(j4);
IkReal x6075=(cj5*r00);
IkReal x6076=((1.0)*x6074);
IkReal x6077=(sj5*x6074);
IkReal x6078=(cj5*x6073);
IkReal x6079=((1.0)*x6073);
IkReal x6080=(sj5*x6079);
evalcond[0]=((((-1.0)*r21*x6080))+(((-1.0)*r22*x6076))+((r20*x6078)));
evalcond[1]=((((-1.0)*r02*x6076))+((x6073*x6075))+(((-1.0)*r01*x6080)));
evalcond[2]=(((r11*x6077))+(((-1.0)*cj5*r10*x6076))+(((-1.0)*r12*x6079)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6076))+((r10*x6078))+(((-1.0)*r11*x6080)));
evalcond[4]=((((-1.0)*cj5*r20*x6076))+((sj1*sj2))+(((-1.0)*r22*x6079))+((cj1*cj2))+((r21*x6077)));
evalcond[5]=(((r01*x6077))+((cj1*sj2))+(((-1.0)*r02*x6079))+(((-1.0)*cj2*sj1))+(((-1.0)*x6075*x6076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6081=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6081;
j4eval[1]=IKsign(x6081);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6082=((1.0)*sj5);
IkReal x6083=((((-1.0)*r20*x6082))+(((-1.0)*cj5*r21)));
j4eval[0]=x6083;
j4eval[1]=((IKabs(r02))+(IKabs((((cj5*r00))+(((-1.0)*r01*x6082))))));
j4eval[2]=IKsign(x6083);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6084=cj5*cj5;
IkReal x6085=r11*r11;
IkReal x6086=(r11*sj5);
IkReal x6087=(cj5*r10);
IkReal x6088=(((x6084*(r10*r10)))+(r12*r12)+x6085+(((-2.0)*x6086*x6087))+(((-1.0)*x6084*x6085)));
j4eval[0]=x6088;
j4eval[1]=IKsign(x6088);
j4eval[2]=((IKabs(r12))+(IKabs((x6086+(((-1.0)*x6087))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6089=cj5*cj5;
IkReal x6090=r11*r11;
IkReal x6091=(cj5*r10);
IkReal x6092=(r11*sj5);
CheckValue<IkReal> x6093 = IKatan2WithCheck(IkReal((x6092+(((-1.0)*x6091)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x6093.valid){
continue;
}
CheckValue<IkReal> x6094=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x6089*x6090))+x6090+((x6089*(r10*r10)))+(((-2.0)*x6091*x6092)))),-1);
if(!x6094.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6093.value)+(((1.5707963267949)*(x6094.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6095=IKsin(j4);
IkReal x6096=IKcos(j4);
IkReal x6097=(cj5*r00);
IkReal x6098=((1.0)*x6096);
IkReal x6099=(sj5*x6096);
IkReal x6100=(cj5*x6095);
IkReal x6101=((1.0)*x6095);
IkReal x6102=(sj5*x6101);
evalcond[0]=((((-1.0)*r22*x6098))+((r20*x6100))+(((-1.0)*r21*x6102)));
evalcond[1]=(((x6095*x6097))+(((-1.0)*r01*x6102))+(((-1.0)*r02*x6098)));
evalcond[2]=((((-1.0)*cj5*r10*x6098))+(((-1.0)*r12*x6101))+((r11*x6099)));
evalcond[3]=((1.0)+((r10*x6100))+(((-1.0)*r11*x6102))+(((-1.0)*r12*x6098)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj5*r20*x6098))+(((-1.0)*r22*x6101))+((r21*x6099))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r02*x6101))+((cj2*sj1))+((r01*x6099))+(((-1.0)*cj1*sj2))+(((-1.0)*x6097*x6098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6103=((1.0)*sj5);
CheckValue<IkReal> x6104=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6103))+(((-1.0)*cj5*r21)))),-1);
if(!x6104.valid){
continue;
}
CheckValue<IkReal> x6105 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x6103))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6104.value)))+(x6105.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6106=IKsin(j4);
IkReal x6107=IKcos(j4);
IkReal x6108=(cj5*r00);
IkReal x6109=((1.0)*x6107);
IkReal x6110=(sj5*x6107);
IkReal x6111=(cj5*x6106);
IkReal x6112=((1.0)*x6106);
IkReal x6113=(sj5*x6112);
evalcond[0]=(((r20*x6111))+(((-1.0)*r21*x6113))+(((-1.0)*r22*x6109)));
evalcond[1]=((((-1.0)*r02*x6109))+((x6106*x6108))+(((-1.0)*r01*x6113)));
evalcond[2]=((((-1.0)*r12*x6112))+((r11*x6110))+(((-1.0)*cj5*r10*x6109)));
evalcond[3]=((1.0)+(((-1.0)*r11*x6113))+(((-1.0)*r12*x6109))+((r10*x6111)));
evalcond[4]=((((-1.0)*r22*x6112))+(((-1.0)*cj5*r20*x6109))+((sj1*sj2))+((cj1*cj2))+((r21*x6110)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x6112))+((r01*x6110))+(((-1.0)*x6108*x6109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6114=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6114.valid){
continue;
}
CheckValue<IkReal> x6115 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6115.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6114.value)))+(x6115.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6116=IKsin(j4);
IkReal x6117=IKcos(j4);
IkReal x6118=(cj5*r00);
IkReal x6119=((1.0)*x6117);
IkReal x6120=(sj5*x6117);
IkReal x6121=(cj5*x6116);
IkReal x6122=((1.0)*x6116);
IkReal x6123=(sj5*x6122);
evalcond[0]=((((-1.0)*r22*x6119))+((r20*x6121))+(((-1.0)*r21*x6123)));
evalcond[1]=(((x6116*x6118))+(((-1.0)*r02*x6119))+(((-1.0)*r01*x6123)));
evalcond[2]=((((-1.0)*cj5*r10*x6119))+(((-1.0)*r12*x6122))+((r11*x6120)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6119))+((r10*x6121))+(((-1.0)*r11*x6123)));
evalcond[4]=(((r21*x6120))+(((-1.0)*r22*x6122))+((sj1*sj2))+(((-1.0)*cj5*r20*x6119))+((cj1*cj2)));
evalcond[5]=(((r01*x6120))+((cj2*sj1))+(((-1.0)*r02*x6122))+(((-1.0)*cj1*sj2))+(((-1.0)*x6118*x6119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6124=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6124);
rxp0_2=(py*r00);
rxp1_0=(r21*x6124);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6125=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6125);
rxp0_2=(py*r00);
rxp1_0=(r21*x6125);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6126=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6126);
rxp0_2=(py*r00);
rxp1_0=(r21*x6126);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6129=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x6129.valid){
continue;
}
IkReal x6127=x6129.value;
IkReal x6128=(cj0*x6127);
cj4array[0]=(((cj2*sj1*x6128))+(((-1.0)*cj1*sj2*x6128)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6130=IKsin(j4);
IkReal x6131=IKcos(j4);
IkReal x6132=(cj5*r20);
IkReal x6133=((1.0)*x6131);
IkReal x6134=((1.0)*sj5*x6130);
evalcond[0]=((-1.0)*r12*x6130);
evalcond[1]=((((-1.0)*r12*x6133))+(((-1.0)*cj0)));
evalcond[2]=(((x6130*x6132))+(((-1.0)*r21*x6134)));
evalcond[3]=((((-1.0)*r01*x6134))+((cj5*r00*x6130)));
evalcond[4]=(((r21*sj5*x6131))+((sj1*sj2))+(((-1.0)*x6132*x6133))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6137=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6137.valid){
continue;
}
IkReal x6135=x6137.value;
IkReal x6136=((1.0)*x6135);
cj4array[0]=((((-1.0)*sj1*sj2*x6136))+(((-1.0)*cj1*cj2*x6136)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6138=IKsin(j4);
IkReal x6139=IKcos(j4);
IkReal x6140=(cj5*r00);
IkReal x6141=(r01*sj5);
IkReal x6142=((1.0)*cj0);
IkReal x6143=((1.0)*x6139);
IkReal x6144=((1.0)*x6138);
evalcond[0]=((-1.0)*r12*x6138);
evalcond[1]=((((-1.0)*x6142))+(((-1.0)*r12*x6143)));
evalcond[2]=(((cj5*r20*x6138))+(((-1.0)*r21*sj5*x6144)));
evalcond[3]=(((x6138*x6140))+(((-1.0)*x6141*x6144)));
evalcond[4]=(((x6139*x6141))+(((-1.0)*cj2*sj1*x6142))+(((-1.0)*x6140*x6143))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6145=IKPowWithIntegerCheck(r12,-1);
if(!x6145.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x6145.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6146=IKsin(j4);
IkReal x6147=IKcos(j4);
IkReal x6148=(sj5*x6147);
IkReal x6149=(cj5*x6146);
IkReal x6150=((1.0)*cj5*x6147);
IkReal x6151=((1.0)*sj5*x6146);
evalcond[0]=((-1.0)*r12*x6146);
evalcond[1]=((((-1.0)*r21*x6151))+((r20*x6149)));
evalcond[2]=((((-1.0)*r01*x6151))+((r00*x6149)));
evalcond[3]=(((sj1*sj2))+((r21*x6148))+((cj1*cj2))+(((-1.0)*r20*x6150)));
evalcond[4]=((((-1.0)*cj0*cj2*sj1))+((r01*x6148))+(((-1.0)*r00*x6150))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6152=((1.0)*sj5);
CheckValue<IkReal> x6153=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6153.valid){
continue;
}
CheckValue<IkReal> x6154 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x6152))+(((-1.0)*r11*sj0*x6152)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6153.value)))+(x6154.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6155=IKsin(j4);
IkReal x6156=IKcos(j4);
IkReal x6157=(cj5*r00);
IkReal x6158=(cj1*sj2);
IkReal x6159=((1.0)*x6156);
IkReal x6160=(sj5*x6156);
IkReal x6161=(cj5*x6155);
IkReal x6162=((1.0)*cj2*sj1);
IkReal x6163=((1.0)*x6155);
IkReal x6164=(sj5*x6163);
evalcond[0]=(((r20*x6161))+(((-1.0)*r21*x6164))+(((-1.0)*r22*x6159)));
evalcond[1]=(((x6155*x6157))+(((-1.0)*r02*x6159))+sj0+(((-1.0)*r01*x6164)));
evalcond[2]=(((r10*x6161))+(((-1.0)*r11*x6164))+(((-1.0)*r12*x6159))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj5*r20*x6159))+((r21*x6160))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*r22*x6163)));
evalcond[4]=((((-1.0)*cj0*x6162))+((cj0*x6158))+((r01*x6160))+(((-1.0)*r02*x6163))+(((-1.0)*x6157*x6159)));
evalcond[5]=((((-1.0)*sj0*x6162))+((sj0*x6158))+(((-1.0)*r12*x6163))+((r11*x6160))+(((-1.0)*cj5*r10*x6159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6165=((1.0)*sj5);
CheckValue<IkReal> x6166=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6165))+(((-1.0)*cj5*r01)))),-1);
if(!x6166.valid){
continue;
}
CheckValue<IkReal> x6167 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x6165))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6166.value)))+(x6167.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6168=IKsin(j4);
IkReal x6169=IKcos(j4);
IkReal x6170=(cj5*r00);
IkReal x6171=(cj1*sj2);
IkReal x6172=((1.0)*x6169);
IkReal x6173=(sj5*x6169);
IkReal x6174=(cj5*x6168);
IkReal x6175=((1.0)*cj2*sj1);
IkReal x6176=((1.0)*x6168);
IkReal x6177=(sj5*x6176);
evalcond[0]=(((r20*x6174))+(((-1.0)*r21*x6177))+(((-1.0)*r22*x6172)));
evalcond[1]=(sj0+((x6168*x6170))+(((-1.0)*r02*x6172))+(((-1.0)*r01*x6177)));
evalcond[2]=(((r10*x6174))+(((-1.0)*r12*x6172))+(((-1.0)*r11*x6177))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x6173))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*r22*x6176))+(((-1.0)*cj5*r20*x6172)));
evalcond[4]=((((-1.0)*cj0*x6175))+(((-1.0)*x6170*x6172))+((r01*x6173))+(((-1.0)*r02*x6176))+((cj0*x6171)));
evalcond[5]=((((-1.0)*sj0*x6175))+((r11*x6173))+((sj0*x6171))+(((-1.0)*r12*x6176))+(((-1.0)*cj5*r10*x6172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6178=((1.0)*sj5);
CheckValue<IkReal> x6179=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6178)))),-1);
if(!x6179.valid){
continue;
}
CheckValue<IkReal> x6180 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6178)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6179.value)))+(x6180.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6181=IKsin(j4);
IkReal x6182=IKcos(j4);
IkReal x6183=(cj5*r00);
IkReal x6184=(cj1*sj2);
IkReal x6185=((1.0)*x6182);
IkReal x6186=(sj5*x6182);
IkReal x6187=(cj5*x6181);
IkReal x6188=((1.0)*cj2*sj1);
IkReal x6189=((1.0)*x6181);
IkReal x6190=(sj5*x6189);
evalcond[0]=((((-1.0)*r22*x6185))+(((-1.0)*r21*x6190))+((r20*x6187)));
evalcond[1]=(sj0+(((-1.0)*r02*x6185))+((x6181*x6183))+(((-1.0)*r01*x6190)));
evalcond[2]=((((-1.0)*r11*x6190))+(((-1.0)*r12*x6185))+((r10*x6187))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x6189))+((r21*x6186))+((sj1*sj2))+(((-1.0)*cj5*r20*x6185))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r02*x6189))+((r01*x6186))+((cj0*x6184))+(((-1.0)*x6183*x6185))+(((-1.0)*cj0*x6188)));
evalcond[5]=((((-1.0)*cj5*r10*x6185))+(((-1.0)*r12*x6189))+((r11*x6186))+((sj0*x6184))+(((-1.0)*sj0*x6188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6191=(((sj1*sj2))+((cj1*cj2)));
j0eval[0]=x6191;
j0eval[1]=IKsign(x6191);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6192=r21*r21;
IkReal x6193=cj5*cj5;
IkReal x6194=(cj1*cj2);
IkReal x6195=(sj1*sj2);
IkReal x6196=(cj5*r20);
IkReal x6197=((1.0)*r21*sj5);
IkReal x6198=((((2.0)*r21*sj5*x6196))+(((-1.0)*(r22*r22)))+(((-1.0)*x6192))+(((-1.0)*x6193*(r20*r20)))+((x6192*x6193)));
j4eval[0]=x6198;
j4eval[1]=IKsign(x6198);
j4eval[2]=((IKabs((((x6195*x6196))+((x6194*x6196))+(((-1.0)*x6195*x6197))+(((-1.0)*x6194*x6197)))))+(IKabs((((r22*x6194))+((r22*x6195))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=(((sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.40810743565705)*py))+(((0.778145818976832)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.778145818976832)*py))+(((2.40810743565705)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.40810743565705)*py))+(((0.778145818976832)*px))))+IKsqr(((((-0.778145818976832)*py))+(((2.40810743565705)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.40810743565705)*py))+(((0.778145818976832)*px))), ((((-0.778145818976832)*py))+(((2.40810743565705)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6199=IKsin(j0);
IkReal x6200=IKcos(j0);
evalcond[0]=((((0.37600286)*x6200))+(((-1.0)*px))+(((0.1215)*x6199)));
evalcond[1]=((((-0.1215)*x6200))+(((-1.0)*py))+(((0.37600286)*x6199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6201=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6201;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x6201);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6202=((1.0)*sj5);
IkReal x6203=((((-1.0)*r00*x6202))+(((-1.0)*cj5*r01)));
j4eval[0]=x6203;
j4eval[1]=IKsign(x6203);
j4eval[2]=((IKabs(((((-1.0)*r21*sj0*x6202))+((cj5*r20*sj0)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6204=cj5*cj5;
IkReal x6205=((1.0)*r21);
IkReal x6206=(cj5*r20);
IkReal x6207=((((-1.0)*r02*r22))+((r01*r21*x6204))+((r01*sj5*x6206))+((cj5*r00*r21*sj5))+(((-1.0)*r00*r20*x6204))+(((-1.0)*r01*x6205)));
j4eval[0]=x6207;
j4eval[1]=IKsign(x6207);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*sj5*x6205))+((cj0*x6206))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6208=cj5*cj5;
IkReal x6209=((1.0)*r21);
IkReal x6210=(cj5*r20);
CheckValue<IkReal> x6211 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x6209))+((cj0*x6210)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6211.valid){
continue;
}
CheckValue<IkReal> x6212=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+((r01*r21*x6208))+((cj5*r00*r21*sj5))+((r01*sj5*x6210))+(((-1.0)*r00*r20*x6208))+(((-1.0)*r01*x6209)))),-1);
if(!x6212.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6211.value)+(((1.5707963267949)*(x6212.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6213=IKcos(j4);
IkReal x6214=IKsin(j4);
IkReal x6215=(r11*sj5);
IkReal x6216=(r21*sj5);
IkReal x6217=(r01*sj5);
IkReal x6218=((1.0)*x6213);
IkReal x6219=((1.0)*x6214);
IkReal x6220=(cj5*x6213);
IkReal x6221=(cj5*x6214);
evalcond[0]=(((r20*x6220))+(((-1.0)*x6216*x6218))+((r22*x6214)));
evalcond[1]=(((r20*x6221))+(((-1.0)*x6216*x6219))+(((-1.0)*r22*x6218)));
evalcond[2]=(cj0+((r02*x6214))+((r00*x6220))+(((-1.0)*x6217*x6218)));
evalcond[3]=(((r12*x6214))+sj0+((r10*x6220))+(((-1.0)*x6215*x6218)));
evalcond[4]=(sj0+((r00*x6221))+(((-1.0)*x6217*x6219))+(((-1.0)*r02*x6218)));
evalcond[5]=((((-1.0)*r12*x6218))+((r10*x6221))+(((-1.0)*x6215*x6219))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6222=((1.0)*sj5);
CheckValue<IkReal> x6223 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x6222))+((cj5*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6223.valid){
continue;
}
CheckValue<IkReal> x6224=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6222))+(((-1.0)*cj5*r01)))),-1);
if(!x6224.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6223.value)+(((1.5707963267949)*(x6224.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6225=IKcos(j4);
IkReal x6226=IKsin(j4);
IkReal x6227=(r11*sj5);
IkReal x6228=(r21*sj5);
IkReal x6229=(r01*sj5);
IkReal x6230=((1.0)*x6225);
IkReal x6231=((1.0)*x6226);
IkReal x6232=(cj5*x6225);
IkReal x6233=(cj5*x6226);
evalcond[0]=(((r20*x6232))+(((-1.0)*x6228*x6230))+((r22*x6226)));
evalcond[1]=(((r20*x6233))+(((-1.0)*x6228*x6231))+(((-1.0)*r22*x6230)));
evalcond[2]=(((r02*x6226))+cj0+((r00*x6232))+(((-1.0)*x6229*x6230)));
evalcond[3]=(sj0+((r10*x6232))+(((-1.0)*x6227*x6230))+((r12*x6226)));
evalcond[4]=(sj0+((r00*x6233))+(((-1.0)*r02*x6230))+(((-1.0)*x6229*x6231)));
evalcond[5]=((((-1.0)*r12*x6230))+((r10*x6233))+(((-1.0)*x6227*x6231))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6234 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6234.valid){
continue;
}
CheckValue<IkReal> x6235=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6235.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6234.value)+(((1.5707963267949)*(x6235.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6236=IKcos(j4);
IkReal x6237=IKsin(j4);
IkReal x6238=(r11*sj5);
IkReal x6239=(r21*sj5);
IkReal x6240=(r01*sj5);
IkReal x6241=((1.0)*x6236);
IkReal x6242=((1.0)*x6237);
IkReal x6243=(cj5*x6236);
IkReal x6244=(cj5*x6237);
evalcond[0]=((((-1.0)*x6239*x6241))+((r20*x6243))+((r22*x6237)));
evalcond[1]=((((-1.0)*x6239*x6242))+((r20*x6244))+(((-1.0)*r22*x6241)));
evalcond[2]=(((r02*x6237))+cj0+(((-1.0)*x6240*x6241))+((r00*x6243)));
evalcond[3]=((((-1.0)*x6238*x6241))+sj0+((r12*x6237))+((r10*x6243)));
evalcond[4]=((((-1.0)*r02*x6241))+sj0+(((-1.0)*x6240*x6242))+((r00*x6244)));
evalcond[5]=((((-1.0)*x6238*x6242))+((r10*x6244))+(((-1.0)*r12*x6241))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.40813714262212)*py))+(((0.778167256348246)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.40813714262212)*px))+(((-0.778167256348246)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.40813714262212)*py))+(((0.778167256348246)*px))))+IKsqr(((((-2.40813714262212)*px))+(((-0.778167256348246)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.40813714262212)*py))+(((0.778167256348246)*px))), ((((-2.40813714262212)*px))+(((-0.778167256348246)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6245=IKcos(j0);
IkReal x6246=IKsin(j0);
evalcond[0]=((((-0.37599714)*x6245))+(((-1.0)*px))+(((0.1215)*x6246)));
evalcond[1]=((((-0.1215)*x6245))+(((-0.37599714)*x6246))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6247=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6247;
j4eval[1]=IKsign(x6247);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6248=((1.0)*sj5);
IkReal x6249=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6248)));
j4eval[0]=x6249;
j4eval[1]=IKsign(x6249);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6248))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6250=((1.0)*sj5);
IkReal x6251=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6250)));
j4eval[0]=x6251;
j4eval[1]=IKsign(x6251);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x6250))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6252=((1.0)*sj5);
CheckValue<IkReal> x6253=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6252)))),-1);
if(!x6253.valid){
continue;
}
CheckValue<IkReal> x6254 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6252))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6254.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6253.value)))+(x6254.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6255=IKcos(j4);
IkReal x6256=IKsin(j4);
IkReal x6257=((1.0)*cj0);
IkReal x6258=(r11*sj5);
IkReal x6259=(r21*sj5);
IkReal x6260=(r01*sj5);
IkReal x6261=((1.0)*x6255);
IkReal x6262=(cj5*x6255);
IkReal x6263=((1.0)*x6256);
IkReal x6264=(cj5*x6256);
evalcond[0]=(((r22*x6256))+(((-1.0)*x6259*x6261))+((r20*x6262)));
evalcond[1]=((((-1.0)*x6259*x6263))+(((-1.0)*r22*x6261))+((r20*x6264)));
evalcond[2]=(sj0+((r00*x6264))+(((-1.0)*r02*x6261))+(((-1.0)*x6260*x6263)));
evalcond[3]=(((r00*x6262))+(((-1.0)*x6260*x6261))+((r02*x6256))+(((-1.0)*x6257)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x6258*x6261))+((r10*x6262))+((r12*x6256)));
evalcond[5]=((((-1.0)*x6258*x6263))+((r10*x6264))+(((-1.0)*x6257))+(((-1.0)*r12*x6261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6265=((1.0)*sj5);
CheckValue<IkReal> x6266=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6265)))),-1);
if(!x6266.valid){
continue;
}
CheckValue<IkReal> x6267 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6265)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6267.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6266.value)))+(x6267.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6268=IKcos(j4);
IkReal x6269=IKsin(j4);
IkReal x6270=((1.0)*cj0);
IkReal x6271=(r11*sj5);
IkReal x6272=(r21*sj5);
IkReal x6273=(r01*sj5);
IkReal x6274=((1.0)*x6268);
IkReal x6275=(cj5*x6268);
IkReal x6276=((1.0)*x6269);
IkReal x6277=(cj5*x6269);
evalcond[0]=((((-1.0)*x6272*x6274))+((r22*x6269))+((r20*x6275)));
evalcond[1]=((((-1.0)*x6272*x6276))+(((-1.0)*r22*x6274))+((r20*x6277)));
evalcond[2]=((((-1.0)*x6273*x6276))+sj0+((r00*x6277))+(((-1.0)*r02*x6274)));
evalcond[3]=((((-1.0)*x6273*x6274))+((r00*x6275))+((r02*x6269))+(((-1.0)*x6270)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x6271*x6274))+((r10*x6275))+((r12*x6269)));
evalcond[5]=((((-1.0)*x6271*x6276))+((r10*x6277))+(((-1.0)*x6270))+(((-1.0)*r12*x6274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6278 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6278.valid){
continue;
}
CheckValue<IkReal> x6279=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6278.value)+(((1.5707963267949)*(x6279.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6280=IKcos(j4);
IkReal x6281=IKsin(j4);
IkReal x6282=((1.0)*cj0);
IkReal x6283=(r11*sj5);
IkReal x6284=(r21*sj5);
IkReal x6285=(r01*sj5);
IkReal x6286=((1.0)*x6280);
IkReal x6287=(cj5*x6280);
IkReal x6288=((1.0)*x6281);
IkReal x6289=(cj5*x6281);
evalcond[0]=((((-1.0)*x6284*x6286))+((r22*x6281))+((r20*x6287)));
evalcond[1]=((((-1.0)*x6284*x6288))+(((-1.0)*r22*x6286))+((r20*x6289)));
evalcond[2]=(sj0+(((-1.0)*x6285*x6288))+(((-1.0)*r02*x6286))+((r00*x6289)));
evalcond[3]=((((-1.0)*x6285*x6286))+(((-1.0)*x6282))+((r02*x6281))+((r00*x6287)));
evalcond[4]=((((-1.0)*x6283*x6286))+(((-1.0)*sj0))+((r12*x6281))+((r10*x6287)));
evalcond[5]=((((-1.0)*x6283*x6288))+(((-1.0)*x6282))+(((-1.0)*r12*x6286))+((r10*x6289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.193035822182146)*px))+(((-1.24559599003227)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.193035822182146)*py))+(((-1.24559599003227)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.193035822182146)*px))+(((-1.24559599003227)*py))))+IKsqr(((((-0.193035822182146)*py))+(((-1.24559599003227)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.193035822182146)*px))+(((-1.24559599003227)*py))), ((((-0.193035822182146)*py))+(((-1.24559599003227)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6290=IKcos(j0);
IkReal x6291=IKsin(j0);
evalcond[0]=((((-0.78399911)*x6290))+(((-1.0)*px))+(((0.1215)*x6291)));
evalcond[1]=((((-0.78399911)*x6291))+(((-0.1215)*x6290))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6292=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6292;
j4eval[1]=IKsign(x6292);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6293=((1.0)*sj5);
IkReal x6294=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6293)));
j4eval[0]=x6294;
j4eval[1]=IKsign(x6294);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6293))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6295=((1.0)*sj5);
IkReal x6296=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6295)));
j4eval[0]=x6296;
j4eval[1]=IKsign(x6296);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x6295))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6297=((1.0)*sj5);
CheckValue<IkReal> x6298 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6297))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6298.valid){
continue;
}
CheckValue<IkReal> x6299=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6297)))),-1);
if(!x6299.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6298.value)+(((1.5707963267949)*(x6299.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6300=IKcos(j4);
IkReal x6301=IKsin(j4);
IkReal x6302=((1.0)*cj0);
IkReal x6303=(r11*sj5);
IkReal x6304=(r21*sj5);
IkReal x6305=(r01*sj5);
IkReal x6306=((1.0)*x6300);
IkReal x6307=(cj5*x6300);
IkReal x6308=((1.0)*x6301);
IkReal x6309=(cj5*x6301);
evalcond[0]=(((r22*x6301))+(((-1.0)*x6304*x6306))+((r20*x6307)));
evalcond[1]=((((-1.0)*x6304*x6308))+(((-1.0)*r22*x6306))+((r20*x6309)));
evalcond[2]=((((-1.0)*x6305*x6308))+sj0+(((-1.0)*r02*x6306))+((r00*x6309)));
evalcond[3]=((((-1.0)*x6305*x6306))+(((-1.0)*x6302))+((r00*x6307))+((r02*x6301)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x6303*x6306))+((r12*x6301))+((r10*x6307)));
evalcond[5]=((((-1.0)*x6302))+(((-1.0)*r12*x6306))+(((-1.0)*x6303*x6308))+((r10*x6309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6310=((1.0)*sj5);
CheckValue<IkReal> x6311=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6310)))),-1);
if(!x6311.valid){
continue;
}
CheckValue<IkReal> x6312 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x6310))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6311.value)))+(x6312.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6313=IKcos(j4);
IkReal x6314=IKsin(j4);
IkReal x6315=((1.0)*cj0);
IkReal x6316=(r11*sj5);
IkReal x6317=(r21*sj5);
IkReal x6318=(r01*sj5);
IkReal x6319=((1.0)*x6313);
IkReal x6320=(cj5*x6313);
IkReal x6321=((1.0)*x6314);
IkReal x6322=(cj5*x6314);
evalcond[0]=(((r22*x6314))+((r20*x6320))+(((-1.0)*x6317*x6319)));
evalcond[1]=((((-1.0)*r22*x6319))+((r20*x6322))+(((-1.0)*x6317*x6321)));
evalcond[2]=(sj0+(((-1.0)*x6318*x6321))+(((-1.0)*r02*x6319))+((r00*x6322)));
evalcond[3]=((((-1.0)*x6315))+((r02*x6314))+((r00*x6320))+(((-1.0)*x6318*x6319)));
evalcond[4]=((((-1.0)*sj0))+((r10*x6320))+((r12*x6314))+(((-1.0)*x6316*x6319)));
evalcond[5]=((((-1.0)*r12*x6319))+((r10*x6322))+(((-1.0)*x6315))+(((-1.0)*x6316*x6321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6323 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6323.valid){
continue;
}
CheckValue<IkReal> x6324=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6323.value)+(((1.5707963267949)*(x6324.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6325=IKcos(j4);
IkReal x6326=IKsin(j4);
IkReal x6327=((1.0)*cj0);
IkReal x6328=(r11*sj5);
IkReal x6329=(r21*sj5);
IkReal x6330=(r01*sj5);
IkReal x6331=((1.0)*x6325);
IkReal x6332=(cj5*x6325);
IkReal x6333=((1.0)*x6326);
IkReal x6334=(cj5*x6326);
evalcond[0]=(((r20*x6332))+((r22*x6326))+(((-1.0)*x6329*x6331)));
evalcond[1]=(((r20*x6334))+(((-1.0)*r22*x6331))+(((-1.0)*x6329*x6333)));
evalcond[2]=(sj0+(((-1.0)*x6330*x6333))+((r00*x6334))+(((-1.0)*r02*x6331)));
evalcond[3]=(((r02*x6326))+(((-1.0)*x6330*x6331))+((r00*x6332))+(((-1.0)*x6327)));
evalcond[4]=((((-1.0)*sj0))+((r10*x6332))+((r12*x6326))+(((-1.0)*x6328*x6331)));
evalcond[5]=((((-1.0)*r12*x6331))+((r10*x6334))+(((-1.0)*x6327))+(((-1.0)*x6328*x6333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((7.69659915383269)*px))+(((-2.02703146460411)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-7.69659915383269)*py))+(((-2.02703146460411)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.69659915383269)*px))+(((-2.02703146460411)*py))))+IKsqr(((((-7.69659915383269)*py))+(((-2.02703146460411)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((7.69659915383269)*px))+(((-2.02703146460411)*py))), ((((-7.69659915383269)*py))+(((-2.02703146460411)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6335=IKcos(j0);
IkReal x6336=IKsin(j0);
evalcond[0]=((((-0.03199911)*x6335))+(((-1.0)*px))+(((0.1215)*x6336)));
evalcond[1]=((((-0.03199911)*x6336))+(((-1.0)*py))+(((-0.1215)*x6335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6337=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6337;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x6337);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6338=((1.0)*sj5);
IkReal x6339=((((-1.0)*r00*x6338))+(((-1.0)*cj5*r01)));
j4eval[0]=x6339;
j4eval[1]=IKsign(x6339);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6338))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6340=cj5*cj5;
IkReal x6341=((1.0)*r21);
IkReal x6342=(cj5*r20);
IkReal x6343=((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x6340))+((r01*sj5*x6342))+((r01*r21*x6340))+((cj5*r00*r21*sj5))+(((-1.0)*r01*x6341)));
j4eval[0]=x6343;
j4eval[1]=IKsign(x6343);
j4eval[2]=((IKabs((((cj0*x6342))+(((-1.0)*cj0*sj5*x6341)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6344=cj5*cj5;
IkReal x6345=((1.0)*r21);
IkReal x6346=(cj5*r20);
CheckValue<IkReal> x6347 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x6346))+(((-1.0)*cj0*sj5*x6345)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6347.valid){
continue;
}
CheckValue<IkReal> x6348=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x6344))+((r01*sj5*x6346))+((r01*r21*x6344))+((cj5*r00*r21*sj5))+(((-1.0)*r01*x6345)))),-1);
if(!x6348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6347.value)+(((1.5707963267949)*(x6348.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6349=IKcos(j4);
IkReal x6350=IKsin(j4);
IkReal x6351=(r11*sj5);
IkReal x6352=(r21*sj5);
IkReal x6353=(r01*sj5);
IkReal x6354=((1.0)*x6349);
IkReal x6355=((1.0)*x6350);
IkReal x6356=(cj5*x6349);
IkReal x6357=(cj5*x6350);
evalcond[0]=(((r20*x6356))+((r22*x6350))+(((-1.0)*x6352*x6354)));
evalcond[1]=(((r20*x6357))+(((-1.0)*r22*x6354))+(((-1.0)*x6352*x6355)));
evalcond[2]=(cj0+(((-1.0)*x6353*x6354))+((r00*x6356))+((r02*x6350)));
evalcond[3]=(((r10*x6356))+sj0+(((-1.0)*x6351*x6354))+((r12*x6350)));
evalcond[4]=(sj0+(((-1.0)*x6353*x6355))+((r00*x6357))+(((-1.0)*r02*x6354)));
evalcond[5]=(((r10*x6357))+(((-1.0)*x6351*x6355))+(((-1.0)*r12*x6354))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6358=((1.0)*sj5);
CheckValue<IkReal> x6359 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6358)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6359.valid){
continue;
}
CheckValue<IkReal> x6360=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6358))+(((-1.0)*cj5*r01)))),-1);
if(!x6360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6359.value)+(((1.5707963267949)*(x6360.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6361=IKcos(j4);
IkReal x6362=IKsin(j4);
IkReal x6363=(r11*sj5);
IkReal x6364=(r21*sj5);
IkReal x6365=(r01*sj5);
IkReal x6366=((1.0)*x6361);
IkReal x6367=((1.0)*x6362);
IkReal x6368=(cj5*x6361);
IkReal x6369=(cj5*x6362);
evalcond[0]=(((r20*x6368))+(((-1.0)*x6364*x6366))+((r22*x6362)));
evalcond[1]=(((r20*x6369))+(((-1.0)*r22*x6366))+(((-1.0)*x6364*x6367)));
evalcond[2]=((((-1.0)*x6365*x6366))+cj0+((r00*x6368))+((r02*x6362)));
evalcond[3]=(sj0+((r12*x6362))+(((-1.0)*x6363*x6366))+((r10*x6368)));
evalcond[4]=(sj0+(((-1.0)*x6365*x6367))+(((-1.0)*r02*x6366))+((r00*x6369)));
evalcond[5]=((((-1.0)*r12*x6366))+(((-1.0)*x6363*x6367))+(((-1.0)*cj0))+((r10*x6369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6370 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6370.valid){
continue;
}
CheckValue<IkReal> x6371=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6371.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6370.value)+(((1.5707963267949)*(x6371.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6372=IKcos(j4);
IkReal x6373=IKsin(j4);
IkReal x6374=(r11*sj5);
IkReal x6375=(r21*sj5);
IkReal x6376=(r01*sj5);
IkReal x6377=((1.0)*x6372);
IkReal x6378=((1.0)*x6373);
IkReal x6379=(cj5*x6372);
IkReal x6380=(cj5*x6373);
evalcond[0]=(((r20*x6379))+(((-1.0)*x6375*x6377))+((r22*x6373)));
evalcond[1]=((((-1.0)*x6375*x6378))+(((-1.0)*r22*x6377))+((r20*x6380)));
evalcond[2]=(cj0+((r00*x6379))+(((-1.0)*x6376*x6377))+((r02*x6373)));
evalcond[3]=(sj0+((r12*x6373))+(((-1.0)*x6374*x6377))+((r10*x6379)));
evalcond[4]=(sj0+(((-1.0)*r02*x6377))+(((-1.0)*x6376*x6378))+((r00*x6380)));
evalcond[5]=(((r10*x6380))+(((-1.0)*x6374*x6378))+(((-1.0)*r12*x6377))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.778152489955319)*px))+(((-2.40811668006493)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.778152489955319)*py))+(((-2.40811668006493)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.778152489955319)*px))+(((-2.40811668006493)*py))))+IKsqr(((((-0.778152489955319)*py))+(((-2.40811668006493)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.778152489955319)*px))+(((-2.40811668006493)*py))), ((((-0.778152489955319)*py))+(((-2.40811668006493)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6381=IKcos(j0);
IkReal x6382=IKsin(j0);
evalcond[0]=((((0.1215)*x6382))+(((-1.0)*px))+(((-0.37600108)*x6381)));
evalcond[1]=((((-1.0)*py))+(((-0.37600108)*x6382))+(((-0.1215)*x6381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6383=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6383;
j4eval[1]=IKsign(x6383);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6384=((1.0)*sj5);
IkReal x6385=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6384)));
j4eval[0]=x6385;
j4eval[1]=IKsign(x6385);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6384))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6386=((1.0)*sj5);
IkReal x6387=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6386)));
j4eval[0]=x6387;
j4eval[1]=IKsign(x6387);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x6386))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6388=((1.0)*sj5);
CheckValue<IkReal> x6389=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6388)))),-1);
if(!x6389.valid){
continue;
}
CheckValue<IkReal> x6390 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6388))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6389.value)))+(x6390.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6391=IKcos(j4);
IkReal x6392=IKsin(j4);
IkReal x6393=((1.0)*cj0);
IkReal x6394=(r11*sj5);
IkReal x6395=(r21*sj5);
IkReal x6396=(r01*sj5);
IkReal x6397=((1.0)*x6391);
IkReal x6398=(cj5*x6391);
IkReal x6399=((1.0)*x6392);
IkReal x6400=(cj5*x6392);
evalcond[0]=((((-1.0)*x6395*x6397))+((r20*x6398))+((r22*x6392)));
evalcond[1]=((((-1.0)*x6395*x6399))+((r20*x6400))+(((-1.0)*r22*x6397)));
evalcond[2]=(sj0+((r00*x6400))+(((-1.0)*x6396*x6399))+(((-1.0)*r02*x6397)));
evalcond[3]=((((-1.0)*x6396*x6397))+((r00*x6398))+(((-1.0)*x6393))+((r02*x6392)));
evalcond[4]=((((-1.0)*sj0))+((r12*x6392))+((r10*x6398))+(((-1.0)*x6394*x6397)));
evalcond[5]=(((r10*x6400))+(((-1.0)*x6393))+(((-1.0)*x6394*x6399))+(((-1.0)*r12*x6397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6401=((1.0)*sj5);
CheckValue<IkReal> x6402=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6401)))),-1);
if(!x6402.valid){
continue;
}
CheckValue<IkReal> x6403 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6401)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6403.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6402.value)))+(x6403.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6404=IKcos(j4);
IkReal x6405=IKsin(j4);
IkReal x6406=((1.0)*cj0);
IkReal x6407=(r11*sj5);
IkReal x6408=(r21*sj5);
IkReal x6409=(r01*sj5);
IkReal x6410=((1.0)*x6404);
IkReal x6411=(cj5*x6404);
IkReal x6412=((1.0)*x6405);
IkReal x6413=(cj5*x6405);
evalcond[0]=(((r20*x6411))+(((-1.0)*x6408*x6410))+((r22*x6405)));
evalcond[1]=(((r20*x6413))+(((-1.0)*x6408*x6412))+(((-1.0)*r22*x6410)));
evalcond[2]=(sj0+((r00*x6413))+(((-1.0)*r02*x6410))+(((-1.0)*x6409*x6412)));
evalcond[3]=(((r02*x6405))+((r00*x6411))+(((-1.0)*x6406))+(((-1.0)*x6409*x6410)));
evalcond[4]=((((-1.0)*sj0))+((r10*x6411))+(((-1.0)*x6407*x6410))+((r12*x6405)));
evalcond[5]=(((r10*x6413))+(((-1.0)*x6407*x6412))+(((-1.0)*x6406))+(((-1.0)*r12*x6410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6414 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6414.valid){
continue;
}
CheckValue<IkReal> x6415=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6415.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6414.value)+(((1.5707963267949)*(x6415.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6416=IKcos(j4);
IkReal x6417=IKsin(j4);
IkReal x6418=((1.0)*cj0);
IkReal x6419=(r11*sj5);
IkReal x6420=(r21*sj5);
IkReal x6421=(r01*sj5);
IkReal x6422=((1.0)*x6416);
IkReal x6423=(cj5*x6416);
IkReal x6424=((1.0)*x6417);
IkReal x6425=(cj5*x6417);
evalcond[0]=(((r20*x6423))+((r22*x6417))+(((-1.0)*x6420*x6422)));
evalcond[1]=(((r20*x6425))+(((-1.0)*r22*x6422))+(((-1.0)*x6420*x6424)));
evalcond[2]=((((-1.0)*x6421*x6424))+sj0+((r00*x6425))+(((-1.0)*r02*x6422)));
evalcond[3]=(((r02*x6417))+(((-1.0)*x6421*x6422))+(((-1.0)*x6418))+((r00*x6423)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x6419*x6422))+((r10*x6423))+((r12*x6417)));
evalcond[5]=((((-1.0)*x6419*x6424))+((r10*x6425))+(((-1.0)*x6418))+(((-1.0)*r12*x6422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.778160585186482)*px))+(((2.40812789807971)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.778160585186482)*py))+(((2.40812789807971)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.778160585186482)*px))+(((2.40812789807971)*py))))+IKsqr(((((-0.778160585186482)*py))+(((2.40812789807971)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.778160585186482)*px))+(((2.40812789807971)*py))), ((((-0.778160585186482)*py))+(((2.40812789807971)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6426=IKsin(j0);
IkReal x6427=IKcos(j0);
evalcond[0]=((((0.37599892)*x6427))+(((-1.0)*px))+(((0.1215)*x6426)));
evalcond[1]=((((0.37599892)*x6426))+(((-1.0)*py))+(((-0.1215)*x6427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6428=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6428;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x6428);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6429=((1.0)*sj5);
IkReal x6430=((((-1.0)*r00*x6429))+(((-1.0)*cj5*r01)));
j4eval[0]=x6430;
j4eval[1]=IKsign(x6430);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6429))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6431=cj5*cj5;
IkReal x6432=((1.0)*r21);
IkReal x6433=(cj5*r20);
IkReal x6434=((((-1.0)*r02*r22))+(((-1.0)*r01*x6432))+(((-1.0)*r00*r20*x6431))+((r01*sj5*x6433))+((r01*r21*x6431))+((cj5*r00*r21*sj5)));
j4eval[0]=x6434;
j4eval[1]=IKsign(x6434);
j4eval[2]=((IKabs((((cj0*x6433))+(((-1.0)*cj0*sj5*x6432)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6435=cj5*cj5;
IkReal x6436=((1.0)*r21);
IkReal x6437=(cj5*r20);
CheckValue<IkReal> x6438=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*r01*x6436))+(((-1.0)*r00*r20*x6435))+((r01*sj5*x6437))+((r01*r21*x6435))+((cj5*r00*r21*sj5)))),-1);
if(!x6438.valid){
continue;
}
CheckValue<IkReal> x6439 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x6437))+(((-1.0)*cj0*sj5*x6436)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6438.value)))+(x6439.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6440=IKcos(j4);
IkReal x6441=IKsin(j4);
IkReal x6442=(r11*sj5);
IkReal x6443=(r21*sj5);
IkReal x6444=(r01*sj5);
IkReal x6445=((1.0)*x6440);
IkReal x6446=((1.0)*x6441);
IkReal x6447=(cj5*x6440);
IkReal x6448=(cj5*x6441);
evalcond[0]=(((r22*x6441))+(((-1.0)*x6443*x6445))+((r20*x6447)));
evalcond[1]=((((-1.0)*x6443*x6446))+(((-1.0)*r22*x6445))+((r20*x6448)));
evalcond[2]=(((r00*x6447))+cj0+(((-1.0)*x6444*x6445))+((r02*x6441)));
evalcond[3]=(((r12*x6441))+sj0+(((-1.0)*x6442*x6445))+((r10*x6447)));
evalcond[4]=(((r00*x6448))+sj0+(((-1.0)*r02*x6445))+(((-1.0)*x6444*x6446)));
evalcond[5]=((((-1.0)*r12*x6445))+(((-1.0)*x6442*x6446))+((r10*x6448))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6449=((1.0)*sj5);
CheckValue<IkReal> x6450 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6449)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6450.valid){
continue;
}
CheckValue<IkReal> x6451=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r01))+(((-1.0)*r00*x6449)))),-1);
if(!x6451.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6450.value)+(((1.5707963267949)*(x6451.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6452=IKcos(j4);
IkReal x6453=IKsin(j4);
IkReal x6454=(r11*sj5);
IkReal x6455=(r21*sj5);
IkReal x6456=(r01*sj5);
IkReal x6457=((1.0)*x6452);
IkReal x6458=((1.0)*x6453);
IkReal x6459=(cj5*x6452);
IkReal x6460=(cj5*x6453);
evalcond[0]=(((r22*x6453))+(((-1.0)*x6455*x6457))+((r20*x6459)));
evalcond[1]=((((-1.0)*x6455*x6458))+(((-1.0)*r22*x6457))+((r20*x6460)));
evalcond[2]=(((r00*x6459))+cj0+(((-1.0)*x6456*x6457))+((r02*x6453)));
evalcond[3]=(sj0+(((-1.0)*x6454*x6457))+((r10*x6459))+((r12*x6453)));
evalcond[4]=(sj0+(((-1.0)*r02*x6457))+(((-1.0)*x6456*x6458))+((r00*x6460)));
evalcond[5]=(((r10*x6460))+(((-1.0)*r12*x6457))+(((-1.0)*x6454*x6458))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6461 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6461.valid){
continue;
}
CheckValue<IkReal> x6462=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6461.value)+(((1.5707963267949)*(x6462.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6463=IKcos(j4);
IkReal x6464=IKsin(j4);
IkReal x6465=(r11*sj5);
IkReal x6466=(r21*sj5);
IkReal x6467=(r01*sj5);
IkReal x6468=((1.0)*x6463);
IkReal x6469=((1.0)*x6464);
IkReal x6470=(cj5*x6463);
IkReal x6471=(cj5*x6464);
evalcond[0]=((((-1.0)*x6466*x6468))+((r20*x6470))+((r22*x6464)));
evalcond[1]=((((-1.0)*x6466*x6469))+((r20*x6471))+(((-1.0)*r22*x6468)));
evalcond[2]=((((-1.0)*x6467*x6468))+cj0+((r00*x6470))+((r02*x6464)));
evalcond[3]=(sj0+(((-1.0)*x6465*x6468))+((r10*x6470))+((r12*x6464)));
evalcond[4]=((((-1.0)*x6467*x6469))+sj0+((r00*x6471))+(((-1.0)*r02*x6468)));
evalcond[5]=((((-1.0)*x6465*x6469))+((r10*x6471))+(((-1.0)*r12*x6468))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.24559329467911)*py))+(((0.19303496620203)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.24559329467911)*px))+(((-0.19303496620203)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.24559329467911)*py))+(((0.19303496620203)*px))))+IKsqr(((((1.24559329467911)*px))+(((-0.19303496620203)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.24559329467911)*py))+(((0.19303496620203)*px))), ((((1.24559329467911)*px))+(((-0.19303496620203)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6472=IKsin(j0);
IkReal x6473=IKcos(j0);
evalcond[0]=((((0.78400089)*x6473))+(((-1.0)*px))+(((0.1215)*x6472)));
evalcond[1]=((((0.78400089)*x6472))+(((-0.1215)*x6473))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6474=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6474;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x6474);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6475=((1.0)*sj5);
IkReal x6476=((((-1.0)*r00*x6475))+(((-1.0)*cj5*r01)));
j4eval[0]=x6476;
j4eval[1]=IKsign(x6476);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6475))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6477=cj5*cj5;
IkReal x6478=((1.0)*r21);
IkReal x6479=(cj5*r20);
IkReal x6480=((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x6477))+((cj5*r00*r21*sj5))+(((-1.0)*r01*x6478))+((r01*sj5*x6479))+((r01*r21*x6477)));
j4eval[0]=x6480;
j4eval[1]=IKsign(x6480);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x6478))+((cj0*x6479)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6481=cj5*cj5;
IkReal x6482=((1.0)*r21);
IkReal x6483=(cj5*r20);
CheckValue<IkReal> x6484 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x6482))+((cj0*x6483)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6484.valid){
continue;
}
CheckValue<IkReal> x6485=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*r20*x6481))+(((-1.0)*r02*r22))+(((-1.0)*r01*x6482))+((r01*sj5*x6483))+((cj5*r00*r21*sj5))+((r01*r21*x6481)))),-1);
if(!x6485.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6484.value)+(((1.5707963267949)*(x6485.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6486=IKcos(j4);
IkReal x6487=IKsin(j4);
IkReal x6488=(r11*sj5);
IkReal x6489=(r21*sj5);
IkReal x6490=(r01*sj5);
IkReal x6491=((1.0)*x6486);
IkReal x6492=((1.0)*x6487);
IkReal x6493=(cj5*x6486);
IkReal x6494=(cj5*x6487);
evalcond[0]=((((-1.0)*x6489*x6491))+((r20*x6493))+((r22*x6487)));
evalcond[1]=((((-1.0)*r22*x6491))+(((-1.0)*x6489*x6492))+((r20*x6494)));
evalcond[2]=(((r00*x6493))+cj0+((r02*x6487))+(((-1.0)*x6490*x6491)));
evalcond[3]=(sj0+(((-1.0)*x6488*x6491))+((r12*x6487))+((r10*x6493)));
evalcond[4]=(sj0+((r00*x6494))+(((-1.0)*r02*x6491))+(((-1.0)*x6490*x6492)));
evalcond[5]=((((-1.0)*x6488*x6492))+(((-1.0)*r12*x6491))+((r10*x6494))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6495=((1.0)*sj5);
CheckValue<IkReal> x6496=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6495))+(((-1.0)*cj5*r01)))),-1);
if(!x6496.valid){
continue;
}
CheckValue<IkReal> x6497 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6495)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6496.value)))+(x6497.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6498=IKcos(j4);
IkReal x6499=IKsin(j4);
IkReal x6500=(r11*sj5);
IkReal x6501=(r21*sj5);
IkReal x6502=(r01*sj5);
IkReal x6503=((1.0)*x6498);
IkReal x6504=((1.0)*x6499);
IkReal x6505=(cj5*x6498);
IkReal x6506=(cj5*x6499);
evalcond[0]=((((-1.0)*x6501*x6503))+((r20*x6505))+((r22*x6499)));
evalcond[1]=((((-1.0)*x6501*x6504))+(((-1.0)*r22*x6503))+((r20*x6506)));
evalcond[2]=(cj0+((r02*x6499))+((r00*x6505))+(((-1.0)*x6502*x6503)));
evalcond[3]=(sj0+(((-1.0)*x6500*x6503))+((r12*x6499))+((r10*x6505)));
evalcond[4]=(sj0+(((-1.0)*r02*x6503))+((r00*x6506))+(((-1.0)*x6502*x6504)));
evalcond[5]=((((-1.0)*r12*x6503))+(((-1.0)*x6500*x6504))+((r10*x6506))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6507 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6507.valid){
continue;
}
CheckValue<IkReal> x6508=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6508.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6507.value)+(((1.5707963267949)*(x6508.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6509=IKcos(j4);
IkReal x6510=IKsin(j4);
IkReal x6511=(r11*sj5);
IkReal x6512=(r21*sj5);
IkReal x6513=(r01*sj5);
IkReal x6514=((1.0)*x6509);
IkReal x6515=((1.0)*x6510);
IkReal x6516=(cj5*x6509);
IkReal x6517=(cj5*x6510);
evalcond[0]=((((-1.0)*x6512*x6514))+((r20*x6516))+((r22*x6510)));
evalcond[1]=((((-1.0)*x6512*x6515))+(((-1.0)*r22*x6514))+((r20*x6517)));
evalcond[2]=(((r00*x6516))+cj0+((r02*x6510))+(((-1.0)*x6513*x6514)));
evalcond[3]=(sj0+((r12*x6510))+((r10*x6516))+(((-1.0)*x6511*x6514)));
evalcond[4]=((((-1.0)*r02*x6514))+((r00*x6517))+sj0+(((-1.0)*x6513*x6515)));
evalcond[5]=((((-1.0)*r12*x6514))+((r10*x6517))+(((-1.0)*cj0))+(((-1.0)*x6511*x6515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((7.69654361224353)*px))+(((2.02712959272105)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-7.69654361224353)*py))+(((2.02712959272105)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.69654361224353)*px))+(((2.02712959272105)*py))))+IKsqr(((((-7.69654361224353)*py))+(((2.02712959272105)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((7.69654361224353)*px))+(((2.02712959272105)*py))), ((((-7.69654361224353)*py))+(((2.02712959272105)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6518=IKsin(j0);
IkReal x6519=IKcos(j0);
evalcond[0]=((((0.1215)*x6518))+(((-1.0)*px))+(((0.03200089)*x6519)));
evalcond[1]=((((-0.1215)*x6519))+(((-1.0)*py))+(((0.03200089)*x6518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6520=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6520;
j4eval[1]=IKsign(x6520);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6521=((1.0)*sj5);
IkReal x6522=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6521)));
j4eval[0]=x6522;
j4eval[1]=IKsign(x6522);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x6521))+((cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6523=((1.0)*sj5);
IkReal x6524=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6523)));
j4eval[0]=x6524;
j4eval[1]=IKsign(x6524);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x6523))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6525=((1.0)*sj5);
CheckValue<IkReal> x6526 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6525))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6526.valid){
continue;
}
CheckValue<IkReal> x6527=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6525)))),-1);
if(!x6527.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6526.value)+(((1.5707963267949)*(x6527.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6528=IKcos(j4);
IkReal x6529=IKsin(j4);
IkReal x6530=((1.0)*cj0);
IkReal x6531=(r11*sj5);
IkReal x6532=(r21*sj5);
IkReal x6533=(r01*sj5);
IkReal x6534=((1.0)*x6528);
IkReal x6535=(cj5*x6528);
IkReal x6536=((1.0)*x6529);
IkReal x6537=(cj5*x6529);
evalcond[0]=((((-1.0)*x6532*x6534))+((r20*x6535))+((r22*x6529)));
evalcond[1]=((((-1.0)*r22*x6534))+(((-1.0)*x6532*x6536))+((r20*x6537)));
evalcond[2]=(sj0+(((-1.0)*r02*x6534))+(((-1.0)*x6533*x6536))+((r00*x6537)));
evalcond[3]=((((-1.0)*x6530))+(((-1.0)*x6533*x6534))+((r02*x6529))+((r00*x6535)));
evalcond[4]=((((-1.0)*sj0))+((r10*x6535))+((r12*x6529))+(((-1.0)*x6531*x6534)));
evalcond[5]=((((-1.0)*x6530))+(((-1.0)*r12*x6534))+((r10*x6537))+(((-1.0)*x6531*x6536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6538=((1.0)*sj5);
CheckValue<IkReal> x6539=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6538)))),-1);
if(!x6539.valid){
continue;
}
CheckValue<IkReal> x6540 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6538)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6539.value)))+(x6540.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6541=IKcos(j4);
IkReal x6542=IKsin(j4);
IkReal x6543=((1.0)*cj0);
IkReal x6544=(r11*sj5);
IkReal x6545=(r21*sj5);
IkReal x6546=(r01*sj5);
IkReal x6547=((1.0)*x6541);
IkReal x6548=(cj5*x6541);
IkReal x6549=((1.0)*x6542);
IkReal x6550=(cj5*x6542);
evalcond[0]=((((-1.0)*x6545*x6547))+((r20*x6548))+((r22*x6542)));
evalcond[1]=((((-1.0)*x6545*x6549))+((r20*x6550))+(((-1.0)*r22*x6547)));
evalcond[2]=(sj0+(((-1.0)*x6546*x6549))+(((-1.0)*r02*x6547))+((r00*x6550)));
evalcond[3]=((((-1.0)*x6543))+((r02*x6542))+(((-1.0)*x6546*x6547))+((r00*x6548)));
evalcond[4]=((((-1.0)*sj0))+((r10*x6548))+((r12*x6542))+(((-1.0)*x6544*x6547)));
evalcond[5]=((((-1.0)*x6543))+(((-1.0)*r12*x6547))+((r10*x6550))+(((-1.0)*x6544*x6549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6551 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6551.valid){
continue;
}
CheckValue<IkReal> x6552=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6552.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6551.value)+(((1.5707963267949)*(x6552.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6553=IKcos(j4);
IkReal x6554=IKsin(j4);
IkReal x6555=((1.0)*cj0);
IkReal x6556=(r11*sj5);
IkReal x6557=(r21*sj5);
IkReal x6558=(r01*sj5);
IkReal x6559=((1.0)*x6553);
IkReal x6560=(cj5*x6553);
IkReal x6561=((1.0)*x6554);
IkReal x6562=(cj5*x6554);
evalcond[0]=(((r20*x6560))+((r22*x6554))+(((-1.0)*x6557*x6559)));
evalcond[1]=((((-1.0)*r22*x6559))+((r20*x6562))+(((-1.0)*x6557*x6561)));
evalcond[2]=(((r00*x6562))+sj0+(((-1.0)*r02*x6559))+(((-1.0)*x6558*x6561)));
evalcond[3]=(((r00*x6560))+(((-1.0)*x6555))+((r02*x6554))+(((-1.0)*x6558*x6559)));
evalcond[4]=((((-1.0)*sj0))+((r12*x6554))+((r10*x6560))+(((-1.0)*x6556*x6559)));
evalcond[5]=((((-1.0)*x6555))+(((-1.0)*x6556*x6561))+(((-1.0)*r12*x6559))+((r10*x6562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6563=(cj5*r01);
IkReal x6564=(r00*sj5);
IkReal x6565=((816.0)*sj1);
IkReal x6566=(sj1*sj2);
IkReal x6567=(cj1*cj2);
IkReal x6568=((2000.0)*px);
IkReal x6569=((0.00394)*cj1);
IkReal x6570=((752.0)*cj2*sj1);
IkReal x6571=((752.0)*cj1*sj2);
CheckValue<IkReal> x6572=IKPowWithIntegerCheck(((((243.0)*x6567))+(((243.0)*x6566))),-1);
if(!x6572.valid){
continue;
}
CheckValue<IkReal> x6573=IKPowWithIntegerCheck((x6567+x6566),-1);
if(!x6573.valid){
continue;
}
if( IKabs(((x6572.value)*(((((-205.0)*x6564*x6566))+(((-205.0)*x6564*x6567))+((x6563*x6565))+((x6567*x6568))+(((-205.0)*x6563*x6566))+(((-205.0)*x6563*x6567))+((x6564*x6570))+((x6563*x6570))+((x6564*x6565))+(((-0.00178)*x6564))+(((-0.00178)*x6563))+((x6566*x6568))+(((-1.0)*x6563*x6569))+(((-1.0)*x6563*x6571))+(((-1.0)*x6564*x6569))+(((-1.0)*x6564*x6571)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6573.value)*((x6564+x6563)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6572.value)*(((((-205.0)*x6564*x6566))+(((-205.0)*x6564*x6567))+((x6563*x6565))+((x6567*x6568))+(((-205.0)*x6563*x6566))+(((-205.0)*x6563*x6567))+((x6564*x6570))+((x6563*x6570))+((x6564*x6565))+(((-0.00178)*x6564))+(((-0.00178)*x6563))+((x6566*x6568))+(((-1.0)*x6563*x6569))+(((-1.0)*x6563*x6571))+(((-1.0)*x6564*x6569))+(((-1.0)*x6564*x6571))))))+IKsqr(((x6573.value)*((x6564+x6563))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x6572.value)*(((((-205.0)*x6564*x6566))+(((-205.0)*x6564*x6567))+((x6563*x6565))+((x6567*x6568))+(((-205.0)*x6563*x6566))+(((-205.0)*x6563*x6567))+((x6564*x6570))+((x6563*x6570))+((x6564*x6565))+(((-0.00178)*x6564))+(((-0.00178)*x6563))+((x6566*x6568))+(((-1.0)*x6563*x6569))+(((-1.0)*x6563*x6571))+(((-1.0)*x6564*x6569))+(((-1.0)*x6564*x6571))))), ((x6573.value)*((x6564+x6563))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6574=IKcos(j0);
IkReal x6575=IKsin(j0);
IkReal x6576=((0.376)*sj1);
IkReal x6577=(cj5*r01);
IkReal x6578=(cj5*r11);
IkReal x6579=((0.376)*sj2);
IkReal x6580=((0.408)*sj1);
IkReal x6581=((1.0)*sj5);
IkReal x6582=(sj1*sj2);
IkReal x6583=((0.1025)*sj5);
IkReal x6584=(cj2*x6575);
IkReal x6585=(cj1*x6574);
IkReal x6586=(cj1*x6575);
evalcond[0]=(((cj2*x6585))+(((-1.0)*r00*x6581))+((x6574*x6582))+(((-1.0)*x6577)));
evalcond[1]=((((-1.0)*r10*x6581))+((x6575*x6582))+(((-1.0)*x6578))+((cj1*x6584)));
evalcond[2]=((((-1.0)*cj2*x6574*x6576))+(((8.9e-7)*x6574))+(((0.1215)*x6575))+((x6579*x6585))+(((-1.0)*x6574*x6580))+((r00*x6583))+(((-1.0)*px))+(((1.97e-6)*x6585))+(((0.1025)*x6577)));
evalcond[3]=((((-1.0)*x6576*x6584))+(((-1.0)*x6575*x6580))+(((-0.1215)*x6574))+(((8.9e-7)*x6575))+((x6579*x6586))+(((-1.0)*py))+(((1.97e-6)*x6586))+(((0.1025)*x6578))+((r10*x6583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6587=((1.0)*sj5);
IkReal x6588=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6587)));
j4eval[0]=x6588;
j4eval[1]=IKsign(x6588);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x6587))+((cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6589=((1.0)*sj5);
IkReal x6590=((((-1.0)*r00*x6589))+(((-1.0)*cj5*r01)));
j4eval[0]=x6590;
j4eval[1]=IKsign(x6590);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x6589))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6591=((1.0)*sj5);
IkReal x6592=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6592;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x6591))+(((-1.0)*r11*sj0*x6591)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x6592);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6594 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6594)==0){
continue;
}
IkReal x6593=pow(x6594,-0.5);
CheckValue<IkReal> x6595 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6595.valid){
continue;
}
IkReal gconst132=((-1.0)*(x6595.value));
IkReal gconst133=((-1.0)*r21*x6593);
IkReal gconst134=(r20*x6593);
CheckValue<IkReal> x6596 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6596.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6596.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x6599 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6599.valid){
continue;
}
IkReal x6597=((-1.0)*(x6599.value));
IkReal x6598=x6593;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x6597;
IkReal gconst132=x6597;
IkReal gconst133=((-1.0)*r21*x6598);
IkReal gconst134=(r20*x6598);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6602 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6602.valid){
continue;
}
IkReal x6600=((-1.0)*(x6602.value));
IkReal x6601=x6593;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x6600;
IkReal gconst132=x6600;
IkReal gconst133=((-1.0)*r21*x6601);
IkReal gconst134=(r20*x6601);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x6605 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6605.valid){
continue;
}
IkReal x6603=((-1.0)*(x6605.value));
IkReal x6604=x6593;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x6603;
IkReal gconst132=x6603;
IkReal gconst133=((-1.0)*r21*x6604);
IkReal gconst134=(r20*x6604);
IkReal x6606=((1.0)*(r22*r22));
CheckValue<IkReal> x6610=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6606))),-1);
if(!x6610.valid){
continue;
}
IkReal x6607=x6610.value;
IkReal x6608=((1.0)*x6607);
IkReal x6609=((((-2.0)*x6607*(r20*r20)*(r21*r21)))+(((-1.0)*x6608*(r21*r21*r21*r21)))+(((-1.0)*x6606))+(((-1.0)*x6608*(r20*r20*r20*r20))));
j4eval[0]=x6609;
j4eval[1]=IKsign(x6609);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6611=(gconst133*r21);
IkReal x6612=(cj1*cj2);
IkReal x6613=(gconst134*r20);
IkReal x6614=(sj1*sj2);
CheckValue<IkReal> x6615=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6613*x6613)))+(((-1.0)*(x6611*x6611)))+(((2.0)*x6611*x6613))+(((-1.0)*(r22*r22))))),-1);
if(!x6615.valid){
continue;
}
CheckValue<IkReal> x6616 = IKatan2WithCheck(IkReal((((r22*x6612))+((r22*x6614)))),IkReal((((x6613*x6614))+(((-1.0)*x6611*x6612))+(((-1.0)*x6611*x6614))+((x6612*x6613)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6616.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6615.value)))+(x6616.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6617=IKsin(j4);
IkReal x6618=IKcos(j4);
IkReal x6619=(gconst134*r10);
IkReal x6620=(gconst133*r11);
IkReal x6621=(gconst133*r01);
IkReal x6622=(gconst133*r21);
IkReal x6623=(cj1*sj2);
IkReal x6624=((1.0)*x6618);
IkReal x6625=((1.0)*x6617);
IkReal x6626=((1.0)*cj2*sj1);
IkReal x6627=(gconst134*x6618);
IkReal x6628=(gconst134*x6617);
evalcond[0]=((((-1.0)*r22*x6624))+(((-1.0)*x6622*x6625))+((r20*x6628)));
evalcond[1]=(sj0+((r00*x6628))+(((-1.0)*r02*x6624))+(((-1.0)*x6621*x6625)));
evalcond[2]=((((-1.0)*r12*x6624))+(((-1.0)*x6620*x6625))+((x6617*x6619))+(((-1.0)*cj0)));
evalcond[3]=(((sj1*sj2))+((r22*x6617))+((cj1*cj2))+(((-1.0)*x6622*x6624))+((r20*x6627)));
evalcond[4]=(((r02*x6617))+((r00*x6627))+(((-1.0)*cj0*x6626))+(((-1.0)*x6621*x6624))+((cj0*x6623)));
evalcond[5]=((((-1.0)*x6620*x6624))+((x6618*x6619))+((r12*x6617))+(((-1.0)*sj0*x6626))+((sj0*x6623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6629=((1.0)*gconst133);
CheckValue<IkReal> x6630 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst134*r20))+(((-1.0)*cj0*r21*x6629)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6630.valid){
continue;
}
CheckValue<IkReal> x6631=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6629))+(((-1.0)*gconst134*r01)))),-1);
if(!x6631.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6630.value)+(((1.5707963267949)*(x6631.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6632=IKsin(j4);
IkReal x6633=IKcos(j4);
IkReal x6634=(gconst134*r10);
IkReal x6635=(gconst133*r11);
IkReal x6636=(gconst133*r01);
IkReal x6637=(gconst133*r21);
IkReal x6638=(cj1*sj2);
IkReal x6639=((1.0)*x6633);
IkReal x6640=((1.0)*x6632);
IkReal x6641=((1.0)*cj2*sj1);
IkReal x6642=(gconst134*x6633);
IkReal x6643=(gconst134*x6632);
evalcond[0]=((((-1.0)*r22*x6639))+(((-1.0)*x6637*x6640))+((r20*x6643)));
evalcond[1]=(sj0+((r00*x6643))+(((-1.0)*x6636*x6640))+(((-1.0)*r02*x6639)));
evalcond[2]=(((x6632*x6634))+(((-1.0)*cj0))+(((-1.0)*r12*x6639))+(((-1.0)*x6635*x6640)));
evalcond[3]=((((-1.0)*x6637*x6639))+((sj1*sj2))+((r22*x6632))+((cj1*cj2))+((r20*x6642)));
evalcond[4]=(((r00*x6642))+(((-1.0)*x6636*x6639))+(((-1.0)*cj0*x6641))+((cj0*x6638))+((r02*x6632)));
evalcond[5]=(((x6633*x6634))+((r12*x6632))+(((-1.0)*sj0*x6641))+(((-1.0)*x6635*x6639))+((sj0*x6638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6644=((1.0)*gconst133);
CheckValue<IkReal> x6645=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst134*r11))+(((-1.0)*r10*x6644)))),-1);
if(!x6645.valid){
continue;
}
CheckValue<IkReal> x6646 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x6644))+((gconst134*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6646.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6645.value)))+(x6646.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6647=IKsin(j4);
IkReal x6648=IKcos(j4);
IkReal x6649=(gconst134*r10);
IkReal x6650=(gconst133*r11);
IkReal x6651=(gconst133*r01);
IkReal x6652=(gconst133*r21);
IkReal x6653=(cj1*sj2);
IkReal x6654=((1.0)*x6648);
IkReal x6655=((1.0)*x6647);
IkReal x6656=((1.0)*cj2*sj1);
IkReal x6657=(gconst134*x6648);
IkReal x6658=(gconst134*x6647);
evalcond[0]=((((-1.0)*r22*x6654))+(((-1.0)*x6652*x6655))+((r20*x6658)));
evalcond[1]=((((-1.0)*x6651*x6655))+sj0+((r00*x6658))+(((-1.0)*r02*x6654)));
evalcond[2]=(((x6647*x6649))+(((-1.0)*r12*x6654))+(((-1.0)*x6650*x6655))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x6652*x6654))+((r20*x6657))+((r22*x6647))+((sj1*sj2))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x6651*x6654))+((r00*x6657))+(((-1.0)*cj0*x6656))+((r02*x6647))+((cj0*x6653)));
evalcond[5]=((((-1.0)*sj0*x6656))+(((-1.0)*x6650*x6654))+((sj0*x6653))+((r12*x6647))+((x6648*x6649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6660 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6660)==0){
continue;
}
IkReal x6659=pow(x6660,-0.5);
CheckValue<IkReal> x6661 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6661.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x6661.value))));
IkReal gconst136=((1.0)*r21*x6659);
IkReal gconst137=((-1.0)*r20*x6659);
CheckValue<IkReal> x6662 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6662.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6662.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x6665 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6665.valid){
continue;
}
IkReal x6663=((1.0)*(x6665.value));
IkReal x6664=x6659;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6663)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6663)));
IkReal gconst136=((1.0)*r21*x6664);
IkReal gconst137=((-1.0)*r20*x6664);
IkReal x6666=r22*r22;
IkReal x6667=((1.0)*x6666);
CheckValue<IkReal> x6671=IKPowWithIntegerCheck(((-1.0)+x6666),-1);
if(!x6671.valid){
continue;
}
IkReal x6668=x6671.value;
if((((1.0)+(((-1.0)*x6667)))) < -0.00001)
continue;
IkReal x6669=IKsqrt(((1.0)+(((-1.0)*x6667))));
IkReal x6670=(sj0*x6668*x6669);
j4eval[0]=((IKabs((x6670+(((-1.0)*x6667*x6670)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6674 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6674.valid){
continue;
}
IkReal x6672=((1.0)*(x6674.value));
IkReal x6673=x6659;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6672)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6672)));
IkReal gconst136=((1.0)*r21*x6673);
IkReal gconst137=((-1.0)*r20*x6673);
IkReal x6675=r22*r22;
IkReal x6676=((1.0)*x6675);
CheckValue<IkReal> x6680=IKPowWithIntegerCheck(((-1.0)+x6675),-1);
if(!x6680.valid){
continue;
}
IkReal x6677=x6680.value;
if((((1.0)+(((-1.0)*x6676)))) < -0.00001)
continue;
IkReal x6678=IKsqrt(((1.0)+(((-1.0)*x6676))));
IkReal x6679=(cj0*x6677*x6678);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x6679+(((-1.0)*x6676*x6679))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x6683 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6683.valid){
continue;
}
IkReal x6681=((1.0)*(x6683.value));
IkReal x6682=x6659;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6681)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6681)));
IkReal gconst136=((1.0)*r21*x6682);
IkReal gconst137=((-1.0)*r20*x6682);
IkReal x6684=r22*r22;
IkReal x6685=(cj0*r02);
IkReal x6686=(r12*sj0);
CheckValue<IkReal> x6690=IKPowWithIntegerCheck(((-1.0)+x6684),-1);
if(!x6690.valid){
continue;
}
IkReal x6687=x6690.value;
if((((1.0)+(((-1.0)*x6684)))) < -0.00001)
continue;
IkReal x6688=IKsqrt(((1.0)+(((-1.0)*x6684))));
IkReal x6689=((1.0)*r22*x6687*x6688);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((x6685+x6686)))+(IKabs(((((-1.0)*x6686*x6689))+(((-1.0)*x6685*x6689))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6691=((1.0)*gconst136);
CheckValue<IkReal> x6692 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x6691))+((gconst137*r10*sj0))+(((-1.0)*cj0*r01*x6691))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6692.valid){
continue;
}
CheckValue<IkReal> x6693=IKPowWithIntegerCheck(IKsign((((gconst136*r20))+((gconst137*r21)))),-1);
if(!x6693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6692.value)+(((1.5707963267949)*(x6693.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6694=IKsin(j4);
IkReal x6695=IKcos(j4);
IkReal x6696=(gconst136*r01);
IkReal x6697=(gconst136*r21);
IkReal x6698=(gconst136*r11);
IkReal x6699=(cj1*sj2);
IkReal x6700=((1.0)*x6695);
IkReal x6701=(gconst137*x6695);
IkReal x6702=((1.0)*x6694);
IkReal x6703=(gconst137*x6694);
IkReal x6704=((1.0)*cj2*sj1);
evalcond[0]=((((-1.0)*x6697*x6702))+(((-1.0)*r22*x6700))+((r20*x6703)));
evalcond[1]=(sj0+(((-1.0)*x6696*x6702))+(((-1.0)*r02*x6700))+((r00*x6703)));
evalcond[2]=(((r10*x6703))+(((-1.0)*x6698*x6702))+(((-1.0)*r12*x6700))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x6694))+(((-1.0)*x6697*x6700))+((r20*x6701))+((sj1*sj2))+((cj1*cj2)));
evalcond[4]=((((-1.0)*cj0*x6704))+(((-1.0)*x6696*x6700))+((cj0*x6699))+((r00*x6701))+((r02*x6694)));
evalcond[5]=(((r10*x6701))+(((-1.0)*x6698*x6700))+((r12*x6694))+((sj0*x6699))+(((-1.0)*sj0*x6704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6705=((1.0)*gconst136);
CheckValue<IkReal> x6706=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst137*r01))+(((-1.0)*r00*x6705)))),-1);
if(!x6706.valid){
continue;
}
CheckValue<IkReal> x6707 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x6705))+((cj0*gconst137*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6706.value)))+(x6707.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6708=IKsin(j4);
IkReal x6709=IKcos(j4);
IkReal x6710=(gconst136*r01);
IkReal x6711=(gconst136*r21);
IkReal x6712=(gconst136*r11);
IkReal x6713=(cj1*sj2);
IkReal x6714=((1.0)*x6709);
IkReal x6715=(gconst137*x6709);
IkReal x6716=((1.0)*x6708);
IkReal x6717=(gconst137*x6708);
IkReal x6718=((1.0)*cj2*sj1);
evalcond[0]=(((r20*x6717))+(((-1.0)*x6711*x6716))+(((-1.0)*r22*x6714)));
evalcond[1]=(sj0+(((-1.0)*x6710*x6716))+(((-1.0)*r02*x6714))+((r00*x6717)));
evalcond[2]=((((-1.0)*x6712*x6716))+(((-1.0)*r12*x6714))+((r10*x6717))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x6715))+(((-1.0)*x6711*x6714))+((sj1*sj2))+((cj1*cj2))+((r22*x6708)));
evalcond[4]=(((cj0*x6713))+(((-1.0)*x6710*x6714))+(((-1.0)*cj0*x6718))+((r00*x6715))+((r02*x6708)));
evalcond[5]=((((-1.0)*sj0*x6718))+(((-1.0)*x6712*x6714))+((r10*x6715))+((r12*x6708))+((sj0*x6713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6719=((1.0)*gconst136);
CheckValue<IkReal> x6720=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst137*r11))+(((-1.0)*r10*x6719)))),-1);
if(!x6720.valid){
continue;
}
CheckValue<IkReal> x6721 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst137*r20*sj0))+(((-1.0)*r21*sj0*x6719)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6721.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6720.value)))+(x6721.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6722=IKsin(j4);
IkReal x6723=IKcos(j4);
IkReal x6724=(gconst136*r01);
IkReal x6725=(gconst136*r21);
IkReal x6726=(gconst136*r11);
IkReal x6727=(cj1*sj2);
IkReal x6728=((1.0)*x6723);
IkReal x6729=(gconst137*x6723);
IkReal x6730=((1.0)*x6722);
IkReal x6731=(gconst137*x6722);
IkReal x6732=((1.0)*cj2*sj1);
evalcond[0]=((((-1.0)*r22*x6728))+(((-1.0)*x6725*x6730))+((r20*x6731)));
evalcond[1]=(sj0+(((-1.0)*x6724*x6730))+(((-1.0)*r02*x6728))+((r00*x6731)));
evalcond[2]=((((-1.0)*x6726*x6730))+((r10*x6731))+(((-1.0)*r12*x6728))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x6729))+((r22*x6722))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*x6725*x6728)));
evalcond[4]=((((-1.0)*x6724*x6728))+((cj0*x6727))+(((-1.0)*cj0*x6732))+((r02*x6722))+((r00*x6729)));
evalcond[5]=(((r12*x6722))+(((-1.0)*sj0*x6732))+((r10*x6729))+(((-1.0)*x6726*x6728))+((sj0*x6727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6733=((-1.0)*r00);
IkReal x6735 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6735)==0){
continue;
}
IkReal x6734=pow(x6735,-0.5);
CheckValue<IkReal> x6736 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6733),IKFAST_ATAN2_MAGTHRESH);
if(!x6736.valid){
continue;
}
IkReal gconst138=((-1.0)*(x6736.value));
IkReal gconst139=(r01*x6734);
IkReal gconst140=(x6733*x6734);
CheckValue<IkReal> x6737 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6737.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6737.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6738=((-1.0)*r00);
IkReal x6739=x6734;
CheckValue<IkReal> x6741 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6738),IKFAST_ATAN2_MAGTHRESH);
if(!x6741.valid){
continue;
}
IkReal x6740=((-1.0)*(x6741.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst139;
cj5=gconst140;
j5=x6740;
IkReal gconst138=x6740;
IkReal gconst139=(r01*x6739);
IkReal gconst140=(x6738*x6739);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6742=((1.0)*gconst139);
CheckValue<IkReal> x6743=IKPowWithIntegerCheck(IKsign((((gconst139*r20))+((gconst140*r21)))),-1);
if(!x6743.valid){
continue;
}
CheckValue<IkReal> x6744 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x6742))+(((-1.0)*cj0*r01*x6742))+((gconst140*r10*sj0))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6743.value)))+(x6744.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6745=IKsin(j4);
IkReal x6746=IKcos(j4);
IkReal x6747=(gconst140*r10);
IkReal x6748=(cj1*sj2);
IkReal x6749=((1.0)*x6746);
IkReal x6750=(gconst140*x6746);
IkReal x6751=((1.0)*cj2*sj1);
IkReal x6752=(gconst140*x6745);
IkReal x6753=((1.0)*gconst139*x6745);
evalcond[0]=((((-1.0)*r22*x6749))+((r20*x6752))+(((-1.0)*r21*x6753)));
evalcond[1]=(sj0+((r00*x6752))+(((-1.0)*r02*x6749))+(((-1.0)*r01*x6753)));
evalcond[2]=((((-1.0)*r12*x6749))+((x6745*x6747))+(((-1.0)*r11*x6753))+(((-1.0)*cj0)));
evalcond[3]=(((sj1*sj2))+((r20*x6750))+((cj1*cj2))+(((-1.0)*gconst139*r21*x6749))+((r22*x6745)));
evalcond[4]=(((r02*x6745))+((cj0*x6748))+((r00*x6750))+(((-1.0)*cj0*x6751))+(((-1.0)*gconst139*r01*x6749)));
evalcond[5]=(((x6746*x6747))+(((-1.0)*sj0*x6751))+((sj0*x6748))+((r12*x6745))+(((-1.0)*gconst139*r11*x6749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6754=((1.0)*gconst139);
CheckValue<IkReal> x6755 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x6754))+((gconst140*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6755.valid){
continue;
}
CheckValue<IkReal> x6756=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6754))+(((-1.0)*gconst140*r11)))),-1);
if(!x6756.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6755.value)+(((1.5707963267949)*(x6756.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6757=IKsin(j4);
IkReal x6758=IKcos(j4);
IkReal x6759=(gconst140*r10);
IkReal x6760=(cj1*sj2);
IkReal x6761=((1.0)*x6758);
IkReal x6762=(gconst140*x6758);
IkReal x6763=((1.0)*cj2*sj1);
IkReal x6764=(gconst140*x6757);
IkReal x6765=((1.0)*gconst139*x6757);
evalcond[0]=((((-1.0)*r22*x6761))+((r20*x6764))+(((-1.0)*r21*x6765)));
evalcond[1]=(sj0+((r00*x6764))+(((-1.0)*r01*x6765))+(((-1.0)*r02*x6761)));
evalcond[2]=(((x6757*x6759))+(((-1.0)*r11*x6765))+(((-1.0)*r12*x6761))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x6757))+(((-1.0)*gconst139*r21*x6761))+((sj1*sj2))+((r20*x6762))+((cj1*cj2)));
evalcond[4]=(((cj0*x6760))+((r00*x6762))+(((-1.0)*cj0*x6763))+((r02*x6757))+(((-1.0)*gconst139*r01*x6761)));
evalcond[5]=(((x6758*x6759))+(((-1.0)*sj0*x6763))+((r12*x6757))+(((-1.0)*gconst139*r11*x6761))+((sj0*x6760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6766=((-1.0)*r01);
IkReal x6768 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6768)==0){
continue;
}
IkReal x6767=pow(x6768,-0.5);
CheckValue<IkReal> x6769 = IKatan2WithCheck(IkReal(x6766),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6769.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x6769.value))));
IkReal gconst142=(x6766*x6767);
IkReal gconst143=((1.0)*r00*x6767);
CheckValue<IkReal> x6770 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6770.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6770.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6771=((-1.0)*r01);
CheckValue<IkReal> x6774 = IKatan2WithCheck(IkReal(x6771),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6774.valid){
continue;
}
IkReal x6772=((1.0)*(x6774.value));
IkReal x6773=x6767;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x6772)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6772)));
IkReal gconst142=(x6771*x6773);
IkReal gconst143=((1.0)*r00*x6773);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x6775=((-1.0)*r01);
CheckValue<IkReal> x6778 = IKatan2WithCheck(IkReal(x6775),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6778.valid){
continue;
}
IkReal x6776=((1.0)*(x6778.value));
IkReal x6777=x6767;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x6776)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6776)));
IkReal gconst142=(x6775*x6777);
IkReal gconst143=((1.0)*r00*x6777);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6779=((-1.0)*r01);
CheckValue<IkReal> x6782 = IKatan2WithCheck(IkReal(x6779),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6782.valid){
continue;
}
IkReal x6780=((1.0)*(x6782.value));
IkReal x6781=x6767;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x6780)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6780)));
IkReal gconst142=(x6779*x6781);
IkReal gconst143=((1.0)*r00*x6781);
IkReal x6783=r02*r02;
IkReal x6784=(r12*sj0);
IkReal x6785=x6767;
IkReal x6786=(cj0*x6785);
j4eval[0]=((IKabs(((((-1.0)*x6786))+((x6783*x6786))+((r02*x6784*x6785)))))+(IKabs((x6784+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6787=((1.0)*gconst142);
CheckValue<IkReal> x6788 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst143*r00))+((gconst143*r10*sj0))+(((-1.0)*cj0*r01*x6787))+(((-1.0)*r11*sj0*x6787)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6788.valid){
continue;
}
CheckValue<IkReal> x6789=IKPowWithIntegerCheck(IKsign((((gconst143*r21))+((gconst142*r20)))),-1);
if(!x6789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6788.value)+(((1.5707963267949)*(x6789.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6790=IKsin(j4);
IkReal x6791=IKcos(j4);
IkReal x6792=(gconst143*r00);
IkReal x6793=(gconst142*r21);
IkReal x6794=(gconst142*r11);
IkReal x6795=(gconst142*r01);
IkReal x6796=(cj1*sj2);
IkReal x6797=((1.0)*x6791);
IkReal x6798=((1.0)*x6790);
IkReal x6799=((1.0)*cj2*sj1);
IkReal x6800=(gconst143*x6791);
IkReal x6801=(gconst143*x6790);
evalcond[0]=((((-1.0)*x6793*x6798))+((r20*x6801))+(((-1.0)*r22*x6797)));
evalcond[1]=(sj0+(((-1.0)*x6795*x6798))+((x6790*x6792))+(((-1.0)*r02*x6797)));
evalcond[2]=(((r10*x6801))+(((-1.0)*x6794*x6798))+(((-1.0)*cj0))+(((-1.0)*r12*x6797)));
evalcond[3]=(((r22*x6790))+(((-1.0)*x6793*x6797))+((sj1*sj2))+((r20*x6800))+((cj1*cj2)));
evalcond[4]=(((r02*x6790))+(((-1.0)*x6795*x6797))+((cj0*x6796))+(((-1.0)*cj0*x6799))+((x6791*x6792)));
evalcond[5]=(((sj0*x6796))+((r10*x6800))+((r12*x6790))+(((-1.0)*sj0*x6799))+(((-1.0)*x6794*x6797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6802=((1.0)*gconst142);
CheckValue<IkReal> x6803 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x6802))+((cj0*gconst143*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6803.valid){
continue;
}
CheckValue<IkReal> x6804=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst143*r01))+(((-1.0)*r00*x6802)))),-1);
if(!x6804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6803.value)+(((1.5707963267949)*(x6804.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6805=IKsin(j4);
IkReal x6806=IKcos(j4);
IkReal x6807=(gconst143*r00);
IkReal x6808=(gconst142*r21);
IkReal x6809=(gconst142*r11);
IkReal x6810=(gconst142*r01);
IkReal x6811=(cj1*sj2);
IkReal x6812=((1.0)*x6806);
IkReal x6813=((1.0)*x6805);
IkReal x6814=((1.0)*cj2*sj1);
IkReal x6815=(gconst143*x6806);
IkReal x6816=(gconst143*x6805);
evalcond[0]=((((-1.0)*x6808*x6813))+(((-1.0)*r22*x6812))+((r20*x6816)));
evalcond[1]=(((x6805*x6807))+sj0+(((-1.0)*x6810*x6813))+(((-1.0)*r02*x6812)));
evalcond[2]=(((r10*x6816))+(((-1.0)*x6809*x6813))+(((-1.0)*r12*x6812))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x6805))+(((-1.0)*x6808*x6812))+((sj1*sj2))+((cj1*cj2))+((r20*x6815)));
evalcond[4]=((((-1.0)*x6810*x6812))+((cj0*x6811))+((r02*x6805))+((x6806*x6807))+(((-1.0)*cj0*x6814)));
evalcond[5]=(((r10*x6815))+(((-1.0)*x6809*x6812))+((r12*x6805))+((sj0*x6811))+(((-1.0)*sj0*x6814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6817=((1.0)*gconst142);
CheckValue<IkReal> x6818=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6817))+(((-1.0)*gconst143*r11)))),-1);
if(!x6818.valid){
continue;
}
CheckValue<IkReal> x6819 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst143*r20*sj0))+(((-1.0)*r21*sj0*x6817)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6819.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6818.value)))+(x6819.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6820=IKsin(j4);
IkReal x6821=IKcos(j4);
IkReal x6822=(gconst143*r00);
IkReal x6823=(gconst142*r21);
IkReal x6824=(gconst142*r11);
IkReal x6825=(gconst142*r01);
IkReal x6826=(cj1*sj2);
IkReal x6827=((1.0)*x6821);
IkReal x6828=((1.0)*x6820);
IkReal x6829=((1.0)*cj2*sj1);
IkReal x6830=(gconst143*x6821);
IkReal x6831=(gconst143*x6820);
evalcond[0]=((((-1.0)*x6823*x6828))+((r20*x6831))+(((-1.0)*r22*x6827)));
evalcond[1]=(sj0+(((-1.0)*r02*x6827))+((x6820*x6822))+(((-1.0)*x6825*x6828)));
evalcond[2]=((((-1.0)*r12*x6827))+(((-1.0)*x6824*x6828))+((r10*x6831))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x6820))+(((-1.0)*x6823*x6827))+((sj1*sj2))+((r20*x6830))+((cj1*cj2)));
evalcond[4]=(((r02*x6820))+(((-1.0)*cj0*x6829))+((cj0*x6826))+(((-1.0)*x6825*x6827))+((x6821*x6822)));
evalcond[5]=((((-1.0)*sj0*x6829))+((sj0*x6826))+(((-1.0)*x6824*x6827))+((r10*x6830))+((r12*x6820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6832=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6832;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x6832);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6833=((1.0)*sj5);
IkReal x6834=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6833)));
j4eval[0]=x6834;
j4eval[1]=IKsign(x6834);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x6833))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6835=cj5*cj5;
IkReal x6836=r01*r01;
IkReal x6837=(r01*sj5);
IkReal x6838=(cj5*r00);
IkReal x6839=((((-1.0)*(r02*r02)))+(((-1.0)*x6836))+(((-1.0)*x6835*(r00*r00)))+((x6835*x6836))+(((2.0)*x6837*x6838)));
j4eval[0]=x6839;
j4eval[1]=IKsign(x6839);
j4eval[2]=((IKabs(((((-1.0)*x6837))+x6838)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6840=cj5*cj5;
IkReal x6841=r01*r01;
IkReal x6842=(r01*sj5);
IkReal x6843=(cj5*r00);
CheckValue<IkReal> x6844 = IKatan2WithCheck(IkReal((x6843+(((-1.0)*x6842)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6844.valid){
continue;
}
CheckValue<IkReal> x6845=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x6842*x6843))+((x6840*x6841))+(((-1.0)*x6841))+(((-1.0)*x6840*(r00*r00))))),-1);
if(!x6845.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6844.value)+(((1.5707963267949)*(x6845.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6846=IKcos(j4);
IkReal x6847=IKsin(j4);
IkReal x6848=((1.0)*x6846);
IkReal x6849=(cj5*x6846);
IkReal x6850=(cj5*x6847);
IkReal x6851=((1.0)*sj5*x6847);
evalcond[0]=((((-1.0)*r01*sj5*x6848))+((r00*x6849))+((r02*x6847)));
evalcond[1]=((((-1.0)*r22*x6848))+((r20*x6850))+(((-1.0)*r21*x6851)));
evalcond[2]=(((r10*x6850))+(((-1.0)*r11*x6851))+(((-1.0)*r12*x6848)));
evalcond[3]=((1.0)+((r00*x6850))+(((-1.0)*r01*x6851))+(((-1.0)*r02*x6848)));
evalcond[4]=((((-1.0)*r21*sj5*x6848))+((r22*x6847))+((sj1*sj2))+((r20*x6849))+((cj1*cj2)));
evalcond[5]=(((r12*x6847))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r11*sj5*x6848))+((r10*x6849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6852=((1.0)*sj5);
CheckValue<IkReal> x6853=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6852)))),-1);
if(!x6853.valid){
continue;
}
CheckValue<IkReal> x6854 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x6852)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6854.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6853.value)))+(x6854.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6855=IKcos(j4);
IkReal x6856=IKsin(j4);
IkReal x6857=((1.0)*x6855);
IkReal x6858=(cj5*x6855);
IkReal x6859=(cj5*x6856);
IkReal x6860=((1.0)*sj5*x6856);
evalcond[0]=(((r02*x6856))+((r00*x6858))+(((-1.0)*r01*sj5*x6857)));
evalcond[1]=((((-1.0)*r21*x6860))+((r20*x6859))+(((-1.0)*r22*x6857)));
evalcond[2]=(((r10*x6859))+(((-1.0)*r12*x6857))+(((-1.0)*r11*x6860)));
evalcond[3]=((1.0)+(((-1.0)*r01*x6860))+(((-1.0)*r02*x6857))+((r00*x6859)));
evalcond[4]=((((-1.0)*r21*sj5*x6857))+((r22*x6856))+((sj1*sj2))+((r20*x6858))+((cj1*cj2)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((r10*x6858))+((r12*x6856))+(((-1.0)*r11*sj5*x6857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6861 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6861.valid){
continue;
}
CheckValue<IkReal> x6862=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6862.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6861.value)+(((1.5707963267949)*(x6862.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6863=IKcos(j4);
IkReal x6864=IKsin(j4);
IkReal x6865=((1.0)*x6863);
IkReal x6866=(cj5*x6863);
IkReal x6867=(cj5*x6864);
IkReal x6868=((1.0)*sj5*x6864);
evalcond[0]=(((r02*x6864))+(((-1.0)*r01*sj5*x6865))+((r00*x6866)));
evalcond[1]=((((-1.0)*r21*x6868))+(((-1.0)*r22*x6865))+((r20*x6867)));
evalcond[2]=((((-1.0)*r12*x6865))+(((-1.0)*r11*x6868))+((r10*x6867)));
evalcond[3]=((1.0)+(((-1.0)*r01*x6868))+(((-1.0)*r02*x6865))+((r00*x6867)));
evalcond[4]=(((r22*x6864))+(((-1.0)*r21*sj5*x6865))+((sj1*sj2))+((cj1*cj2))+((r20*x6866)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((r12*x6864))+(((-1.0)*r11*sj5*x6865))+((r10*x6866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6869=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6869;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x6869);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6870=((1.0)*sj5);
IkReal x6871=((((-1.0)*r20*x6870))+(((-1.0)*cj5*r21)));
j4eval[0]=x6871;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x6870))))));
j4eval[2]=IKsign(x6871);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6872=cj5*cj5;
IkReal x6873=r01*r01;
IkReal x6874=(cj5*r00);
IkReal x6875=(r01*sj5);
IkReal x6876=((((-1.0)*x6872*x6873))+((x6872*(r00*r00)))+x6873+(((-2.0)*x6874*x6875))+(r02*r02));
j4eval[0]=x6876;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x6875))+x6874))));
j4eval[2]=IKsign(x6876);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6877=cj5*cj5;
IkReal x6878=r01*r01;
IkReal x6879=(r01*sj5);
IkReal x6880=(cj5*r00);
CheckValue<IkReal> x6881 = IKatan2WithCheck(IkReal(((((-1.0)*x6879))+x6880)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6881.valid){
continue;
}
CheckValue<IkReal> x6882=IKPowWithIntegerCheck(IKsign((x6878+(((-2.0)*x6879*x6880))+(r02*r02)+(((-1.0)*x6877*x6878))+((x6877*(r00*r00))))),-1);
if(!x6882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6881.value)+(((1.5707963267949)*(x6882.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6883=IKcos(j4);
IkReal x6884=IKsin(j4);
IkReal x6885=((1.0)*x6883);
IkReal x6886=(cj5*x6883);
IkReal x6887=(cj5*x6884);
IkReal x6888=((1.0)*sj5*x6884);
evalcond[0]=((((-1.0)*r01*sj5*x6885))+((r02*x6884))+((r00*x6886)));
evalcond[1]=(((r20*x6887))+(((-1.0)*r21*x6888))+(((-1.0)*r22*x6885)));
evalcond[2]=((((-1.0)*r11*x6888))+(((-1.0)*r12*x6885))+((r10*x6887)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6885))+(((-1.0)*r01*x6888))+((r00*x6887)));
evalcond[4]=(((r20*x6886))+(((-1.0)*r21*sj5*x6885))+((sj1*sj2))+((r22*x6884))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x6885))+((r12*x6884))+((r10*x6886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6889=((1.0)*sj5);
CheckValue<IkReal> x6890=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6889))+(((-1.0)*cj5*r21)))),-1);
if(!x6890.valid){
continue;
}
CheckValue<IkReal> x6891 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x6889)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6890.value)))+(x6891.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6892=IKcos(j4);
IkReal x6893=IKsin(j4);
IkReal x6894=((1.0)*x6892);
IkReal x6895=(cj5*x6892);
IkReal x6896=(cj5*x6893);
IkReal x6897=((1.0)*sj5*x6893);
evalcond[0]=((((-1.0)*r01*sj5*x6894))+((r02*x6893))+((r00*x6895)));
evalcond[1]=((((-1.0)*r21*x6897))+(((-1.0)*r22*x6894))+((r20*x6896)));
evalcond[2]=(((r10*x6896))+(((-1.0)*r12*x6894))+(((-1.0)*r11*x6897)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x6897))+(((-1.0)*r02*x6894))+((r00*x6896)));
evalcond[4]=((((-1.0)*r21*sj5*x6894))+((sj1*sj2))+((r22*x6893))+((cj1*cj2))+((r20*x6895)));
evalcond[5]=(((cj2*sj1))+((r10*x6895))+((r12*x6893))+(((-1.0)*r11*sj5*x6894))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6898=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6898.valid){
continue;
}
CheckValue<IkReal> x6899 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6899.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6898.value)))+(x6899.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6900=IKcos(j4);
IkReal x6901=IKsin(j4);
IkReal x6902=((1.0)*x6900);
IkReal x6903=(cj5*x6900);
IkReal x6904=(cj5*x6901);
IkReal x6905=((1.0)*sj5*x6901);
evalcond[0]=(((r00*x6903))+((r02*x6901))+(((-1.0)*r01*sj5*x6902)));
evalcond[1]=((((-1.0)*r22*x6902))+(((-1.0)*r21*x6905))+((r20*x6904)));
evalcond[2]=((((-1.0)*r12*x6902))+(((-1.0)*r11*x6905))+((r10*x6904)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6902))+((r00*x6904))+(((-1.0)*r01*x6905)));
evalcond[4]=(((r22*x6901))+(((-1.0)*r21*sj5*x6902))+((sj1*sj2))+((cj1*cj2))+((r20*x6903)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((r10*x6903))+((r12*x6901))+(((-1.0)*r11*sj5*x6902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6906=((-1.0)*r10);
IkReal x6908 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6908)==0){
continue;
}
IkReal x6907=pow(x6908,-0.5);
CheckValue<IkReal> x6909 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6906),IKFAST_ATAN2_MAGTHRESH);
if(!x6909.valid){
continue;
}
IkReal gconst144=((-1.0)*(x6909.value));
IkReal gconst145=(r11*x6907);
IkReal gconst146=(x6906*x6907);
CheckValue<IkReal> x6910 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6910.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6910.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6911=((-1.0)*r10);
IkReal x6912=x6907;
CheckValue<IkReal> x6914 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6911),IKFAST_ATAN2_MAGTHRESH);
if(!x6914.valid){
continue;
}
IkReal x6913=((-1.0)*(x6914.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst145;
cj5=gconst146;
j5=x6913;
IkReal gconst144=x6913;
IkReal gconst145=(r11*x6912);
IkReal gconst146=(x6911*x6912);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6915=((1.0)*gconst145);
CheckValue<IkReal> x6916=IKPowWithIntegerCheck(IKsign((((gconst145*r20))+((gconst146*r21)))),-1);
if(!x6916.valid){
continue;
}
CheckValue<IkReal> x6917 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*cj0*r01*x6915))+(((-1.0)*r11*sj0*x6915))+((gconst146*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6916.value)))+(x6917.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6918=IKsin(j4);
IkReal x6919=IKcos(j4);
IkReal x6920=(gconst145*r11);
IkReal x6921=(gconst145*r01);
IkReal x6922=(gconst145*r21);
IkReal x6923=(cj1*sj2);
IkReal x6924=((1.0)*x6919);
IkReal x6925=(gconst146*x6919);
IkReal x6926=(gconst146*x6918);
IkReal x6927=((1.0)*x6918);
IkReal x6928=((1.0)*cj2*sj1);
evalcond[0]=(((r20*x6926))+(((-1.0)*r22*x6924))+(((-1.0)*x6922*x6927)));
evalcond[1]=(sj0+(((-1.0)*r02*x6924))+((r00*x6926))+(((-1.0)*x6921*x6927)));
evalcond[2]=(((r10*x6926))+(((-1.0)*x6920*x6927))+(((-1.0)*r12*x6924))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x6925))+((sj1*sj2))+((r22*x6918))+((cj1*cj2))+(((-1.0)*x6922*x6924)));
evalcond[4]=(((r00*x6925))+((cj0*x6923))+(((-1.0)*cj0*x6928))+((r02*x6918))+(((-1.0)*x6921*x6924)));
evalcond[5]=(((sj0*x6923))+((r10*x6925))+((r12*x6918))+(((-1.0)*sj0*x6928))+(((-1.0)*x6920*x6924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6929=((1.0)*gconst145);
CheckValue<IkReal> x6930 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst146*r20))+(((-1.0)*cj0*r21*x6929)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6930.valid){
continue;
}
CheckValue<IkReal> x6931=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r01))+(((-1.0)*r00*x6929)))),-1);
if(!x6931.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6930.value)+(((1.5707963267949)*(x6931.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6932=IKsin(j4);
IkReal x6933=IKcos(j4);
IkReal x6934=(gconst145*r11);
IkReal x6935=(gconst145*r01);
IkReal x6936=(gconst145*r21);
IkReal x6937=(cj1*sj2);
IkReal x6938=((1.0)*x6933);
IkReal x6939=(gconst146*x6933);
IkReal x6940=(gconst146*x6932);
IkReal x6941=((1.0)*x6932);
IkReal x6942=((1.0)*cj2*sj1);
evalcond[0]=((((-1.0)*r22*x6938))+((r20*x6940))+(((-1.0)*x6936*x6941)));
evalcond[1]=(sj0+(((-1.0)*r02*x6938))+((r00*x6940))+(((-1.0)*x6935*x6941)));
evalcond[2]=(((r10*x6940))+(((-1.0)*r12*x6938))+(((-1.0)*x6934*x6941))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x6939))+((sj1*sj2))+((r22*x6932))+((cj1*cj2))+(((-1.0)*x6936*x6938)));
evalcond[4]=((((-1.0)*cj0*x6942))+((r00*x6939))+(((-1.0)*x6935*x6938))+((cj0*x6937))+((r02*x6932)));
evalcond[5]=(((sj0*x6937))+((r10*x6939))+(((-1.0)*x6934*x6938))+((r12*x6932))+(((-1.0)*sj0*x6942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6943=((-1.0)*r11);
IkReal x6945 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6945)==0){
continue;
}
IkReal x6944=pow(x6945,-0.5);
CheckValue<IkReal> x6946 = IKatan2WithCheck(IkReal(x6943),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6946.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x6946.value))));
IkReal gconst148=(x6943*x6944);
IkReal gconst149=((1.0)*r10*x6944);
CheckValue<IkReal> x6947 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6947.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6947.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x6948=((-1.0)*r11);
CheckValue<IkReal> x6951 = IKatan2WithCheck(IkReal(x6948),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6951.valid){
continue;
}
IkReal x6949=((1.0)*(x6951.value));
IkReal x6950=x6944;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x6949)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x6949)));
IkReal gconst148=(x6948*x6950);
IkReal gconst149=((1.0)*r10*x6950);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6952=((-1.0)*r11);
CheckValue<IkReal> x6955 = IKatan2WithCheck(IkReal(x6952),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6955.valid){
continue;
}
IkReal x6953=((1.0)*(x6955.value));
IkReal x6954=x6944;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x6953)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x6953)));
IkReal gconst148=(x6952*x6954);
IkReal gconst149=((1.0)*r10*x6954);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6956=((-1.0)*r11);
CheckValue<IkReal> x6959 = IKatan2WithCheck(IkReal(x6956),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6959.valid){
continue;
}
IkReal x6957=((1.0)*(x6959.value));
IkReal x6958=x6944;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x6957)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x6957)));
IkReal gconst148=(x6956*x6958);
IkReal gconst149=((1.0)*r10*x6958);
IkReal x6960=r12*r12;
IkReal x6961=(cj0*r02);
IkReal x6962=x6944;
IkReal x6963=(sj0*x6962);
j4eval[0]=((IKabs(((((-1.0)*x6963))+((r12*x6961*x6962))+((x6960*x6963)))))+(IKabs((((r12*sj0))+x6961))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6964=((1.0)*gconst148);
CheckValue<IkReal> x6965 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst149*r10*sj0))+((cj0*gconst149*r00))+(((-1.0)*r11*sj0*x6964))+(((-1.0)*cj0*r01*x6964)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6965.valid){
continue;
}
CheckValue<IkReal> x6966=IKPowWithIntegerCheck(IKsign((((gconst148*r20))+((gconst149*r21)))),-1);
if(!x6966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6965.value)+(((1.5707963267949)*(x6966.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6967=IKsin(j4);
IkReal x6968=IKcos(j4);
IkReal x6969=(gconst148*r11);
IkReal x6970=(gconst148*r21);
IkReal x6971=(gconst148*r01);
IkReal x6972=(cj1*sj2);
IkReal x6973=((1.0)*x6968);
IkReal x6974=(gconst149*x6968);
IkReal x6975=(gconst149*x6967);
IkReal x6976=((1.0)*x6967);
IkReal x6977=((1.0)*cj2*sj1);
evalcond[0]=((((-1.0)*x6970*x6976))+(((-1.0)*r22*x6973))+((r20*x6975)));
evalcond[1]=(sj0+(((-1.0)*r02*x6973))+((r00*x6975))+(((-1.0)*x6971*x6976)));
evalcond[2]=((((-1.0)*x6969*x6976))+(((-1.0)*r12*x6973))+(((-1.0)*cj0))+((r10*x6975)));
evalcond[3]=((((-1.0)*x6970*x6973))+((r22*x6967))+((sj1*sj2))+((cj1*cj2))+((r20*x6974)));
evalcond[4]=(((r00*x6974))+(((-1.0)*x6971*x6973))+(((-1.0)*cj0*x6977))+((cj0*x6972))+((r02*x6967)));
evalcond[5]=((((-1.0)*x6969*x6973))+((sj0*x6972))+(((-1.0)*sj0*x6977))+((r10*x6974))+((r12*x6967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6978=((1.0)*gconst148);
CheckValue<IkReal> x6979 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst149*r20))+(((-1.0)*cj0*r21*x6978)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6979.valid){
continue;
}
CheckValue<IkReal> x6980=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r01))+(((-1.0)*r00*x6978)))),-1);
if(!x6980.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6979.value)+(((1.5707963267949)*(x6980.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6981=IKsin(j4);
IkReal x6982=IKcos(j4);
IkReal x6983=(gconst148*r11);
IkReal x6984=(gconst148*r21);
IkReal x6985=(gconst148*r01);
IkReal x6986=(cj1*sj2);
IkReal x6987=((1.0)*x6982);
IkReal x6988=(gconst149*x6982);
IkReal x6989=(gconst149*x6981);
IkReal x6990=((1.0)*x6981);
IkReal x6991=((1.0)*cj2*sj1);
evalcond[0]=((((-1.0)*x6984*x6990))+((r20*x6989))+(((-1.0)*r22*x6987)));
evalcond[1]=(sj0+(((-1.0)*x6985*x6990))+((r00*x6989))+(((-1.0)*r02*x6987)));
evalcond[2]=(((r10*x6989))+(((-1.0)*r12*x6987))+(((-1.0)*x6983*x6990))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x6981))+(((-1.0)*x6984*x6987))+((sj1*sj2))+((r20*x6988))+((cj1*cj2)));
evalcond[4]=((((-1.0)*cj0*x6991))+(((-1.0)*x6985*x6987))+((r02*x6981))+((cj0*x6986))+((r00*x6988)));
evalcond[5]=(((r10*x6988))+(((-1.0)*sj0*x6991))+(((-1.0)*x6983*x6987))+((r12*x6981))+((sj0*x6986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6992=((1.0)*gconst148);
CheckValue<IkReal> x6993=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r11))+(((-1.0)*r10*x6992)))),-1);
if(!x6993.valid){
continue;
}
CheckValue<IkReal> x6994 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x6992))+((gconst149*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6994.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6993.value)))+(x6994.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6995=IKsin(j4);
IkReal x6996=IKcos(j4);
IkReal x6997=(gconst148*r11);
IkReal x6998=(gconst148*r21);
IkReal x6999=(gconst148*r01);
IkReal x7000=(cj1*sj2);
IkReal x7001=((1.0)*x6996);
IkReal x7002=(gconst149*x6996);
IkReal x7003=(gconst149*x6995);
IkReal x7004=((1.0)*x6995);
IkReal x7005=((1.0)*cj2*sj1);
evalcond[0]=((((-1.0)*r22*x7001))+((r20*x7003))+(((-1.0)*x6998*x7004)));
evalcond[1]=((((-1.0)*r02*x7001))+sj0+(((-1.0)*x6999*x7004))+((r00*x7003)));
evalcond[2]=((((-1.0)*r12*x7001))+((r10*x7003))+(((-1.0)*cj0))+(((-1.0)*x6997*x7004)));
evalcond[3]=(((r20*x7002))+(((-1.0)*x6998*x7001))+((sj1*sj2))+((r22*x6995))+((cj1*cj2)));
evalcond[4]=(((r02*x6995))+(((-1.0)*x6999*x7001))+((cj0*x7000))+(((-1.0)*cj0*x7005))+((r00*x7002)));
evalcond[5]=((((-1.0)*sj0*x7005))+((r12*x6995))+((sj0*x7000))+((r10*x7002))+(((-1.0)*x6997*x7001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7006=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7006;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7006);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7007=((1.0)*sj5);
IkReal x7008=((((-1.0)*r00*x7007))+(((-1.0)*cj5*r01)));
j4eval[0]=x7008;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x7007)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7008);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7009=cj5*cj5;
IkReal x7010=r11*r11;
IkReal x7011=(r11*sj5);
IkReal x7012=(cj5*r10);
IkReal x7013=((r12*r12)+x7010+(((-1.0)*x7009*x7010))+(((-2.0)*x7011*x7012))+((x7009*(r10*r10))));
j4eval[0]=x7013;
j4eval[1]=IKsign(x7013);
j4eval[2]=((IKabs(r12))+(IKabs((x7012+(((-1.0)*x7011))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7014=cj5*cj5;
IkReal x7015=r11*r11;
IkReal x7016=(cj5*r10);
IkReal x7017=(r11*sj5);
CheckValue<IkReal> x7018 = IKatan2WithCheck(IkReal((x7016+(((-1.0)*x7017)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7018.valid){
continue;
}
CheckValue<IkReal> x7019=IKPowWithIntegerCheck(IKsign(((r12*r12)+x7015+((x7014*(r10*r10)))+(((-1.0)*x7014*x7015))+(((-2.0)*x7016*x7017)))),-1);
if(!x7019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7018.value)+(((1.5707963267949)*(x7019.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7020=IKcos(j4);
IkReal x7021=IKsin(j4);
IkReal x7022=(cj5*r10);
IkReal x7023=((1.0)*x7020);
IkReal x7024=(cj5*x7021);
IkReal x7025=(cj5*x7020);
IkReal x7026=((1.0)*sj5*x7021);
evalcond[0]=(((x7020*x7022))+((r12*x7021))+(((-1.0)*r11*sj5*x7023)));
evalcond[1]=((((-1.0)*r22*x7023))+((r20*x7024))+(((-1.0)*r21*x7026)));
evalcond[2]=(((r00*x7024))+(((-1.0)*r02*x7023))+(((-1.0)*r01*x7026)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x7023))+(((-1.0)*r11*x7026))+((x7021*x7022)));
evalcond[4]=(((sj1*sj2))+((r20*x7025))+((r22*x7021))+((cj1*cj2))+(((-1.0)*r21*sj5*x7023)));
evalcond[5]=((((-1.0)*r01*sj5*x7023))+((r00*x7025))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((r02*x7021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7027=((1.0)*sj5);
CheckValue<IkReal> x7028=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7027))+(((-1.0)*cj5*r01)))),-1);
if(!x7028.valid){
continue;
}
CheckValue<IkReal> x7029 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x7027)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7029.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7028.value)))+(x7029.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7030=IKcos(j4);
IkReal x7031=IKsin(j4);
IkReal x7032=(cj5*r10);
IkReal x7033=((1.0)*x7030);
IkReal x7034=(cj5*x7031);
IkReal x7035=(cj5*x7030);
IkReal x7036=((1.0)*sj5*x7031);
evalcond[0]=(((x7030*x7032))+((r12*x7031))+(((-1.0)*r11*sj5*x7033)));
evalcond[1]=((((-1.0)*r22*x7033))+((r20*x7034))+(((-1.0)*r21*x7036)));
evalcond[2]=((((-1.0)*r02*x7033))+((r00*x7034))+(((-1.0)*r01*x7036)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x7036))+(((-1.0)*r12*x7033))+((x7031*x7032)));
evalcond[4]=(((sj1*sj2))+((r20*x7035))+((cj1*cj2))+((r22*x7031))+(((-1.0)*r21*sj5*x7033)));
evalcond[5]=(((r00*x7035))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r01*sj5*x7033))+((r02*x7031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7037=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7037.valid){
continue;
}
CheckValue<IkReal> x7038 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7038.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7037.value)))+(x7038.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7039=IKcos(j4);
IkReal x7040=IKsin(j4);
IkReal x7041=(cj5*r10);
IkReal x7042=((1.0)*x7039);
IkReal x7043=(cj5*x7040);
IkReal x7044=(cj5*x7039);
IkReal x7045=((1.0)*sj5*x7040);
evalcond[0]=(((x7039*x7041))+(((-1.0)*r11*sj5*x7042))+((r12*x7040)));
evalcond[1]=((((-1.0)*r22*x7042))+((r20*x7043))+(((-1.0)*r21*x7045)));
evalcond[2]=(((r00*x7043))+(((-1.0)*r02*x7042))+(((-1.0)*r01*x7045)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x7042))+(((-1.0)*r11*x7045))+((x7040*x7041)));
evalcond[4]=((((-1.0)*r21*sj5*x7042))+((sj1*sj2))+((r20*x7044))+((cj1*cj2))+((r22*x7040)));
evalcond[5]=(((r00*x7044))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r01*sj5*x7042))+((r02*x7040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7046=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7046;
j4eval[1]=IKsign(x7046);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7047=((1.0)*sj5);
IkReal x7048=((((-1.0)*cj5*r21))+(((-1.0)*r20*x7047)));
j4eval[0]=x7048;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7047))+((cj5*r00))))));
j4eval[2]=IKsign(x7048);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7049=((1.0)*r12);
IkReal x7050=(sj1*sj2);
IkReal x7051=(cj1*cj2);
IkReal x7052=(cj5*r10);
IkReal x7053=((1.0)*r11*sj5);
IkReal x7054=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7054;
j4eval[1]=IKsign(x7054);
j4eval[2]=((IKabs(((((-1.0)*x7049*x7050))+(((-1.0)*x7049*x7051)))))+(IKabs((((x7051*x7052))+((x7050*x7052))+(((-1.0)*x7051*x7053))+(((-1.0)*x7050*x7053))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7055=((1.0)*r12);
IkReal x7056=(sj1*sj2);
IkReal x7057=(cj1*cj2);
IkReal x7058=(cj5*r10);
IkReal x7059=((1.0)*r11*sj5);
CheckValue<IkReal> x7060 = IKatan2WithCheck(IkReal((((x7056*x7058))+(((-1.0)*x7057*x7059))+(((-1.0)*x7056*x7059))+((x7057*x7058)))),IkReal(((((-1.0)*x7055*x7057))+(((-1.0)*x7055*x7056)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7060.valid){
continue;
}
CheckValue<IkReal> x7061=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7061.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7060.value)+(((1.5707963267949)*(x7061.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7062=IKcos(j4);
IkReal x7063=IKsin(j4);
IkReal x7064=(cj5*r10);
IkReal x7065=((1.0)*x7062);
IkReal x7066=(cj5*x7063);
IkReal x7067=(cj5*x7062);
IkReal x7068=((1.0)*sj5*x7063);
evalcond[0]=(((x7062*x7064))+((r12*x7063))+(((-1.0)*r11*sj5*x7065)));
evalcond[1]=((((-1.0)*r21*x7068))+((r20*x7066))+(((-1.0)*r22*x7065)));
evalcond[2]=((((-1.0)*r01*x7068))+((r00*x7066))+(((-1.0)*r02*x7065)));
evalcond[3]=((1.0)+((x7063*x7064))+(((-1.0)*r11*x7068))+(((-1.0)*r12*x7065)));
evalcond[4]=(((r22*x7063))+(((-1.0)*r21*sj5*x7065))+((sj1*sj2))+((r20*x7067))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((r00*x7067))+((r02*x7063))+(((-1.0)*r01*sj5*x7065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7069=((1.0)*sj5);
CheckValue<IkReal> x7070=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7069))+(((-1.0)*cj5*r21)))),-1);
if(!x7070.valid){
continue;
}
CheckValue<IkReal> x7071 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x7069))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7070.value)))+(x7071.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7072=IKcos(j4);
IkReal x7073=IKsin(j4);
IkReal x7074=(cj5*r10);
IkReal x7075=((1.0)*x7072);
IkReal x7076=(cj5*x7073);
IkReal x7077=(cj5*x7072);
IkReal x7078=((1.0)*sj5*x7073);
evalcond[0]=(((x7072*x7074))+(((-1.0)*r11*sj5*x7075))+((r12*x7073)));
evalcond[1]=((((-1.0)*r21*x7078))+((r20*x7076))+(((-1.0)*r22*x7075)));
evalcond[2]=((((-1.0)*r01*x7078))+((r00*x7076))+(((-1.0)*r02*x7075)));
evalcond[3]=((1.0)+(((-1.0)*r11*x7078))+((x7073*x7074))+(((-1.0)*r12*x7075)));
evalcond[4]=(((r22*x7073))+(((-1.0)*r21*sj5*x7075))+((sj1*sj2))+((cj1*cj2))+((r20*x7077)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r01*sj5*x7075))+(((-1.0)*cj1*sj2))+((r00*x7077))+((r02*x7073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7079=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7079.valid){
continue;
}
CheckValue<IkReal> x7080 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7080.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7079.value)))+(x7080.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7081=IKcos(j4);
IkReal x7082=IKsin(j4);
IkReal x7083=(cj5*r10);
IkReal x7084=((1.0)*x7081);
IkReal x7085=(cj5*x7082);
IkReal x7086=(cj5*x7081);
IkReal x7087=((1.0)*sj5*x7082);
evalcond[0]=(((r12*x7082))+((x7081*x7083))+(((-1.0)*r11*sj5*x7084)));
evalcond[1]=((((-1.0)*r21*x7087))+(((-1.0)*r22*x7084))+((r20*x7085)));
evalcond[2]=(((r00*x7085))+(((-1.0)*r01*x7087))+(((-1.0)*r02*x7084)));
evalcond[3]=((1.0)+(((-1.0)*r11*x7087))+(((-1.0)*r12*x7084))+((x7082*x7083)));
evalcond[4]=(((r22*x7082))+((sj1*sj2))+(((-1.0)*r21*sj5*x7084))+((cj1*cj2))+((r20*x7086)));
evalcond[5]=(((cj2*sj1))+((r00*x7086))+(((-1.0)*cj1*sj2))+((r02*x7082))+(((-1.0)*r01*sj5*x7084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7088=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7088);
rxp0_2=(py*r00);
rxp1_0=(r21*x7088);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7089=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7089);
rxp0_2=(py*r00);
rxp1_0=(r21*x7089);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7090=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7090);
rxp0_2=(py*r00);
rxp1_0=(r21*x7090);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7093=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x7093.valid){
continue;
}
IkReal x7091=x7093.value;
IkReal x7092=(cj0*x7091);
cj4array[0]=((((-1.0)*cj1*sj2*x7092))+((cj2*sj1*x7092)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7094=IKsin(j4);
IkReal x7095=IKcos(j4);
IkReal x7096=(cj5*r20);
IkReal x7097=((1.0)*sj5);
evalcond[0]=(r12*x7094);
evalcond[1]=((((-1.0)*r12*x7095))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x7094*x7097))+((x7094*x7096)));
evalcond[3]=(((cj5*r00*x7094))+(((-1.0)*r01*x7094*x7097)));
evalcond[4]=(((x7095*x7096))+((sj1*sj2))+(((-1.0)*r21*x7095*x7097))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7100=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x7100.valid){
continue;
}
IkReal x7098=x7100.value;
IkReal x7099=((1.0)*x7098);
cj4array[0]=((((-1.0)*cj1*cj2*x7099))+(((-1.0)*sj1*sj2*x7099)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7101=IKsin(j4);
IkReal x7102=IKcos(j4);
IkReal x7103=(cj5*r00);
IkReal x7104=((1.0)*cj0);
IkReal x7105=((1.0)*r01*sj5);
evalcond[0]=(r12*x7101);
evalcond[1]=((((-1.0)*x7104))+(((-1.0)*r12*x7102)));
evalcond[2]=((((-1.0)*r21*sj5*x7101))+((cj5*r20*x7101)));
evalcond[3]=((((-1.0)*x7101*x7105))+((x7101*x7103)));
evalcond[4]=((((-1.0)*cj2*sj1*x7104))+((x7102*x7103))+(((-1.0)*x7102*x7105))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7106=IKPowWithIntegerCheck(r12,-1);
if(!x7106.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x7106.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7107=IKsin(j4);
IkReal x7108=IKcos(j4);
IkReal x7109=(cj5*x7108);
IkReal x7110=((1.0)*r21*sj5);
IkReal x7111=((1.0)*r01*sj5);
IkReal x7112=(cj5*x7107);
evalcond[0]=(r12*x7107);
evalcond[1]=((((-1.0)*x7107*x7110))+((r20*x7112)));
evalcond[2]=((((-1.0)*x7107*x7111))+((r00*x7112)));
evalcond[3]=(((sj1*sj2))+((cj1*cj2))+((r20*x7109))+(((-1.0)*x7108*x7110)));
evalcond[4]=((((-1.0)*cj0*cj2*sj1))+((cj0*cj1*sj2))+((r00*x7109))+(((-1.0)*x7108*x7111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7113=((1.0)*sj5);
CheckValue<IkReal> x7114=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7114.valid){
continue;
}
CheckValue<IkReal> x7115 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj0*x7113))+(((-1.0)*cj0*r01*x7113))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7115.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7114.value)))+(x7115.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7116=IKsin(j4);
IkReal x7117=IKcos(j4);
IkReal x7118=(cj5*r10);
IkReal x7119=(cj1*sj2);
IkReal x7120=((1.0)*x7117);
IkReal x7121=((1.0)*cj2*sj1);
IkReal x7122=(cj5*x7116);
IkReal x7123=(cj5*x7117);
IkReal x7124=((1.0)*sj5*x7116);
evalcond[0]=(((r20*x7122))+(((-1.0)*r22*x7120))+(((-1.0)*r21*x7124)));
evalcond[1]=(((r00*x7122))+sj0+(((-1.0)*r01*x7124))+(((-1.0)*r02*x7120)));
evalcond[2]=(((x7116*x7118))+(((-1.0)*r12*x7120))+(((-1.0)*r11*x7124))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x7123))+((sj1*sj2))+((r22*x7116))+(((-1.0)*r21*sj5*x7120))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r01*sj5*x7120))+((r00*x7123))+((cj0*x7119))+(((-1.0)*cj0*x7121))+((r02*x7116)));
evalcond[5]=(((r12*x7116))+((x7117*x7118))+((sj0*x7119))+(((-1.0)*sj0*x7121))+(((-1.0)*r11*sj5*x7120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7125=((1.0)*sj5);
CheckValue<IkReal> x7126 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x7125))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7126.valid){
continue;
}
CheckValue<IkReal> x7127=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7125))+(((-1.0)*cj5*r01)))),-1);
if(!x7127.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7126.value)+(((1.5707963267949)*(x7127.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7128=IKsin(j4);
IkReal x7129=IKcos(j4);
IkReal x7130=(cj5*r10);
IkReal x7131=(cj1*sj2);
IkReal x7132=((1.0)*x7129);
IkReal x7133=((1.0)*cj2*sj1);
IkReal x7134=(cj5*x7128);
IkReal x7135=(cj5*x7129);
IkReal x7136=((1.0)*sj5*x7128);
evalcond[0]=((((-1.0)*r22*x7132))+((r20*x7134))+(((-1.0)*r21*x7136)));
evalcond[1]=(sj0+(((-1.0)*r01*x7136))+((r00*x7134))+(((-1.0)*r02*x7132)));
evalcond[2]=((((-1.0)*r11*x7136))+(((-1.0)*r12*x7132))+((x7128*x7130))+(((-1.0)*cj0)));
evalcond[3]=(((sj1*sj2))+((r20*x7135))+((cj1*cj2))+((r22*x7128))+(((-1.0)*r21*sj5*x7132)));
evalcond[4]=(((cj0*x7131))+(((-1.0)*cj0*x7133))+((r00*x7135))+(((-1.0)*r01*sj5*x7132))+((r02*x7128)));
evalcond[5]=(((sj0*x7131))+(((-1.0)*sj0*x7133))+((r12*x7128))+((x7129*x7130))+(((-1.0)*r11*sj5*x7132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7137=((1.0)*sj5);
CheckValue<IkReal> x7138 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x7137)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7138.valid){
continue;
}
CheckValue<IkReal> x7139=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7137)))),-1);
if(!x7139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7138.value)+(((1.5707963267949)*(x7139.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7140=IKsin(j4);
IkReal x7141=IKcos(j4);
IkReal x7142=(cj5*r10);
IkReal x7143=(cj1*sj2);
IkReal x7144=((1.0)*x7141);
IkReal x7145=((1.0)*cj2*sj1);
IkReal x7146=(cj5*x7140);
IkReal x7147=(cj5*x7141);
IkReal x7148=((1.0)*sj5*x7140);
evalcond[0]=(((r20*x7146))+(((-1.0)*r22*x7144))+(((-1.0)*r21*x7148)));
evalcond[1]=(sj0+((r00*x7146))+(((-1.0)*r01*x7148))+(((-1.0)*r02*x7144)));
evalcond[2]=(((x7140*x7142))+(((-1.0)*r11*x7148))+(((-1.0)*r12*x7144))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x7147))+(((-1.0)*r21*sj5*x7144))+((sj1*sj2))+((r22*x7140))+((cj1*cj2)));
evalcond[4]=(((r00*x7147))+(((-1.0)*cj0*x7145))+((cj0*x7143))+((r02*x7140))+(((-1.0)*r01*sj5*x7144)));
evalcond[5]=(((x7141*x7142))+(((-1.0)*sj0*x7145))+(((-1.0)*r11*sj5*x7144))+((r12*x7140))+((sj0*x7143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7149=r21*r21;
IkReal x7150=cj5*cj5;
IkReal x7151=(sj1*sj2);
IkReal x7152=(cj1*cj2);
IkReal x7153=(cj5*r20);
IkReal x7154=((1.0)*r21*sj5);
CheckValue<IkReal> x7155=IKPowWithIntegerCheck(IKsign((((x7149*x7150))+(((2.0)*r21*sj5*x7153))+(((-1.0)*x7150*(r20*r20)))+(((-1.0)*x7149))+(((-1.0)*(r22*r22))))),-1);
if(!x7155.valid){
continue;
}
CheckValue<IkReal> x7156 = IKatan2WithCheck(IkReal((((r22*x7152))+((r22*x7151)))),IkReal(((((-1.0)*x7152*x7154))+(((-1.0)*x7151*x7154))+((x7151*x7153))+((x7152*x7153)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7156.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7155.value)))+(x7156.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x7157=IKsin(j4);
IkReal x7158=IKcos(j4);
IkReal x7159=(cj5*r20);
IkReal x7160=(r21*sj5);
IkReal x7161=((1.0)*x7158);
evalcond[0]=((((-1.0)*r22*x7161))+((x7157*x7159))+(((-1.0)*x7157*x7160)));
evalcond[1]=(((r22*x7157))+(((-1.0)*x7160*x7161))+((sj1*sj2))+((x7158*x7159))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7162=(cj5*sj4);
IkReal x7163=(sj4*sj5);
if( IKabs((((r01*x7163))+(((-1.0)*r00*x7162))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x7163))+((r10*x7162))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x7163))+(((-1.0)*r00*x7162))+((cj4*r02))))+IKsqr(((((-1.0)*r11*x7163))+((r10*x7162))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x7163))+(((-1.0)*r00*x7162))+((cj4*r02))), ((((-1.0)*r11*x7163))+((r10*x7162))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7164=IKcos(j0);
IkReal x7165=IKsin(j0);
IkReal x7166=(cj5*r10);
IkReal x7167=((0.376)*sj1);
IkReal x7168=(cj5*r00);
IkReal x7169=(cj5*r01);
IkReal x7170=((1.0)*sj5);
IkReal x7171=(cj5*r11);
IkReal x7172=((0.376)*sj2);
IkReal x7173=((0.408)*sj1);
IkReal x7174=((1.0)*cj4);
IkReal x7175=((0.1025)*sj5);
IkReal x7176=(cj2*x7165);
IkReal x7177=(cj1*x7164);
IkReal x7178=(cj1*x7165);
IkReal x7179=(sj1*x7164);
evalcond[0]=(x7165+(((-1.0)*r01*sj4*x7170))+(((-1.0)*r02*x7174))+((sj4*x7168)));
evalcond[1]=((((-1.0)*r11*sj4*x7170))+(((-1.0)*r12*x7174))+(((-1.0)*x7164))+((sj4*x7166)));
evalcond[2]=(((cj2*x7177))+(((-1.0)*x7169))+(((-1.0)*r00*x7170))+((sj2*x7179)));
evalcond[3]=((((-1.0)*x7171))+(((-1.0)*r10*x7170))+((sj1*sj2*x7165))+((cj1*x7176)));
evalcond[4]=((((-1.0)*cj4*r01*x7170))+(((-1.0)*cj2*x7179))+((cj4*x7168))+((r02*sj4))+((sj2*x7177)));
evalcond[5]=((((-1.0)*sj1*x7176))+((cj4*x7166))+((r12*sj4))+(((-1.0)*cj4*r11*x7170))+((sj2*x7178)));
evalcond[6]=((((0.1025)*x7169))+(((-1.0)*cj2*x7164*x7167))+(((0.1215)*x7165))+(((-1.0)*px))+((x7172*x7177))+(((-1.0)*x7164*x7173))+(((1.97e-6)*x7177))+(((8.9e-7)*x7164))+((r00*x7175)));
evalcond[7]=(((r10*x7175))+(((-1.0)*x7167*x7176))+(((-0.1215)*x7164))+(((-1.0)*py))+((x7172*x7178))+(((0.1025)*x7171))+(((-1.0)*x7165*x7173))+(((1.97e-6)*x7178))+(((8.9e-7)*x7165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7180 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7180.valid){
continue;
}
CheckValue<IkReal> x7181=IKPowWithIntegerCheck(IKsign((((sj1*sj2))+((cj1*cj2)))),-1);
if(!x7181.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x7180.value)+(((1.5707963267949)*(x7181.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7182=IKcos(j0);
IkReal x7183=IKsin(j0);
IkReal x7184=((0.376)*sj1);
IkReal x7185=(cj5*r01);
IkReal x7186=(cj5*r11);
IkReal x7187=((0.376)*sj2);
IkReal x7188=((0.408)*sj1);
IkReal x7189=((1.0)*sj5);
IkReal x7190=(sj1*sj2);
IkReal x7191=((0.1025)*sj5);
IkReal x7192=(cj2*x7183);
IkReal x7193=(cj1*x7182);
IkReal x7194=(cj1*x7183);
evalcond[0]=(((cj2*x7193))+((x7182*x7190))+(((-1.0)*r00*x7189))+(((-1.0)*x7185)));
evalcond[1]=(((x7183*x7190))+(((-1.0)*r10*x7189))+((cj1*x7192))+(((-1.0)*x7186)));
evalcond[2]=((((1.97e-6)*x7193))+((r00*x7191))+(((-1.0)*cj2*x7182*x7184))+(((-1.0)*x7182*x7188))+(((8.9e-7)*x7182))+(((-1.0)*px))+(((0.1215)*x7183))+((x7187*x7193))+(((0.1025)*x7185)));
evalcond[3]=((((-1.0)*x7184*x7192))+(((1.97e-6)*x7194))+((r10*x7191))+(((-0.1215)*x7182))+(((8.9e-7)*x7183))+(((-1.0)*py))+(((-1.0)*x7183*x7188))+((x7187*x7194))+(((0.1025)*x7186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7195=((1.0)*sj5);
IkReal x7196=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7195)));
j4eval[0]=x7196;
j4eval[1]=IKsign(x7196);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x7195))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7197=((1.0)*sj5);
IkReal x7198=((((-1.0)*r00*x7197))+(((-1.0)*cj5*r01)));
j4eval[0]=x7198;
j4eval[1]=IKsign(x7198);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7197))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7199=((1.0)*sj5);
IkReal x7200=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7200;
j4eval[1]=((IKabs(((((-1.0)*r11*sj0*x7199))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x7199)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x7200);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7202 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7202)==0){
continue;
}
IkReal x7201=pow(x7202,-0.5);
CheckValue<IkReal> x7203 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7203.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7203.value));
IkReal gconst133=((-1.0)*r21*x7201);
IkReal gconst134=(r20*x7201);
CheckValue<IkReal> x7204 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7204.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7204.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7207 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7207.valid){
continue;
}
IkReal x7205=((-1.0)*(x7207.value));
IkReal x7206=x7201;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7205;
IkReal gconst132=x7205;
IkReal gconst133=((-1.0)*r21*x7206);
IkReal gconst134=(r20*x7206);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7210 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7210.valid){
continue;
}
IkReal x7208=((-1.0)*(x7210.value));
IkReal x7209=x7201;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7208;
IkReal gconst132=x7208;
IkReal gconst133=((-1.0)*r21*x7209);
IkReal gconst134=(r20*x7209);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x7213 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7213.valid){
continue;
}
IkReal x7211=((-1.0)*(x7213.value));
IkReal x7212=x7201;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7211;
IkReal gconst132=x7211;
IkReal gconst133=((-1.0)*r21*x7212);
IkReal gconst134=(r20*x7212);
IkReal x7214=((1.0)*(r22*r22));
CheckValue<IkReal> x7218=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7214))),-1);
if(!x7218.valid){
continue;
}
IkReal x7215=x7218.value;
IkReal x7216=((1.0)*x7215);
IkReal x7217=((((-1.0)*x7214))+(((-1.0)*x7216*(r20*r20*r20*r20)))+(((-2.0)*x7215*(r20*r20)*(r21*r21)))+(((-1.0)*x7216*(r21*r21*r21*r21))));
j4eval[0]=x7217;
j4eval[1]=IKsign(x7217);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7219=(gconst133*r21);
IkReal x7220=(cj1*cj2);
IkReal x7221=(gconst134*r20);
IkReal x7222=(sj1*sj2);
CheckValue<IkReal> x7223 = IKatan2WithCheck(IkReal((((r22*x7220))+((r22*x7222)))),IkReal((((x7221*x7222))+(((-1.0)*x7219*x7220))+(((-1.0)*x7219*x7222))+((x7220*x7221)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7223.valid){
continue;
}
CheckValue<IkReal> x7224=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7221*x7221)))+(((-1.0)*(x7219*x7219)))+(((2.0)*x7219*x7221))+(((-1.0)*(r22*r22))))),-1);
if(!x7224.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7223.value)+(((1.5707963267949)*(x7224.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7225=IKsin(j4);
IkReal x7226=IKcos(j4);
IkReal x7227=(gconst134*r10);
IkReal x7228=(gconst133*r11);
IkReal x7229=(gconst133*r01);
IkReal x7230=(gconst133*r21);
IkReal x7231=(cj1*sj2);
IkReal x7232=((1.0)*x7226);
IkReal x7233=((1.0)*x7225);
IkReal x7234=((1.0)*cj2*sj1);
IkReal x7235=(gconst134*x7226);
IkReal x7236=(gconst134*x7225);
evalcond[0]=(((r20*x7236))+(((-1.0)*x7230*x7233))+(((-1.0)*r22*x7232)));
evalcond[1]=(sj0+((r00*x7236))+(((-1.0)*x7229*x7233))+(((-1.0)*r02*x7232)));
evalcond[2]=((((-1.0)*x7228*x7233))+(((-1.0)*r12*x7232))+((x7225*x7227))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x7235))+((sj1*sj2))+(((-1.0)*x7230*x7232))+((cj1*cj2))+((r22*x7225)));
evalcond[4]=(((r00*x7235))+(((-1.0)*x7229*x7232))+(((-1.0)*cj0*x7234))+((cj0*x7231))+((r02*x7225)));
evalcond[5]=((((-1.0)*x7228*x7232))+(((-1.0)*sj0*x7234))+((sj0*x7231))+((x7226*x7227))+((r12*x7225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7237=((1.0)*gconst133);
CheckValue<IkReal> x7238=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst134*r01))+(((-1.0)*r00*x7237)))),-1);
if(!x7238.valid){
continue;
}
CheckValue<IkReal> x7239 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst134*r20))+(((-1.0)*cj0*r21*x7237)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7239.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7238.value)))+(x7239.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7240=IKsin(j4);
IkReal x7241=IKcos(j4);
IkReal x7242=(gconst134*r10);
IkReal x7243=(gconst133*r11);
IkReal x7244=(gconst133*r01);
IkReal x7245=(gconst133*r21);
IkReal x7246=(cj1*sj2);
IkReal x7247=((1.0)*x7241);
IkReal x7248=((1.0)*x7240);
IkReal x7249=((1.0)*cj2*sj1);
IkReal x7250=(gconst134*x7241);
IkReal x7251=(gconst134*x7240);
evalcond[0]=((((-1.0)*x7245*x7248))+(((-1.0)*r22*x7247))+((r20*x7251)));
evalcond[1]=(sj0+(((-1.0)*x7244*x7248))+((r00*x7251))+(((-1.0)*r02*x7247)));
evalcond[2]=(((x7240*x7242))+(((-1.0)*r12*x7247))+(((-1.0)*cj0))+(((-1.0)*x7243*x7248)));
evalcond[3]=((((-1.0)*x7245*x7247))+((sj1*sj2))+((r20*x7250))+((cj1*cj2))+((r22*x7240)));
evalcond[4]=(((cj0*x7246))+((r02*x7240))+(((-1.0)*x7244*x7247))+(((-1.0)*cj0*x7249))+((r00*x7250)));
evalcond[5]=(((r12*x7240))+((x7241*x7242))+((sj0*x7246))+(((-1.0)*sj0*x7249))+(((-1.0)*x7243*x7247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7252=((1.0)*gconst133);
CheckValue<IkReal> x7253 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x7252))+((gconst134*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7253.valid){
continue;
}
CheckValue<IkReal> x7254=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x7252))+(((-1.0)*gconst134*r11)))),-1);
if(!x7254.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7253.value)+(((1.5707963267949)*(x7254.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7255=IKsin(j4);
IkReal x7256=IKcos(j4);
IkReal x7257=(gconst134*r10);
IkReal x7258=(gconst133*r11);
IkReal x7259=(gconst133*r01);
IkReal x7260=(gconst133*r21);
IkReal x7261=(cj1*sj2);
IkReal x7262=((1.0)*x7256);
IkReal x7263=((1.0)*x7255);
IkReal x7264=((1.0)*cj2*sj1);
IkReal x7265=(gconst134*x7256);
IkReal x7266=(gconst134*x7255);
evalcond[0]=((((-1.0)*r22*x7262))+(((-1.0)*x7260*x7263))+((r20*x7266)));
evalcond[1]=(sj0+(((-1.0)*x7259*x7263))+((r00*x7266))+(((-1.0)*r02*x7262)));
evalcond[2]=((((-1.0)*x7258*x7263))+(((-1.0)*r12*x7262))+((x7255*x7257))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x7255))+((sj1*sj2))+(((-1.0)*x7260*x7262))+((cj1*cj2))+((r20*x7265)));
evalcond[4]=(((cj0*x7261))+((r02*x7255))+(((-1.0)*cj0*x7264))+(((-1.0)*x7259*x7262))+((r00*x7265)));
evalcond[5]=(((sj0*x7261))+(((-1.0)*x7258*x7262))+((r12*x7255))+(((-1.0)*sj0*x7264))+((x7256*x7257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7268 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7268)==0){
continue;
}
IkReal x7267=pow(x7268,-0.5);
CheckValue<IkReal> x7269 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7269.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7269.value))));
IkReal gconst136=((1.0)*r21*x7267);
IkReal gconst137=((-1.0)*r20*x7267);
CheckValue<IkReal> x7270 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7270.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7270.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7273 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7273.valid){
continue;
}
IkReal x7271=((1.0)*(x7273.value));
IkReal x7272=x7267;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7271)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7271)));
IkReal gconst136=((1.0)*r21*x7272);
IkReal gconst137=((-1.0)*r20*x7272);
IkReal x7274=r22*r22;
IkReal x7275=((1.0)*x7274);
CheckValue<IkReal> x7279=IKPowWithIntegerCheck(((-1.0)+x7274),-1);
if(!x7279.valid){
continue;
}
IkReal x7276=x7279.value;
if((((1.0)+(((-1.0)*x7275)))) < -0.00001)
continue;
IkReal x7277=IKsqrt(((1.0)+(((-1.0)*x7275))));
IkReal x7278=(sj0*x7276*x7277);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x7278+(((-1.0)*x7275*x7278))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7282 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7282.valid){
continue;
}
IkReal x7280=((1.0)*(x7282.value));
IkReal x7281=x7267;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7280)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7280)));
IkReal gconst136=((1.0)*r21*x7281);
IkReal gconst137=((-1.0)*r20*x7281);
IkReal x7283=r22*r22;
IkReal x7284=((1.0)*x7283);
CheckValue<IkReal> x7288=IKPowWithIntegerCheck(((-1.0)+x7283),-1);
if(!x7288.valid){
continue;
}
IkReal x7285=x7288.value;
if((((1.0)+(((-1.0)*x7284)))) < -0.00001)
continue;
IkReal x7286=IKsqrt(((1.0)+(((-1.0)*x7284))));
IkReal x7287=(cj0*x7285*x7286);
j4eval[0]=((IKabs(((((-1.0)*x7284*x7287))+x7287)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x7291 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7291.valid){
continue;
}
IkReal x7289=((1.0)*(x7291.value));
IkReal x7290=x7267;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7289)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7289)));
IkReal gconst136=((1.0)*r21*x7290);
IkReal gconst137=((-1.0)*r20*x7290);
IkReal x7292=r22*r22;
IkReal x7293=(cj0*r02);
IkReal x7294=(r12*sj0);
CheckValue<IkReal> x7298=IKPowWithIntegerCheck(((-1.0)+x7292),-1);
if(!x7298.valid){
continue;
}
IkReal x7295=x7298.value;
if((((1.0)+(((-1.0)*x7292)))) < -0.00001)
continue;
IkReal x7296=IKsqrt(((1.0)+(((-1.0)*x7292))));
IkReal x7297=((1.0)*r22*x7295*x7296);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x7294*x7297))+(((-1.0)*x7293*x7297)))))+(IKabs((x7293+x7294))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7299=((1.0)*gconst136);
CheckValue<IkReal> x7300 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x7299))+((gconst137*r10*sj0))+((cj0*gconst137*r00))+(((-1.0)*cj0*r01*x7299)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7300.valid){
continue;
}
CheckValue<IkReal> x7301=IKPowWithIntegerCheck(IKsign((((gconst136*r20))+((gconst137*r21)))),-1);
if(!x7301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7300.value)+(((1.5707963267949)*(x7301.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7302=IKsin(j4);
IkReal x7303=IKcos(j4);
IkReal x7304=(gconst136*r01);
IkReal x7305=(gconst136*r21);
IkReal x7306=(gconst136*r11);
IkReal x7307=(cj1*sj2);
IkReal x7308=((1.0)*x7303);
IkReal x7309=(gconst137*x7303);
IkReal x7310=((1.0)*x7302);
IkReal x7311=(gconst137*x7302);
IkReal x7312=((1.0)*cj2*sj1);
evalcond[0]=(((r20*x7311))+(((-1.0)*r22*x7308))+(((-1.0)*x7305*x7310)));
evalcond[1]=((((-1.0)*r02*x7308))+sj0+(((-1.0)*x7304*x7310))+((r00*x7311)));
evalcond[2]=(((r10*x7311))+(((-1.0)*r12*x7308))+(((-1.0)*x7306*x7310))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x7302))+((sj1*sj2))+((r20*x7309))+((cj1*cj2))+(((-1.0)*x7305*x7308)));
evalcond[4]=(((r02*x7302))+(((-1.0)*cj0*x7312))+((r00*x7309))+(((-1.0)*x7304*x7308))+((cj0*x7307)));
evalcond[5]=((((-1.0)*sj0*x7312))+((r12*x7302))+((r10*x7309))+((sj0*x7307))+(((-1.0)*x7306*x7308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7313=((1.0)*gconst136);
CheckValue<IkReal> x7314=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst137*r01))+(((-1.0)*r00*x7313)))),-1);
if(!x7314.valid){
continue;
}
CheckValue<IkReal> x7315 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x7313))+((cj0*gconst137*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7315.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7314.value)))+(x7315.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7316=IKsin(j4);
IkReal x7317=IKcos(j4);
IkReal x7318=(gconst136*r01);
IkReal x7319=(gconst136*r21);
IkReal x7320=(gconst136*r11);
IkReal x7321=(cj1*sj2);
IkReal x7322=((1.0)*x7317);
IkReal x7323=(gconst137*x7317);
IkReal x7324=((1.0)*x7316);
IkReal x7325=(gconst137*x7316);
IkReal x7326=((1.0)*cj2*sj1);
evalcond[0]=((((-1.0)*r22*x7322))+(((-1.0)*x7319*x7324))+((r20*x7325)));
evalcond[1]=(sj0+(((-1.0)*x7318*x7324))+((r00*x7325))+(((-1.0)*r02*x7322)));
evalcond[2]=(((r10*x7325))+(((-1.0)*r12*x7322))+(((-1.0)*cj0))+(((-1.0)*x7320*x7324)));
evalcond[3]=(((r22*x7316))+((sj1*sj2))+(((-1.0)*x7319*x7322))+((r20*x7323))+((cj1*cj2)));
evalcond[4]=(((r02*x7316))+(((-1.0)*cj0*x7326))+(((-1.0)*x7318*x7322))+((r00*x7323))+((cj0*x7321)));
evalcond[5]=(((r12*x7316))+((r10*x7323))+(((-1.0)*sj0*x7326))+((sj0*x7321))+(((-1.0)*x7320*x7322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7327=((1.0)*gconst136);
CheckValue<IkReal> x7328=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst137*r11))+(((-1.0)*r10*x7327)))),-1);
if(!x7328.valid){
continue;
}
CheckValue<IkReal> x7329 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst137*r20*sj0))+(((-1.0)*r21*sj0*x7327)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7329.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7328.value)))+(x7329.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7330=IKsin(j4);
IkReal x7331=IKcos(j4);
IkReal x7332=(gconst136*r01);
IkReal x7333=(gconst136*r21);
IkReal x7334=(gconst136*r11);
IkReal x7335=(cj1*sj2);
IkReal x7336=((1.0)*x7331);
IkReal x7337=(gconst137*x7331);
IkReal x7338=((1.0)*x7330);
IkReal x7339=(gconst137*x7330);
IkReal x7340=((1.0)*cj2*sj1);
evalcond[0]=(((r20*x7339))+(((-1.0)*r22*x7336))+(((-1.0)*x7333*x7338)));
evalcond[1]=((((-1.0)*r02*x7336))+sj0+(((-1.0)*x7332*x7338))+((r00*x7339)));
evalcond[2]=(((r10*x7339))+(((-1.0)*r12*x7336))+(((-1.0)*x7334*x7338))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x7330))+((sj1*sj2))+((r20*x7337))+((cj1*cj2))+(((-1.0)*x7333*x7336)));
evalcond[4]=(((r02*x7330))+(((-1.0)*cj0*x7340))+(((-1.0)*x7332*x7336))+((r00*x7337))+((cj0*x7335)));
evalcond[5]=(((r12*x7330))+((r10*x7337))+(((-1.0)*sj0*x7340))+((sj0*x7335))+(((-1.0)*x7334*x7336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7341=((-1.0)*r00);
IkReal x7343 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7343)==0){
continue;
}
IkReal x7342=pow(x7343,-0.5);
CheckValue<IkReal> x7344 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7341),IKFAST_ATAN2_MAGTHRESH);
if(!x7344.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7344.value));
IkReal gconst139=(r01*x7342);
IkReal gconst140=(x7341*x7342);
CheckValue<IkReal> x7345 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7345.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7345.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7346=((-1.0)*r00);
IkReal x7347=x7342;
CheckValue<IkReal> x7349 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7346),IKFAST_ATAN2_MAGTHRESH);
if(!x7349.valid){
continue;
}
IkReal x7348=((-1.0)*(x7349.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst139;
cj5=gconst140;
j5=x7348;
IkReal gconst138=x7348;
IkReal gconst139=(r01*x7347);
IkReal gconst140=(x7346*x7347);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7350=((1.0)*gconst139);
CheckValue<IkReal> x7351=IKPowWithIntegerCheck(IKsign((((gconst139*r20))+((gconst140*r21)))),-1);
if(!x7351.valid){
continue;
}
CheckValue<IkReal> x7352 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x7350))+((gconst140*r10*sj0))+(((-1.0)*cj0*r01*x7350))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7352.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7351.value)))+(x7352.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7353=IKsin(j4);
IkReal x7354=IKcos(j4);
IkReal x7355=(gconst140*r10);
IkReal x7356=(cj1*sj2);
IkReal x7357=((1.0)*x7354);
IkReal x7358=(gconst140*x7354);
IkReal x7359=((1.0)*cj2*sj1);
IkReal x7360=(gconst140*x7353);
IkReal x7361=((1.0)*gconst139*x7353);
evalcond[0]=((((-1.0)*r22*x7357))+(((-1.0)*r21*x7361))+((r20*x7360)));
evalcond[1]=(((r00*x7360))+sj0+(((-1.0)*r02*x7357))+(((-1.0)*r01*x7361)));
evalcond[2]=(((x7353*x7355))+(((-1.0)*r12*x7357))+(((-1.0)*r11*x7361))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst139*r21*x7357))+((r20*x7358))+((sj1*sj2))+((cj1*cj2))+((r22*x7353)));
evalcond[4]=((((-1.0)*cj0*x7359))+((r00*x7358))+(((-1.0)*gconst139*r01*x7357))+((cj0*x7356))+((r02*x7353)));
evalcond[5]=((((-1.0)*sj0*x7359))+((r12*x7353))+((sj0*x7356))+(((-1.0)*gconst139*r11*x7357))+((x7354*x7355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7362=((1.0)*gconst139);
CheckValue<IkReal> x7363 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x7362))+((gconst140*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7363.valid){
continue;
}
CheckValue<IkReal> x7364=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x7362))+(((-1.0)*gconst140*r11)))),-1);
if(!x7364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7363.value)+(((1.5707963267949)*(x7364.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7365=IKsin(j4);
IkReal x7366=IKcos(j4);
IkReal x7367=(gconst140*r10);
IkReal x7368=(cj1*sj2);
IkReal x7369=((1.0)*x7366);
IkReal x7370=(gconst140*x7366);
IkReal x7371=((1.0)*cj2*sj1);
IkReal x7372=(gconst140*x7365);
IkReal x7373=((1.0)*gconst139*x7365);
evalcond[0]=(((r20*x7372))+(((-1.0)*r22*x7369))+(((-1.0)*r21*x7373)));
evalcond[1]=((((-1.0)*r01*x7373))+sj0+((r00*x7372))+(((-1.0)*r02*x7369)));
evalcond[2]=((((-1.0)*r11*x7373))+(((-1.0)*r12*x7369))+((x7365*x7367))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst139*r21*x7369))+((sj1*sj2))+((r20*x7370))+((cj1*cj2))+((r22*x7365)));
evalcond[4]=((((-1.0)*gconst139*r01*x7369))+(((-1.0)*cj0*x7371))+((r00*x7370))+((cj0*x7368))+((r02*x7365)));
evalcond[5]=(((r12*x7365))+(((-1.0)*gconst139*r11*x7369))+((sj0*x7368))+(((-1.0)*sj0*x7371))+((x7366*x7367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7374=((-1.0)*r01);
IkReal x7376 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7376)==0){
continue;
}
IkReal x7375=pow(x7376,-0.5);
CheckValue<IkReal> x7377 = IKatan2WithCheck(IkReal(x7374),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7377.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7377.value))));
IkReal gconst142=(x7374*x7375);
IkReal gconst143=((1.0)*r00*x7375);
CheckValue<IkReal> x7378 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7378.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7378.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7379=((-1.0)*r01);
CheckValue<IkReal> x7382 = IKatan2WithCheck(IkReal(x7379),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7382.valid){
continue;
}
IkReal x7380=((1.0)*(x7382.value));
IkReal x7381=x7375;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7380)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7380)));
IkReal gconst142=(x7379*x7381);
IkReal gconst143=((1.0)*r00*x7381);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x7383=((-1.0)*r01);
CheckValue<IkReal> x7386 = IKatan2WithCheck(IkReal(x7383),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7386.valid){
continue;
}
IkReal x7384=((1.0)*(x7386.value));
IkReal x7385=x7375;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7384)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7384)));
IkReal gconst142=(x7383*x7385);
IkReal gconst143=((1.0)*r00*x7385);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7387=((-1.0)*r01);
CheckValue<IkReal> x7390 = IKatan2WithCheck(IkReal(x7387),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7390.valid){
continue;
}
IkReal x7388=((1.0)*(x7390.value));
IkReal x7389=x7375;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7388)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7388)));
IkReal gconst142=(x7387*x7389);
IkReal gconst143=((1.0)*r00*x7389);
IkReal x7391=r02*r02;
IkReal x7392=(r12*sj0);
IkReal x7393=x7375;
IkReal x7394=(cj0*x7393);
j4eval[0]=((IKabs((x7392+((cj0*r02)))))+(IKabs(((((-1.0)*x7394))+((r02*x7392*x7393))+((x7391*x7394))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7395=((1.0)*gconst142);
CheckValue<IkReal> x7396=IKPowWithIntegerCheck(IKsign((((gconst143*r21))+((gconst142*r20)))),-1);
if(!x7396.valid){
continue;
}
CheckValue<IkReal> x7397 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x7395))+(((-1.0)*r11*sj0*x7395))+((cj0*gconst143*r00))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7396.value)))+(x7397.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7398=IKsin(j4);
IkReal x7399=IKcos(j4);
IkReal x7400=(gconst143*r00);
IkReal x7401=(gconst142*r21);
IkReal x7402=(gconst142*r11);
IkReal x7403=(gconst142*r01);
IkReal x7404=(cj1*sj2);
IkReal x7405=((1.0)*x7399);
IkReal x7406=((1.0)*x7398);
IkReal x7407=((1.0)*cj2*sj1);
IkReal x7408=(gconst143*x7399);
IkReal x7409=(gconst143*x7398);
evalcond[0]=(((r20*x7409))+(((-1.0)*r22*x7405))+(((-1.0)*x7401*x7406)));
evalcond[1]=((((-1.0)*x7403*x7406))+sj0+((x7398*x7400))+(((-1.0)*r02*x7405)));
evalcond[2]=((((-1.0)*r12*x7405))+(((-1.0)*x7402*x7406))+((r10*x7409))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x7408))+((r22*x7398))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*x7401*x7405)));
evalcond[4]=((((-1.0)*x7403*x7405))+((r02*x7398))+((x7399*x7400))+(((-1.0)*cj0*x7407))+((cj0*x7404)));
evalcond[5]=(((r12*x7398))+(((-1.0)*sj0*x7407))+(((-1.0)*x7402*x7405))+((r10*x7408))+((sj0*x7404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7410=((1.0)*gconst142);
CheckValue<IkReal> x7411 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x7410))+((cj0*gconst143*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7411.valid){
continue;
}
CheckValue<IkReal> x7412=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7410))+(((-1.0)*gconst143*r01)))),-1);
if(!x7412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7411.value)+(((1.5707963267949)*(x7412.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7413=IKsin(j4);
IkReal x7414=IKcos(j4);
IkReal x7415=(gconst143*r00);
IkReal x7416=(gconst142*r21);
IkReal x7417=(gconst142*r11);
IkReal x7418=(gconst142*r01);
IkReal x7419=(cj1*sj2);
IkReal x7420=((1.0)*x7414);
IkReal x7421=((1.0)*x7413);
IkReal x7422=((1.0)*cj2*sj1);
IkReal x7423=(gconst143*x7414);
IkReal x7424=(gconst143*x7413);
evalcond[0]=((((-1.0)*x7416*x7421))+(((-1.0)*r22*x7420))+((r20*x7424)));
evalcond[1]=(((x7413*x7415))+sj0+(((-1.0)*r02*x7420))+(((-1.0)*x7418*x7421)));
evalcond[2]=((((-1.0)*r12*x7420))+((r10*x7424))+(((-1.0)*cj0))+(((-1.0)*x7417*x7421)));
evalcond[3]=((((-1.0)*x7416*x7420))+((r20*x7423))+((sj1*sj2))+((r22*x7413))+((cj1*cj2)));
evalcond[4]=(((cj0*x7419))+(((-1.0)*cj0*x7422))+((r02*x7413))+(((-1.0)*x7418*x7420))+((x7414*x7415)));
evalcond[5]=(((sj0*x7419))+((r10*x7423))+(((-1.0)*sj0*x7422))+((r12*x7413))+(((-1.0)*x7417*x7420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7425=((1.0)*gconst142);
CheckValue<IkReal> x7426=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst143*r11))+(((-1.0)*r10*x7425)))),-1);
if(!x7426.valid){
continue;
}
CheckValue<IkReal> x7427 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x7425))+((gconst143*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7427.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7426.value)))+(x7427.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7428=IKsin(j4);
IkReal x7429=IKcos(j4);
IkReal x7430=(gconst143*r00);
IkReal x7431=(gconst142*r21);
IkReal x7432=(gconst142*r11);
IkReal x7433=(gconst142*r01);
IkReal x7434=(cj1*sj2);
IkReal x7435=((1.0)*x7429);
IkReal x7436=((1.0)*x7428);
IkReal x7437=((1.0)*cj2*sj1);
IkReal x7438=(gconst143*x7429);
IkReal x7439=(gconst143*x7428);
evalcond[0]=((((-1.0)*r22*x7435))+((r20*x7439))+(((-1.0)*x7431*x7436)));
evalcond[1]=(sj0+(((-1.0)*r02*x7435))+((x7428*x7430))+(((-1.0)*x7433*x7436)));
evalcond[2]=(((r10*x7439))+(((-1.0)*r12*x7435))+(((-1.0)*cj0))+(((-1.0)*x7432*x7436)));
evalcond[3]=(((r20*x7438))+((sj1*sj2))+((cj1*cj2))+((r22*x7428))+(((-1.0)*x7431*x7435)));
evalcond[4]=(((x7429*x7430))+(((-1.0)*cj0*x7437))+((r02*x7428))+((cj0*x7434))+(((-1.0)*x7433*x7435)));
evalcond[5]=(((r10*x7438))+(((-1.0)*sj0*x7437))+((r12*x7428))+((sj0*x7434))+(((-1.0)*x7432*x7435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7440=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7440;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x7440);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7441=((1.0)*sj5);
IkReal x7442=((((-1.0)*r10*x7441))+(((-1.0)*cj5*r11)));
j4eval[0]=x7442;
j4eval[1]=IKsign(x7442);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x7441))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7443=cj5*cj5;
IkReal x7444=r01*r01;
IkReal x7445=(r01*sj5);
IkReal x7446=(cj5*r00);
IkReal x7447=((((-1.0)*(r02*r02)))+(((-1.0)*x7444))+((x7443*x7444))+(((2.0)*x7445*x7446))+(((-1.0)*x7443*(r00*r00))));
j4eval[0]=x7447;
j4eval[1]=IKsign(x7447);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x7445))+x7446))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7448=cj5*cj5;
IkReal x7449=r01*r01;
IkReal x7450=(r01*sj5);
IkReal x7451=(cj5*r00);
CheckValue<IkReal> x7452 = IKatan2WithCheck(IkReal(((((-1.0)*x7450))+x7451)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x7452.valid){
continue;
}
CheckValue<IkReal> x7453=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x7449))+(((2.0)*x7450*x7451))+(((-1.0)*x7448*(r00*r00)))+((x7448*x7449)))),-1);
if(!x7453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7452.value)+(((1.5707963267949)*(x7453.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7454=IKcos(j4);
IkReal x7455=IKsin(j4);
IkReal x7456=((1.0)*x7454);
IkReal x7457=(cj5*x7454);
IkReal x7458=(cj5*x7455);
IkReal x7459=((1.0)*sj5*x7455);
evalcond[0]=(((r02*x7455))+((r00*x7457))+(((-1.0)*r01*sj5*x7456)));
evalcond[1]=(((r20*x7458))+(((-1.0)*r22*x7456))+(((-1.0)*r21*x7459)));
evalcond[2]=(((r10*x7458))+(((-1.0)*r12*x7456))+(((-1.0)*r11*x7459)));
evalcond[3]=((1.0)+(((-1.0)*r01*x7459))+((r00*x7458))+(((-1.0)*r02*x7456)));
evalcond[4]=(((r20*x7457))+((sj1*sj2))+((r22*x7455))+(((-1.0)*r21*sj5*x7456))+((cj1*cj2)));
evalcond[5]=(((r12*x7455))+(((-1.0)*r11*sj5*x7456))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((r10*x7457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7460=((1.0)*sj5);
CheckValue<IkReal> x7461=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7460)))),-1);
if(!x7461.valid){
continue;
}
CheckValue<IkReal> x7462 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x7460)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7461.value)))+(x7462.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7463=IKcos(j4);
IkReal x7464=IKsin(j4);
IkReal x7465=((1.0)*x7463);
IkReal x7466=(cj5*x7463);
IkReal x7467=(cj5*x7464);
IkReal x7468=((1.0)*sj5*x7464);
evalcond[0]=((((-1.0)*r01*sj5*x7465))+((r02*x7464))+((r00*x7466)));
evalcond[1]=((((-1.0)*r22*x7465))+(((-1.0)*r21*x7468))+((r20*x7467)));
evalcond[2]=(((r10*x7467))+(((-1.0)*r12*x7465))+(((-1.0)*r11*x7468)));
evalcond[3]=((1.0)+(((-1.0)*r02*x7465))+((r00*x7467))+(((-1.0)*r01*x7468)));
evalcond[4]=((((-1.0)*r21*sj5*x7465))+((sj1*sj2))+((r20*x7466))+((cj1*cj2))+((r22*x7464)));
evalcond[5]=(((r10*x7466))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r11*sj5*x7465))+((r12*x7464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7469 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7469.valid){
continue;
}
CheckValue<IkReal> x7470=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7470.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7469.value)+(((1.5707963267949)*(x7470.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7471=IKcos(j4);
IkReal x7472=IKsin(j4);
IkReal x7473=((1.0)*x7471);
IkReal x7474=(cj5*x7471);
IkReal x7475=(cj5*x7472);
IkReal x7476=((1.0)*sj5*x7472);
evalcond[0]=(((r02*x7472))+(((-1.0)*r01*sj5*x7473))+((r00*x7474)));
evalcond[1]=(((r20*x7475))+(((-1.0)*r21*x7476))+(((-1.0)*r22*x7473)));
evalcond[2]=(((r10*x7475))+(((-1.0)*r11*x7476))+(((-1.0)*r12*x7473)));
evalcond[3]=((1.0)+(((-1.0)*r02*x7473))+(((-1.0)*r01*x7476))+((r00*x7475)));
evalcond[4]=(((r20*x7474))+((sj1*sj2))+((r22*x7472))+(((-1.0)*r21*sj5*x7473))+((cj1*cj2)));
evalcond[5]=(((r10*x7474))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r11*sj5*x7473))+((r12*x7472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7477=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7477;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x7477);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7478=((1.0)*sj5);
IkReal x7479=((((-1.0)*r20*x7478))+(((-1.0)*cj5*r21)));
j4eval[0]=x7479;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x7478))))));
j4eval[2]=IKsign(x7479);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7480=cj5*cj5;
IkReal x7481=r01*r01;
IkReal x7482=(cj5*r00);
IkReal x7483=(r01*sj5);
IkReal x7484=(((x7480*(r00*r00)))+(((-2.0)*x7482*x7483))+(((-1.0)*x7480*x7481))+(r02*r02)+x7481);
j4eval[0]=x7484;
j4eval[1]=((IKabs(((((-1.0)*x7483))+x7482)))+(IKabs(r02)));
j4eval[2]=IKsign(x7484);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7485=cj5*cj5;
IkReal x7486=r01*r01;
IkReal x7487=(r01*sj5);
IkReal x7488=(cj5*r00);
CheckValue<IkReal> x7489=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7487*x7488))+((x7485*(r00*r00)))+(((-1.0)*x7485*x7486))+(r02*r02)+x7486)),-1);
if(!x7489.valid){
continue;
}
CheckValue<IkReal> x7490 = IKatan2WithCheck(IkReal(((((-1.0)*x7487))+x7488)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x7490.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7489.value)))+(x7490.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7491=IKcos(j4);
IkReal x7492=IKsin(j4);
IkReal x7493=((1.0)*x7491);
IkReal x7494=(cj5*x7491);
IkReal x7495=(cj5*x7492);
IkReal x7496=((1.0)*sj5*x7492);
evalcond[0]=(((r00*x7494))+((r02*x7492))+(((-1.0)*r01*sj5*x7493)));
evalcond[1]=(((r20*x7495))+(((-1.0)*r21*x7496))+(((-1.0)*r22*x7493)));
evalcond[2]=(((r10*x7495))+(((-1.0)*r11*x7496))+(((-1.0)*r12*x7493)));
evalcond[3]=((-1.0)+((r00*x7495))+(((-1.0)*r01*x7496))+(((-1.0)*r02*x7493)));
evalcond[4]=(((r22*x7492))+((sj1*sj2))+((r20*x7494))+(((-1.0)*r21*sj5*x7493))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+((r12*x7492))+(((-1.0)*cj1*sj2))+((r10*x7494))+(((-1.0)*r11*sj5*x7493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7497=((1.0)*sj5);
CheckValue<IkReal> x7498=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7497))+(((-1.0)*cj5*r21)))),-1);
if(!x7498.valid){
continue;
}
CheckValue<IkReal> x7499 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x7497)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7499.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7498.value)))+(x7499.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7500=IKcos(j4);
IkReal x7501=IKsin(j4);
IkReal x7502=((1.0)*x7500);
IkReal x7503=(cj5*x7500);
IkReal x7504=(cj5*x7501);
IkReal x7505=((1.0)*sj5*x7501);
evalcond[0]=(((r00*x7503))+(((-1.0)*r01*sj5*x7502))+((r02*x7501)));
evalcond[1]=((((-1.0)*r22*x7502))+(((-1.0)*r21*x7505))+((r20*x7504)));
evalcond[2]=(((r10*x7504))+(((-1.0)*r11*x7505))+(((-1.0)*r12*x7502)));
evalcond[3]=((-1.0)+((r00*x7504))+(((-1.0)*r01*x7505))+(((-1.0)*r02*x7502)));
evalcond[4]=(((r20*x7503))+((sj1*sj2))+((cj1*cj2))+((r22*x7501))+(((-1.0)*r21*sj5*x7502)));
evalcond[5]=(((cj2*sj1))+((r12*x7501))+(((-1.0)*cj1*sj2))+((r10*x7503))+(((-1.0)*r11*sj5*x7502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7506=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7506.valid){
continue;
}
CheckValue<IkReal> x7507 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7507.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7506.value)))+(x7507.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7508=IKcos(j4);
IkReal x7509=IKsin(j4);
IkReal x7510=((1.0)*x7508);
IkReal x7511=(cj5*x7508);
IkReal x7512=(cj5*x7509);
IkReal x7513=((1.0)*sj5*x7509);
evalcond[0]=(((r00*x7511))+((r02*x7509))+(((-1.0)*r01*sj5*x7510)));
evalcond[1]=(((r20*x7512))+(((-1.0)*r21*x7513))+(((-1.0)*r22*x7510)));
evalcond[2]=(((r10*x7512))+(((-1.0)*r12*x7510))+(((-1.0)*r11*x7513)));
evalcond[3]=((-1.0)+((r00*x7512))+(((-1.0)*r01*x7513))+(((-1.0)*r02*x7510)));
evalcond[4]=(((r20*x7511))+((sj1*sj2))+((cj1*cj2))+((r22*x7509))+(((-1.0)*r21*sj5*x7510)));
evalcond[5]=(((cj2*sj1))+((r12*x7509))+(((-1.0)*cj1*sj2))+((r10*x7511))+(((-1.0)*r11*sj5*x7510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7514=((-1.0)*r10);
IkReal x7516 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7516)==0){
continue;
}
IkReal x7515=pow(x7516,-0.5);
CheckValue<IkReal> x7517 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7514),IKFAST_ATAN2_MAGTHRESH);
if(!x7517.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7517.value));
IkReal gconst145=(r11*x7515);
IkReal gconst146=(x7514*x7515);
CheckValue<IkReal> x7518 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7518.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7518.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7519=((-1.0)*r10);
IkReal x7520=x7515;
CheckValue<IkReal> x7522 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7519),IKFAST_ATAN2_MAGTHRESH);
if(!x7522.valid){
continue;
}
IkReal x7521=((-1.0)*(x7522.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst145;
cj5=gconst146;
j5=x7521;
IkReal gconst144=x7521;
IkReal gconst145=(r11*x7520);
IkReal gconst146=(x7519*x7520);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7523=((1.0)*gconst145);
CheckValue<IkReal> x7524=IKPowWithIntegerCheck(IKsign((((gconst145*r20))+((gconst146*r21)))),-1);
if(!x7524.valid){
continue;
}
CheckValue<IkReal> x7525 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst146*r00))+((gconst146*r10*sj0))+(((-1.0)*r11*sj0*x7523))+(((-1.0)*cj0*r01*x7523)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7524.value)))+(x7525.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7526=IKsin(j4);
IkReal x7527=IKcos(j4);
IkReal x7528=(gconst145*r11);
IkReal x7529=(gconst145*r01);
IkReal x7530=(gconst145*r21);
IkReal x7531=(cj1*sj2);
IkReal x7532=((1.0)*x7527);
IkReal x7533=(gconst146*x7527);
IkReal x7534=(gconst146*x7526);
IkReal x7535=((1.0)*x7526);
IkReal x7536=((1.0)*cj2*sj1);
evalcond[0]=((((-1.0)*r22*x7532))+(((-1.0)*x7530*x7535))+((r20*x7534)));
evalcond[1]=(sj0+(((-1.0)*x7529*x7535))+((r00*x7534))+(((-1.0)*r02*x7532)));
evalcond[2]=(((r10*x7534))+(((-1.0)*r12*x7532))+(((-1.0)*x7528*x7535))+(((-1.0)*cj0)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x7530*x7532))+((r22*x7526))+((r20*x7533))+((cj1*cj2)));
evalcond[4]=(((cj0*x7531))+(((-1.0)*cj0*x7536))+(((-1.0)*x7529*x7532))+((r02*x7526))+((r00*x7533)));
evalcond[5]=(((r10*x7533))+((r12*x7526))+(((-1.0)*x7528*x7532))+((sj0*x7531))+(((-1.0)*sj0*x7536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7537=((1.0)*gconst145);
CheckValue<IkReal> x7538 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x7537))+((cj0*gconst146*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7538.valid){
continue;
}
CheckValue<IkReal> x7539=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r01))+(((-1.0)*r00*x7537)))),-1);
if(!x7539.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7538.value)+(((1.5707963267949)*(x7539.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7540=IKsin(j4);
IkReal x7541=IKcos(j4);
IkReal x7542=(gconst145*r11);
IkReal x7543=(gconst145*r01);
IkReal x7544=(gconst145*r21);
IkReal x7545=(cj1*sj2);
IkReal x7546=((1.0)*x7541);
IkReal x7547=(gconst146*x7541);
IkReal x7548=(gconst146*x7540);
IkReal x7549=((1.0)*x7540);
IkReal x7550=((1.0)*cj2*sj1);
evalcond[0]=(((r20*x7548))+(((-1.0)*x7544*x7549))+(((-1.0)*r22*x7546)));
evalcond[1]=((((-1.0)*x7543*x7549))+sj0+((r00*x7548))+(((-1.0)*r02*x7546)));
evalcond[2]=(((r10*x7548))+(((-1.0)*x7542*x7549))+(((-1.0)*r12*x7546))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x7547))+(((-1.0)*x7544*x7546))+((sj1*sj2))+((r22*x7540))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x7543*x7546))+((cj0*x7545))+((r02*x7540))+(((-1.0)*cj0*x7550))+((r00*x7547)));
evalcond[5]=(((r10*x7547))+(((-1.0)*x7542*x7546))+((sj0*x7545))+((r12*x7540))+(((-1.0)*sj0*x7550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7551=((-1.0)*r11);
IkReal x7553 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7553)==0){
continue;
}
IkReal x7552=pow(x7553,-0.5);
CheckValue<IkReal> x7554 = IKatan2WithCheck(IkReal(x7551),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7554.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7554.value))));
IkReal gconst148=(x7551*x7552);
IkReal gconst149=((1.0)*r10*x7552);
CheckValue<IkReal> x7555 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7555.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7555.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x7556=((-1.0)*r11);
CheckValue<IkReal> x7559 = IKatan2WithCheck(IkReal(x7556),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7559.valid){
continue;
}
IkReal x7557=((1.0)*(x7559.value));
IkReal x7558=x7552;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7557)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7557)));
IkReal gconst148=(x7556*x7558);
IkReal gconst149=((1.0)*r10*x7558);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7560=((-1.0)*r11);
CheckValue<IkReal> x7563 = IKatan2WithCheck(IkReal(x7560),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7563.valid){
continue;
}
IkReal x7561=((1.0)*(x7563.value));
IkReal x7562=x7552;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7561)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7561)));
IkReal gconst148=(x7560*x7562);
IkReal gconst149=((1.0)*r10*x7562);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7564=((-1.0)*r11);
CheckValue<IkReal> x7567 = IKatan2WithCheck(IkReal(x7564),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7567.valid){
continue;
}
IkReal x7565=((1.0)*(x7567.value));
IkReal x7566=x7552;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7565)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7565)));
IkReal gconst148=(x7564*x7566);
IkReal gconst149=((1.0)*r10*x7566);
IkReal x7568=r12*r12;
IkReal x7569=(cj0*r02);
IkReal x7570=x7552;
IkReal x7571=(sj0*x7570);
j4eval[0]=((IKabs((((r12*x7569*x7570))+((x7568*x7571))+(((-1.0)*x7571)))))+(IKabs((((r12*sj0))+x7569))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7572=((1.0)*gconst148);
CheckValue<IkReal> x7573 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst149*r10*sj0))+((cj0*gconst149*r00))+(((-1.0)*r11*sj0*x7572))+(((-1.0)*cj0*r01*x7572)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7573.valid){
continue;
}
CheckValue<IkReal> x7574=IKPowWithIntegerCheck(IKsign((((gconst148*r20))+((gconst149*r21)))),-1);
if(!x7574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7573.value)+(((1.5707963267949)*(x7574.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7575=IKsin(j4);
IkReal x7576=IKcos(j4);
IkReal x7577=(gconst148*r11);
IkReal x7578=(gconst148*r21);
IkReal x7579=(gconst148*r01);
IkReal x7580=(cj1*sj2);
IkReal x7581=((1.0)*x7576);
IkReal x7582=(gconst149*x7576);
IkReal x7583=(gconst149*x7575);
IkReal x7584=((1.0)*x7575);
IkReal x7585=((1.0)*cj2*sj1);
evalcond[0]=((((-1.0)*r22*x7581))+(((-1.0)*x7578*x7584))+((r20*x7583)));
evalcond[1]=(sj0+(((-1.0)*r02*x7581))+((r00*x7583))+(((-1.0)*x7579*x7584)));
evalcond[2]=(((r10*x7583))+(((-1.0)*x7577*x7584))+(((-1.0)*r12*x7581))+(((-1.0)*cj0)));
evalcond[3]=(((sj1*sj2))+((r22*x7575))+((cj1*cj2))+(((-1.0)*x7578*x7581))+((r20*x7582)));
evalcond[4]=(((r02*x7575))+((cj0*x7580))+(((-1.0)*cj0*x7585))+((r00*x7582))+(((-1.0)*x7579*x7581)));
evalcond[5]=((((-1.0)*sj0*x7585))+((r12*x7575))+((r10*x7582))+(((-1.0)*x7577*x7581))+((sj0*x7580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7586=((1.0)*gconst148);
CheckValue<IkReal> x7587 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x7586))+((cj0*gconst149*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7587.valid){
continue;
}
CheckValue<IkReal> x7588=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r01))+(((-1.0)*r00*x7586)))),-1);
if(!x7588.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7587.value)+(((1.5707963267949)*(x7588.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7589=IKsin(j4);
IkReal x7590=IKcos(j4);
IkReal x7591=(gconst148*r11);
IkReal x7592=(gconst148*r21);
IkReal x7593=(gconst148*r01);
IkReal x7594=(cj1*sj2);
IkReal x7595=((1.0)*x7590);
IkReal x7596=(gconst149*x7590);
IkReal x7597=(gconst149*x7589);
IkReal x7598=((1.0)*x7589);
IkReal x7599=((1.0)*cj2*sj1);
evalcond[0]=((((-1.0)*x7592*x7598))+((r20*x7597))+(((-1.0)*r22*x7595)));
evalcond[1]=(sj0+(((-1.0)*r02*x7595))+((r00*x7597))+(((-1.0)*x7593*x7598)));
evalcond[2]=((((-1.0)*x7591*x7598))+(((-1.0)*r12*x7595))+((r10*x7597))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x7592*x7595))+((r20*x7596))+((sj1*sj2))+((r22*x7589))+((cj1*cj2)));
evalcond[4]=(((r02*x7589))+((cj0*x7594))+((r00*x7596))+(((-1.0)*x7593*x7595))+(((-1.0)*cj0*x7599)));
evalcond[5]=(((r12*x7589))+(((-1.0)*x7591*x7595))+((r10*x7596))+((sj0*x7594))+(((-1.0)*sj0*x7599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7600=((1.0)*gconst148);
CheckValue<IkReal> x7601 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x7600))+((gconst149*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7601.valid){
continue;
}
CheckValue<IkReal> x7602=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x7600))+(((-1.0)*gconst149*r11)))),-1);
if(!x7602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7601.value)+(((1.5707963267949)*(x7602.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7603=IKsin(j4);
IkReal x7604=IKcos(j4);
IkReal x7605=(gconst148*r11);
IkReal x7606=(gconst148*r21);
IkReal x7607=(gconst148*r01);
IkReal x7608=(cj1*sj2);
IkReal x7609=((1.0)*x7604);
IkReal x7610=(gconst149*x7604);
IkReal x7611=(gconst149*x7603);
IkReal x7612=((1.0)*x7603);
IkReal x7613=((1.0)*cj2*sj1);
evalcond[0]=(((r20*x7611))+(((-1.0)*r22*x7609))+(((-1.0)*x7606*x7612)));
evalcond[1]=(((r00*x7611))+sj0+(((-1.0)*r02*x7609))+(((-1.0)*x7607*x7612)));
evalcond[2]=((((-1.0)*x7605*x7612))+((r10*x7611))+(((-1.0)*r12*x7609))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x7610))+(((-1.0)*x7606*x7609))+((sj1*sj2))+((r22*x7603))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x7607*x7609))+((r00*x7610))+((r02*x7603))+((cj0*x7608))+(((-1.0)*cj0*x7613)));
evalcond[5]=((((-1.0)*x7605*x7609))+((r12*x7603))+((r10*x7610))+(((-1.0)*sj0*x7613))+((sj0*x7608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7614=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7614;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7614);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7615=((1.0)*sj5);
IkReal x7616=((((-1.0)*r00*x7615))+(((-1.0)*cj5*r01)));
j4eval[0]=x7616;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x7615))))));
j4eval[2]=IKsign(x7616);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7617=cj5*cj5;
IkReal x7618=r11*r11;
IkReal x7619=(r11*sj5);
IkReal x7620=(cj5*r10);
IkReal x7621=((r12*r12)+(((-1.0)*x7617*x7618))+(((-2.0)*x7619*x7620))+((x7617*(r10*r10)))+x7618);
j4eval[0]=x7621;
j4eval[1]=IKsign(x7621);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x7619))+x7620))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7622=cj5*cj5;
IkReal x7623=r11*r11;
IkReal x7624=(cj5*r10);
IkReal x7625=(r11*sj5);
CheckValue<IkReal> x7626=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x7622*(r10*r10)))+(((-1.0)*x7622*x7623))+(((-2.0)*x7624*x7625))+x7623)),-1);
if(!x7626.valid){
continue;
}
CheckValue<IkReal> x7627 = IKatan2WithCheck(IkReal(((((-1.0)*x7625))+x7624)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7627.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7626.value)))+(x7627.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7628=IKcos(j4);
IkReal x7629=IKsin(j4);
IkReal x7630=(cj5*r10);
IkReal x7631=((1.0)*x7628);
IkReal x7632=(cj5*x7629);
IkReal x7633=(cj5*x7628);
IkReal x7634=((1.0)*sj5*x7629);
evalcond[0]=((((-1.0)*r11*sj5*x7631))+((x7628*x7630))+((r12*x7629)));
evalcond[1]=((((-1.0)*r22*x7631))+(((-1.0)*r21*x7634))+((r20*x7632)));
evalcond[2]=(((r00*x7632))+(((-1.0)*r01*x7634))+(((-1.0)*r02*x7631)));
evalcond[3]=((-1.0)+((x7629*x7630))+(((-1.0)*r11*x7634))+(((-1.0)*r12*x7631)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r21*sj5*x7631))+((cj1*cj2))+((r22*x7629))+((r20*x7633)));
evalcond[5]=(((r02*x7629))+((r00*x7633))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r01*sj5*x7631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7635=((1.0)*sj5);
CheckValue<IkReal> x7636 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x7635)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7636.valid){
continue;
}
CheckValue<IkReal> x7637=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7635))+(((-1.0)*cj5*r01)))),-1);
if(!x7637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7636.value)+(((1.5707963267949)*(x7637.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7638=IKcos(j4);
IkReal x7639=IKsin(j4);
IkReal x7640=(cj5*r10);
IkReal x7641=((1.0)*x7638);
IkReal x7642=(cj5*x7639);
IkReal x7643=(cj5*x7638);
IkReal x7644=((1.0)*sj5*x7639);
evalcond[0]=(((r12*x7639))+((x7638*x7640))+(((-1.0)*r11*sj5*x7641)));
evalcond[1]=((((-1.0)*r22*x7641))+(((-1.0)*r21*x7644))+((r20*x7642)));
evalcond[2]=((((-1.0)*r01*x7644))+(((-1.0)*r02*x7641))+((r00*x7642)));
evalcond[3]=((-1.0)+((x7639*x7640))+(((-1.0)*r12*x7641))+(((-1.0)*r11*x7644)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r21*sj5*x7641))+((r22*x7639))+((r20*x7643))+((cj1*cj2)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r01*sj5*x7641))+((r02*x7639))+((r00*x7643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7645=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7645.valid){
continue;
}
CheckValue<IkReal> x7646 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7646.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7645.value)))+(x7646.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7647=IKcos(j4);
IkReal x7648=IKsin(j4);
IkReal x7649=(cj5*r10);
IkReal x7650=((1.0)*x7647);
IkReal x7651=(cj5*x7648);
IkReal x7652=(cj5*x7647);
IkReal x7653=((1.0)*sj5*x7648);
evalcond[0]=(((r12*x7648))+(((-1.0)*r11*sj5*x7650))+((x7647*x7649)));
evalcond[1]=((((-1.0)*r22*x7650))+(((-1.0)*r21*x7653))+((r20*x7651)));
evalcond[2]=((((-1.0)*r02*x7650))+((r00*x7651))+(((-1.0)*r01*x7653)));
evalcond[3]=((-1.0)+((x7648*x7649))+(((-1.0)*r11*x7653))+(((-1.0)*r12*x7650)));
evalcond[4]=(((r22*x7648))+((sj1*sj2))+(((-1.0)*r21*sj5*x7650))+((r20*x7652))+((cj1*cj2)));
evalcond[5]=(((r02*x7648))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r01*sj5*x7650))+((r00*x7652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7654=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7654;
j4eval[1]=IKsign(x7654);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7655=((1.0)*sj5);
IkReal x7656=((((-1.0)*r20*x7655))+(((-1.0)*cj5*r21)));
j4eval[0]=x7656;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7655))+((cj5*r00))))));
j4eval[2]=IKsign(x7656);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7657=((1.0)*r12);
IkReal x7658=(sj1*sj2);
IkReal x7659=(cj1*cj2);
IkReal x7660=(cj5*r10);
IkReal x7661=((1.0)*r11*sj5);
IkReal x7662=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7662;
j4eval[1]=IKsign(x7662);
j4eval[2]=((IKabs((((x7658*x7660))+((x7659*x7660))+(((-1.0)*x7658*x7661))+(((-1.0)*x7659*x7661)))))+(IKabs(((((-1.0)*x7657*x7659))+(((-1.0)*x7657*x7658))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7663=((1.0)*r12);
IkReal x7664=(sj1*sj2);
IkReal x7665=(cj1*cj2);
IkReal x7666=(cj5*r10);
IkReal x7667=((1.0)*r11*sj5);
CheckValue<IkReal> x7668 = IKatan2WithCheck(IkReal((((x7665*x7666))+((x7664*x7666))+(((-1.0)*x7665*x7667))+(((-1.0)*x7664*x7667)))),IkReal(((((-1.0)*x7663*x7664))+(((-1.0)*x7663*x7665)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7668.valid){
continue;
}
CheckValue<IkReal> x7669=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7668.value)+(((1.5707963267949)*(x7669.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7670=IKcos(j4);
IkReal x7671=IKsin(j4);
IkReal x7672=(cj5*r10);
IkReal x7673=((1.0)*x7670);
IkReal x7674=(cj5*x7671);
IkReal x7675=(cj5*x7670);
IkReal x7676=((1.0)*sj5*x7671);
evalcond[0]=((((-1.0)*r11*sj5*x7673))+((r12*x7671))+((x7670*x7672)));
evalcond[1]=((((-1.0)*r21*x7676))+((r20*x7674))+(((-1.0)*r22*x7673)));
evalcond[2]=((((-1.0)*r01*x7676))+(((-1.0)*r02*x7673))+((r00*x7674)));
evalcond[3]=((1.0)+((x7671*x7672))+(((-1.0)*r11*x7676))+(((-1.0)*r12*x7673)));
evalcond[4]=(((r22*x7671))+((sj1*sj2))+(((-1.0)*r21*sj5*x7673))+((r20*x7675))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+((r02*x7671))+(((-1.0)*cj1*sj2))+(((-1.0)*r01*sj5*x7673))+((r00*x7675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7677=((1.0)*sj5);
CheckValue<IkReal> x7678=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7677))+(((-1.0)*cj5*r21)))),-1);
if(!x7678.valid){
continue;
}
CheckValue<IkReal> x7679 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x7677))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7678.value)))+(x7679.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7680=IKcos(j4);
IkReal x7681=IKsin(j4);
IkReal x7682=(cj5*r10);
IkReal x7683=((1.0)*x7680);
IkReal x7684=(cj5*x7681);
IkReal x7685=(cj5*x7680);
IkReal x7686=((1.0)*sj5*x7681);
evalcond[0]=(((x7680*x7682))+((r12*x7681))+(((-1.0)*r11*sj5*x7683)));
evalcond[1]=((((-1.0)*r22*x7683))+((r20*x7684))+(((-1.0)*r21*x7686)));
evalcond[2]=((((-1.0)*r01*x7686))+((r00*x7684))+(((-1.0)*r02*x7683)));
evalcond[3]=((1.0)+((x7681*x7682))+(((-1.0)*r11*x7686))+(((-1.0)*r12*x7683)));
evalcond[4]=((((-1.0)*r21*sj5*x7683))+((sj1*sj2))+((r20*x7685))+((cj1*cj2))+((r22*x7681)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((r00*x7685))+(((-1.0)*r01*sj5*x7683))+((r02*x7681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7687=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7687.valid){
continue;
}
CheckValue<IkReal> x7688 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7687.value)))+(x7688.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7689=IKcos(j4);
IkReal x7690=IKsin(j4);
IkReal x7691=(cj5*r10);
IkReal x7692=((1.0)*x7689);
IkReal x7693=(cj5*x7690);
IkReal x7694=(cj5*x7689);
IkReal x7695=((1.0)*sj5*x7690);
evalcond[0]=(((x7689*x7691))+((r12*x7690))+(((-1.0)*r11*sj5*x7692)));
evalcond[1]=((((-1.0)*r21*x7695))+(((-1.0)*r22*x7692))+((r20*x7693)));
evalcond[2]=((((-1.0)*r02*x7692))+(((-1.0)*r01*x7695))+((r00*x7693)));
evalcond[3]=((1.0)+((x7690*x7691))+(((-1.0)*r12*x7692))+(((-1.0)*r11*x7695)));
evalcond[4]=((((-1.0)*r21*sj5*x7692))+((sj1*sj2))+((r20*x7694))+((cj1*cj2))+((r22*x7690)));
evalcond[5]=(((r02*x7690))+((cj2*sj1))+(((-1.0)*cj1*sj2))+((r00*x7694))+(((-1.0)*r01*sj5*x7692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7696=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7696);
rxp0_2=(py*r00);
rxp1_0=(r21*x7696);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7697=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7697);
rxp0_2=(py*r00);
rxp1_0=(r21*x7697);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7698=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7698);
rxp0_2=(py*r00);
rxp1_0=(r21*x7698);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7701=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x7701.valid){
continue;
}
IkReal x7699=x7701.value;
IkReal x7700=(cj0*x7699);
cj4array[0]=(((cj2*sj1*x7700))+(((-1.0)*cj1*sj2*x7700)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7702=IKsin(j4);
IkReal x7703=IKcos(j4);
IkReal x7704=(cj5*r20);
IkReal x7705=((1.0)*sj5);
evalcond[0]=(r12*x7702);
evalcond[1]=((((-1.0)*r12*x7703))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x7702*x7705))+((x7702*x7704)));
evalcond[3]=(((cj5*r00*x7702))+(((-1.0)*r01*x7702*x7705)));
evalcond[4]=(((x7703*x7704))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*r21*x7703*x7705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7708=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x7708.valid){
continue;
}
IkReal x7706=x7708.value;
IkReal x7707=((1.0)*x7706);
cj4array[0]=((((-1.0)*cj1*cj2*x7707))+(((-1.0)*sj1*sj2*x7707)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7709=IKsin(j4);
IkReal x7710=IKcos(j4);
IkReal x7711=(cj5*r00);
IkReal x7712=((1.0)*cj0);
IkReal x7713=((1.0)*r01*sj5);
evalcond[0]=(r12*x7709);
evalcond[1]=((((-1.0)*x7712))+(((-1.0)*r12*x7710)));
evalcond[2]=(((cj5*r20*x7709))+(((-1.0)*r21*sj5*x7709)));
evalcond[3]=(((x7709*x7711))+(((-1.0)*x7709*x7713)));
evalcond[4]=((((-1.0)*cj2*sj1*x7712))+((x7710*x7711))+((cj0*cj1*sj2))+(((-1.0)*x7710*x7713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7714=IKPowWithIntegerCheck(r12,-1);
if(!x7714.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x7714.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7715=IKsin(j4);
IkReal x7716=IKcos(j4);
IkReal x7717=(cj5*x7716);
IkReal x7718=((1.0)*r21*sj5);
IkReal x7719=((1.0)*r01*sj5);
IkReal x7720=(cj5*x7715);
evalcond[0]=(r12*x7715);
evalcond[1]=((((-1.0)*x7715*x7718))+((r20*x7720)));
evalcond[2]=(((r00*x7720))+(((-1.0)*x7715*x7719)));
evalcond[3]=(((r20*x7717))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*x7716*x7718)));
evalcond[4]=((((-1.0)*cj0*cj2*sj1))+((cj0*cj1*sj2))+(((-1.0)*x7716*x7719))+((r00*x7717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7721=((1.0)*sj5);
CheckValue<IkReal> x7722=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7722.valid){
continue;
}
CheckValue<IkReal> x7723 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x7721))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x7721)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7723.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7722.value)))+(x7723.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7724=IKsin(j4);
IkReal x7725=IKcos(j4);
IkReal x7726=(cj5*r10);
IkReal x7727=(cj1*sj2);
IkReal x7728=((1.0)*x7725);
IkReal x7729=((1.0)*cj2*sj1);
IkReal x7730=(cj5*x7724);
IkReal x7731=(cj5*x7725);
IkReal x7732=((1.0)*sj5*x7724);
evalcond[0]=((((-1.0)*r21*x7732))+((r20*x7730))+(((-1.0)*r22*x7728)));
evalcond[1]=(sj0+(((-1.0)*r02*x7728))+(((-1.0)*r01*x7732))+((r00*x7730)));
evalcond[2]=(((x7724*x7726))+(((-1.0)*r11*x7732))+(((-1.0)*cj0))+(((-1.0)*r12*x7728)));
evalcond[3]=(((r22*x7724))+((sj1*sj2))+((r20*x7731))+(((-1.0)*r21*sj5*x7728))+((cj1*cj2)));
evalcond[4]=((((-1.0)*cj0*x7729))+((cj0*x7727))+(((-1.0)*r01*sj5*x7728))+((r00*x7731))+((r02*x7724)));
evalcond[5]=(((sj0*x7727))+(((-1.0)*sj0*x7729))+(((-1.0)*r11*sj5*x7728))+((r12*x7724))+((x7725*x7726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7733=((1.0)*sj5);
CheckValue<IkReal> x7734=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7733))+(((-1.0)*cj5*r01)))),-1);
if(!x7734.valid){
continue;
}
CheckValue<IkReal> x7735 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x7733))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7734.value)))+(x7735.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7736=IKsin(j4);
IkReal x7737=IKcos(j4);
IkReal x7738=(cj5*r10);
IkReal x7739=(cj1*sj2);
IkReal x7740=((1.0)*x7737);
IkReal x7741=((1.0)*cj2*sj1);
IkReal x7742=(cj5*x7736);
IkReal x7743=(cj5*x7737);
IkReal x7744=((1.0)*sj5*x7736);
evalcond[0]=((((-1.0)*r22*x7740))+((r20*x7742))+(((-1.0)*r21*x7744)));
evalcond[1]=(((r00*x7742))+sj0+(((-1.0)*r02*x7740))+(((-1.0)*r01*x7744)));
evalcond[2]=(((x7736*x7738))+(((-1.0)*r12*x7740))+(((-1.0)*r11*x7744))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r21*sj5*x7740))+((sj1*sj2))+((r20*x7743))+((r22*x7736))+((cj1*cj2)));
evalcond[4]=(((r00*x7743))+((cj0*x7739))+((r02*x7736))+(((-1.0)*cj0*x7741))+(((-1.0)*r01*sj5*x7740)));
evalcond[5]=(((r12*x7736))+((sj0*x7739))+(((-1.0)*r11*sj5*x7740))+((x7737*x7738))+(((-1.0)*sj0*x7741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7745=((1.0)*sj5);
CheckValue<IkReal> x7746 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x7745)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7746.valid){
continue;
}
CheckValue<IkReal> x7747=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7745)))),-1);
if(!x7747.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7746.value)+(((1.5707963267949)*(x7747.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7748=IKsin(j4);
IkReal x7749=IKcos(j4);
IkReal x7750=(cj5*r10);
IkReal x7751=(cj1*sj2);
IkReal x7752=((1.0)*x7749);
IkReal x7753=((1.0)*cj2*sj1);
IkReal x7754=(cj5*x7748);
IkReal x7755=(cj5*x7749);
IkReal x7756=((1.0)*sj5*x7748);
evalcond[0]=((((-1.0)*r22*x7752))+((r20*x7754))+(((-1.0)*r21*x7756)));
evalcond[1]=(sj0+((r00*x7754))+(((-1.0)*r02*x7752))+(((-1.0)*r01*x7756)));
evalcond[2]=((((-1.0)*r11*x7756))+(((-1.0)*r12*x7752))+((x7748*x7750))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r21*sj5*x7752))+((sj1*sj2))+((r20*x7755))+((cj1*cj2))+((r22*x7748)));
evalcond[4]=(((r00*x7755))+(((-1.0)*cj0*x7753))+((r02*x7748))+((cj0*x7751))+(((-1.0)*r01*sj5*x7752)));
evalcond[5]=(((r12*x7748))+((sj0*x7751))+(((-1.0)*r11*sj5*x7752))+((x7749*x7750))+(((-1.0)*sj0*x7753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7757=cj1*cj1;
IkReal x7758=cj2*cj2;
IkReal x7759=(r00*sj5);
IkReal x7760=((0.8077)*cj1);
IkReal x7761=((167280.0)*sj1);
IkReal x7762=(r10*sj5);
IkReal x7763=(cj1*sj2);
IkReal x7764=(cj5*r01);
IkReal x7765=((1632000.0)*sj1);
IkReal x7766=((7.88)*cj1);
IkReal x7767=(cj5*r11);
IkReal x7768=(cj1*sj1);
IkReal x7769=((1227264.0)*cj2);
IkReal x7770=(cj2*sj1);
IkReal x7771=((1504000.0)*x7770);
IkReal x7772=((154160.0)*x7770);
CheckValue<IkReal> x7773 = IKatan2WithCheck(IkReal(((((0.3649)*x7762))+(((0.3649)*x7767))+(((-1.0)*x7767*x7772))+((x7760*x7767))+((x7760*x7762))+(((-1.0)*py*x7766))+(((154160.0)*x7762*x7763))+(((154160.0)*x7763*x7767))+((py*x7771))+((py*x7765))+(((-3.56)*py))+(((-1.0)*x7761*x7767))+(((-1.0)*x7761*x7762))+(((49815.0)*x7759))+(((-1504000.0)*py*x7763))+(((-1.0)*x7762*x7772))+(((49815.0)*x7764))+(((-486000.0)*px)))),IkReal(((((0.3649)*x7764))+((x7760*x7764))+(((486000.0)*py))+((px*x7765))+(((-1504000.0)*px*x7763))+((px*x7771))+(((-1.0)*x7764*x7772))+(((154160.0)*x7763*x7764))+(((-1.0)*x7759*x7761))+(((-1.0)*x7759*x7772))+(((-49815.0)*x7767))+(((-49815.0)*x7762))+(((-3.56)*px))+(((-1.0)*px*x7766))+(((-1.0)*x7761*x7764))+(((154160.0)*x7759*x7763))+(((0.3649)*x7759))+((x7759*x7760)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7773.valid){
continue;
}
CheckValue<IkReal> x7774=IKPowWithIntegerCheck(IKsign(((-724905.000003168)+(((6.43008)*x7768))+(((-5.92576)*sj2*x7757))+(((2.90496)*sj1))+(((-1.40264e-5)*cj1))+(((100351.999984476)*x7757))+(((5.92576)*cj2*x7768))+(((-565504.0)*x7758))+(((1227264.0)*sj1*x7763))+(((1131008.0)*x7763*x7770))+(((-1.0)*x7769))+(((1131008.0)*x7757*x7758))+((x7757*x7769))+(((2.67712)*x7770))+(((-2.67712)*x7763)))),-1);
if(!x7774.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x7773.value)+(((1.5707963267949)*(x7774.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7775=IKcos(j0);
IkReal x7776=IKsin(j0);
IkReal x7777=((0.1025)*cj5);
IkReal x7778=(cj2*sj1);
IkReal x7779=((0.408)*sj1);
IkReal x7780=(cj1*sj2);
IkReal x7781=((1.97e-6)*cj1);
IkReal x7782=((0.1025)*sj5);
IkReal x7783=((0.376)*x7776);
IkReal x7784=((0.376)*x7775);
evalcond[0]=(((x7780*x7784))+(((-1.0)*x7775*x7779))+(((0.1215)*x7776))+((x7775*x7781))+((r00*x7782))+(((-1.0)*px))+(((8.9e-7)*x7775))+((r01*x7777))+(((-1.0)*x7778*x7784)));
evalcond[1]=(((r11*x7777))+(((-0.1215)*x7775))+((x7780*x7783))+(((-1.0)*x7776*x7779))+((r10*x7782))+((x7776*x7781))+(((-1.0)*py))+(((8.9e-7)*x7776))+(((-1.0)*x7778*x7783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x7785=((1.0)*sj5);
IkReal x7786=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7785)));
j4eval[0]=x7786;
j4eval[1]=IKsign(x7786);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x7785))+((cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7787=((1.0)*sj5);
IkReal x7788=((((-1.0)*r00*x7787))+(((-1.0)*cj5*r01)));
j4eval[0]=x7788;
j4eval[1]=IKsign(x7788);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7787))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7789=((1.0)*sj5);
IkReal x7790=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7790;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x7789))+(((-1.0)*r11*sj0*x7789))))));
j4eval[2]=IKsign(x7790);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7792 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7792)==0){
continue;
}
IkReal x7791=pow(x7792,-0.5);
CheckValue<IkReal> x7793 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7793.valid){
continue;
}
IkReal gconst0=((-1.0)*(x7793.value));
IkReal gconst1=((-1.0)*r21*x7791);
IkReal gconst2=(r20*x7791);
CheckValue<IkReal> x7794 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7794.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7794.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7797 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7797.valid){
continue;
}
IkReal x7795=((-1.0)*(x7797.value));
IkReal x7796=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x7795;
IkReal gconst0=x7795;
IkReal gconst1=((-1.0)*r21*x7796);
IkReal gconst2=(r20*x7796);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7800 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7800.valid){
continue;
}
IkReal x7798=((-1.0)*(x7800.value));
IkReal x7799=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x7798;
IkReal gconst0=x7798;
IkReal gconst1=((-1.0)*r21*x7799);
IkReal gconst2=(r20*x7799);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x7803 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7803.valid){
continue;
}
IkReal x7801=((-1.0)*(x7803.value));
IkReal x7802=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x7801;
IkReal gconst0=x7801;
IkReal gconst1=((-1.0)*r21*x7802);
IkReal gconst2=(r20*x7802);
IkReal x7804=r22*r22;
CheckValue<IkReal> x7808=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7804))),-1);
if(!x7808.valid){
continue;
}
IkReal x7805=x7808.value;
IkReal x7806=(cj3*x7805);
IkReal x7807=(((cj3*x7804))+((x7806*(r20*r20*r20*r20)))+(((2.0)*x7806*(r20*r20)*(r21*r21)))+((x7806*(r21*r21*r21*r21))));
j4eval[0]=x7807;
j4eval[1]=IKsign(x7807);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7811 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7811.valid){
continue;
}
IkReal x7809=((-1.0)*(x7811.value));
IkReal x7810=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x7809;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x7809;
IkReal gconst1=((-1.0)*r21*x7810);
IkReal gconst2=(r20*x7810);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7814 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7814.valid){
continue;
}
IkReal x7812=((-1.0)*(x7814.value));
IkReal x7813=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x7812;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x7812;
IkReal gconst1=((-1.0)*r21*x7813);
IkReal gconst2=(r20*x7813);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x7817 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7817.valid){
continue;
}
IkReal x7815=((-1.0)*(x7817.value));
IkReal x7816=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x7815;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x7815;
IkReal gconst1=((-1.0)*r21*x7816);
IkReal gconst2=(r20*x7816);
IkReal x7818=r22*r22;
CheckValue<IkReal> x7821=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7818))),-1);
if(!x7821.valid){
continue;
}
IkReal x7819=x7821.value;
IkReal x7820=(x7818+((x7819*(r20*r20*r20*r20)))+(((2.0)*x7819*(r20*r20)*(r21*r21)))+((x7819*(r21*r21*r21*r21))));
j4eval[0]=x7820;
j4eval[1]=IKsign(x7820);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7824 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7824.valid){
continue;
}
IkReal x7822=((-1.0)*(x7824.value));
IkReal x7823=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x7822;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x7822;
IkReal gconst1=((-1.0)*r21*x7823);
IkReal gconst2=(r20*x7823);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x7827 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7827.valid){
continue;
}
IkReal x7825=((-1.0)*(x7827.value));
IkReal x7826=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x7825;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x7825;
IkReal gconst1=((-1.0)*r21*x7826);
IkReal gconst2=(r20*x7826);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7830 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7830.valid){
continue;
}
IkReal x7828=((-1.0)*(x7830.value));
IkReal x7829=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x7828;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x7828;
IkReal gconst1=((-1.0)*r21*x7829);
IkReal gconst2=(r20*x7829);
IkReal x7831=r22*r22;
IkReal x7832=(r02*sj1*sj2);
IkReal x7833=(cj1*cj2*r02);
CheckValue<IkReal> x7837=IKPowWithIntegerCheck(((-1.0)+x7831),-1);
if(!x7837.valid){
continue;
}
IkReal x7834=x7837.value;
if((((1.0)+(((-1.0)*x7831)))) < -0.00001)
continue;
IkReal x7835=IKsqrt(((1.0)+(((-1.0)*x7831))));
IkReal x7836=((1.0)*r22*x7834*x7835);
j4eval[0]=((IKabs(((((-1.0)*x7832*x7836))+(((-1.0)*x7833*x7836)))))+(IKabs((x7832+x7833))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7838=(sj1*sj2);
IkReal x7839=((1.0)*gconst2);
IkReal x7840=(gconst1*r01);
IkReal x7841=(cj1*cj2);
CheckValue<IkReal> x7842=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x7839)))),-1);
if(!x7842.valid){
continue;
}
CheckValue<IkReal> x7843 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x7838*x7839))+((x7838*x7840))+((x7840*x7841))+(((-1.0)*r00*x7839*x7841)))),IkReal((((r02*x7838))+((r02*x7841)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7843.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7842.value)))+(x7843.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7844=IKsin(j4);
IkReal x7845=IKcos(j4);
IkReal x7846=(gconst1*r01);
IkReal x7847=(gconst1*r21);
IkReal x7848=(gconst1*r11);
IkReal x7849=((1.0)*x7845);
IkReal x7850=((1.0)*x7844);
IkReal x7851=(gconst2*x7844);
evalcond[0]=((((-1.0)*x7847*x7850))+(((-1.0)*r22*x7849))+((r20*x7851)));
evalcond[1]=((((-1.0)*x7848*x7850))+(((-1.0)*r12*x7849))+((r10*x7851)));
evalcond[2]=((((-1.0)*gconst2*r00*x7849))+(((-1.0)*r02*x7850))+((x7845*x7846)));
evalcond[3]=((1.0)+(((-1.0)*x7846*x7850))+(((-1.0)*r02*x7849))+((r00*x7851)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*gconst2*r20*x7849))+((cj1*cj2))+((x7845*x7847))+(((-1.0)*r22*x7850)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((x7845*x7848))+(((-1.0)*r12*x7850))+(((-1.0)*gconst2*r10*x7849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7852=(gconst1*r01);
IkReal x7853=(gconst2*r00);
CheckValue<IkReal> x7854 = IKatan2WithCheck(IkReal((x7852+(((-1.0)*x7853)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7854.valid){
continue;
}
CheckValue<IkReal> x7855=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7852*x7853))+(x7853*x7853)+(r02*r02)+(x7852*x7852))),-1);
if(!x7855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7854.value)+(((1.5707963267949)*(x7855.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7856=IKsin(j4);
IkReal x7857=IKcos(j4);
IkReal x7858=(gconst1*r01);
IkReal x7859=(gconst1*r21);
IkReal x7860=(gconst1*r11);
IkReal x7861=((1.0)*x7857);
IkReal x7862=((1.0)*x7856);
IkReal x7863=(gconst2*x7856);
evalcond[0]=((((-1.0)*x7859*x7862))+((r20*x7863))+(((-1.0)*r22*x7861)));
evalcond[1]=((((-1.0)*r12*x7861))+((r10*x7863))+(((-1.0)*x7860*x7862)));
evalcond[2]=(((x7857*x7858))+(((-1.0)*r02*x7862))+(((-1.0)*gconst2*r00*x7861)));
evalcond[3]=((1.0)+(((-1.0)*x7858*x7862))+((r00*x7863))+(((-1.0)*r02*x7861)));
evalcond[4]=(((x7857*x7859))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst2*r20*x7861))+(((-1.0)*r22*x7862)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((x7857*x7860))+(((-1.0)*r12*x7862))+(((-1.0)*gconst2*r10*x7861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7864=((1.0)*gconst1);
CheckValue<IkReal> x7865=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x7864))+(((-1.0)*gconst2*r11)))),-1);
if(!x7865.valid){
continue;
}
CheckValue<IkReal> x7866 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*r21*x7864)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7865.value)))+(x7866.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7867=IKsin(j4);
IkReal x7868=IKcos(j4);
IkReal x7869=(gconst1*r01);
IkReal x7870=(gconst1*r21);
IkReal x7871=(gconst1*r11);
IkReal x7872=((1.0)*x7868);
IkReal x7873=((1.0)*x7867);
IkReal x7874=(gconst2*x7867);
evalcond[0]=((((-1.0)*r22*x7872))+(((-1.0)*x7870*x7873))+((r20*x7874)));
evalcond[1]=(((r10*x7874))+(((-1.0)*x7871*x7873))+(((-1.0)*r12*x7872)));
evalcond[2]=((((-1.0)*gconst2*r00*x7872))+(((-1.0)*r02*x7873))+((x7868*x7869)));
evalcond[3]=((1.0)+((r00*x7874))+(((-1.0)*x7869*x7873))+(((-1.0)*r02*x7872)));
evalcond[4]=((((-1.0)*gconst2*r20*x7872))+(((-1.0)*r22*x7873))+((sj1*sj2))+((x7868*x7870))+((cj1*cj2)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x7873))+((x7868*x7871))+(((-1.0)*gconst2*r10*x7872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7877 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7877.valid){
continue;
}
IkReal x7875=((-1.0)*(x7877.value));
IkReal x7876=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x7875;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x7875;
IkReal gconst1=((-1.0)*r21*x7876);
IkReal gconst2=(r20*x7876);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x7880 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7880.valid){
continue;
}
IkReal x7878=((-1.0)*(x7880.value));
IkReal x7879=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x7878;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x7878;
IkReal gconst1=((-1.0)*r21*x7879);
IkReal gconst2=(r20*x7879);
IkReal x7881=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x7885=IKPowWithIntegerCheck(x7881,-1);
if(!x7885.valid){
continue;
}
IkReal x7882=x7885.value;
IkReal x7883=((1.0)*x7882);
IkReal x7884=((((-1.0)*x7883*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x7883*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x7882)));
j4eval[0]=x7884;
j4eval[1]=IKsign(x7884);
j4eval[2]=r02;
j4eval[3]=x7881;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7888 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7888.valid){
continue;
}
IkReal x7886=((-1.0)*(x7888.value));
IkReal x7887=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x7886;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x7886;
IkReal gconst1=((-1.0)*r21*x7887);
IkReal gconst2=(r20*x7887);
IkReal x7889=r22*r22;
IkReal x7890=(r02*sj1*sj2);
IkReal x7891=(cj1*cj2*r02);
CheckValue<IkReal> x7895=IKPowWithIntegerCheck(((-1.0)+x7889),-1);
if(!x7895.valid){
continue;
}
IkReal x7892=x7895.value;
if((((1.0)+(((-1.0)*x7889)))) < -0.00001)
continue;
IkReal x7893=IKsqrt(((1.0)+(((-1.0)*x7889))));
IkReal x7894=((1.0)*r22*x7892*x7893);
j4eval[0]=((IKabs(((((-1.0)*x7891*x7894))+(((-1.0)*x7890*x7894)))))+(IKabs((x7890+x7891))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7896=(sj1*sj2);
IkReal x7897=((1.0)*gconst2);
IkReal x7898=(gconst1*r01);
IkReal x7899=(cj1*cj2);
CheckValue<IkReal> x7900=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7897))+(((-1.0)*gconst1*r10)))),-1);
if(!x7900.valid){
continue;
}
CheckValue<IkReal> x7901 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x7897*x7899))+((x7896*x7898))+(((-1.0)*r00*x7896*x7897))+((x7898*x7899)))),IkReal((((r02*x7899))+((r02*x7896)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7900.value)))+(x7901.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7902=IKsin(j4);
IkReal x7903=IKcos(j4);
IkReal x7904=(gconst1*r01);
IkReal x7905=(gconst1*r21);
IkReal x7906=(gconst1*r11);
IkReal x7907=((1.0)*x7903);
IkReal x7908=((1.0)*x7902);
IkReal x7909=(gconst2*x7902);
evalcond[0]=((((-1.0)*x7905*x7908))+(((-1.0)*r22*x7907))+((r20*x7909)));
evalcond[1]=((((-1.0)*r12*x7907))+((r10*x7909))+(((-1.0)*x7906*x7908)));
evalcond[2]=(((x7903*x7904))+(((-1.0)*gconst2*r00*x7907))+(((-1.0)*r02*x7908)));
evalcond[3]=((-1.0)+((r00*x7909))+(((-1.0)*x7904*x7908))+(((-1.0)*r02*x7907)));
evalcond[4]=((((-1.0)*gconst2*r20*x7907))+((x7903*x7905))+((sj1*sj2))+(((-1.0)*r22*x7908))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+((x7903*x7906))+(((-1.0)*r12*x7908))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r10*x7907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7910=(gconst1*r01);
IkReal x7911=(gconst2*r00);
CheckValue<IkReal> x7912 = IKatan2WithCheck(IkReal(((((-1.0)*x7911))+x7910)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7912.valid){
continue;
}
CheckValue<IkReal> x7913=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7910*x7910)))+(((-1.0)*(r02*r02)))+(((2.0)*x7910*x7911))+(((-1.0)*(x7911*x7911))))),-1);
if(!x7913.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7912.value)+(((1.5707963267949)*(x7913.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7914=IKsin(j4);
IkReal x7915=IKcos(j4);
IkReal x7916=(gconst1*r01);
IkReal x7917=(gconst1*r21);
IkReal x7918=(gconst1*r11);
IkReal x7919=((1.0)*x7915);
IkReal x7920=((1.0)*x7914);
IkReal x7921=(gconst2*x7914);
evalcond[0]=(((r20*x7921))+(((-1.0)*r22*x7919))+(((-1.0)*x7917*x7920)));
evalcond[1]=(((r10*x7921))+(((-1.0)*r12*x7919))+(((-1.0)*x7918*x7920)));
evalcond[2]=((((-1.0)*r02*x7920))+(((-1.0)*gconst2*r00*x7919))+((x7915*x7916)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x7919))+((r00*x7921))+(((-1.0)*x7916*x7920)));
evalcond[4]=((((-1.0)*r22*x7920))+((sj1*sj2))+((cj1*cj2))+((x7915*x7917))+(((-1.0)*gconst2*r20*x7919)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*gconst2*r10*x7919))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x7920))+((x7915*x7918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7922 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7922.valid){
continue;
}
CheckValue<IkReal> x7923=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x7923.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7922.value)+(((1.5707963267949)*(x7923.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7924=IKsin(j4);
IkReal x7925=IKcos(j4);
IkReal x7926=(gconst1*r01);
IkReal x7927=(gconst1*r21);
IkReal x7928=(gconst1*r11);
IkReal x7929=((1.0)*x7925);
IkReal x7930=((1.0)*x7924);
IkReal x7931=(gconst2*x7924);
evalcond[0]=((((-1.0)*x7927*x7930))+((r20*x7931))+(((-1.0)*r22*x7929)));
evalcond[1]=(((r10*x7931))+(((-1.0)*x7928*x7930))+(((-1.0)*r12*x7929)));
evalcond[2]=((((-1.0)*r02*x7930))+((x7925*x7926))+(((-1.0)*gconst2*r00*x7929)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x7929))+(((-1.0)*x7926*x7930))+((r00*x7931)));
evalcond[4]=((((-1.0)*r22*x7930))+((sj1*sj2))+((x7925*x7927))+((cj1*cj2))+(((-1.0)*gconst2*r20*x7929)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*gconst2*r10*x7929))+(((-1.0)*r12*x7930))+(((-1.0)*cj1*sj2))+((x7925*x7928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7934 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7934.valid){
continue;
}
IkReal x7932=((-1.0)*(x7934.value));
IkReal x7933=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x7932;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x7932;
IkReal gconst1=((-1.0)*r21*x7933);
IkReal gconst2=(r20*x7933);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x7937 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7937.valid){
continue;
}
IkReal x7935=((-1.0)*(x7937.value));
IkReal x7936=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x7935;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x7935;
IkReal gconst1=((-1.0)*r21*x7936);
IkReal gconst2=(r20*x7936);
IkReal x7938=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x7942=IKPowWithIntegerCheck(x7938,-1);
if(!x7942.valid){
continue;
}
IkReal x7939=x7942.value;
IkReal x7940=((1.0)*x7939);
IkReal x7941=((((-1.0)*x7940*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x7940*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x7939)));
j4eval[0]=x7941;
j4eval[1]=r12;
j4eval[2]=x7938;
j4eval[3]=IKsign(x7941);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7945 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7945.valid){
continue;
}
IkReal x7943=((-1.0)*(x7945.value));
IkReal x7944=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x7943;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x7943;
IkReal gconst1=((-1.0)*r21*x7944);
IkReal gconst2=(r20*x7944);
IkReal x7946=r22*r22;
IkReal x7947=(r12*sj1*sj2);
IkReal x7948=(cj1*cj2*r12);
CheckValue<IkReal> x7952=IKPowWithIntegerCheck(((-1.0)+x7946),-1);
if(!x7952.valid){
continue;
}
IkReal x7949=x7952.value;
if((((1.0)+(((-1.0)*x7946)))) < -0.00001)
continue;
IkReal x7950=IKsqrt(((1.0)+(((-1.0)*x7946))));
IkReal x7951=((1.0)*r22*x7949*x7950);
j4eval[0]=((IKabs(((((-1.0)*x7947*x7951))+(((-1.0)*x7948*x7951)))))+(IKabs((x7947+x7948))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7953=(sj1*sj2);
IkReal x7954=(gconst1*r11);
IkReal x7955=(cj1*cj2);
IkReal x7956=((1.0)*gconst2*r10);
CheckValue<IkReal> x7957 = IKatan2WithCheck(IkReal(((((-1.0)*x7953*x7956))+(((-1.0)*x7955*x7956))+((x7954*x7955))+((x7953*x7954)))),IkReal((((r12*x7955))+((r12*x7953)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7957.valid){
continue;
}
CheckValue<IkReal> x7958=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x7958.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7957.value)+(((1.5707963267949)*(x7958.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7959=IKsin(j4);
IkReal x7960=IKcos(j4);
IkReal x7961=(gconst1*r01);
IkReal x7962=(gconst1*r21);
IkReal x7963=(gconst1*r11);
IkReal x7964=((1.0)*x7960);
IkReal x7965=((1.0)*x7959);
IkReal x7966=(gconst2*x7959);
evalcond[0]=((((-1.0)*r22*x7964))+((r20*x7966))+(((-1.0)*x7962*x7965)));
evalcond[1]=(((r00*x7966))+(((-1.0)*r02*x7964))+(((-1.0)*x7961*x7965)));
evalcond[2]=(((x7960*x7963))+(((-1.0)*gconst2*r10*x7964))+(((-1.0)*r12*x7965)));
evalcond[3]=((-1.0)+(((-1.0)*x7963*x7965))+(((-1.0)*r12*x7964))+((r10*x7966)));
evalcond[4]=((((-1.0)*gconst2*r20*x7964))+(((-1.0)*r22*x7965))+((sj1*sj2))+((x7960*x7962))+((cj1*cj2)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((x7960*x7961))+(((-1.0)*r02*x7965))+(((-1.0)*gconst2*r00*x7964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7967=(gconst1*r11);
IkReal x7968=(gconst2*r10);
CheckValue<IkReal> x7969=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7968*x7968)))+(((-1.0)*(x7967*x7967)))+(((2.0)*x7967*x7968))+(((-1.0)*(r12*r12))))),-1);
if(!x7969.valid){
continue;
}
CheckValue<IkReal> x7970 = IKatan2WithCheck(IkReal(((((-1.0)*x7968))+x7967)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7969.value)))+(x7970.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7971=IKsin(j4);
IkReal x7972=IKcos(j4);
IkReal x7973=(gconst1*r01);
IkReal x7974=(gconst1*r21);
IkReal x7975=(gconst1*r11);
IkReal x7976=((1.0)*x7972);
IkReal x7977=((1.0)*x7971);
IkReal x7978=(gconst2*x7971);
evalcond[0]=((((-1.0)*r22*x7976))+((r20*x7978))+(((-1.0)*x7974*x7977)));
evalcond[1]=(((r00*x7978))+(((-1.0)*x7973*x7977))+(((-1.0)*r02*x7976)));
evalcond[2]=((((-1.0)*gconst2*r10*x7976))+((x7972*x7975))+(((-1.0)*r12*x7977)));
evalcond[3]=((-1.0)+(((-1.0)*x7975*x7977))+(((-1.0)*r12*x7976))+((r10*x7978)));
evalcond[4]=((((-1.0)*r22*x7977))+((sj1*sj2))+((x7972*x7974))+((cj1*cj2))+(((-1.0)*gconst2*r20*x7976)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r02*x7977))+((x7972*x7973))+(((-1.0)*gconst2*r00*x7976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7979=((1.0)*gconst1);
CheckValue<IkReal> x7980 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*r21*x7979)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7980.valid){
continue;
}
CheckValue<IkReal> x7981=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x7979)))),-1);
if(!x7981.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7980.value)+(((1.5707963267949)*(x7981.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7982=IKsin(j4);
IkReal x7983=IKcos(j4);
IkReal x7984=(gconst1*r01);
IkReal x7985=(gconst1*r21);
IkReal x7986=(gconst1*r11);
IkReal x7987=((1.0)*x7983);
IkReal x7988=((1.0)*x7982);
IkReal x7989=(gconst2*x7982);
evalcond[0]=((((-1.0)*r22*x7987))+((r20*x7989))+(((-1.0)*x7985*x7988)));
evalcond[1]=(((r00*x7989))+(((-1.0)*x7984*x7988))+(((-1.0)*r02*x7987)));
evalcond[2]=((((-1.0)*r12*x7988))+((x7983*x7986))+(((-1.0)*gconst2*r10*x7987)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x7987))+(((-1.0)*x7986*x7988))+((r10*x7989)));
evalcond[4]=((((-1.0)*r22*x7988))+((sj1*sj2))+((x7983*x7985))+((cj1*cj2))+(((-1.0)*gconst2*r20*x7987)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((x7983*x7984))+(((-1.0)*gconst2*r00*x7987))+(((-1.0)*r02*x7988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7992 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7992.valid){
continue;
}
IkReal x7990=((-1.0)*(x7992.value));
IkReal x7991=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x7990;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x7990;
IkReal gconst1=((-1.0)*r21*x7991);
IkReal gconst2=(r20*x7991);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x7995 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7995.valid){
continue;
}
IkReal x7993=((-1.0)*(x7995.value));
IkReal x7994=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x7993;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x7993;
IkReal gconst1=((-1.0)*r21*x7994);
IkReal gconst2=(r20*x7994);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7998 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7998.valid){
continue;
}
IkReal x7996=((-1.0)*(x7998.value));
IkReal x7997=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x7996;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x7996;
IkReal gconst1=((-1.0)*r21*x7997);
IkReal gconst2=(r20*x7997);
IkReal x7999=r22*r22;
IkReal x8000=(r12*sj1*sj2);
IkReal x8001=(cj1*cj2*r12);
CheckValue<IkReal> x8005=IKPowWithIntegerCheck(((-1.0)+x7999),-1);
if(!x8005.valid){
continue;
}
IkReal x8002=x8005.value;
if((((1.0)+(((-1.0)*x7999)))) < -0.00001)
continue;
IkReal x8003=IKsqrt(((1.0)+(((-1.0)*x7999))));
IkReal x8004=((1.0)*r22*x8002*x8003);
j4eval[0]=((IKabs(((((-1.0)*x8001*x8004))+(((-1.0)*x8000*x8004)))))+(IKabs((x8000+x8001))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8006=(sj1*sj2);
IkReal x8007=(gconst1*r11);
IkReal x8008=(cj1*cj2);
IkReal x8009=((1.0)*gconst2*r10);
CheckValue<IkReal> x8010=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8010.valid){
continue;
}
CheckValue<IkReal> x8011 = IKatan2WithCheck(IkReal(((((-1.0)*x8008*x8009))+(((-1.0)*x8006*x8009))+((x8007*x8008))+((x8006*x8007)))),IkReal((((r12*x8006))+((r12*x8008)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8010.value)))+(x8011.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8012=IKsin(j4);
IkReal x8013=IKcos(j4);
IkReal x8014=(gconst1*r01);
IkReal x8015=(gconst1*r21);
IkReal x8016=(gconst1*r11);
IkReal x8017=((1.0)*x8013);
IkReal x8018=((1.0)*x8012);
IkReal x8019=(gconst2*x8012);
evalcond[0]=((((-1.0)*r22*x8017))+(((-1.0)*x8015*x8018))+((r20*x8019)));
evalcond[1]=((((-1.0)*r02*x8017))+((r00*x8019))+(((-1.0)*x8014*x8018)));
evalcond[2]=(((x8013*x8016))+(((-1.0)*gconst2*r10*x8017))+(((-1.0)*r12*x8018)));
evalcond[3]=((1.0)+(((-1.0)*x8016*x8018))+((r10*x8019))+(((-1.0)*r12*x8017)));
evalcond[4]=((((-1.0)*r22*x8018))+((sj1*sj2))+((x8013*x8015))+((cj1*cj2))+(((-1.0)*gconst2*r20*x8017)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r02*x8018))+(((-1.0)*gconst2*r00*x8017))+(((-1.0)*cj1*sj2))+((x8013*x8014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8020=(gconst2*r10);
IkReal x8021=(gconst1*r11);
CheckValue<IkReal> x8022 = IKatan2WithCheck(IkReal(((((-1.0)*x8020))+x8021)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8022.valid){
continue;
}
CheckValue<IkReal> x8023=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x8021*x8021)+(x8020*x8020)+(((-2.0)*x8020*x8021)))),-1);
if(!x8023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8022.value)+(((1.5707963267949)*(x8023.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8024=IKsin(j4);
IkReal x8025=IKcos(j4);
IkReal x8026=(gconst1*r01);
IkReal x8027=(gconst1*r21);
IkReal x8028=(gconst1*r11);
IkReal x8029=((1.0)*x8025);
IkReal x8030=((1.0)*x8024);
IkReal x8031=(gconst2*x8024);
evalcond[0]=(((r20*x8031))+(((-1.0)*r22*x8029))+(((-1.0)*x8027*x8030)));
evalcond[1]=((((-1.0)*r02*x8029))+(((-1.0)*x8026*x8030))+((r00*x8031)));
evalcond[2]=((((-1.0)*r12*x8030))+((x8025*x8028))+(((-1.0)*gconst2*r10*x8029)));
evalcond[3]=((1.0)+(((-1.0)*x8028*x8030))+(((-1.0)*r12*x8029))+((r10*x8031)));
evalcond[4]=(((x8025*x8027))+((sj1*sj2))+(((-1.0)*r22*x8030))+((cj1*cj2))+(((-1.0)*gconst2*r20*x8029)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*gconst2*r00*x8029))+((x8025*x8026))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x8030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8032 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8032.valid){
continue;
}
CheckValue<IkReal> x8033=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8033.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8032.value)+(((1.5707963267949)*(x8033.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8034=IKsin(j4);
IkReal x8035=IKcos(j4);
IkReal x8036=(gconst1*r01);
IkReal x8037=(gconst1*r21);
IkReal x8038=(gconst1*r11);
IkReal x8039=((1.0)*x8035);
IkReal x8040=((1.0)*x8034);
IkReal x8041=(gconst2*x8034);
evalcond[0]=(((r20*x8041))+(((-1.0)*x8037*x8040))+(((-1.0)*r22*x8039)));
evalcond[1]=((((-1.0)*x8036*x8040))+(((-1.0)*r02*x8039))+((r00*x8041)));
evalcond[2]=((((-1.0)*gconst2*r10*x8039))+(((-1.0)*r12*x8040))+((x8035*x8038)));
evalcond[3]=((1.0)+((r10*x8041))+(((-1.0)*r12*x8039))+(((-1.0)*x8038*x8040)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x8040))+((cj1*cj2))+(((-1.0)*gconst2*r20*x8039))+((x8035*x8037)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*gconst2*r00*x8039))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x8040))+((x8035*x8036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8042=((-1.0)*py);
CheckValue<IkReal> x8044 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8044.valid){
continue;
}
IkReal x8043=((-1.0)*(x8044.value));
sj5=gconst1;
cj5=gconst2;
j5=x8043;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8042);
rxp0_2=(py*r00);
rxp1_0=(r21*x8042);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8043;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8045=((-1.0)*py);
CheckValue<IkReal> x8047 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8047.valid){
continue;
}
IkReal x8046=((-1.0)*(x8047.value));
sj5=gconst1;
cj5=gconst2;
j5=x8046;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8045);
rxp0_2=(py*r00);
rxp1_0=(r21*x8045);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8046;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r00*r00));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8048=((-1.0)*py);
CheckValue<IkReal> x8050 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8050.valid){
continue;
}
IkReal x8049=((-1.0)*(x8050.value));
sj5=gconst1;
cj5=gconst2;
j5=x8049;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8048);
rxp0_2=(py*r00);
rxp1_0=(r21*x8048);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8049;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8053=IKPowWithIntegerCheck((((gconst1*r01))+(((-1.0)*gconst2*r00))),-1);
if(!x8053.valid){
continue;
}
IkReal x8051=x8053.value;
IkReal x8052=(cj0*x8051);
cj4array[0]=(((cj2*sj1*x8052))+(((-1.0)*cj1*sj2*x8052)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8054=IKsin(j4);
IkReal x8055=IKcos(j4);
IkReal x8056=(gconst2*x8054);
IkReal x8057=((1.0)*x8055);
IkReal x8058=((1.0)*gconst1*x8054);
evalcond[0]=((-1.0)*r12*x8054);
evalcond[1]=((((-1.0)*r12*x8057))+(((-1.0)*cj0)));
evalcond[2]=(((r20*x8056))+(((-1.0)*r21*x8058)));
evalcond[3]=(((r00*x8056))+(((-1.0)*r01*x8058)));
evalcond[4]=(((gconst1*r21*x8055))+((sj1*sj2))+(((-1.0)*gconst2*r20*x8057))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8061=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x8061.valid){
continue;
}
IkReal x8059=x8061.value;
IkReal x8060=((1.0)*x8059);
cj4array[0]=((((-1.0)*sj1*sj2*x8060))+(((-1.0)*cj1*cj2*x8060)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8062=IKsin(j4);
IkReal x8063=IKcos(j4);
IkReal x8064=(gconst2*r00);
IkReal x8065=((1.0)*cj0);
IkReal x8066=((1.0)*x8063);
IkReal x8067=((1.0)*gconst1*x8062);
evalcond[0]=((-1.0)*r12*x8062);
evalcond[1]=((((-1.0)*x8065))+(((-1.0)*r12*x8066)));
evalcond[2]=(((gconst2*r20*x8062))+(((-1.0)*r21*x8067)));
evalcond[3]=(((x8062*x8064))+(((-1.0)*r01*x8067)));
evalcond[4]=((((-1.0)*x8064*x8066))+(((-1.0)*cj2*sj1*x8065))+((gconst1*r01*x8063))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8068=IKPowWithIntegerCheck(r12,-1);
if(!x8068.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x8068.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8069=IKsin(j4);
IkReal x8070=IKcos(j4);
IkReal x8071=(gconst2*r00);
IkReal x8072=(gconst2*r20);
IkReal x8073=(gconst1*x8070);
IkReal x8074=((1.0)*x8070);
IkReal x8075=((1.0)*gconst1*x8069);
evalcond[0]=((-1.0)*r12*x8069);
evalcond[1]=(((x8069*x8072))+(((-1.0)*r21*x8075)));
evalcond[2]=(((x8069*x8071))+(((-1.0)*r01*x8075)));
evalcond[3]=((((-1.0)*x8072*x8074))+((sj1*sj2))+((r21*x8073))+((cj1*cj2)));
evalcond[4]=((((-1.0)*cj0*cj2*sj1))+(((-1.0)*x8071*x8074))+((r01*x8073))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8076=(gconst2*r20);
IkReal x8077=(cj1*cj2);
IkReal x8078=(sj1*sj2);
IkReal x8079=(gconst1*r21);
CheckValue<IkReal> x8080=IKPowWithIntegerCheck(IKsign(((x8076*x8076)+(r22*r22)+(((-2.0)*x8076*x8079))+(x8079*x8079))),-1);
if(!x8080.valid){
continue;
}
CheckValue<IkReal> x8081 = IKatan2WithCheck(IkReal((((r22*x8077))+((r22*x8078)))),IkReal((((x8076*x8078))+((x8076*x8077))+(((-1.0)*x8077*x8079))+(((-1.0)*x8078*x8079)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8081.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8080.value)))+(x8081.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8082=IKsin(j4);
IkReal x8083=IKcos(j4);
IkReal x8084=(gconst1*r01);
IkReal x8085=(gconst1*r21);
IkReal x8086=(gconst1*r11);
IkReal x8087=(cj1*sj2);
IkReal x8088=((1.0)*x8083);
IkReal x8089=((1.0)*x8082);
IkReal x8090=((1.0)*cj2*sj1);
IkReal x8091=(gconst2*x8082);
evalcond[0]=((((-1.0)*r22*x8088))+(((-1.0)*x8085*x8089))+((r20*x8091)));
evalcond[1]=((((-1.0)*r02*x8088))+sj0+((r00*x8091))+(((-1.0)*x8084*x8089)));
evalcond[2]=(((r10*x8091))+(((-1.0)*x8086*x8089))+(((-1.0)*r12*x8088))+(((-1.0)*cj0)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*gconst2*r20*x8088))+(((-1.0)*r22*x8089))+((cj1*cj2))+((x8083*x8085)));
evalcond[4]=((((-1.0)*gconst2*r00*x8088))+(((-1.0)*r02*x8089))+((cj0*x8087))+(((-1.0)*cj0*x8090))+((x8083*x8084)));
evalcond[5]=(((sj0*x8087))+((x8083*x8086))+(((-1.0)*gconst2*r10*x8088))+(((-1.0)*r12*x8089))+(((-1.0)*sj0*x8090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8092=((1.0)*gconst1);
CheckValue<IkReal> x8093=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x8092))+(((-1.0)*gconst2*r01)))),-1);
if(!x8093.valid){
continue;
}
CheckValue<IkReal> x8094 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst2*r20))+(((-1.0)*cj0*r21*x8092)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8094.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8093.value)))+(x8094.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8095=IKsin(j4);
IkReal x8096=IKcos(j4);
IkReal x8097=(gconst1*r01);
IkReal x8098=(gconst1*r21);
IkReal x8099=(gconst1*r11);
IkReal x8100=(cj1*sj2);
IkReal x8101=((1.0)*x8096);
IkReal x8102=((1.0)*x8095);
IkReal x8103=((1.0)*cj2*sj1);
IkReal x8104=(gconst2*x8095);
evalcond[0]=((((-1.0)*x8098*x8102))+((r20*x8104))+(((-1.0)*r22*x8101)));
evalcond[1]=(sj0+((r00*x8104))+(((-1.0)*r02*x8101))+(((-1.0)*x8097*x8102)));
evalcond[2]=((((-1.0)*x8099*x8102))+((r10*x8104))+(((-1.0)*cj0))+(((-1.0)*r12*x8101)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x8102))+((cj1*cj2))+((x8096*x8098))+(((-1.0)*gconst2*r20*x8101)));
evalcond[4]=((((-1.0)*cj0*x8103))+((cj0*x8100))+(((-1.0)*r02*x8102))+((x8096*x8097))+(((-1.0)*gconst2*r00*x8101)));
evalcond[5]=(((sj0*x8100))+(((-1.0)*sj0*x8103))+(((-1.0)*gconst2*r10*x8101))+((x8096*x8099))+(((-1.0)*r12*x8102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8105=((1.0)*gconst1);
CheckValue<IkReal> x8106=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r11))+(((-1.0)*r10*x8105)))),-1);
if(!x8106.valid){
continue;
}
CheckValue<IkReal> x8107 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x8105))+((gconst2*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8107.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8106.value)))+(x8107.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8108=IKsin(j4);
IkReal x8109=IKcos(j4);
IkReal x8110=(gconst1*r01);
IkReal x8111=(gconst1*r21);
IkReal x8112=(gconst1*r11);
IkReal x8113=(cj1*sj2);
IkReal x8114=((1.0)*x8109);
IkReal x8115=((1.0)*x8108);
IkReal x8116=((1.0)*cj2*sj1);
IkReal x8117=(gconst2*x8108);
evalcond[0]=(((r20*x8117))+(((-1.0)*x8111*x8115))+(((-1.0)*r22*x8114)));
evalcond[1]=(sj0+(((-1.0)*x8110*x8115))+(((-1.0)*r02*x8114))+((r00*x8117)));
evalcond[2]=((((-1.0)*x8112*x8115))+(((-1.0)*r12*x8114))+((r10*x8117))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst2*r20*x8114))+((sj1*sj2))+((x8109*x8111))+(((-1.0)*r22*x8115))+((cj1*cj2)));
evalcond[4]=((((-1.0)*gconst2*r00*x8114))+(((-1.0)*cj0*x8116))+((cj0*x8113))+(((-1.0)*r02*x8115))+((x8109*x8110)));
evalcond[5]=((((-1.0)*r12*x8115))+(((-1.0)*gconst2*r10*x8114))+((x8109*x8112))+((sj0*x8113))+(((-1.0)*sj0*x8116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8120 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8120.valid){
continue;
}
IkReal x8118=((-1.0)*(x8120.value));
IkReal x8119=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x8118;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x8118;
IkReal gconst1=((-1.0)*r21*x8119);
IkReal gconst2=(r20*x8119);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8123 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8123.valid){
continue;
}
IkReal x8121=((-1.0)*(x8123.value));
IkReal x8122=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x8121;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x8121;
IkReal gconst1=((-1.0)*r21*x8122);
IkReal gconst2=(r20*x8122);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8126 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8126.valid){
continue;
}
IkReal x8124=((-1.0)*(x8126.value));
IkReal x8125=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x8124;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x8124;
IkReal gconst1=((-1.0)*r21*x8125);
IkReal gconst2=(r20*x8125);
IkReal x8127=((1.0)*(r22*r22));
CheckValue<IkReal> x8131=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8127))),-1);
if(!x8131.valid){
continue;
}
IkReal x8128=x8131.value;
IkReal x8129=((1.0)*x8128);
IkReal x8130=((((-1.0)*x8129*(r21*r21*r21*r21)))+(((-2.0)*x8128*(r20*r20)*(r21*r21)))+(((-1.0)*x8127))+(((-1.0)*x8129*(r20*r20*r20*r20))));
j4eval[0]=x8130;
j4eval[1]=IKsign(x8130);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8134 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8134.valid){
continue;
}
IkReal x8132=((-1.0)*(x8134.value));
IkReal x8133=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x8132;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8132;
IkReal gconst1=((-1.0)*r21*x8133);
IkReal gconst2=(r20*x8133);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8137 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8137.valid){
continue;
}
IkReal x8135=((-1.0)*(x8137.value));
IkReal x8136=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x8135;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8135;
IkReal gconst1=((-1.0)*r21*x8136);
IkReal gconst2=(r20*x8136);
IkReal x8138=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8142=IKPowWithIntegerCheck(x8138,-1);
if(!x8142.valid){
continue;
}
IkReal x8139=x8142.value;
IkReal x8140=((1.0)*x8139);
IkReal x8141=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x8139))+(((-1.0)*x8140*(r01*r01)*(r21*r21)))+(((-1.0)*x8140*(r00*r00)*(r20*r20))));
j4eval[0]=x8141;
j4eval[1]=IKsign(x8141);
j4eval[2]=r02;
j4eval[3]=x8138;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8145 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8145.valid){
continue;
}
IkReal x8143=((-1.0)*(x8145.value));
IkReal x8144=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x8143;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8143;
IkReal gconst1=((-1.0)*r21*x8144);
IkReal gconst2=(r20*x8144);
IkReal x8146=r22*r22;
IkReal x8147=((1.0)*r02);
IkReal x8148=(sj1*sj2);
IkReal x8149=(cj1*cj2);
CheckValue<IkReal> x8153=IKPowWithIntegerCheck(((-1.0)+x8146),-1);
if(!x8153.valid){
continue;
}
IkReal x8150=x8153.value;
if((((1.0)+(((-1.0)*x8146)))) < -0.00001)
continue;
IkReal x8151=IKsqrt(((1.0)+(((-1.0)*x8146))));
IkReal x8152=(r02*r22*x8150*x8151);
j4eval[0]=((IKabs((((x8148*x8152))+((x8149*x8152)))))+(IKabs(((((-1.0)*x8147*x8149))+(((-1.0)*x8147*x8148))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8154=(gconst1*r01);
IkReal x8155=(cj1*cj2);
IkReal x8156=(gconst2*r00);
IkReal x8157=((1.0)*sj1*sj2);
CheckValue<IkReal> x8158=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*gconst2*r11)))),-1);
if(!x8158.valid){
continue;
}
CheckValue<IkReal> x8159 = IKatan2WithCheck(IkReal((((sj1*sj2*x8156))+((x8155*x8156))+(((-1.0)*x8154*x8155))+(((-1.0)*x8154*x8157)))),IkReal(((((-1.0)*r02*x8157))+(((-1.0)*r02*x8155)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8158.value)))+(x8159.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8160=IKcos(j4);
IkReal x8161=IKsin(j4);
IkReal x8162=(gconst1*r01);
IkReal x8163=(gconst1*r21);
IkReal x8164=(gconst1*r11);
IkReal x8165=((1.0)*x8160);
IkReal x8166=(gconst2*x8160);
IkReal x8167=((1.0)*x8161);
IkReal x8168=(gconst2*x8161);
evalcond[0]=(((r00*x8166))+(((-1.0)*x8162*x8165))+((r02*x8161)));
evalcond[1]=((((-1.0)*x8163*x8167))+((r20*x8168))+(((-1.0)*r22*x8165)));
evalcond[2]=(((r10*x8168))+(((-1.0)*r12*x8165))+(((-1.0)*x8164*x8167)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8165))+((r00*x8168))+(((-1.0)*x8162*x8167)));
evalcond[4]=(((r22*x8161))+((sj1*sj2))+(((-1.0)*x8163*x8165))+((cj1*cj2))+((r20*x8166)));
evalcond[5]=(((r12*x8161))+((r10*x8166))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x8164*x8165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8169=(gconst2*r00);
IkReal x8170=(gconst1*r01);
CheckValue<IkReal> x8171=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x8170*x8170)))+(((-1.0)*(x8169*x8169)))+(((2.0)*x8169*x8170)))),-1);
if(!x8171.valid){
continue;
}
CheckValue<IkReal> x8172 = IKatan2WithCheck(IkReal(((((-1.0)*x8170))+x8169)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8171.value)))+(x8172.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8173=IKcos(j4);
IkReal x8174=IKsin(j4);
IkReal x8175=(gconst1*r01);
IkReal x8176=(gconst1*r21);
IkReal x8177=(gconst1*r11);
IkReal x8178=((1.0)*x8173);
IkReal x8179=(gconst2*x8173);
IkReal x8180=((1.0)*x8174);
IkReal x8181=(gconst2*x8174);
evalcond[0]=(((r02*x8174))+(((-1.0)*x8175*x8178))+((r00*x8179)));
evalcond[1]=((((-1.0)*x8176*x8180))+(((-1.0)*r22*x8178))+((r20*x8181)));
evalcond[2]=(((r10*x8181))+(((-1.0)*r12*x8178))+(((-1.0)*x8177*x8180)));
evalcond[3]=((1.0)+((r00*x8181))+(((-1.0)*x8175*x8180))+(((-1.0)*r02*x8178)));
evalcond[4]=((((-1.0)*x8176*x8178))+((r20*x8179))+((sj1*sj2))+((cj1*cj2))+((r22*x8174)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((r12*x8174))+(((-1.0)*x8177*x8178))+((r10*x8179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8182=((1.0)*gconst1);
CheckValue<IkReal> x8183=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x8182))+(((-1.0)*gconst2*r11)))),-1);
if(!x8183.valid){
continue;
}
CheckValue<IkReal> x8184 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*r21*x8182)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8184.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8183.value)))+(x8184.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8185=IKcos(j4);
IkReal x8186=IKsin(j4);
IkReal x8187=(gconst1*r01);
IkReal x8188=(gconst1*r21);
IkReal x8189=(gconst1*r11);
IkReal x8190=((1.0)*x8185);
IkReal x8191=(gconst2*x8185);
IkReal x8192=((1.0)*x8186);
IkReal x8193=(gconst2*x8186);
evalcond[0]=(((r00*x8191))+((r02*x8186))+(((-1.0)*x8187*x8190)));
evalcond[1]=(((r20*x8193))+(((-1.0)*r22*x8190))+(((-1.0)*x8188*x8192)));
evalcond[2]=(((r10*x8193))+(((-1.0)*r12*x8190))+(((-1.0)*x8189*x8192)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8190))+((r00*x8193))+(((-1.0)*x8187*x8192)));
evalcond[4]=(((r20*x8191))+((r22*x8186))+(((-1.0)*x8188*x8190))+((sj1*sj2))+((cj1*cj2)));
evalcond[5]=(((r12*x8186))+((r10*x8191))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x8189*x8190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8196 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8196.valid){
continue;
}
IkReal x8194=((-1.0)*(x8196.value));
IkReal x8195=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x8194;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8194;
IkReal gconst1=((-1.0)*r21*x8195);
IkReal gconst2=(r20*x8195);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8199 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8199.valid){
continue;
}
IkReal x8197=((-1.0)*(x8199.value));
IkReal x8198=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x8197;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8197;
IkReal gconst1=((-1.0)*r21*x8198);
IkReal gconst2=(r20*x8198);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8202 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8202.valid){
continue;
}
IkReal x8200=((-1.0)*(x8202.value));
IkReal x8201=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x8200;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8200;
IkReal gconst1=((-1.0)*r21*x8201);
IkReal gconst2=(r20*x8201);
IkReal x8203=r22*r22;
IkReal x8204=((1.0)*r02);
IkReal x8205=(sj1*sj2);
IkReal x8206=(cj1*cj2);
CheckValue<IkReal> x8210=IKPowWithIntegerCheck(((-1.0)+x8203),-1);
if(!x8210.valid){
continue;
}
IkReal x8207=x8210.value;
if((((1.0)+(((-1.0)*x8203)))) < -0.00001)
continue;
IkReal x8208=IKsqrt(((1.0)+(((-1.0)*x8203))));
IkReal x8209=(r02*r22*x8207*x8208);
j4eval[0]=((IKabs(((((-1.0)*x8204*x8206))+(((-1.0)*x8204*x8205)))))+(IKabs((((x8206*x8209))+((x8205*x8209))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8211=(gconst1*r01);
IkReal x8212=(cj1*cj2);
IkReal x8213=(gconst2*r00);
IkReal x8214=((1.0)*sj1*sj2);
CheckValue<IkReal> x8215=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*gconst2*r11)))),-1);
if(!x8215.valid){
continue;
}
CheckValue<IkReal> x8216 = IKatan2WithCheck(IkReal((((sj1*sj2*x8213))+(((-1.0)*x8211*x8214))+(((-1.0)*x8211*x8212))+((x8212*x8213)))),IkReal(((((-1.0)*r02*x8214))+(((-1.0)*r02*x8212)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8215.value)))+(x8216.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8217=IKcos(j4);
IkReal x8218=IKsin(j4);
IkReal x8219=(gconst1*r01);
IkReal x8220=(gconst1*r21);
IkReal x8221=(gconst1*r11);
IkReal x8222=((1.0)*x8217);
IkReal x8223=(gconst2*x8217);
IkReal x8224=((1.0)*x8218);
IkReal x8225=(gconst2*x8218);
evalcond[0]=((((-1.0)*x8219*x8222))+((r00*x8223))+((r02*x8218)));
evalcond[1]=((((-1.0)*x8220*x8224))+((r20*x8225))+(((-1.0)*r22*x8222)));
evalcond[2]=((((-1.0)*x8221*x8224))+(((-1.0)*r12*x8222))+((r10*x8225)));
evalcond[3]=((-1.0)+(((-1.0)*x8219*x8224))+(((-1.0)*r02*x8222))+((r00*x8225)));
evalcond[4]=((((-1.0)*x8220*x8222))+((r20*x8223))+((r22*x8218))+((sj1*sj2))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+((r12*x8218))+(((-1.0)*x8221*x8222))+(((-1.0)*cj1*sj2))+((r10*x8223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8226=(gconst1*r01);
IkReal x8227=(gconst2*r00);
CheckValue<IkReal> x8228 = IKatan2WithCheck(IkReal(((((-1.0)*x8226))+x8227)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8228.valid){
continue;
}
CheckValue<IkReal> x8229=IKPowWithIntegerCheck(IKsign(((x8226*x8226)+(r02*r02)+(((-2.0)*x8226*x8227))+(x8227*x8227))),-1);
if(!x8229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8228.value)+(((1.5707963267949)*(x8229.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8230=IKcos(j4);
IkReal x8231=IKsin(j4);
IkReal x8232=(gconst1*r01);
IkReal x8233=(gconst1*r21);
IkReal x8234=(gconst1*r11);
IkReal x8235=((1.0)*x8230);
IkReal x8236=(gconst2*x8230);
IkReal x8237=((1.0)*x8231);
IkReal x8238=(gconst2*x8231);
evalcond[0]=(((r02*x8231))+((r00*x8236))+(((-1.0)*x8232*x8235)));
evalcond[1]=(((r20*x8238))+(((-1.0)*x8233*x8237))+(((-1.0)*r22*x8235)));
evalcond[2]=((((-1.0)*x8234*x8237))+(((-1.0)*r12*x8235))+((r10*x8238)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8235))+((r00*x8238))+(((-1.0)*x8232*x8237)));
evalcond[4]=(((r20*x8236))+(((-1.0)*x8233*x8235))+((sj1*sj2))+((r22*x8231))+((cj1*cj2)));
evalcond[5]=(((r12*x8231))+((cj2*sj1))+(((-1.0)*x8234*x8235))+(((-1.0)*cj1*sj2))+((r10*x8236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8239 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8239.valid){
continue;
}
CheckValue<IkReal> x8240=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8240.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8239.value)+(((1.5707963267949)*(x8240.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8241=IKcos(j4);
IkReal x8242=IKsin(j4);
IkReal x8243=(gconst1*r01);
IkReal x8244=(gconst1*r21);
IkReal x8245=(gconst1*r11);
IkReal x8246=((1.0)*x8241);
IkReal x8247=(gconst2*x8241);
IkReal x8248=((1.0)*x8242);
IkReal x8249=(gconst2*x8242);
evalcond[0]=(((r02*x8242))+(((-1.0)*x8243*x8246))+((r00*x8247)));
evalcond[1]=(((r20*x8249))+(((-1.0)*x8244*x8248))+(((-1.0)*r22*x8246)));
evalcond[2]=((((-1.0)*x8245*x8248))+((r10*x8249))+(((-1.0)*r12*x8246)));
evalcond[3]=((-1.0)+(((-1.0)*x8243*x8248))+(((-1.0)*r02*x8246))+((r00*x8249)));
evalcond[4]=(((r20*x8247))+(((-1.0)*x8244*x8246))+((sj1*sj2))+((r22*x8242))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x8245*x8246))+((cj2*sj1))+((r10*x8247))+(((-1.0)*cj1*sj2))+((r12*x8242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8252 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8252.valid){
continue;
}
IkReal x8250=((-1.0)*(x8252.value));
IkReal x8251=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x8250;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8250;
IkReal gconst1=((-1.0)*r21*x8251);
IkReal gconst2=(r20*x8251);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8255 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8255.valid){
continue;
}
IkReal x8253=((-1.0)*(x8255.value));
IkReal x8254=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x8253;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8253;
IkReal gconst1=((-1.0)*r21*x8254);
IkReal gconst2=(r20*x8254);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8258 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8258.valid){
continue;
}
IkReal x8256=((-1.0)*(x8258.value));
IkReal x8257=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x8256;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8256;
IkReal gconst1=((-1.0)*r21*x8257);
IkReal gconst2=(r20*x8257);
IkReal x8259=r22*r22;
IkReal x8260=(r12*sj1*sj2);
IkReal x8261=(cj1*cj2*r12);
CheckValue<IkReal> x8265=IKPowWithIntegerCheck(((-1.0)+x8259),-1);
if(!x8265.valid){
continue;
}
IkReal x8262=x8265.value;
if((((1.0)+(((-1.0)*x8259)))) < -0.00001)
continue;
IkReal x8263=IKsqrt(((1.0)+(((-1.0)*x8259))));
IkReal x8264=(r22*x8262*x8263);
j4eval[0]=((IKabs(((((-1.0)*x8260))+(((-1.0)*x8261)))))+(IKabs((((x8260*x8264))+((x8261*x8264))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8266=(gconst1*r11);
IkReal x8267=(gconst2*r10);
IkReal x8268=((1.0)*sj1*sj2);
IkReal x8269=((1.0)*cj1*cj2);
CheckValue<IkReal> x8270=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8270.valid){
continue;
}
CheckValue<IkReal> x8271 = IKatan2WithCheck(IkReal((((cj1*cj2*x8267))+((sj1*sj2*x8267))+(((-1.0)*x8266*x8269))+(((-1.0)*x8266*x8268)))),IkReal(((((-1.0)*r12*x8269))+(((-1.0)*r12*x8268)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8270.value)))+(x8271.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8272=IKcos(j4);
IkReal x8273=IKsin(j4);
IkReal x8274=(gconst1*r01);
IkReal x8275=(gconst1*r21);
IkReal x8276=(gconst1*r11);
IkReal x8277=((1.0)*x8272);
IkReal x8278=(gconst2*x8272);
IkReal x8279=((1.0)*x8273);
IkReal x8280=(gconst2*x8273);
evalcond[0]=((((-1.0)*x8276*x8277))+((r12*x8273))+((r10*x8278)));
evalcond[1]=((((-1.0)*x8275*x8279))+((r20*x8280))+(((-1.0)*r22*x8277)));
evalcond[2]=((((-1.0)*x8274*x8279))+((r00*x8280))+(((-1.0)*r02*x8277)));
evalcond[3]=((-1.0)+((r10*x8280))+(((-1.0)*x8276*x8279))+(((-1.0)*r12*x8277)));
evalcond[4]=(((r20*x8278))+(((-1.0)*x8275*x8277))+((sj1*sj2))+((r22*x8273))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x8274*x8277))+((r02*x8273))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((r00*x8278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8281=(gconst1*r11);
IkReal x8282=(gconst2*r10);
CheckValue<IkReal> x8283 = IKatan2WithCheck(IkReal(((((-1.0)*x8281))+x8282)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8283.valid){
continue;
}
CheckValue<IkReal> x8284=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x8282*x8282)+(((-2.0)*x8281*x8282))+(x8281*x8281))),-1);
if(!x8284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8283.value)+(((1.5707963267949)*(x8284.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8285=IKcos(j4);
IkReal x8286=IKsin(j4);
IkReal x8287=(gconst1*r01);
IkReal x8288=(gconst1*r21);
IkReal x8289=(gconst1*r11);
IkReal x8290=((1.0)*x8285);
IkReal x8291=(gconst2*x8285);
IkReal x8292=((1.0)*x8286);
IkReal x8293=(gconst2*x8286);
evalcond[0]=(((r10*x8291))+(((-1.0)*x8289*x8290))+((r12*x8286)));
evalcond[1]=(((r20*x8293))+(((-1.0)*r22*x8290))+(((-1.0)*x8288*x8292)));
evalcond[2]=(((r00*x8293))+(((-1.0)*x8287*x8292))+(((-1.0)*r02*x8290)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8290))+((r10*x8293))+(((-1.0)*x8289*x8292)));
evalcond[4]=(((r20*x8291))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*x8288*x8290))+((r22*x8286)));
evalcond[5]=(((r00*x8291))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x8287*x8290))+((r02*x8286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8294=((1.0)*gconst1);
CheckValue<IkReal> x8295 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x8294))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8295.valid){
continue;
}
CheckValue<IkReal> x8296=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x8294)))),-1);
if(!x8296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8295.value)+(((1.5707963267949)*(x8296.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8297=IKcos(j4);
IkReal x8298=IKsin(j4);
IkReal x8299=(gconst1*r01);
IkReal x8300=(gconst1*r21);
IkReal x8301=(gconst1*r11);
IkReal x8302=((1.0)*x8297);
IkReal x8303=(gconst2*x8297);
IkReal x8304=((1.0)*x8298);
IkReal x8305=(gconst2*x8298);
evalcond[0]=(((r10*x8303))+(((-1.0)*x8301*x8302))+((r12*x8298)));
evalcond[1]=((((-1.0)*r22*x8302))+(((-1.0)*x8300*x8304))+((r20*x8305)));
evalcond[2]=(((r00*x8305))+(((-1.0)*r02*x8302))+(((-1.0)*x8299*x8304)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8302))+((r10*x8305))+(((-1.0)*x8301*x8304)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x8300*x8302))+((r20*x8303))+((cj1*cj2))+((r22*x8298)));
evalcond[5]=(((cj1*sj2))+((r00*x8303))+(((-1.0)*cj2*sj1))+((r02*x8298))+(((-1.0)*x8299*x8302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8308 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8308.valid){
continue;
}
IkReal x8306=((-1.0)*(x8308.value));
IkReal x8307=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x8306;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8306;
IkReal gconst1=((-1.0)*r21*x8307);
IkReal gconst2=(r20*x8307);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8311 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8311.valid){
continue;
}
IkReal x8309=((-1.0)*(x8311.value));
IkReal x8310=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x8309;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8309;
IkReal gconst1=((-1.0)*r21*x8310);
IkReal gconst2=(r20*x8310);
IkReal x8312=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8316=IKPowWithIntegerCheck(x8312,-1);
if(!x8316.valid){
continue;
}
IkReal x8313=x8316.value;
IkReal x8314=((1.0)*x8313);
IkReal x8315=((((-1.0)*x8314*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x8313))+(((-1.0)*(r12*r12)))+(((-1.0)*x8314*(r10*r10)*(r20*r20))));
j4eval[0]=x8315;
j4eval[1]=IKsign(x8315);
j4eval[2]=r12;
j4eval[3]=x8312;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8319 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8319.valid){
continue;
}
IkReal x8317=((-1.0)*(x8319.value));
IkReal x8318=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x8317;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8317;
IkReal gconst1=((-1.0)*r21*x8318);
IkReal gconst2=(r20*x8318);
IkReal x8320=r22*r22;
IkReal x8321=(r12*sj1*sj2);
IkReal x8322=(cj1*cj2*r12);
CheckValue<IkReal> x8326=IKPowWithIntegerCheck(((-1.0)+x8320),-1);
if(!x8326.valid){
continue;
}
IkReal x8323=x8326.value;
if((((1.0)+(((-1.0)*x8320)))) < -0.00001)
continue;
IkReal x8324=IKsqrt(((1.0)+(((-1.0)*x8320))));
IkReal x8325=(r22*x8323*x8324);
j4eval[0]=((IKabs((((x8322*x8325))+((x8321*x8325)))))+(IKabs(((((-1.0)*x8322))+(((-1.0)*x8321))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8327=(gconst1*r11);
IkReal x8328=(gconst2*r10);
IkReal x8329=((1.0)*sj1*sj2);
IkReal x8330=((1.0)*cj1*cj2);
CheckValue<IkReal> x8331 = IKatan2WithCheck(IkReal(((((-1.0)*x8327*x8330))+((cj1*cj2*x8328))+((sj1*sj2*x8328))+(((-1.0)*x8327*x8329)))),IkReal(((((-1.0)*r12*x8330))+(((-1.0)*r12*x8329)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8331.valid){
continue;
}
CheckValue<IkReal> x8332=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8331.value)+(((1.5707963267949)*(x8332.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8333=IKcos(j4);
IkReal x8334=IKsin(j4);
IkReal x8335=(gconst1*r01);
IkReal x8336=(gconst1*r21);
IkReal x8337=(gconst1*r11);
IkReal x8338=((1.0)*x8333);
IkReal x8339=(gconst2*x8333);
IkReal x8340=((1.0)*x8334);
IkReal x8341=(gconst2*x8334);
evalcond[0]=(((r10*x8339))+((r12*x8334))+(((-1.0)*x8337*x8338)));
evalcond[1]=((((-1.0)*r22*x8338))+((r20*x8341))+(((-1.0)*x8336*x8340)));
evalcond[2]=((((-1.0)*x8335*x8340))+(((-1.0)*r02*x8338))+((r00*x8341)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8338))+(((-1.0)*x8337*x8340))+((r10*x8341)));
evalcond[4]=(((r22*x8334))+((sj1*sj2))+((r20*x8339))+(((-1.0)*x8336*x8338))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+((r00*x8339))+(((-1.0)*cj1*sj2))+(((-1.0)*x8335*x8338))+((r02*x8334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8342=(gconst1*r11);
IkReal x8343=(gconst2*r10);
CheckValue<IkReal> x8344 = IKatan2WithCheck(IkReal((x8343+(((-1.0)*x8342)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8344.valid){
continue;
}
CheckValue<IkReal> x8345=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8342*x8342)))+(((-1.0)*(x8343*x8343)))+(((-1.0)*(r12*r12)))+(((2.0)*x8342*x8343)))),-1);
if(!x8345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8344.value)+(((1.5707963267949)*(x8345.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8346=IKcos(j4);
IkReal x8347=IKsin(j4);
IkReal x8348=(gconst1*r01);
IkReal x8349=(gconst1*r21);
IkReal x8350=(gconst1*r11);
IkReal x8351=((1.0)*x8346);
IkReal x8352=(gconst2*x8346);
IkReal x8353=((1.0)*x8347);
IkReal x8354=(gconst2*x8347);
evalcond[0]=(((r10*x8352))+((r12*x8347))+(((-1.0)*x8350*x8351)));
evalcond[1]=((((-1.0)*r22*x8351))+(((-1.0)*x8349*x8353))+((r20*x8354)));
evalcond[2]=((((-1.0)*r02*x8351))+((r00*x8354))+(((-1.0)*x8348*x8353)));
evalcond[3]=((1.0)+((r10*x8354))+(((-1.0)*r12*x8351))+(((-1.0)*x8350*x8353)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x8349*x8351))+((cj1*cj2))+((r20*x8352))+((r22*x8347)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((r00*x8352))+((r02*x8347))+(((-1.0)*x8348*x8351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8355 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8355.valid){
continue;
}
CheckValue<IkReal> x8356=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8355.value)+(((1.5707963267949)*(x8356.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8357=IKcos(j4);
IkReal x8358=IKsin(j4);
IkReal x8359=(gconst1*r01);
IkReal x8360=(gconst1*r21);
IkReal x8361=(gconst1*r11);
IkReal x8362=((1.0)*x8357);
IkReal x8363=(gconst2*x8357);
IkReal x8364=((1.0)*x8358);
IkReal x8365=(gconst2*x8358);
evalcond[0]=((((-1.0)*x8361*x8362))+((r12*x8358))+((r10*x8363)));
evalcond[1]=((((-1.0)*r22*x8362))+((r20*x8365))+(((-1.0)*x8360*x8364)));
evalcond[2]=((((-1.0)*x8359*x8364))+((r00*x8365))+(((-1.0)*r02*x8362)));
evalcond[3]=((1.0)+(((-1.0)*x8361*x8364))+(((-1.0)*r12*x8362))+((r10*x8365)));
evalcond[4]=(((r22*x8358))+((sj1*sj2))+((r20*x8363))+((cj1*cj2))+(((-1.0)*x8360*x8362)));
evalcond[5]=(((cj2*sj1))+((r02*x8358))+(((-1.0)*x8359*x8362))+(((-1.0)*cj1*sj2))+((r00*x8363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8366=((-1.0)*py);
CheckValue<IkReal> x8368 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8368.valid){
continue;
}
IkReal x8367=((-1.0)*(x8368.value));
sj5=gconst1;
cj5=gconst2;
j5=x8367;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8366);
rxp0_2=(py*r00);
rxp1_0=(r21*x8366);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8367;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8369=((-1.0)*py);
CheckValue<IkReal> x8371 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8371.valid){
continue;
}
IkReal x8370=((-1.0)*(x8371.value));
sj5=gconst1;
cj5=gconst2;
j5=x8370;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8369);
rxp0_2=(py*r00);
rxp1_0=(r21*x8369);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8370;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=((1.0)+(((-1.0)*(r00*r00)))+(r21*r21));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8372=((-1.0)*py);
CheckValue<IkReal> x8374 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8374.valid){
continue;
}
IkReal x8373=((-1.0)*(x8374.value));
sj5=gconst1;
cj5=gconst2;
j5=x8373;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8372);
rxp0_2=(py*r00);
rxp1_0=(r21*x8372);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8373;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=(((r00*r20))+((r01*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8377=IKPowWithIntegerCheck(((((-1.0)*gconst1*r01))+((gconst2*r00))),-1);
if(!x8377.valid){
continue;
}
IkReal x8375=x8377.value;
IkReal x8376=(cj0*x8375);
cj4array[0]=((((-1.0)*cj1*sj2*x8376))+((cj2*sj1*x8376)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8378=IKsin(j4);
IkReal x8379=IKcos(j4);
IkReal x8380=(gconst2*x8378);
IkReal x8381=((1.0)*x8379);
IkReal x8382=((1.0)*gconst1*x8378);
evalcond[0]=(r12*x8378);
evalcond[1]=((((-1.0)*r12*x8381))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x8382))+((r20*x8380)));
evalcond[3]=(((r00*x8380))+(((-1.0)*r01*x8382)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*gconst1*r21*x8381))+((gconst2*r20*x8379))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8385=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x8385.valid){
continue;
}
IkReal x8383=x8385.value;
IkReal x8384=((1.0)*x8383);
cj4array[0]=((((-1.0)*cj1*cj2*x8384))+(((-1.0)*sj1*sj2*x8384)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8386=IKsin(j4);
IkReal x8387=IKcos(j4);
IkReal x8388=(gconst2*r00);
IkReal x8389=((1.0)*cj0);
IkReal x8390=((1.0)*gconst1*r01);
evalcond[0]=(r12*x8386);
evalcond[1]=((((-1.0)*x8389))+(((-1.0)*r12*x8387)));
evalcond[2]=(((gconst2*r20*x8386))+(((-1.0)*gconst1*r21*x8386)));
evalcond[3]=((((-1.0)*x8386*x8390))+((x8386*x8388)));
evalcond[4]=((((-1.0)*x8387*x8390))+(((-1.0)*cj2*sj1*x8389))+((x8387*x8388))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8391=IKPowWithIntegerCheck(r12,-1);
if(!x8391.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x8391.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8392=IKsin(j4);
IkReal x8393=IKcos(j4);
IkReal x8394=(gconst2*r00);
IkReal x8395=(gconst2*r20);
IkReal x8396=((1.0)*gconst1*r01);
IkReal x8397=((1.0)*gconst1*r21);
evalcond[0]=(r12*x8392);
evalcond[1]=(((x8392*x8395))+(((-1.0)*x8392*x8397)));
evalcond[2]=(((x8392*x8394))+(((-1.0)*x8392*x8396)));
evalcond[3]=((((-1.0)*x8393*x8397))+((x8393*x8395))+((sj1*sj2))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x8393*x8396))+((x8393*x8394))+(((-1.0)*cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8398=(gconst2*r20);
IkReal x8399=(cj1*cj2);
IkReal x8400=(sj1*sj2);
IkReal x8401=(gconst1*r21);
CheckValue<IkReal> x8402 = IKatan2WithCheck(IkReal((((r22*x8400))+((r22*x8399)))),IkReal((((x8398*x8400))+(((-1.0)*x8399*x8401))+((x8398*x8399))+(((-1.0)*x8400*x8401)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8402.valid){
continue;
}
CheckValue<IkReal> x8403=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8401*x8401)))+(((-1.0)*(x8398*x8398)))+(((2.0)*x8398*x8401))+(((-1.0)*(r22*r22))))),-1);
if(!x8403.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8402.value)+(((1.5707963267949)*(x8403.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8404=IKsin(j4);
IkReal x8405=IKcos(j4);
IkReal x8406=(gconst1*r01);
IkReal x8407=(gconst1*r11);
IkReal x8408=(gconst1*r21);
IkReal x8409=(cj1*sj2);
IkReal x8410=((1.0)*x8405);
IkReal x8411=(gconst2*x8405);
IkReal x8412=((1.0)*x8404);
IkReal x8413=(gconst2*x8404);
IkReal x8414=((1.0)*cj2*sj1);
evalcond[0]=((((-1.0)*x8408*x8412))+((r20*x8413))+(((-1.0)*r22*x8410)));
evalcond[1]=(sj0+((r00*x8413))+(((-1.0)*r02*x8410))+(((-1.0)*x8406*x8412)));
evalcond[2]=((((-1.0)*r12*x8410))+((r10*x8413))+(((-1.0)*x8407*x8412))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x8408*x8410))+((r22*x8404))+((r20*x8411))+((sj1*sj2))+((cj1*cj2)));
evalcond[4]=(((r00*x8411))+(((-1.0)*cj0*x8414))+(((-1.0)*x8406*x8410))+((r02*x8404))+((cj0*x8409)));
evalcond[5]=(((sj0*x8409))+((r12*x8404))+((r10*x8411))+(((-1.0)*x8407*x8410))+(((-1.0)*sj0*x8414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8415=((1.0)*gconst1);
CheckValue<IkReal> x8416=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x8415))+(((-1.0)*gconst2*r01)))),-1);
if(!x8416.valid){
continue;
}
CheckValue<IkReal> x8417 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst2*r20))+(((-1.0)*cj0*r21*x8415)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8417.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8416.value)))+(x8417.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8418=IKsin(j4);
IkReal x8419=IKcos(j4);
IkReal x8420=(gconst1*r01);
IkReal x8421=(gconst1*r11);
IkReal x8422=(gconst1*r21);
IkReal x8423=(cj1*sj2);
IkReal x8424=((1.0)*x8419);
IkReal x8425=(gconst2*x8419);
IkReal x8426=((1.0)*x8418);
IkReal x8427=(gconst2*x8418);
IkReal x8428=((1.0)*cj2*sj1);
evalcond[0]=(((r20*x8427))+(((-1.0)*r22*x8424))+(((-1.0)*x8422*x8426)));
evalcond[1]=(sj0+(((-1.0)*x8420*x8426))+(((-1.0)*r02*x8424))+((r00*x8427)));
evalcond[2]=(((r10*x8427))+(((-1.0)*x8421*x8426))+(((-1.0)*r12*x8424))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x8425))+((sj1*sj2))+(((-1.0)*x8422*x8424))+((cj1*cj2))+((r22*x8418)));
evalcond[4]=(((cj0*x8423))+((r02*x8418))+(((-1.0)*cj0*x8428))+(((-1.0)*x8420*x8424))+((r00*x8425)));
evalcond[5]=(((r10*x8425))+((r12*x8418))+(((-1.0)*x8421*x8424))+((sj0*x8423))+(((-1.0)*sj0*x8428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8429=((1.0)*gconst1);
CheckValue<IkReal> x8430 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst2*r20*sj0))+(((-1.0)*r21*sj0*x8429)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8430.valid){
continue;
}
CheckValue<IkReal> x8431=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x8429))+(((-1.0)*gconst2*r11)))),-1);
if(!x8431.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8430.value)+(((1.5707963267949)*(x8431.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8432=IKsin(j4);
IkReal x8433=IKcos(j4);
IkReal x8434=(gconst1*r01);
IkReal x8435=(gconst1*r11);
IkReal x8436=(gconst1*r21);
IkReal x8437=(cj1*sj2);
IkReal x8438=((1.0)*x8433);
IkReal x8439=(gconst2*x8433);
IkReal x8440=((1.0)*x8432);
IkReal x8441=(gconst2*x8432);
IkReal x8442=((1.0)*cj2*sj1);
evalcond[0]=(((r20*x8441))+(((-1.0)*r22*x8438))+(((-1.0)*x8436*x8440)));
evalcond[1]=(sj0+(((-1.0)*x8434*x8440))+((r00*x8441))+(((-1.0)*r02*x8438)));
evalcond[2]=((((-1.0)*r12*x8438))+(((-1.0)*x8435*x8440))+((r10*x8441))+(((-1.0)*cj0)));
evalcond[3]=(((sj1*sj2))+((r22*x8432))+((cj1*cj2))+((r20*x8439))+(((-1.0)*x8436*x8438)));
evalcond[4]=(((r02*x8432))+(((-1.0)*x8434*x8438))+(((-1.0)*cj0*x8442))+((cj0*x8437))+((r00*x8439)));
evalcond[5]=((((-1.0)*x8435*x8438))+((sj0*x8437))+(((-1.0)*sj0*x8442))+((r12*x8432))+((r10*x8439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8445 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8445.valid){
continue;
}
IkReal x8443=((-1.0)*(x8445.value));
IkReal x8444=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x8443;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8443;
IkReal gconst1=((-1.0)*r21*x8444);
IkReal gconst2=(r20*x8444);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8448 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8448.valid){
continue;
}
IkReal x8446=((-1.0)*(x8448.value));
IkReal x8447=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x8446;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8446;
IkReal gconst1=((-1.0)*r21*x8447);
IkReal gconst2=(r20*x8447);
CheckValue<IkReal> x8456=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8456.valid){
continue;
}
IkReal x8449=x8456.value;
IkReal x8450=(cj3*x8449);
IkReal x8451=(r11*x8450);
IkReal x8452=(r01*x8450);
IkReal x8453=(r00*x8450);
IkReal x8454=(r10*x8450);
IkReal x8455=(r20*r21*x8450);
j4eval[0]=IKsign((((r10*r20*r21*x8452))+((r00*r20*r21*x8451))+((cj3*r02*r12))+((r10*x8453*(r20*r20)))+((r01*x8451*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8459 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8459.valid){
continue;
}
IkReal x8457=((-1.0)*(x8459.value));
IkReal x8458=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x8457;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8457;
IkReal gconst1=((-1.0)*r21*x8458);
IkReal gconst2=(r20*x8458);
CheckValue<IkReal> x8467=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8467.valid){
continue;
}
IkReal x8460=x8467.value;
IkReal x8461=(sj3*x8460);
IkReal x8462=(r11*x8461);
IkReal x8463=(r00*x8461);
IkReal x8464=(r01*x8461);
IkReal x8465=(r10*x8461);
IkReal x8466=(r20*r21*x8461);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x8463*(r20*r20)))+((r10*r20*r21*x8464))+((r00*r20*r21*x8462))+((r01*x8462*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8470 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8470.valid){
continue;
}
IkReal x8468=((-1.0)*(x8470.value));
IkReal x8469=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x8468;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8468;
IkReal gconst1=((-1.0)*r21*x8469);
IkReal gconst2=(r20*x8469);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8473 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8473.valid){
continue;
}
IkReal x8471=((-1.0)*(x8473.value));
IkReal x8472=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x8471;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8471;
IkReal gconst1=((-1.0)*r21*x8472);
IkReal gconst2=(r20*x8472);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8476 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8476.valid){
continue;
}
IkReal x8474=((-1.0)*(x8476.value));
IkReal x8475=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x8474;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8474;
IkReal gconst1=((-1.0)*r21*x8475);
IkReal gconst2=(r20*x8475);
IkReal x8477=r22*r22;
IkReal x8478=(r12*sj1*sj2);
IkReal x8479=(cj1*cj2*r12);
CheckValue<IkReal> x8483=IKPowWithIntegerCheck(((-1.0)+x8477),-1);
if(!x8483.valid){
continue;
}
IkReal x8480=x8483.value;
if((((1.0)+(((-1.0)*x8477)))) < -0.00001)
continue;
IkReal x8481=IKsqrt(((1.0)+(((-1.0)*x8477))));
IkReal x8482=(r22*x8480*x8481);
j4eval[0]=((IKabs((x8479+x8478)))+(IKabs((((x8479*x8482))+((x8478*x8482))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8484=(sj1*sj2);
IkReal x8485=(cj1*cj2);
IkReal x8486=(gconst2*r10);
IkReal x8487=((1.0)*gconst1*r11);
CheckValue<IkReal> x8488 = IKatan2WithCheck(IkReal((((r12*x8484))+((r12*x8485)))),IkReal((((x8484*x8486))+((x8485*x8486))+(((-1.0)*x8484*x8487))+(((-1.0)*x8485*x8487)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8488.valid){
continue;
}
CheckValue<IkReal> x8489=IKPowWithIntegerCheck(IKsign(((((gconst1*gconst1)*(r11*r11)))+(r12*r12)+(((-2.0)*gconst1*r11*x8486))+(x8486*x8486))),-1);
if(!x8489.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8488.value)+(((1.5707963267949)*(x8489.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8490=IKsin(j4);
IkReal x8491=IKcos(j4);
IkReal x8492=(gconst1*r01);
IkReal x8493=(gconst1*r21);
IkReal x8494=(gconst1*r11);
IkReal x8495=((1.0)*x8491);
IkReal x8496=((1.0)*x8490);
IkReal x8497=(gconst2*x8490);
evalcond[0]=((((-1.0)*r22*x8495))+(((-1.0)*x8493*x8496))+((r20*x8497)));
evalcond[1]=(((r10*x8497))+(((-1.0)*x8494*x8496))+(((-1.0)*r12*x8495)));
evalcond[2]=((((-1.0)*r02*x8496))+(((-1.0)*gconst2*r00*x8495))+((x8491*x8492)));
evalcond[3]=((1.0)+((r00*x8497))+(((-1.0)*r02*x8495))+(((-1.0)*x8492*x8496)));
evalcond[4]=((((-1.0)*gconst2*r10*x8495))+((sj1*sj2))+((x8491*x8494))+(((-1.0)*r12*x8496))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x8495))+(((-1.0)*cj1*sj2))+((x8491*x8493))+(((-1.0)*r22*x8496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8498=(gconst1*r01);
IkReal x8499=(gconst2*r00);
CheckValue<IkReal> x8500=IKPowWithIntegerCheck(IKsign(((x8498*x8498)+(x8499*x8499)+(r02*r02)+(((-2.0)*x8498*x8499)))),-1);
if(!x8500.valid){
continue;
}
CheckValue<IkReal> x8501 = IKatan2WithCheck(IkReal((x8498+(((-1.0)*x8499)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8500.value)))+(x8501.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8502=IKsin(j4);
IkReal x8503=IKcos(j4);
IkReal x8504=(gconst1*r01);
IkReal x8505=(gconst1*r21);
IkReal x8506=(gconst1*r11);
IkReal x8507=((1.0)*x8503);
IkReal x8508=((1.0)*x8502);
IkReal x8509=(gconst2*x8502);
evalcond[0]=((((-1.0)*x8505*x8508))+(((-1.0)*r22*x8507))+((r20*x8509)));
evalcond[1]=(((r10*x8509))+(((-1.0)*x8506*x8508))+(((-1.0)*r12*x8507)));
evalcond[2]=((((-1.0)*gconst2*r00*x8507))+((x8503*x8504))+(((-1.0)*r02*x8508)));
evalcond[3]=((1.0)+(((-1.0)*x8504*x8508))+(((-1.0)*r02*x8507))+((r00*x8509)));
evalcond[4]=(((x8503*x8506))+((sj1*sj2))+(((-1.0)*gconst2*r10*x8507))+(((-1.0)*r12*x8508))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+((x8503*x8505))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x8508))+(((-1.0)*gconst2*r20*x8507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8510=((1.0)*gconst1);
CheckValue<IkReal> x8511=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r11))+(((-1.0)*r10*x8510)))),-1);
if(!x8511.valid){
continue;
}
CheckValue<IkReal> x8512 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x8510))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8512.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8511.value)))+(x8512.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8513=IKsin(j4);
IkReal x8514=IKcos(j4);
IkReal x8515=(gconst1*r01);
IkReal x8516=(gconst1*r21);
IkReal x8517=(gconst1*r11);
IkReal x8518=((1.0)*x8514);
IkReal x8519=((1.0)*x8513);
IkReal x8520=(gconst2*x8513);
evalcond[0]=(((r20*x8520))+(((-1.0)*r22*x8518))+(((-1.0)*x8516*x8519)));
evalcond[1]=((((-1.0)*x8517*x8519))+(((-1.0)*r12*x8518))+((r10*x8520)));
evalcond[2]=((((-1.0)*gconst2*r00*x8518))+((x8514*x8515))+(((-1.0)*r02*x8519)));
evalcond[3]=((1.0)+(((-1.0)*x8515*x8519))+(((-1.0)*r02*x8518))+((r00*x8520)));
evalcond[4]=(((sj1*sj2))+((x8514*x8517))+(((-1.0)*r12*x8519))+(((-1.0)*gconst2*r10*x8518))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((x8514*x8516))+(((-1.0)*r22*x8519))+(((-1.0)*gconst2*r20*x8518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8523 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8523.valid){
continue;
}
IkReal x8521=((-1.0)*(x8523.value));
IkReal x8522=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x8521;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8521;
IkReal gconst1=((-1.0)*r21*x8522);
IkReal gconst2=(r20*x8522);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8526 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8526.valid){
continue;
}
IkReal x8524=((-1.0)*(x8526.value));
IkReal x8525=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x8524;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8524;
IkReal gconst1=((-1.0)*r21*x8525);
IkReal gconst2=(r20*x8525);
IkReal x8527=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8531=IKPowWithIntegerCheck(x8527,-1);
if(!x8531.valid){
continue;
}
IkReal x8528=x8531.value;
IkReal x8529=((1.0)*x8528);
IkReal x8530=((((-1.0)*x8529*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x8529*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x8528)));
j4eval[0]=x8530;
j4eval[1]=IKsign(x8530);
j4eval[2]=r02;
j4eval[3]=x8527;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8534 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8534.valid){
continue;
}
IkReal x8532=((-1.0)*(x8534.value));
IkReal x8533=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x8532;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8532;
IkReal gconst1=((-1.0)*r21*x8533);
IkReal gconst2=(r20*x8533);
IkReal x8535=r22*r22;
IkReal x8536=(cj1*r02*sj2);
IkReal x8537=(cj2*r02*sj1);
CheckValue<IkReal> x8541=IKPowWithIntegerCheck(((-1.0)+x8535),-1);
if(!x8541.valid){
continue;
}
IkReal x8538=x8541.value;
if((((1.0)+(((-1.0)*x8535)))) < -0.00001)
continue;
IkReal x8539=IKsqrt(((1.0)+(((-1.0)*x8535))));
IkReal x8540=(r22*x8538*x8539);
j4eval[0]=((IKabs(((((-1.0)*x8537))+x8536)))+(IKabs((((x8537*x8540))+(((-1.0)*x8536*x8540))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8542=((1.0)*gconst1);
IkReal x8543=(cj2*sj1);
IkReal x8544=(cj1*sj2);
IkReal x8545=((1.0)*gconst2);
CheckValue<IkReal> x8546 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x8544*x8545))+((gconst2*r00*x8543))+((gconst1*r01*x8544))+(((-1.0)*r01*x8542*x8543)))),IkReal(((((-1.0)*r02*x8543))+((r02*x8544)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8546.valid){
continue;
}
CheckValue<IkReal> x8547=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x8542))+(((-1.0)*r11*x8545)))),-1);
if(!x8547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8546.value)+(((1.5707963267949)*(x8547.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8548=IKcos(j4);
IkReal x8549=IKsin(j4);
IkReal x8550=(gconst1*r01);
IkReal x8551=(gconst1*r21);
IkReal x8552=(gconst1*r11);
IkReal x8553=((1.0)*x8548);
IkReal x8554=(gconst2*x8548);
IkReal x8555=((1.0)*x8549);
IkReal x8556=(gconst2*x8549);
evalcond[0]=(((r00*x8554))+((r02*x8549))+(((-1.0)*x8550*x8553)));
evalcond[1]=(((r20*x8556))+(((-1.0)*r22*x8553))+(((-1.0)*x8551*x8555)));
evalcond[2]=((((-1.0)*r12*x8553))+((r10*x8556))+(((-1.0)*x8552*x8555)));
evalcond[3]=((1.0)+((r00*x8556))+(((-1.0)*x8550*x8555))+(((-1.0)*r02*x8553)));
evalcond[4]=(((r10*x8554))+((sj1*sj2))+(((-1.0)*x8552*x8553))+((cj1*cj2))+((r12*x8549)));
evalcond[5]=(((cj2*sj1))+((r20*x8554))+(((-1.0)*cj1*sj2))+(((-1.0)*x8551*x8553))+((r22*x8549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8557=(gconst2*r00);
IkReal x8558=(gconst1*r01);
CheckValue<IkReal> x8559 = IKatan2WithCheck(IkReal((x8557+(((-1.0)*x8558)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8559.valid){
continue;
}
CheckValue<IkReal> x8560=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x8558*x8558)))+(((-1.0)*(x8557*x8557)))+(((2.0)*x8557*x8558)))),-1);
if(!x8560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8559.value)+(((1.5707963267949)*(x8560.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8561=IKcos(j4);
IkReal x8562=IKsin(j4);
IkReal x8563=(gconst1*r01);
IkReal x8564=(gconst1*r21);
IkReal x8565=(gconst1*r11);
IkReal x8566=((1.0)*x8561);
IkReal x8567=(gconst2*x8561);
IkReal x8568=((1.0)*x8562);
IkReal x8569=(gconst2*x8562);
evalcond[0]=(((r00*x8567))+(((-1.0)*x8563*x8566))+((r02*x8562)));
evalcond[1]=((((-1.0)*x8564*x8568))+((r20*x8569))+(((-1.0)*r22*x8566)));
evalcond[2]=((((-1.0)*r12*x8566))+((r10*x8569))+(((-1.0)*x8565*x8568)));
evalcond[3]=((1.0)+((r00*x8569))+(((-1.0)*x8563*x8568))+(((-1.0)*r02*x8566)));
evalcond[4]=(((r10*x8567))+(((-1.0)*x8565*x8566))+((sj1*sj2))+((cj1*cj2))+((r12*x8562)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*x8564*x8566))+((r20*x8567))+(((-1.0)*cj1*sj2))+((r22*x8562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8570=((1.0)*gconst1);
CheckValue<IkReal> x8571 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x8570))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8571.valid){
continue;
}
CheckValue<IkReal> x8572=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r11))+(((-1.0)*r10*x8570)))),-1);
if(!x8572.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8571.value)+(((1.5707963267949)*(x8572.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8573=IKcos(j4);
IkReal x8574=IKsin(j4);
IkReal x8575=(gconst1*r01);
IkReal x8576=(gconst1*r21);
IkReal x8577=(gconst1*r11);
IkReal x8578=((1.0)*x8573);
IkReal x8579=(gconst2*x8573);
IkReal x8580=((1.0)*x8574);
IkReal x8581=(gconst2*x8574);
evalcond[0]=(((r02*x8574))+(((-1.0)*x8575*x8578))+((r00*x8579)));
evalcond[1]=((((-1.0)*x8576*x8580))+((r20*x8581))+(((-1.0)*r22*x8578)));
evalcond[2]=((((-1.0)*x8577*x8580))+((r10*x8581))+(((-1.0)*r12*x8578)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8578))+((r00*x8581))+(((-1.0)*x8575*x8580)));
evalcond[4]=((((-1.0)*x8577*x8578))+((sj1*sj2))+((r12*x8574))+((r10*x8579))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+((r22*x8574))+(((-1.0)*cj1*sj2))+((r20*x8579))+(((-1.0)*x8576*x8578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x8582=((-1.0)*py);
CheckValue<IkReal> x8584 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8584.valid){
continue;
}
IkReal x8583=((-1.0)*(x8584.value));
sj5=gconst1;
cj5=gconst2;
j5=x8583;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8582);
rxp0_2=(py*r00);
rxp1_0=(r21*x8582);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8583;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x8585=((1.0)*sj3);
IkReal x8586=(r01*r21);
IkReal x8587=(r00*r20);
j4eval[0]=(x8587+x8586);
j4eval[1]=((((-1.0)*x8585*x8586))+(((-1.0)*x8585*x8587)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8588=((-1.0)*py);
CheckValue<IkReal> x8590 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8590.valid){
continue;
}
IkReal x8589=((-1.0)*(x8590.value));
sj5=gconst1;
cj5=gconst2;
j5=x8589;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8588);
rxp0_2=(py*r00);
rxp1_0=(r21*x8588);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8589;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x8591=(r00*r20);
IkReal x8592=((1.0)*cj3);
IkReal x8593=(r01*r21);
j4eval[0]=(x8593+x8591);
j4eval[1]=((((-1.0)*x8591*x8592))+(((-1.0)*x8592*x8593)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8594=((-1.0)*py);
CheckValue<IkReal> x8596 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8596.valid){
continue;
}
IkReal x8595=((-1.0)*(x8596.value));
sj5=gconst1;
cj5=gconst2;
j5=x8595;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8594);
rxp0_2=(py*r00);
rxp1_0=(r21*x8594);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8595;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x8597=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r01*r21*x8597))+(((-1.0)*r00*r20*x8597)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8598=((1.0)*gconst2);
CheckValue<IkReal> x8599=IKPowWithIntegerCheck(cj3,-1);
if(!x8599.valid){
continue;
}
CheckValue<IkReal> x8600=IKPowWithIntegerCheck(r12,-1);
if(!x8600.valid){
continue;
}
CheckValue<IkReal> x8601=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x8598))+((cj3*gconst1*r01))),-1);
if(!x8601.valid){
continue;
}
if( IKabs(((x8599.value)*(x8600.value)*((((sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8601.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x8598)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8599.value)*(x8600.value)*((((sj1*sj2))+((cj1*cj2))))))+IKsqr(((x8601.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x8598))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x8599.value)*(x8600.value)*((((sj1*sj2))+((cj1*cj2))))), ((x8601.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x8598))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8602=IKsin(j4);
IkReal x8603=IKcos(j4);
IkReal x8604=(sj1*sj2);
IkReal x8605=(cj1*cj2);
IkReal x8606=((1.0)*sj3);
IkReal x8607=(gconst1*sj3);
IkReal x8608=((1.0)*cj3);
IkReal x8609=(cj2*sj1);
IkReal x8610=(cj1*sj2);
IkReal x8611=(gconst2*r01);
IkReal x8612=(gconst2*r21);
IkReal x8613=(r12*x8602);
IkReal x8614=(gconst2*x8603);
IkReal x8615=(gconst2*x8602);
IkReal x8616=(x8604+x8605);
IkReal x8617=((1.0)*gconst1*x8602);
IkReal x8618=(cj3*gconst1*x8603);
evalcond[0]=((-1.0)*r12*x8603);
evalcond[1]=(((r20*x8615))+(((-1.0)*r21*x8617)));
evalcond[2]=(x8616+(((-1.0)*x8608*x8613)));
evalcond[3]=((1.0)+(((-1.0)*r01*x8617))+((r00*x8615)));
evalcond[4]=((((-1.0)*x8606*x8613))+x8610+(((-1.0)*x8609)));
evalcond[5]=(((r00*x8607))+((r01*x8618))+((sj3*x8611))+(((-1.0)*r00*x8608*x8614)));
evalcond[6]=((((-1.0)*x8608*x8611))+((r01*x8603*x8607))+(((-1.0)*r00*x8606*x8614))+(((-1.0)*gconst1*r00*x8608)));
evalcond[7]=(x8609+((r20*x8607))+(((-1.0)*r20*x8608*x8614))+((sj3*x8612))+((r21*x8618))+(((-1.0)*x8610)));
evalcond[8]=(x8616+(((-1.0)*x8608*x8612))+((r21*x8603*x8607))+(((-1.0)*r20*x8606*x8614))+(((-1.0)*gconst1*r20*x8608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8619=((1.0)*gconst2);
IkReal x8620=(gconst1*r01);
CheckValue<IkReal> x8621=IKPowWithIntegerCheck(((((-1.0)*x8620))+((gconst2*r00))),-1);
if(!x8621.valid){
continue;
}
CheckValue<IkReal> x8622=IKPowWithIntegerCheck((((cj3*x8620))+(((-1.0)*cj3*r00*x8619))),-1);
if(!x8622.valid){
continue;
}
if( IKabs(((-1.0)*(x8621.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8622.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x8619)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x8621.value)))+IKsqr(((x8622.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x8619))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x8621.value)), ((x8622.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x8619))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8623=IKsin(j4);
IkReal x8624=IKcos(j4);
IkReal x8625=(sj1*sj2);
IkReal x8626=(cj1*cj2);
IkReal x8627=((1.0)*sj3);
IkReal x8628=(gconst1*sj3);
IkReal x8629=((1.0)*cj3);
IkReal x8630=(cj2*sj1);
IkReal x8631=(cj1*sj2);
IkReal x8632=(gconst2*r01);
IkReal x8633=(gconst2*r21);
IkReal x8634=(r12*x8623);
IkReal x8635=(gconst2*x8624);
IkReal x8636=(gconst2*x8623);
IkReal x8637=(x8625+x8626);
IkReal x8638=((1.0)*gconst1*x8623);
IkReal x8639=(cj3*gconst1*x8624);
evalcond[0]=((-1.0)*r12*x8624);
evalcond[1]=(((r20*x8636))+(((-1.0)*r21*x8638)));
evalcond[2]=((((-1.0)*x8629*x8634))+x8637);
evalcond[3]=((1.0)+(((-1.0)*r01*x8638))+((r00*x8636)));
evalcond[4]=(x8631+(((-1.0)*x8630))+(((-1.0)*x8627*x8634)));
evalcond[5]=(((r01*x8639))+((r00*x8628))+((sj3*x8632))+(((-1.0)*r00*x8629*x8635)));
evalcond[6]=((((-1.0)*x8629*x8632))+(((-1.0)*r00*x8627*x8635))+((r01*x8624*x8628))+(((-1.0)*gconst1*r00*x8629)));
evalcond[7]=(x8630+((r21*x8639))+(((-1.0)*x8631))+(((-1.0)*r20*x8629*x8635))+((r20*x8628))+((sj3*x8633)));
evalcond[8]=((((-1.0)*x8629*x8633))+x8637+(((-1.0)*r20*x8627*x8635))+(((-1.0)*gconst1*r20*x8629))+((r21*x8624*x8628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8640=(gconst2*r00);
IkReal x8641=(gconst1*r01);
CheckValue<IkReal> x8642=IKPowWithIntegerCheck((x8640+(((-1.0)*x8641))),-1);
if(!x8642.valid){
continue;
}
CheckValue<IkReal> x8643=IKPowWithIntegerCheck(((((-1.0)*sj3*x8640))+((sj3*x8641))),-1);
if(!x8643.valid){
continue;
}
if( IKabs(((-1.0)*(x8642.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8643.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x8642.value)))+IKsqr(((x8643.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x8642.value)), ((x8643.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8644=IKsin(j4);
IkReal x8645=IKcos(j4);
IkReal x8646=(sj1*sj2);
IkReal x8647=(cj1*cj2);
IkReal x8648=((1.0)*sj3);
IkReal x8649=(gconst1*sj3);
IkReal x8650=((1.0)*cj3);
IkReal x8651=(cj2*sj1);
IkReal x8652=(cj1*sj2);
IkReal x8653=(gconst2*r01);
IkReal x8654=(gconst2*r21);
IkReal x8655=(r12*x8644);
IkReal x8656=(gconst2*x8645);
IkReal x8657=(gconst2*x8644);
IkReal x8658=(x8646+x8647);
IkReal x8659=((1.0)*gconst1*x8644);
IkReal x8660=(cj3*gconst1*x8645);
evalcond[0]=((-1.0)*r12*x8645);
evalcond[1]=((((-1.0)*r21*x8659))+((r20*x8657)));
evalcond[2]=(x8658+(((-1.0)*x8650*x8655)));
evalcond[3]=((1.0)+((r00*x8657))+(((-1.0)*r01*x8659)));
evalcond[4]=(x8652+(((-1.0)*x8651))+(((-1.0)*x8648*x8655)));
evalcond[5]=(((sj3*x8653))+((r00*x8649))+((r01*x8660))+(((-1.0)*r00*x8650*x8656)));
evalcond[6]=((((-1.0)*gconst1*r00*x8650))+(((-1.0)*x8650*x8653))+((r01*x8645*x8649))+(((-1.0)*r00*x8648*x8656)));
evalcond[7]=(((sj3*x8654))+x8651+((r20*x8649))+(((-1.0)*x8652))+(((-1.0)*r20*x8650*x8656))+((r21*x8660)));
evalcond[8]=((((-1.0)*gconst1*r20*x8650))+x8658+((r21*x8645*x8649))+(((-1.0)*r20*x8648*x8656))+(((-1.0)*x8650*x8654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8661=gconst2*gconst2;
IkReal x8662=gconst1*gconst1;
IkReal x8663=(r00*r11);
IkReal x8664=(gconst1*gconst2);
IkReal x8665=((1.0)*sj3);
IkReal x8666=(r01*r11);
IkReal x8667=((1.0)*cj3*r10);
IkReal x8668=((1.0)*cj3*r12);
CheckValue<IkReal> x8669=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((sj3*x8662*x8666))+(((-1.0)*r01*r10*x8664*x8665))+((r00*r10*sj3*x8661))+(((-1.0)*x8663*x8664*x8665)))),-1);
if(!x8669.valid){
continue;
}
CheckValue<IkReal> x8670 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r01*x8668))+(((-1.0)*gconst1*r00*x8668)))),IkReal((((cj3*x8662*x8663))+(((-1.0)*r00*x8664*x8667))+(((-1.0)*r01*x8661*x8667))+((cj3*x8664*x8666)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8670.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8669.value)))+(x8670.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8671=IKsin(j4);
IkReal x8672=IKcos(j4);
IkReal x8673=(sj1*sj2);
IkReal x8674=(cj1*cj2);
IkReal x8675=(r00*sj3);
IkReal x8676=(gconst2*r20);
IkReal x8677=((1.0)*cj3);
IkReal x8678=(gconst2*r01);
IkReal x8679=(gconst1*r10);
IkReal x8680=(gconst1*r01);
IkReal x8681=(gconst1*r11);
IkReal x8682=(cj3*gconst2);
IkReal x8683=(cj2*sj1);
IkReal x8684=(gconst1*r21);
IkReal x8685=(cj1*sj2);
IkReal x8686=(gconst1*r20);
IkReal x8687=(gconst2*r11);
IkReal x8688=(gconst2*r21);
IkReal x8689=((1.0)*x8672);
IkReal x8690=((1.0)*x8671);
IkReal x8691=(gconst2*x8671);
IkReal x8692=(sj3*x8672);
IkReal x8693=(cj3*x8672);
IkReal x8694=(x8673+x8674);
evalcond[0]=((((-1.0)*x8684*x8690))+(((-1.0)*r22*x8689))+((x8671*x8676)));
evalcond[1]=((((-1.0)*r12*x8689))+((r10*x8691))+(((-1.0)*x8681*x8690)));
evalcond[2]=((1.0)+(((-1.0)*r02*x8689))+(((-1.0)*x8680*x8690))+((r00*x8691)));
evalcond[3]=(((sj3*x8678))+(((-1.0)*r02*x8671*x8677))+((gconst1*x8675))+(((-1.0)*gconst2*r00*x8672*x8677))+((x8680*x8693)));
evalcond[4]=((((-1.0)*gconst1*r00*x8677))+(((-1.0)*r02*sj3*x8690))+(((-1.0)*gconst2*x8675*x8689))+(((-1.0)*x8677*x8678))+((x8680*x8692)));
evalcond[5]=(x8694+((sj3*x8679))+((sj3*x8687))+(((-1.0)*gconst2*r10*x8672*x8677))+((x8681*x8693))+(((-1.0)*r12*x8671*x8677)));
evalcond[6]=(((x8684*x8693))+(((-1.0)*x8672*x8676*x8677))+x8683+((sj3*x8688))+((sj3*x8686))+(((-1.0)*x8685))+(((-1.0)*r22*x8671*x8677)));
evalcond[7]=(((x8684*x8692))+x8694+(((-1.0)*r22*sj3*x8690))+(((-1.0)*x8677*x8688))+(((-1.0)*x8677*x8686))+(((-1.0)*sj3*x8676*x8689)));
evalcond[8]=((((-1.0)*gconst2*r10*sj3*x8689))+x8685+(((-1.0)*x8677*x8687))+(((-1.0)*x8683))+((x8681*x8692))+(((-1.0)*x8677*x8679))+(((-1.0)*r12*sj3*x8690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8695=gconst1*gconst1;
IkReal x8696=gconst2*gconst2;
IkReal x8697=(r00*sj3);
IkReal x8698=((1.0)*r11);
IkReal x8699=(r01*sj3);
IkReal x8700=(gconst1*gconst2);
IkReal x8701=(cj3*r01);
IkReal x8702=(cj3*r00);
IkReal x8703=(r10*x8696);
CheckValue<IkReal> x8704=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+(((-1.0)*r10*x8700*x8701))+((r11*x8695*x8701))+((x8702*x8703))+(((-1.0)*x8698*x8700*x8702)))),-1);
if(!x8704.valid){
continue;
}
CheckValue<IkReal> x8705 = IKatan2WithCheck(IkReal((((gconst1*r12*x8697))+((gconst2*r12*x8699)))),IkReal((((r10*x8697*x8700))+(((-1.0)*x8698*x8699*x8700))+(((-1.0)*x8695*x8697*x8698))+((x8699*x8703)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8705.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8704.value)))+(x8705.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8706=IKsin(j4);
IkReal x8707=IKcos(j4);
IkReal x8708=(sj1*sj2);
IkReal x8709=(cj1*cj2);
IkReal x8710=(r00*sj3);
IkReal x8711=(gconst2*r20);
IkReal x8712=((1.0)*cj3);
IkReal x8713=(gconst2*r01);
IkReal x8714=(gconst1*r10);
IkReal x8715=(gconst1*r01);
IkReal x8716=(gconst1*r11);
IkReal x8717=(cj3*gconst2);
IkReal x8718=(cj2*sj1);
IkReal x8719=(gconst1*r21);
IkReal x8720=(cj1*sj2);
IkReal x8721=(gconst1*r20);
IkReal x8722=(gconst2*r11);
IkReal x8723=(gconst2*r21);
IkReal x8724=((1.0)*x8707);
IkReal x8725=((1.0)*x8706);
IkReal x8726=(gconst2*x8706);
IkReal x8727=(sj3*x8707);
IkReal x8728=(cj3*x8707);
IkReal x8729=(x8709+x8708);
evalcond[0]=(((x8706*x8711))+(((-1.0)*x8719*x8725))+(((-1.0)*r22*x8724)));
evalcond[1]=(((r10*x8726))+(((-1.0)*r12*x8724))+(((-1.0)*x8716*x8725)));
evalcond[2]=((1.0)+(((-1.0)*r02*x8724))+(((-1.0)*x8715*x8725))+((r00*x8726)));
evalcond[3]=(((sj3*x8713))+(((-1.0)*gconst2*r00*x8707*x8712))+((gconst1*x8710))+(((-1.0)*r02*x8706*x8712))+((x8715*x8728)));
evalcond[4]=((((-1.0)*gconst2*x8710*x8724))+(((-1.0)*gconst1*r00*x8712))+(((-1.0)*r02*sj3*x8725))+(((-1.0)*x8712*x8713))+((x8715*x8727)));
evalcond[5]=(((sj3*x8714))+((x8716*x8728))+x8729+(((-1.0)*r12*x8706*x8712))+((sj3*x8722))+(((-1.0)*gconst2*r10*x8707*x8712)));
evalcond[6]=(x8718+(((-1.0)*x8720))+((sj3*x8723))+((sj3*x8721))+(((-1.0)*x8707*x8711*x8712))+((x8719*x8728))+(((-1.0)*r22*x8706*x8712)));
evalcond[7]=((((-1.0)*sj3*x8711*x8724))+x8729+(((-1.0)*x8712*x8721))+(((-1.0)*x8712*x8723))+(((-1.0)*r22*sj3*x8725))+((x8719*x8727)));
evalcond[8]=(((x8716*x8727))+x8720+(((-1.0)*gconst2*r10*sj3*x8724))+(((-1.0)*x8712*x8722))+(((-1.0)*r12*sj3*x8725))+(((-1.0)*x8718))+(((-1.0)*x8712*x8714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8730=((1.0)*gconst1);
CheckValue<IkReal> x8731 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*r21*x8730)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8731.valid){
continue;
}
CheckValue<IkReal> x8732=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r11))+(((-1.0)*r10*x8730)))),-1);
if(!x8732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8731.value)+(((1.5707963267949)*(x8732.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8733=IKsin(j4);
IkReal x8734=IKcos(j4);
IkReal x8735=(sj1*sj2);
IkReal x8736=(cj1*cj2);
IkReal x8737=(r00*sj3);
IkReal x8738=(gconst2*r20);
IkReal x8739=((1.0)*cj3);
IkReal x8740=(gconst2*r01);
IkReal x8741=(gconst1*r10);
IkReal x8742=(gconst1*r01);
IkReal x8743=(gconst1*r11);
IkReal x8744=(cj3*gconst2);
IkReal x8745=(cj2*sj1);
IkReal x8746=(gconst1*r21);
IkReal x8747=(cj1*sj2);
IkReal x8748=(gconst1*r20);
IkReal x8749=(gconst2*r11);
IkReal x8750=(gconst2*r21);
IkReal x8751=((1.0)*x8734);
IkReal x8752=((1.0)*x8733);
IkReal x8753=(gconst2*x8733);
IkReal x8754=(sj3*x8734);
IkReal x8755=(cj3*x8734);
IkReal x8756=(x8736+x8735);
evalcond[0]=((((-1.0)*x8746*x8752))+(((-1.0)*r22*x8751))+((x8733*x8738)));
evalcond[1]=(((r10*x8753))+(((-1.0)*x8743*x8752))+(((-1.0)*r12*x8751)));
evalcond[2]=((1.0)+(((-1.0)*x8742*x8752))+(((-1.0)*r02*x8751))+((r00*x8753)));
evalcond[3]=(((gconst1*x8737))+((x8742*x8755))+(((-1.0)*r02*x8733*x8739))+((sj3*x8740))+(((-1.0)*gconst2*r00*x8734*x8739)));
evalcond[4]=(((x8742*x8754))+(((-1.0)*x8739*x8740))+(((-1.0)*gconst1*r00*x8739))+(((-1.0)*gconst2*x8737*x8751))+(((-1.0)*r02*sj3*x8752)));
evalcond[5]=(((x8743*x8755))+(((-1.0)*r12*x8733*x8739))+x8756+(((-1.0)*gconst2*r10*x8734*x8739))+((sj3*x8749))+((sj3*x8741)));
evalcond[6]=(x8745+((sj3*x8750))+(((-1.0)*r22*x8733*x8739))+(((-1.0)*x8747))+((sj3*x8748))+((x8746*x8755))+(((-1.0)*x8734*x8738*x8739)));
evalcond[7]=(x8756+(((-1.0)*r22*sj3*x8752))+(((-1.0)*x8739*x8748))+(((-1.0)*x8739*x8750))+(((-1.0)*sj3*x8738*x8751))+((x8746*x8754)));
evalcond[8]=(((x8743*x8754))+x8747+(((-1.0)*x8739*x8749))+(((-1.0)*x8739*x8741))+(((-1.0)*gconst2*r10*sj3*x8751))+(((-1.0)*r12*sj3*x8752))+(((-1.0)*x8745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8759 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8759.valid){
continue;
}
IkReal x8757=((-1.0)*(x8759.value));
IkReal x8758=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x8757;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8757;
IkReal gconst1=((-1.0)*r21*x8758);
IkReal gconst2=(r20*x8758);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8762 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8762.valid){
continue;
}
IkReal x8760=((-1.0)*(x8762.value));
IkReal x8761=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x8760;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8760;
IkReal gconst1=((-1.0)*r21*x8761);
IkReal gconst2=(r20*x8761);
CheckValue<IkReal> x8770=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8770.valid){
continue;
}
IkReal x8763=x8770.value;
IkReal x8764=(cj3*x8763);
IkReal x8765=(r11*x8764);
IkReal x8766=(r01*x8764);
IkReal x8767=(r00*x8764);
IkReal x8768=(r10*x8764);
IkReal x8769=(r20*r21*x8764);
j4eval[0]=IKsign((((cj3*r02*r12))+((r00*r20*r21*x8765))+((r01*x8765*(r21*r21)))+((r10*x8767*(r20*r20)))+((r10*r20*r21*x8766))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8773 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8773.valid){
continue;
}
IkReal x8771=((-1.0)*(x8773.value));
IkReal x8772=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x8771;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8771;
IkReal gconst1=((-1.0)*r21*x8772);
IkReal gconst2=(r20*x8772);
CheckValue<IkReal> x8781=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8781.valid){
continue;
}
IkReal x8774=x8781.value;
IkReal x8775=(sj3*x8774);
IkReal x8776=(r11*x8775);
IkReal x8777=(r00*x8775);
IkReal x8778=(r01*x8775);
IkReal x8779=(r10*x8775);
IkReal x8780=(r20*r21*x8775);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x8776*(r21*r21)))+((r00*r20*r21*x8776))+((r10*x8777*(r20*r20)))+((r10*r20*r21*x8778))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8784 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8784.valid){
continue;
}
IkReal x8782=((-1.0)*(x8784.value));
IkReal x8783=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x8782;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8782;
IkReal gconst1=((-1.0)*r21*x8783);
IkReal gconst2=(r20*x8783);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8787 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8787.valid){
continue;
}
IkReal x8785=((-1.0)*(x8787.value));
IkReal x8786=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x8785;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8785;
IkReal gconst1=((-1.0)*r21*x8786);
IkReal gconst2=(r20*x8786);
IkReal x8788=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8792=IKPowWithIntegerCheck(x8788,-1);
if(!x8792.valid){
continue;
}
IkReal x8789=x8792.value;
IkReal x8790=((1.0)*x8789);
IkReal x8791=((((-2.0)*r00*r01*r20*r21*x8789))+(((-1.0)*(r02*r02)))+(((-1.0)*x8790*(r01*r01)*(r21*r21)))+(((-1.0)*x8790*(r00*r00)*(r20*r20))));
j4eval[0]=x8791;
j4eval[1]=IKsign(x8791);
j4eval[2]=r02;
j4eval[3]=x8788;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8795 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8795.valid){
continue;
}
IkReal x8793=((-1.0)*(x8795.value));
IkReal x8794=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x8793;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8793;
IkReal gconst1=((-1.0)*r21*x8794);
IkReal gconst2=(r20*x8794);
IkReal x8796=r22*r22;
IkReal x8797=(cj1*r02*sj2);
IkReal x8798=(cj2*r02*sj1);
CheckValue<IkReal> x8802=IKPowWithIntegerCheck(((-1.0)+x8796),-1);
if(!x8802.valid){
continue;
}
IkReal x8799=x8802.value;
if((((1.0)+(((-1.0)*x8796)))) < -0.00001)
continue;
IkReal x8800=IKsqrt(((1.0)+(((-1.0)*x8796))));
IkReal x8801=(r22*x8799*x8800);
j4eval[0]=((IKabs((((x8797*x8801))+(((-1.0)*x8798*x8801)))))+(IKabs((x8798+(((-1.0)*x8797))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8803=(cj1*sj2);
IkReal x8804=(gconst2*r00);
IkReal x8805=((1.0)*gconst1);
IkReal x8806=(cj2*sj1);
CheckValue<IkReal> x8807 = IKatan2WithCheck(IkReal((((x8803*x8804))+(((-1.0)*x8804*x8806))+(((-1.0)*r01*x8803*x8805))+((gconst1*r01*x8806)))),IkReal((((r02*x8806))+(((-1.0)*r02*x8803)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8807.valid){
continue;
}
CheckValue<IkReal> x8808=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x8805))+(((-1.0)*gconst2*r11)))),-1);
if(!x8808.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8807.value)+(((1.5707963267949)*(x8808.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8809=IKsin(j4);
IkReal x8810=IKcos(j4);
IkReal x8811=(gconst1*r01);
IkReal x8812=(gconst1*r21);
IkReal x8813=((1.0)*sj2);
IkReal x8814=(gconst1*r11);
IkReal x8815=((1.0)*x8810);
IkReal x8816=((1.0)*x8809);
IkReal x8817=(gconst2*x8809);
evalcond[0]=((((-1.0)*r22*x8815))+((r20*x8817))+(((-1.0)*x8812*x8816)));
evalcond[1]=((((-1.0)*r12*x8815))+((r10*x8817))+(((-1.0)*x8814*x8816)));
evalcond[2]=(((x8810*x8811))+(((-1.0)*r02*x8816))+(((-1.0)*gconst2*r00*x8815)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8815))+((r00*x8817))+(((-1.0)*x8811*x8816)));
evalcond[4]=(((x8810*x8812))+(((-1.0)*r22*x8816))+((cj2*sj1))+(((-1.0)*gconst2*r20*x8815))+(((-1.0)*cj1*x8813)));
evalcond[5]=(((x8810*x8814))+(((-1.0)*r12*x8816))+(((-1.0)*cj1*cj2))+(((-1.0)*gconst2*r10*x8815))+(((-1.0)*sj1*x8813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8818=(gconst1*r01);
IkReal x8819=(gconst2*r00);
CheckValue<IkReal> x8820=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x8818*x8819))+(((-1.0)*(x8819*x8819)))+(((-1.0)*(x8818*x8818))))),-1);
if(!x8820.valid){
continue;
}
CheckValue<IkReal> x8821 = IKatan2WithCheck(IkReal(((((-1.0)*x8819))+x8818)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8820.value)))+(x8821.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8822=IKsin(j4);
IkReal x8823=IKcos(j4);
IkReal x8824=(gconst1*r01);
IkReal x8825=(gconst1*r21);
IkReal x8826=((1.0)*sj2);
IkReal x8827=(gconst1*r11);
IkReal x8828=((1.0)*x8823);
IkReal x8829=((1.0)*x8822);
IkReal x8830=(gconst2*x8822);
evalcond[0]=(((r20*x8830))+(((-1.0)*x8825*x8829))+(((-1.0)*r22*x8828)));
evalcond[1]=((((-1.0)*x8827*x8829))+(((-1.0)*r12*x8828))+((r10*x8830)));
evalcond[2]=(((x8823*x8824))+(((-1.0)*r02*x8829))+(((-1.0)*gconst2*r00*x8828)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8828))+(((-1.0)*x8824*x8829))+((r00*x8830)));
evalcond[4]=(((x8823*x8825))+(((-1.0)*gconst2*r20*x8828))+((cj2*sj1))+(((-1.0)*cj1*x8826))+(((-1.0)*r22*x8829)));
evalcond[5]=(((x8823*x8827))+(((-1.0)*r12*x8829))+(((-1.0)*cj1*cj2))+(((-1.0)*gconst2*r10*x8828))+(((-1.0)*sj1*x8826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8831 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8831.valid){
continue;
}
CheckValue<IkReal> x8832=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8832.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8831.value)+(((1.5707963267949)*(x8832.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8833=IKsin(j4);
IkReal x8834=IKcos(j4);
IkReal x8835=(gconst1*r01);
IkReal x8836=(gconst1*r21);
IkReal x8837=((1.0)*sj2);
IkReal x8838=(gconst1*r11);
IkReal x8839=((1.0)*x8834);
IkReal x8840=((1.0)*x8833);
IkReal x8841=(gconst2*x8833);
evalcond[0]=(((r20*x8841))+(((-1.0)*x8836*x8840))+(((-1.0)*r22*x8839)));
evalcond[1]=((((-1.0)*x8838*x8840))+((r10*x8841))+(((-1.0)*r12*x8839)));
evalcond[2]=((((-1.0)*r02*x8840))+(((-1.0)*gconst2*r00*x8839))+((x8834*x8835)));
evalcond[3]=((-1.0)+(((-1.0)*x8835*x8840))+(((-1.0)*r02*x8839))+((r00*x8841)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*cj1*x8837))+(((-1.0)*r22*x8840))+((x8834*x8836))+(((-1.0)*gconst2*r20*x8839)));
evalcond[5]=((((-1.0)*cj1*cj2))+(((-1.0)*sj1*x8837))+(((-1.0)*gconst2*r10*x8839))+((x8834*x8838))+(((-1.0)*r12*x8840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8844 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8844.valid){
continue;
}
IkReal x8842=((-1.0)*(x8844.value));
IkReal x8843=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x8842;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8842;
IkReal gconst1=((-1.0)*r21*x8843);
IkReal gconst2=(r20*x8843);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8847 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8847.valid){
continue;
}
IkReal x8845=((-1.0)*(x8847.value));
IkReal x8846=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x8845;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8845;
IkReal gconst1=((-1.0)*r21*x8846);
IkReal gconst2=(r20*x8846);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8850 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8850.valid){
continue;
}
IkReal x8848=((-1.0)*(x8850.value));
IkReal x8849=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x8848;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8848;
IkReal gconst1=((-1.0)*r21*x8849);
IkReal gconst2=(r20*x8849);
IkReal x8851=r22*r22;
IkReal x8852=(cj1*r02*sj2);
IkReal x8853=(cj2*r02*sj1);
CheckValue<IkReal> x8857=IKPowWithIntegerCheck(((-1.0)+x8851),-1);
if(!x8857.valid){
continue;
}
IkReal x8854=x8857.value;
if((((1.0)+(((-1.0)*x8851)))) < -0.00001)
continue;
IkReal x8855=IKsqrt(((1.0)+(((-1.0)*x8851))));
IkReal x8856=(r22*x8854*x8855);
j4eval[0]=((IKabs((x8852+(((-1.0)*x8853)))))+(IKabs(((((-1.0)*x8852*x8856))+((x8853*x8856))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8858=((1.0)*gconst1);
IkReal x8859=(cj2*sj1);
IkReal x8860=(cj1*sj2);
IkReal x8861=((1.0)*gconst2);
CheckValue<IkReal> x8862 = IKatan2WithCheck(IkReal((((gconst2*r00*x8859))+(((-1.0)*r00*x8860*x8861))+(((-1.0)*r01*x8858*x8859))+((gconst1*r01*x8860)))),IkReal((((r02*x8860))+(((-1.0)*r02*x8859)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8862.valid){
continue;
}
CheckValue<IkReal> x8863=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x8858))+(((-1.0)*r11*x8861)))),-1);
if(!x8863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8862.value)+(((1.5707963267949)*(x8863.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8864=IKcos(j4);
IkReal x8865=IKsin(j4);
IkReal x8866=(gconst1*r01);
IkReal x8867=((1.0)*sj2);
IkReal x8868=(gconst1*r21);
IkReal x8869=(gconst1*r11);
IkReal x8870=((1.0)*x8864);
IkReal x8871=(gconst2*x8864);
IkReal x8872=((1.0)*x8865);
IkReal x8873=(gconst2*x8865);
evalcond[0]=(((r02*x8865))+(((-1.0)*x8866*x8870))+((r00*x8871)));
evalcond[1]=(((r20*x8873))+(((-1.0)*r22*x8870))+(((-1.0)*x8868*x8872)));
evalcond[2]=(((r10*x8873))+(((-1.0)*x8869*x8872))+(((-1.0)*r12*x8870)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8870))+(((-1.0)*x8866*x8872))+((r00*x8873)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*cj1*x8867))+((r20*x8871))+(((-1.0)*x8868*x8870))+((r22*x8865)));
evalcond[5]=(((r10*x8871))+(((-1.0)*x8869*x8870))+(((-1.0)*cj1*cj2))+(((-1.0)*sj1*x8867))+((r12*x8865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8874=(gconst1*r01);
IkReal x8875=(gconst2*r00);
CheckValue<IkReal> x8876=IKPowWithIntegerCheck(IKsign(((x8874*x8874)+(((-2.0)*x8874*x8875))+(x8875*x8875)+(r02*r02))),-1);
if(!x8876.valid){
continue;
}
CheckValue<IkReal> x8877 = IKatan2WithCheck(IkReal(((((-1.0)*x8874))+x8875)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8876.value)))+(x8877.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8878=IKcos(j4);
IkReal x8879=IKsin(j4);
IkReal x8880=(gconst1*r01);
IkReal x8881=((1.0)*sj2);
IkReal x8882=(gconst1*r21);
IkReal x8883=(gconst1*r11);
IkReal x8884=((1.0)*x8878);
IkReal x8885=(gconst2*x8878);
IkReal x8886=((1.0)*x8879);
IkReal x8887=(gconst2*x8879);
evalcond[0]=(((r02*x8879))+((r00*x8885))+(((-1.0)*x8880*x8884)));
evalcond[1]=((((-1.0)*r22*x8884))+(((-1.0)*x8882*x8886))+((r20*x8887)));
evalcond[2]=((((-1.0)*x8883*x8886))+(((-1.0)*r12*x8884))+((r10*x8887)));
evalcond[3]=((-1.0)+((r00*x8887))+(((-1.0)*r02*x8884))+(((-1.0)*x8880*x8886)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8882*x8884))+(((-1.0)*cj1*x8881))+((r20*x8885))+((r22*x8879)));
evalcond[5]=((((-1.0)*x8883*x8884))+(((-1.0)*sj1*x8881))+(((-1.0)*cj1*cj2))+((r10*x8885))+((r12*x8879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8888 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8888.valid){
continue;
}
CheckValue<IkReal> x8889=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8888.value)+(((1.5707963267949)*(x8889.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8890=IKcos(j4);
IkReal x8891=IKsin(j4);
IkReal x8892=(gconst1*r01);
IkReal x8893=((1.0)*sj2);
IkReal x8894=(gconst1*r21);
IkReal x8895=(gconst1*r11);
IkReal x8896=((1.0)*x8890);
IkReal x8897=(gconst2*x8890);
IkReal x8898=((1.0)*x8891);
IkReal x8899=(gconst2*x8891);
evalcond[0]=(((r00*x8897))+(((-1.0)*x8892*x8896))+((r02*x8891)));
evalcond[1]=(((r20*x8899))+(((-1.0)*x8894*x8898))+(((-1.0)*r22*x8896)));
evalcond[2]=((((-1.0)*x8895*x8898))+(((-1.0)*r12*x8896))+((r10*x8899)));
evalcond[3]=((-1.0)+((r00*x8899))+(((-1.0)*x8892*x8898))+(((-1.0)*r02*x8896)));
evalcond[4]=(((cj2*sj1))+((r20*x8897))+(((-1.0)*x8894*x8896))+((r22*x8891))+(((-1.0)*cj1*x8893)));
evalcond[5]=((((-1.0)*cj1*cj2))+((r12*x8891))+(((-1.0)*x8895*x8896))+((r10*x8897))+(((-1.0)*sj1*x8893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x8900=((-1.0)*py);
CheckValue<IkReal> x8902 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8902.valid){
continue;
}
IkReal x8901=((-1.0)*(x8902.value));
sj5=gconst1;
cj5=gconst2;
j5=x8901;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8900);
rxp0_2=(py*r00);
rxp1_0=(r21*x8900);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8901;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x8903=((1.0)*sj3);
IkReal x8904=(r01*r21);
IkReal x8905=(r00*r20);
j4eval[0]=(x8905+x8904);
j4eval[1]=((((-1.0)*x8903*x8904))+(((-1.0)*x8903*x8905)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8906=((-1.0)*py);
CheckValue<IkReal> x8908 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8908.valid){
continue;
}
IkReal x8907=((-1.0)*(x8908.value));
sj5=gconst1;
cj5=gconst2;
j5=x8907;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8906);
rxp0_2=(py*r00);
rxp1_0=(r21*x8906);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8907;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x8909=(r00*r20);
IkReal x8910=((1.0)*cj3);
IkReal x8911=(r01*r21);
j4eval[0]=(x8909+x8911);
j4eval[1]=((((-1.0)*x8909*x8910))+(((-1.0)*x8910*x8911)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8912=((-1.0)*py);
CheckValue<IkReal> x8914 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8914.valid){
continue;
}
IkReal x8913=((-1.0)*(x8914.value));
sj5=gconst1;
cj5=gconst2;
j5=x8913;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8912);
rxp0_2=(py*r00);
rxp1_0=(r21*x8912);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8913;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x8915=((1.0)*cj3);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r01*r21*x8915))+(((-1.0)*r00*r20*x8915)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8916=((1.0)*gconst2);
CheckValue<IkReal> x8917=IKPowWithIntegerCheck(r12,-1);
if(!x8917.valid){
continue;
}
CheckValue<IkReal> x8918=IKPowWithIntegerCheck(sj3,-1);
if(!x8918.valid){
continue;
}
CheckValue<IkReal> x8919=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x8916))+((cj3*gconst1*r01))),-1);
if(!x8919.valid){
continue;
}
if( IKabs(((x8917.value)*(x8918.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8919.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x8916)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8917.value)*(x8918.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x8919.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x8916))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x8917.value)*(x8918.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x8919.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x8916))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8920=IKsin(j4);
IkReal x8921=IKcos(j4);
IkReal x8922=(cj2*sj1);
IkReal x8923=((1.0)*sj3);
IkReal x8924=(gconst1*sj3);
IkReal x8925=(sj1*sj2);
IkReal x8926=((1.0)*cj3);
IkReal x8927=((1.0)*cj1);
IkReal x8928=(gconst2*r01);
IkReal x8929=(gconst2*r21);
IkReal x8930=(sj2*x8927);
IkReal x8931=(r12*x8920);
IkReal x8932=(gconst2*x8921);
IkReal x8933=(gconst2*x8920);
IkReal x8934=((1.0)*gconst1*x8920);
IkReal x8935=(cj3*gconst1*x8921);
evalcond[0]=((-1.0)*r12*x8921);
evalcond[1]=(((r20*x8933))+(((-1.0)*r21*x8934)));
evalcond[2]=((-1.0)+(((-1.0)*r01*x8934))+((r00*x8933)));
evalcond[3]=((((-1.0)*x8923*x8931))+x8922+(((-1.0)*x8930)));
evalcond[4]=((((-1.0)*cj2*x8927))+(((-1.0)*x8926*x8931))+(((-1.0)*x8925)));
evalcond[5]=((((-1.0)*r00*x8926*x8932))+((r01*x8935))+((r00*x8924))+((sj3*x8928)));
evalcond[6]=(((r01*x8921*x8924))+(((-1.0)*x8926*x8928))+(((-1.0)*gconst1*r00*x8926))+(((-1.0)*r00*x8923*x8932)));
evalcond[7]=(((r20*x8924))+x8922+(((-1.0)*x8930))+(((-1.0)*r20*x8926*x8932))+((sj3*x8929))+((r21*x8935)));
evalcond[8]=((((-1.0)*x8926*x8929))+x8925+((r21*x8921*x8924))+((cj1*cj2))+(((-1.0)*r20*x8923*x8932))+(((-1.0)*gconst1*r20*x8926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8936=((1.0)*gconst2);
IkReal x8937=(gconst1*r01);
CheckValue<IkReal> x8938=IKPowWithIntegerCheck(((((-1.0)*x8937))+((gconst2*r00))),-1);
if(!x8938.valid){
continue;
}
CheckValue<IkReal> x8939=IKPowWithIntegerCheck((((cj3*x8937))+(((-1.0)*cj3*r00*x8936))),-1);
if(!x8939.valid){
continue;
}
if( IKabs(x8938.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8939.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x8936)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x8938.value)+IKsqr(((x8939.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x8936))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x8938.value, ((x8939.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x8936))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8940=IKsin(j4);
IkReal x8941=IKcos(j4);
IkReal x8942=(cj2*sj1);
IkReal x8943=((1.0)*sj3);
IkReal x8944=(gconst1*sj3);
IkReal x8945=(sj1*sj2);
IkReal x8946=((1.0)*cj3);
IkReal x8947=((1.0)*cj1);
IkReal x8948=(gconst2*r01);
IkReal x8949=(gconst2*r21);
IkReal x8950=(sj2*x8947);
IkReal x8951=(r12*x8940);
IkReal x8952=(gconst2*x8941);
IkReal x8953=(gconst2*x8940);
IkReal x8954=((1.0)*gconst1*x8940);
IkReal x8955=(cj3*gconst1*x8941);
evalcond[0]=((-1.0)*r12*x8941);
evalcond[1]=(((r20*x8953))+(((-1.0)*r21*x8954)));
evalcond[2]=((-1.0)+(((-1.0)*r01*x8954))+((r00*x8953)));
evalcond[3]=(x8942+(((-1.0)*x8943*x8951))+(((-1.0)*x8950)));
evalcond[4]=((((-1.0)*x8946*x8951))+(((-1.0)*cj2*x8947))+(((-1.0)*x8945)));
evalcond[5]=(((r01*x8955))+((r00*x8944))+((sj3*x8948))+(((-1.0)*r00*x8946*x8952)));
evalcond[6]=((((-1.0)*gconst1*r00*x8946))+(((-1.0)*r00*x8943*x8952))+(((-1.0)*x8946*x8948))+((r01*x8941*x8944)));
evalcond[7]=(x8942+((r20*x8944))+((sj3*x8949))+(((-1.0)*r20*x8946*x8952))+((r21*x8955))+(((-1.0)*x8950)));
evalcond[8]=((((-1.0)*gconst1*r20*x8946))+(((-1.0)*r20*x8943*x8952))+(((-1.0)*x8946*x8949))+x8945+((cj1*cj2))+((r21*x8941*x8944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8956=(gconst2*r00);
IkReal x8957=(gconst1*r01);
CheckValue<IkReal> x8958=IKPowWithIntegerCheck((x8956+(((-1.0)*x8957))),-1);
if(!x8958.valid){
continue;
}
CheckValue<IkReal> x8959=IKPowWithIntegerCheck(((((-1.0)*sj3*x8956))+((sj3*x8957))),-1);
if(!x8959.valid){
continue;
}
if( IKabs(x8958.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8959.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x8958.value)+IKsqr(((x8959.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x8958.value, ((x8959.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8960=IKsin(j4);
IkReal x8961=IKcos(j4);
IkReal x8962=(cj2*sj1);
IkReal x8963=((1.0)*sj3);
IkReal x8964=(gconst1*sj3);
IkReal x8965=(sj1*sj2);
IkReal x8966=((1.0)*cj3);
IkReal x8967=((1.0)*cj1);
IkReal x8968=(gconst2*r01);
IkReal x8969=(gconst2*r21);
IkReal x8970=(sj2*x8967);
IkReal x8971=(r12*x8960);
IkReal x8972=(gconst2*x8961);
IkReal x8973=(gconst2*x8960);
IkReal x8974=((1.0)*gconst1*x8960);
IkReal x8975=(cj3*gconst1*x8961);
evalcond[0]=((-1.0)*r12*x8961);
evalcond[1]=(((r20*x8973))+(((-1.0)*r21*x8974)));
evalcond[2]=((-1.0)+((r00*x8973))+(((-1.0)*r01*x8974)));
evalcond[3]=((((-1.0)*x8970))+x8962+(((-1.0)*x8963*x8971)));
evalcond[4]=((((-1.0)*cj2*x8967))+(((-1.0)*x8965))+(((-1.0)*x8966*x8971)));
evalcond[5]=(((r01*x8975))+((r00*x8964))+((sj3*x8968))+(((-1.0)*r00*x8966*x8972)));
evalcond[6]=((((-1.0)*gconst1*r00*x8966))+((r01*x8961*x8964))+(((-1.0)*x8966*x8968))+(((-1.0)*r00*x8963*x8972)));
evalcond[7]=(((r21*x8975))+(((-1.0)*x8970))+x8962+((sj3*x8969))+(((-1.0)*r20*x8966*x8972))+((r20*x8964)));
evalcond[8]=((((-1.0)*gconst1*r20*x8966))+(((-1.0)*x8966*x8969))+(((-1.0)*r20*x8963*x8972))+x8965+((r21*x8961*x8964))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8976=gconst2*gconst2;
IkReal x8977=gconst1*gconst1;
IkReal x8978=(r00*r11);
IkReal x8979=(gconst1*gconst2);
IkReal x8980=((1.0)*sj3);
IkReal x8981=(r01*r11);
IkReal x8982=((1.0)*cj3*r10);
IkReal x8983=((1.0)*cj3*r12);
CheckValue<IkReal> x8984=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((sj3*x8977*x8981))+(((-1.0)*x8978*x8979*x8980))+((r00*r10*sj3*x8976))+(((-1.0)*r01*r10*x8979*x8980)))),-1);
if(!x8984.valid){
continue;
}
CheckValue<IkReal> x8985 = IKatan2WithCheck(IkReal(((((-1.0)*gconst1*r00*x8983))+(((-1.0)*gconst2*r01*x8983)))),IkReal(((((-1.0)*r00*x8979*x8982))+(((-1.0)*r01*x8976*x8982))+((cj3*x8977*x8978))+((cj3*x8979*x8981)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8984.value)))+(x8985.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8986=IKsin(j4);
IkReal x8987=IKcos(j4);
IkReal x8988=(cj2*sj1);
IkReal x8989=(r00*sj3);
IkReal x8990=(gconst2*r20);
IkReal x8991=(cj3*gconst1);
IkReal x8992=(gconst1*r01);
IkReal x8993=((1.0)*cj1);
IkReal x8994=(sj1*sj2);
IkReal x8995=(cj3*gconst2);
IkReal x8996=(gconst1*r11);
IkReal x8997=(gconst1*r21);
IkReal x8998=(gconst1*sj3);
IkReal x8999=(gconst2*sj3);
IkReal x9000=(sj2*x8993);
IkReal x9001=((1.0)*x8987);
IkReal x9002=((1.0)*x8986);
IkReal x9003=((1.0)*x8995);
IkReal x9004=(gconst2*x8986);
IkReal x9005=(sj3*x8987);
evalcond[0]=((((-1.0)*r22*x9001))+((x8986*x8990))+(((-1.0)*x8997*x9002)));
evalcond[1]=((((-1.0)*x8996*x9002))+(((-1.0)*r12*x9001))+((r10*x9004)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x9001))+(((-1.0)*x8992*x9002))+((r00*x9004)));
evalcond[3]=(((gconst1*x8989))+((r01*x8999))+((r01*x8987*x8991))+(((-1.0)*cj3*r02*x9002))+(((-1.0)*r00*x8995*x9001)));
evalcond[4]=(((x8992*x9005))+(((-1.0)*r02*sj3*x9002))+(((-1.0)*gconst2*x8989*x9001))+(((-1.0)*r01*x9003))+(((-1.0)*r00*x8991)));
evalcond[5]=((((-1.0)*x9000))+((r21*x8999))+((r20*x8998))+x8988+(((-1.0)*cj3*r22*x9002))+(((-1.0)*cj3*x8990*x9001))+((r21*x8987*x8991)));
evalcond[6]=((((-1.0)*sj3*x8990*x9001))+(((-1.0)*r21*x9003))+x8994+(((-1.0)*r20*x8991))+(((-1.0)*r22*sj3*x9002))+((cj1*cj2))+((x8997*x9005)));
evalcond[7]=((((-1.0)*r10*x8995*x9001))+((r11*x8999))+(((-1.0)*cj3*r12*x9002))+((r10*x8998))+(((-1.0)*cj2*x8993))+(((-1.0)*x8994))+((r11*x8987*x8991)));
evalcond[8]=((((-1.0)*x9000))+(((-1.0)*r10*x8999*x9001))+(((-1.0)*r11*x9003))+x8988+((x8996*x9005))+(((-1.0)*r10*x8991))+(((-1.0)*r12*sj3*x9002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9006=gconst1*gconst1;
IkReal x9007=gconst2*gconst2;
IkReal x9008=(r00*sj3);
IkReal x9009=((1.0)*r11);
IkReal x9010=(r01*sj3);
IkReal x9011=(gconst1*gconst2);
IkReal x9012=(cj3*r01);
IkReal x9013=(cj3*r00);
IkReal x9014=(r10*x9007);
CheckValue<IkReal> x9015=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+(((-1.0)*x9009*x9011*x9013))+(((-1.0)*r10*x9011*x9012))+((r11*x9006*x9012))+((x9013*x9014)))),-1);
if(!x9015.valid){
continue;
}
CheckValue<IkReal> x9016 = IKatan2WithCheck(IkReal((((gconst2*r12*x9010))+((gconst1*r12*x9008)))),IkReal(((((-1.0)*x9006*x9008*x9009))+((x9010*x9014))+((r10*x9008*x9011))+(((-1.0)*x9009*x9010*x9011)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9015.value)))+(x9016.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9017=IKsin(j4);
IkReal x9018=IKcos(j4);
IkReal x9019=(cj2*sj1);
IkReal x9020=(r00*sj3);
IkReal x9021=(gconst2*r20);
IkReal x9022=(cj3*gconst1);
IkReal x9023=(gconst1*r01);
IkReal x9024=((1.0)*cj1);
IkReal x9025=(sj1*sj2);
IkReal x9026=(cj3*gconst2);
IkReal x9027=(gconst1*r11);
IkReal x9028=(gconst1*r21);
IkReal x9029=(gconst1*sj3);
IkReal x9030=(gconst2*sj3);
IkReal x9031=(sj2*x9024);
IkReal x9032=((1.0)*x9018);
IkReal x9033=((1.0)*x9017);
IkReal x9034=((1.0)*x9026);
IkReal x9035=(gconst2*x9017);
IkReal x9036=(sj3*x9018);
evalcond[0]=(((x9017*x9021))+(((-1.0)*x9028*x9033))+(((-1.0)*r22*x9032)));
evalcond[1]=((((-1.0)*r12*x9032))+(((-1.0)*x9027*x9033))+((r10*x9035)));
evalcond[2]=((-1.0)+((r00*x9035))+(((-1.0)*x9023*x9033))+(((-1.0)*r02*x9032)));
evalcond[3]=(((r01*x9018*x9022))+((gconst1*x9020))+((r01*x9030))+(((-1.0)*r00*x9026*x9032))+(((-1.0)*cj3*r02*x9033)));
evalcond[4]=((((-1.0)*r02*sj3*x9033))+(((-1.0)*gconst2*x9020*x9032))+((x9023*x9036))+(((-1.0)*r01*x9034))+(((-1.0)*r00*x9022)));
evalcond[5]=((((-1.0)*x9031))+((r21*x9030))+x9019+((r21*x9018*x9022))+(((-1.0)*cj3*x9021*x9032))+(((-1.0)*cj3*r22*x9033))+((r20*x9029)));
evalcond[6]=((((-1.0)*r20*x9022))+((x9028*x9036))+x9025+(((-1.0)*r22*sj3*x9033))+(((-1.0)*sj3*x9021*x9032))+(((-1.0)*r21*x9034))+((cj1*cj2)));
evalcond[7]=((((-1.0)*cj2*x9024))+(((-1.0)*cj3*r12*x9033))+((r10*x9029))+(((-1.0)*r10*x9026*x9032))+((r11*x9030))+((r11*x9018*x9022))+(((-1.0)*x9025)));
evalcond[8]=(((x9027*x9036))+(((-1.0)*r10*x9022))+(((-1.0)*r11*x9034))+(((-1.0)*x9031))+x9019+(((-1.0)*r12*sj3*x9033))+(((-1.0)*r10*x9030*x9032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9037 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9037.valid){
continue;
}
CheckValue<IkReal> x9038=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9038.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9037.value)+(((1.5707963267949)*(x9038.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9039=IKsin(j4);
IkReal x9040=IKcos(j4);
IkReal x9041=(cj2*sj1);
IkReal x9042=(r00*sj3);
IkReal x9043=(gconst2*r20);
IkReal x9044=(cj3*gconst1);
IkReal x9045=(gconst1*r01);
IkReal x9046=((1.0)*cj1);
IkReal x9047=(sj1*sj2);
IkReal x9048=(cj3*gconst2);
IkReal x9049=(gconst1*r11);
IkReal x9050=(gconst1*r21);
IkReal x9051=(gconst1*sj3);
IkReal x9052=(gconst2*sj3);
IkReal x9053=(sj2*x9046);
IkReal x9054=((1.0)*x9040);
IkReal x9055=((1.0)*x9039);
IkReal x9056=((1.0)*x9048);
IkReal x9057=(gconst2*x9039);
IkReal x9058=(sj3*x9040);
evalcond[0]=(((x9039*x9043))+(((-1.0)*r22*x9054))+(((-1.0)*x9050*x9055)));
evalcond[1]=((((-1.0)*x9049*x9055))+(((-1.0)*r12*x9054))+((r10*x9057)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x9054))+((r00*x9057))+(((-1.0)*x9045*x9055)));
evalcond[3]=(((gconst1*x9042))+(((-1.0)*r00*x9048*x9054))+(((-1.0)*cj3*r02*x9055))+((r01*x9052))+((r01*x9040*x9044)));
evalcond[4]=((((-1.0)*r00*x9044))+(((-1.0)*r01*x9056))+(((-1.0)*r02*sj3*x9055))+((x9045*x9058))+(((-1.0)*gconst2*x9042*x9054)));
evalcond[5]=(((r21*x9040*x9044))+((r20*x9051))+x9041+(((-1.0)*cj3*r22*x9055))+(((-1.0)*x9053))+(((-1.0)*cj3*x9043*x9054))+((r21*x9052)));
evalcond[6]=((((-1.0)*r20*x9044))+((x9050*x9058))+x9047+(((-1.0)*r22*sj3*x9055))+(((-1.0)*sj3*x9043*x9054))+((cj1*cj2))+(((-1.0)*r21*x9056)));
evalcond[7]=((((-1.0)*x9047))+(((-1.0)*cj2*x9046))+((r11*x9052))+((r10*x9051))+(((-1.0)*r10*x9048*x9054))+((r11*x9040*x9044))+(((-1.0)*cj3*r12*x9055)));
evalcond[8]=((((-1.0)*r10*x9052*x9054))+((x9049*x9058))+x9041+(((-1.0)*r11*x9056))+(((-1.0)*r10*x9044))+(((-1.0)*x9053))+(((-1.0)*r12*sj3*x9055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9061 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9061.valid){
continue;
}
IkReal x9059=((-1.0)*(x9061.value));
IkReal x9060=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x9059;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9059;
IkReal gconst1=((-1.0)*r21*x9060);
IkReal gconst2=(r20*x9060);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9064 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9064.valid){
continue;
}
IkReal x9062=((-1.0)*(x9064.value));
IkReal x9063=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x9062;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9062;
IkReal gconst1=((-1.0)*r21*x9063);
IkReal gconst2=(r20*x9063);
CheckValue<IkReal> x9072=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9072.valid){
continue;
}
IkReal x9065=x9072.value;
IkReal x9066=(cj3*x9065);
IkReal x9067=(r11*x9066);
IkReal x9068=(r01*x9066);
IkReal x9069=(r00*x9066);
IkReal x9070=(r10*x9066);
IkReal x9071=(r20*r21*x9066);
j4eval[0]=IKsign((((cj3*r02*r12))+((r10*r20*r21*x9068))+((r01*x9067*(r21*r21)))+((r00*r20*r21*x9067))+((r10*x9069*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9075 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9075.valid){
continue;
}
IkReal x9073=((-1.0)*(x9075.value));
IkReal x9074=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x9073;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9073;
IkReal gconst1=((-1.0)*r21*x9074);
IkReal gconst2=(r20*x9074);
CheckValue<IkReal> x9083=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9083.valid){
continue;
}
IkReal x9076=x9083.value;
IkReal x9077=(sj3*x9076);
IkReal x9078=(r11*x9077);
IkReal x9079=(r00*x9077);
IkReal x9080=(r01*x9077);
IkReal x9081=(r10*x9077);
IkReal x9082=(r20*r21*x9077);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x9078*(r21*r21)))+((r10*x9079*(r20*r20)))+((r10*r20*r21*x9080))+((r00*r20*r21*x9078))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9086 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9086.valid){
continue;
}
IkReal x9084=((-1.0)*(x9086.value));
IkReal x9085=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x9084;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9084;
IkReal gconst1=((-1.0)*r21*x9085);
IkReal gconst2=(r20*x9085);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9089 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9089.valid){
continue;
}
IkReal x9087=((-1.0)*(x9089.value));
IkReal x9088=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x9087;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9087;
IkReal gconst1=((-1.0)*r21*x9088);
IkReal gconst2=(r20*x9088);
IkReal x9090=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9094=IKPowWithIntegerCheck(x9090,-1);
if(!x9094.valid){
continue;
}
IkReal x9091=x9094.value;
IkReal x9092=((1.0)*x9091);
IkReal x9093=((((-1.0)*x9092*(r11*r11)*(r21*r21)))+(((-1.0)*x9092*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x9091))+(((-1.0)*(r12*r12))));
j4eval[0]=x9093;
j4eval[1]=r12;
j4eval[2]=x9090;
j4eval[3]=IKsign(x9093);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9097 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9097.valid){
continue;
}
IkReal x9095=((-1.0)*(x9097.value));
IkReal x9096=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x9095;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9095;
IkReal gconst1=((-1.0)*r21*x9096);
IkReal gconst2=(r20*x9096);
IkReal x9098=r22*r22;
IkReal x9099=(r02*sj1*sj2);
IkReal x9100=(cj1*cj2*r02);
CheckValue<IkReal> x9104=IKPowWithIntegerCheck(((-1.0)+x9098),-1);
if(!x9104.valid){
continue;
}
IkReal x9101=x9104.value;
if((((1.0)+(((-1.0)*x9098)))) < -0.00001)
continue;
IkReal x9102=IKsqrt(((1.0)+(((-1.0)*x9098))));
IkReal x9103=(r22*x9101*x9102);
j4eval[0]=((IKabs((((x9100*x9103))+((x9099*x9103)))))+(IKabs((x9100+x9099))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9105=(sj1*sj2);
IkReal x9106=(cj1*cj2);
IkReal x9107=(gconst2*r00);
IkReal x9108=((1.0)*gconst1*r01);
CheckValue<IkReal> x9109 = IKatan2WithCheck(IkReal((((r02*x9106))+((r02*x9105)))),IkReal((((x9106*x9107))+(((-1.0)*x9106*x9108))+((x9105*x9107))+(((-1.0)*x9105*x9108)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9109.valid){
continue;
}
CheckValue<IkReal> x9110=IKPowWithIntegerCheck(IKsign(((x9107*x9107)+(((-2.0)*gconst1*r01*x9107))+(((gconst1*gconst1)*(r01*r01)))+(r02*r02))),-1);
if(!x9110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9109.value)+(((1.5707963267949)*(x9110.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9111=IKsin(j4);
IkReal x9112=IKcos(j4);
IkReal x9113=(gconst1*r01);
IkReal x9114=(gconst1*r21);
IkReal x9115=(gconst1*r11);
IkReal x9116=((1.0)*x9112);
IkReal x9117=((1.0)*x9111);
IkReal x9118=(gconst2*x9111);
evalcond[0]=((((-1.0)*x9114*x9117))+((r20*x9118))+(((-1.0)*r22*x9116)));
evalcond[1]=((((-1.0)*x9113*x9117))+((r00*x9118))+(((-1.0)*r02*x9116)));
evalcond[2]=(((x9112*x9115))+(((-1.0)*gconst2*r10*x9116))+(((-1.0)*r12*x9117)));
evalcond[3]=((-1.0)+(((-1.0)*x9115*x9117))+((r10*x9118))+(((-1.0)*r12*x9116)));
evalcond[4]=(((x9112*x9113))+((sj1*sj2))+(((-1.0)*gconst2*r00*x9116))+(((-1.0)*r02*x9117))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+((x9112*x9114))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r20*x9116))+(((-1.0)*r22*x9117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9119=(gconst1*r11);
IkReal x9120=(gconst2*r10);
CheckValue<IkReal> x9121 = IKatan2WithCheck(IkReal((x9119+(((-1.0)*x9120)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9121.valid){
continue;
}
CheckValue<IkReal> x9122=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((2.0)*x9119*x9120))+(((-1.0)*(x9120*x9120)))+(((-1.0)*(x9119*x9119))))),-1);
if(!x9122.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9121.value)+(((1.5707963267949)*(x9122.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9123=IKsin(j4);
IkReal x9124=IKcos(j4);
IkReal x9125=(gconst1*r01);
IkReal x9126=(gconst1*r21);
IkReal x9127=(gconst1*r11);
IkReal x9128=((1.0)*x9124);
IkReal x9129=((1.0)*x9123);
IkReal x9130=(gconst2*x9123);
evalcond[0]=(((r20*x9130))+(((-1.0)*r22*x9128))+(((-1.0)*x9126*x9129)));
evalcond[1]=((((-1.0)*r02*x9128))+((r00*x9130))+(((-1.0)*x9125*x9129)));
evalcond[2]=((((-1.0)*r12*x9129))+((x9124*x9127))+(((-1.0)*gconst2*r10*x9128)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9128))+((r10*x9130))+(((-1.0)*x9127*x9129)));
evalcond[4]=((((-1.0)*gconst2*r00*x9128))+(((-1.0)*r02*x9129))+((sj1*sj2))+((x9124*x9125))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9128))+(((-1.0)*cj1*sj2))+((x9124*x9126))+(((-1.0)*r22*x9129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9131=((1.0)*gconst1);
CheckValue<IkReal> x9132=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9131))+(((-1.0)*gconst2*r01)))),-1);
if(!x9132.valid){
continue;
}
CheckValue<IkReal> x9133 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x9131))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9133.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9132.value)))+(x9133.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9134=IKsin(j4);
IkReal x9135=IKcos(j4);
IkReal x9136=(gconst1*r01);
IkReal x9137=(gconst1*r21);
IkReal x9138=(gconst1*r11);
IkReal x9139=((1.0)*x9135);
IkReal x9140=((1.0)*x9134);
IkReal x9141=(gconst2*x9134);
evalcond[0]=(((r20*x9141))+(((-1.0)*r22*x9139))+(((-1.0)*x9137*x9140)));
evalcond[1]=(((r00*x9141))+(((-1.0)*r02*x9139))+(((-1.0)*x9136*x9140)));
evalcond[2]=((((-1.0)*gconst2*r10*x9139))+(((-1.0)*r12*x9140))+((x9135*x9138)));
evalcond[3]=((-1.0)+((r10*x9141))+(((-1.0)*r12*x9139))+(((-1.0)*x9138*x9140)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r02*x9140))+((cj1*cj2))+(((-1.0)*gconst2*r00*x9139))+((x9135*x9136)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x9140))+(((-1.0)*gconst2*r20*x9139))+((x9135*x9137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9144 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9144.valid){
continue;
}
IkReal x9142=((-1.0)*(x9144.value));
IkReal x9143=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x9142;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9142;
IkReal gconst1=((-1.0)*r21*x9143);
IkReal gconst2=(r20*x9143);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x9147 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9147.valid){
continue;
}
IkReal x9145=((-1.0)*(x9147.value));
IkReal x9146=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x9145;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9145;
IkReal gconst1=((-1.0)*r21*x9146);
IkReal gconst2=(r20*x9146);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9150 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9150.valid){
continue;
}
IkReal x9148=((-1.0)*(x9150.value));
IkReal x9149=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x9148;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9148;
IkReal gconst1=((-1.0)*r21*x9149);
IkReal gconst2=(r20*x9149);
IkReal x9151=r22*r22;
IkReal x9152=(cj1*r12*sj2);
IkReal x9153=(cj2*r12*sj1);
CheckValue<IkReal> x9157=IKPowWithIntegerCheck(((-1.0)+x9151),-1);
if(!x9157.valid){
continue;
}
IkReal x9154=x9157.value;
if((((1.0)+(((-1.0)*x9151)))) < -0.00001)
continue;
IkReal x9155=IKsqrt(((1.0)+(((-1.0)*x9151))));
IkReal x9156=(r22*x9154*x9155);
j4eval[0]=((IKabs((x9152+(((-1.0)*x9153)))))+(IKabs(((((-1.0)*x9152*x9156))+((x9153*x9156))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9158=(cj2*sj1);
IkReal x9159=(gconst1*r11);
IkReal x9160=(gconst2*r10);
IkReal x9161=(cj1*sj2);
CheckValue<IkReal> x9162 = IKatan2WithCheck(IkReal(((((-1.0)*x9160*x9161))+((x9159*x9161))+((x9158*x9160))+(((-1.0)*x9158*x9159)))),IkReal(((((-1.0)*r12*x9158))+((r12*x9161)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9162.valid){
continue;
}
CheckValue<IkReal> x9163=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9163.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9162.value)+(((1.5707963267949)*(x9163.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9164=IKcos(j4);
IkReal x9165=IKsin(j4);
IkReal x9166=(gconst1*r01);
IkReal x9167=(gconst1*r21);
IkReal x9168=(gconst1*r11);
IkReal x9169=((1.0)*x9164);
IkReal x9170=(gconst2*x9164);
IkReal x9171=((1.0)*x9165);
IkReal x9172=(gconst2*x9165);
evalcond[0]=(((r10*x9170))+(((-1.0)*x9168*x9169))+((r12*x9165)));
evalcond[1]=((((-1.0)*x9167*x9171))+(((-1.0)*r22*x9169))+((r20*x9172)));
evalcond[2]=(((r00*x9172))+(((-1.0)*r02*x9169))+(((-1.0)*x9166*x9171)));
evalcond[3]=((-1.0)+((r10*x9172))+(((-1.0)*x9168*x9171))+(((-1.0)*r12*x9169)));
evalcond[4]=(((r00*x9170))+(((-1.0)*x9166*x9169))+((r02*x9165))+((sj1*sj2))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*x9167*x9169))+((r22*x9165))+((r20*x9170))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9173=(gconst1*r11);
IkReal x9174=(gconst2*r10);
CheckValue<IkReal> x9175 = IKatan2WithCheck(IkReal(((((-1.0)*x9173))+x9174)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9175.valid){
continue;
}
CheckValue<IkReal> x9176=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x9173*x9174))+(x9174*x9174)+(x9173*x9173))),-1);
if(!x9176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9175.value)+(((1.5707963267949)*(x9176.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9177=IKcos(j4);
IkReal x9178=IKsin(j4);
IkReal x9179=(gconst1*r01);
IkReal x9180=(gconst1*r21);
IkReal x9181=(gconst1*r11);
IkReal x9182=((1.0)*x9177);
IkReal x9183=(gconst2*x9177);
IkReal x9184=((1.0)*x9178);
IkReal x9185=(gconst2*x9178);
evalcond[0]=(((r10*x9183))+(((-1.0)*x9181*x9182))+((r12*x9178)));
evalcond[1]=((((-1.0)*r22*x9182))+((r20*x9185))+(((-1.0)*x9180*x9184)));
evalcond[2]=(((r00*x9185))+(((-1.0)*r02*x9182))+(((-1.0)*x9179*x9184)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9182))+((r10*x9185))+(((-1.0)*x9181*x9184)));
evalcond[4]=(((r00*x9183))+((r02*x9178))+(((-1.0)*x9179*x9182))+((sj1*sj2))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+((r20*x9183))+(((-1.0)*cj1*sj2))+((r22*x9178))+(((-1.0)*x9180*x9182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9186=((1.0)*gconst1);
CheckValue<IkReal> x9187=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9186)))),-1);
if(!x9187.valid){
continue;
}
CheckValue<IkReal> x9188 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x9186))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9187.value)))+(x9188.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9189=IKcos(j4);
IkReal x9190=IKsin(j4);
IkReal x9191=(gconst1*r01);
IkReal x9192=(gconst1*r21);
IkReal x9193=(gconst1*r11);
IkReal x9194=((1.0)*x9189);
IkReal x9195=(gconst2*x9189);
IkReal x9196=((1.0)*x9190);
IkReal x9197=(gconst2*x9190);
evalcond[0]=(((r10*x9195))+((r12*x9190))+(((-1.0)*x9193*x9194)));
evalcond[1]=((((-1.0)*r22*x9194))+((r20*x9197))+(((-1.0)*x9192*x9196)));
evalcond[2]=((((-1.0)*x9191*x9196))+((r00*x9197))+(((-1.0)*r02*x9194)));
evalcond[3]=((-1.0)+((r10*x9197))+(((-1.0)*r12*x9194))+(((-1.0)*x9193*x9196)));
evalcond[4]=((((-1.0)*x9191*x9194))+((r00*x9195))+((sj1*sj2))+((r02*x9190))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+((r22*x9190))+(((-1.0)*cj1*sj2))+((r20*x9195))+(((-1.0)*x9192*x9194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9198=((-1.0)*px);
CheckValue<IkReal> x9200 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9200.valid){
continue;
}
IkReal x9199=((-1.0)*(x9200.value));
sj5=gconst1;
cj5=gconst2;
j5=x9199;
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9198);
rxp1_1=(px*r21);
rxp1_2=(r11*x9198);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9199;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9201=((1.0)*sj3);
IkReal x9202=(r11*r21);
IkReal x9203=(r10*r20);
j4eval[0]=(x9203+x9202);
j4eval[1]=((((-1.0)*x9201*x9202))+(((-1.0)*x9201*x9203)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9204=((-1.0)*px);
CheckValue<IkReal> x9206 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9206.valid){
continue;
}
IkReal x9205=((-1.0)*(x9206.value));
sj5=gconst1;
cj5=gconst2;
j5=x9205;
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9204);
rxp1_1=(px*r21);
rxp1_2=(r11*x9204);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9205;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9207=(r10*r20);
IkReal x9208=((1.0)*cj3);
IkReal x9209=(r11*r21);
j4eval[0]=(x9207+x9209);
j4eval[1]=((((-1.0)*x9208*x9209))+(((-1.0)*x9207*x9208)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9210=((-1.0)*px);
CheckValue<IkReal> x9212 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9212.valid){
continue;
}
IkReal x9211=((-1.0)*(x9212.value));
sj5=gconst1;
cj5=gconst2;
j5=x9211;
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9210);
rxp1_1=(px*r21);
rxp1_2=(r11*x9210);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9211;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9213=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r20*x9213))+(((-1.0)*r11*r21*x9213)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9214=((1.0)*gconst2);
CheckValue<IkReal> x9215=IKPowWithIntegerCheck(cj3,-1);
if(!x9215.valid){
continue;
}
CheckValue<IkReal> x9216=IKPowWithIntegerCheck(r02,-1);
if(!x9216.valid){
continue;
}
CheckValue<IkReal> x9217=IKPowWithIntegerCheck(((((-1.0)*cj3*r10*x9214))+((cj3*gconst1*r11))),-1);
if(!x9217.valid){
continue;
}
if( IKabs(((x9215.value)*(x9216.value)*((((sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9217.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x9214)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9215.value)*(x9216.value)*((((sj1*sj2))+((cj1*cj2))))))+IKsqr(((x9217.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x9214))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9215.value)*(x9216.value)*((((sj1*sj2))+((cj1*cj2))))), ((x9217.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x9214))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9218=IKsin(j4);
IkReal x9219=IKcos(j4);
IkReal x9220=(sj1*sj2);
IkReal x9221=(cj1*cj2);
IkReal x9222=((1.0)*cj3);
IkReal x9223=(gconst1*r10);
IkReal x9224=(cj2*sj1);
IkReal x9225=(gconst2*r21);
IkReal x9226=(cj1*sj2);
IkReal x9227=(gconst1*sj3);
IkReal x9228=(gconst2*r11);
IkReal x9229=(cj3*gconst1);
IkReal x9230=((1.0)*sj3);
IkReal x9231=(gconst2*x9218);
IkReal x9232=(gconst2*x9219);
IkReal x9233=(r11*x9219);
IkReal x9234=(r02*x9218);
IkReal x9235=(r21*x9219);
IkReal x9236=(x9221+x9220);
IkReal x9237=((1.0)*gconst1*x9218);
evalcond[0]=((-1.0)*r02*x9219);
evalcond[1]=((((-1.0)*r21*x9237))+((r20*x9231)));
evalcond[2]=(x9236+(((-1.0)*x9222*x9234)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x9237))+((r10*x9231)));
evalcond[4]=(x9226+(((-1.0)*x9224))+(((-1.0)*x9230*x9234)));
evalcond[5]=(((x9229*x9233))+(((-1.0)*r10*x9222*x9232))+((sj3*x9223))+((sj3*x9228)));
evalcond[6]=((((-1.0)*r10*x9230*x9232))+(((-1.0)*x9222*x9228))+(((-1.0)*x9222*x9223))+((x9227*x9233)));
evalcond[7]=(((x9229*x9235))+((r20*x9227))+x9224+((sj3*x9225))+(((-1.0)*r20*x9222*x9232))+(((-1.0)*x9226)));
evalcond[8]=(x9236+(((-1.0)*r20*x9230*x9232))+(((-1.0)*x9222*x9225))+(((-1.0)*gconst1*r20*x9222))+((x9227*x9235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9238=((1.0)*r11);
IkReal x9239=(gconst2*r10);
CheckValue<IkReal> x9240=IKPowWithIntegerCheck(((((-1.0)*gconst1*x9238))+x9239),-1);
if(!x9240.valid){
continue;
}
CheckValue<IkReal> x9241=IKPowWithIntegerCheck(((((-1.0)*cj3*x9239))+((cj3*gconst1*r11))),-1);
if(!x9241.valid){
continue;
}
if( IKabs(x9240.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9241.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*gconst2*sj3*x9238)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x9240.value)+IKsqr(((x9241.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*gconst2*sj3*x9238))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x9240.value, ((x9241.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*gconst2*sj3*x9238))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9242=IKsin(j4);
IkReal x9243=IKcos(j4);
IkReal x9244=(sj1*sj2);
IkReal x9245=(cj1*cj2);
IkReal x9246=((1.0)*cj3);
IkReal x9247=(gconst1*r10);
IkReal x9248=(cj2*sj1);
IkReal x9249=(gconst2*r21);
IkReal x9250=(cj1*sj2);
IkReal x9251=(gconst1*sj3);
IkReal x9252=(gconst2*r11);
IkReal x9253=(cj3*gconst1);
IkReal x9254=((1.0)*sj3);
IkReal x9255=(gconst2*x9242);
IkReal x9256=(gconst2*x9243);
IkReal x9257=(r11*x9243);
IkReal x9258=(r02*x9242);
IkReal x9259=(r21*x9243);
IkReal x9260=(x9245+x9244);
IkReal x9261=((1.0)*gconst1*x9242);
evalcond[0]=((-1.0)*r02*x9243);
evalcond[1]=((((-1.0)*r21*x9261))+((r20*x9255)));
evalcond[2]=((((-1.0)*x9246*x9258))+x9260);
evalcond[3]=((-1.0)+((r10*x9255))+(((-1.0)*r11*x9261)));
evalcond[4]=(x9250+(((-1.0)*x9248))+(((-1.0)*x9254*x9258)));
evalcond[5]=(((sj3*x9252))+((sj3*x9247))+((x9253*x9257))+(((-1.0)*r10*x9246*x9256)));
evalcond[6]=((((-1.0)*x9246*x9252))+((x9251*x9257))+(((-1.0)*x9246*x9247))+(((-1.0)*r10*x9254*x9256)));
evalcond[7]=(((sj3*x9249))+((x9253*x9259))+x9248+(((-1.0)*x9250))+((r20*x9251))+(((-1.0)*r20*x9246*x9256)));
evalcond[8]=((((-1.0)*gconst1*r20*x9246))+(((-1.0)*r20*x9254*x9256))+((x9251*x9259))+(((-1.0)*x9246*x9249))+x9260);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9262=(gconst1*r11);
IkReal x9263=(gconst2*r10);
CheckValue<IkReal> x9264=IKPowWithIntegerCheck((x9263+(((-1.0)*x9262))),-1);
if(!x9264.valid){
continue;
}
CheckValue<IkReal> x9265=IKPowWithIntegerCheck((((sj3*x9262))+(((-1.0)*sj3*x9263))),-1);
if(!x9265.valid){
continue;
}
if( IKabs(x9264.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9265.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x9264.value)+IKsqr(((x9265.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x9264.value, ((x9265.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9266=IKsin(j4);
IkReal x9267=IKcos(j4);
IkReal x9268=(sj1*sj2);
IkReal x9269=(cj1*cj2);
IkReal x9270=((1.0)*cj3);
IkReal x9271=(gconst1*r10);
IkReal x9272=(cj2*sj1);
IkReal x9273=(gconst2*r21);
IkReal x9274=(cj1*sj2);
IkReal x9275=(gconst1*sj3);
IkReal x9276=(gconst2*r11);
IkReal x9277=(cj3*gconst1);
IkReal x9278=((1.0)*sj3);
IkReal x9279=(gconst2*x9266);
IkReal x9280=(gconst2*x9267);
IkReal x9281=(r11*x9267);
IkReal x9282=(r02*x9266);
IkReal x9283=(r21*x9267);
IkReal x9284=(x9269+x9268);
IkReal x9285=((1.0)*gconst1*x9266);
evalcond[0]=((-1.0)*r02*x9267);
evalcond[1]=(((r20*x9279))+(((-1.0)*r21*x9285)));
evalcond[2]=((((-1.0)*x9270*x9282))+x9284);
evalcond[3]=((-1.0)+(((-1.0)*r11*x9285))+((r10*x9279)));
evalcond[4]=(x9274+(((-1.0)*x9278*x9282))+(((-1.0)*x9272)));
evalcond[5]=((((-1.0)*r10*x9270*x9280))+((sj3*x9276))+((sj3*x9271))+((x9277*x9281)));
evalcond[6]=((((-1.0)*r10*x9278*x9280))+((x9275*x9281))+(((-1.0)*x9270*x9276))+(((-1.0)*x9270*x9271)));
evalcond[7]=(x9272+((r20*x9275))+(((-1.0)*r20*x9270*x9280))+(((-1.0)*x9274))+((sj3*x9273))+((x9277*x9283)));
evalcond[8]=((((-1.0)*r20*x9278*x9280))+x9284+(((-1.0)*gconst1*r20*x9270))+((x9275*x9283))+(((-1.0)*x9270*x9273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9286=gconst2*gconst2;
IkReal x9287=gconst1*gconst1;
IkReal x9288=(r11*sj3);
IkReal x9289=(gconst1*gconst2);
IkReal x9290=((1.0)*r00);
IkReal x9291=(cj3*r11);
IkReal x9292=(cj3*r10);
IkReal x9293=((1.0)*r02);
IkReal x9294=(r10*sj3);
IkReal x9295=(r01*x9287);
CheckValue<IkReal> x9296=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x9288*x9289*x9290))+((x9288*x9295))+(((-1.0)*r01*x9289*x9294))+((r00*x9286*x9294)))),-1);
if(!x9296.valid){
continue;
}
CheckValue<IkReal> x9297 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*x9291*x9293))+(((-1.0)*gconst1*x9292*x9293)))),IkReal(((((-1.0)*x9286*x9290*x9291))+(((-1.0)*x9289*x9290*x9292))+((r01*x9289*x9291))+((x9292*x9295)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9297.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9296.value)))+(x9297.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9298=IKsin(j4);
IkReal x9299=IKcos(j4);
IkReal x9300=(sj1*sj2);
IkReal x9301=(cj1*cj2);
IkReal x9302=(gconst1*r01);
IkReal x9303=(gconst2*sj3);
IkReal x9304=(cj3*gconst1);
IkReal x9305=(cj3*gconst2);
IkReal x9306=(cj2*sj1);
IkReal x9307=(gconst1*r11);
IkReal x9308=(gconst1*r21);
IkReal x9309=(cj1*sj2);
IkReal x9310=(gconst1*sj3);
IkReal x9311=((1.0)*x9299);
IkReal x9312=((1.0)*x9298);
IkReal x9313=(sj3*x9299);
IkReal x9314=(gconst2*x9298);
IkReal x9315=(x9300+x9301);
evalcond[0]=(((r20*x9314))+(((-1.0)*x9308*x9312))+(((-1.0)*r22*x9311)));
evalcond[1]=((((-1.0)*x9302*x9312))+(((-1.0)*r02*x9311))+((r00*x9314)));
evalcond[2]=((-1.0)+(((-1.0)*x9307*x9312))+((r10*x9314))+(((-1.0)*r12*x9311)));
evalcond[3]=((((-1.0)*cj3*r12*x9312))+((r11*x9299*x9304))+((r11*x9303))+(((-1.0)*r10*x9305*x9311))+((r10*x9310)));
evalcond[4]=((((-1.0)*r11*x9305))+(((-1.0)*r12*sj3*x9312))+(((-1.0)*r10*x9303*x9311))+(((-1.0)*r10*x9304))+((x9307*x9313)));
evalcond[5]=(((cj3*x9299*x9302))+(((-1.0)*r00*x9305*x9311))+x9315+((r01*x9303))+(((-1.0)*cj3*r02*x9312))+((r00*x9310)));
evalcond[6]=(x9306+((r21*x9303))+(((-1.0)*cj3*r22*x9312))+((r20*x9310))+(((-1.0)*r20*x9305*x9311))+((r21*x9299*x9304))+(((-1.0)*x9309)));
evalcond[7]=((((-1.0)*r20*x9304))+x9315+(((-1.0)*r21*x9305))+(((-1.0)*r22*sj3*x9312))+((x9308*x9313))+(((-1.0)*r20*x9303*x9311)));
evalcond[8]=((((-1.0)*r00*x9303*x9311))+(((-1.0)*r02*sj3*x9312))+x9309+(((-1.0)*r00*x9304))+(((-1.0)*r01*x9305))+(((-1.0)*x9306))+((x9302*x9313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9316=gconst1*gconst1;
IkReal x9317=gconst2*gconst2;
IkReal x9318=(r01*r11);
IkReal x9319=(r00*r10);
IkReal x9320=(gconst2*r11);
IkReal x9321=(r02*sj3);
IkReal x9322=(r01*r10);
IkReal x9323=(gconst1*gconst2*sj3);
IkReal x9324=((1.0)*cj3*gconst1);
CheckValue<IkReal> x9325=IKPowWithIntegerCheck(IKsign((((cj3*x9316*x9318))+((cj3*r02*r12))+(((-1.0)*r00*x9320*x9324))+(((-1.0)*gconst2*x9322*x9324))+((cj3*x9317*x9319)))),-1);
if(!x9325.valid){
continue;
}
CheckValue<IkReal> x9326 = IKatan2WithCheck(IkReal((((gconst1*r10*x9321))+((x9320*x9321)))),IkReal((((x9319*x9323))+((r00*r11*sj3*x9317))+(((-1.0)*sj3*x9316*x9322))+(((-1.0)*x9318*x9323)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9325.value)))+(x9326.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9327=IKsin(j4);
IkReal x9328=IKcos(j4);
IkReal x9329=(sj1*sj2);
IkReal x9330=(cj1*cj2);
IkReal x9331=(gconst1*r01);
IkReal x9332=(gconst2*sj3);
IkReal x9333=(cj3*gconst1);
IkReal x9334=(cj3*gconst2);
IkReal x9335=(cj2*sj1);
IkReal x9336=(gconst1*r11);
IkReal x9337=(gconst1*r21);
IkReal x9338=(cj1*sj2);
IkReal x9339=(gconst1*sj3);
IkReal x9340=((1.0)*x9328);
IkReal x9341=((1.0)*x9327);
IkReal x9342=(sj3*x9328);
IkReal x9343=(gconst2*x9327);
IkReal x9344=(x9329+x9330);
evalcond[0]=((((-1.0)*r22*x9340))+(((-1.0)*x9337*x9341))+((r20*x9343)));
evalcond[1]=(((r00*x9343))+(((-1.0)*r02*x9340))+(((-1.0)*x9331*x9341)));
evalcond[2]=((-1.0)+(((-1.0)*x9336*x9341))+((r10*x9343))+(((-1.0)*r12*x9340)));
evalcond[3]=(((r11*x9332))+(((-1.0)*r10*x9334*x9340))+((r10*x9339))+(((-1.0)*cj3*r12*x9341))+((r11*x9328*x9333)));
evalcond[4]=((((-1.0)*r12*sj3*x9341))+(((-1.0)*r10*x9333))+((x9336*x9342))+(((-1.0)*r10*x9332*x9340))+(((-1.0)*r11*x9334)));
evalcond[5]=((((-1.0)*r00*x9334*x9340))+x9344+(((-1.0)*cj3*r02*x9341))+((r01*x9332))+((r00*x9339))+((cj3*x9328*x9331)));
evalcond[6]=(((r20*x9339))+x9335+(((-1.0)*x9338))+((r21*x9328*x9333))+(((-1.0)*r20*x9334*x9340))+(((-1.0)*cj3*r22*x9341))+((r21*x9332)));
evalcond[7]=(x9344+(((-1.0)*r20*x9333))+((x9337*x9342))+(((-1.0)*r22*sj3*x9341))+(((-1.0)*r21*x9334))+(((-1.0)*r20*x9332*x9340)));
evalcond[8]=(x9338+(((-1.0)*r00*x9332*x9340))+(((-1.0)*x9335))+(((-1.0)*r02*sj3*x9341))+((x9331*x9342))+(((-1.0)*r01*x9334))+(((-1.0)*r00*x9333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9345=((1.0)*gconst1);
CheckValue<IkReal> x9346=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9345)))),-1);
if(!x9346.valid){
continue;
}
CheckValue<IkReal> x9347 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*r21*x9345)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9347.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9346.value)))+(x9347.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9348=IKsin(j4);
IkReal x9349=IKcos(j4);
IkReal x9350=(sj1*sj2);
IkReal x9351=(cj1*cj2);
IkReal x9352=(gconst1*r01);
IkReal x9353=(gconst2*sj3);
IkReal x9354=(cj3*gconst1);
IkReal x9355=(cj3*gconst2);
IkReal x9356=(cj2*sj1);
IkReal x9357=(gconst1*r11);
IkReal x9358=(gconst1*r21);
IkReal x9359=(cj1*sj2);
IkReal x9360=(gconst1*sj3);
IkReal x9361=((1.0)*x9349);
IkReal x9362=((1.0)*x9348);
IkReal x9363=(sj3*x9349);
IkReal x9364=(gconst2*x9348);
IkReal x9365=(x9351+x9350);
evalcond[0]=((((-1.0)*x9358*x9362))+(((-1.0)*r22*x9361))+((r20*x9364)));
evalcond[1]=((((-1.0)*x9352*x9362))+(((-1.0)*r02*x9361))+((r00*x9364)));
evalcond[2]=((-1.0)+(((-1.0)*x9357*x9362))+(((-1.0)*r12*x9361))+((r10*x9364)));
evalcond[3]=(((r11*x9349*x9354))+((r11*x9353))+(((-1.0)*cj3*r12*x9362))+(((-1.0)*r10*x9355*x9361))+((r10*x9360)));
evalcond[4]=(((x9357*x9363))+(((-1.0)*r12*sj3*x9362))+(((-1.0)*r11*x9355))+(((-1.0)*r10*x9353*x9361))+(((-1.0)*r10*x9354)));
evalcond[5]=(x9365+(((-1.0)*cj3*r02*x9362))+((r01*x9353))+((cj3*x9349*x9352))+((r00*x9360))+(((-1.0)*r00*x9355*x9361)));
evalcond[6]=(x9356+(((-1.0)*r20*x9355*x9361))+((r21*x9349*x9354))+(((-1.0)*x9359))+(((-1.0)*cj3*r22*x9362))+((r21*x9353))+((r20*x9360)));
evalcond[7]=((((-1.0)*r22*sj3*x9362))+(((-1.0)*r21*x9355))+x9365+(((-1.0)*r20*x9354))+(((-1.0)*r20*x9353*x9361))+((x9358*x9363)));
evalcond[8]=((((-1.0)*r01*x9355))+x9359+(((-1.0)*x9356))+((x9352*x9363))+(((-1.0)*r02*sj3*x9362))+(((-1.0)*r00*x9354))+(((-1.0)*r00*x9353*x9361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9368 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9368.valid){
continue;
}
IkReal x9366=((-1.0)*(x9368.value));
IkReal x9367=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x9366;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9366;
IkReal gconst1=((-1.0)*r21*x9367);
IkReal gconst2=(r20*x9367);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9371 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9371.valid){
continue;
}
IkReal x9369=((-1.0)*(x9371.value));
IkReal x9370=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x9369;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9369;
IkReal gconst1=((-1.0)*r21*x9370);
IkReal gconst2=(r20*x9370);
CheckValue<IkReal> x9379=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9379.valid){
continue;
}
IkReal x9372=x9379.value;
IkReal x9373=(cj3*x9372);
IkReal x9374=(r11*x9373);
IkReal x9375=(r01*x9373);
IkReal x9376=(r00*x9373);
IkReal x9377=(r10*x9373);
IkReal x9378=(r20*r21*x9373);
j4eval[0]=IKsign((((cj3*r02*r12))+((r00*r20*r21*x9374))+((r10*r20*r21*x9375))+((r10*x9376*(r20*r20)))+((r01*x9374*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9382 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9382.valid){
continue;
}
IkReal x9380=((-1.0)*(x9382.value));
IkReal x9381=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x9380;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9380;
IkReal gconst1=((-1.0)*r21*x9381);
IkReal gconst2=(r20*x9381);
CheckValue<IkReal> x9390=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9390.valid){
continue;
}
IkReal x9383=x9390.value;
IkReal x9384=(sj3*x9383);
IkReal x9385=(r11*x9384);
IkReal x9386=(r00*x9384);
IkReal x9387=(r01*x9384);
IkReal x9388=(r10*x9384);
IkReal x9389=(r20*r21*x9384);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x9385))+((r10*r20*r21*x9387))+((r01*x9385*(r21*r21)))+((r10*x9386*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9393 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9393.valid){
continue;
}
IkReal x9391=((-1.0)*(x9393.value));
IkReal x9392=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x9391;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9391;
IkReal gconst1=((-1.0)*r21*x9392);
IkReal gconst2=(r20*x9392);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x9396 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9396.valid){
continue;
}
IkReal x9394=((-1.0)*(x9396.value));
IkReal x9395=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x9394;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9394;
IkReal gconst1=((-1.0)*r21*x9395);
IkReal gconst2=(r20*x9395);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9399 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9399.valid){
continue;
}
IkReal x9397=((-1.0)*(x9399.value));
IkReal x9398=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x9397;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9397;
IkReal gconst1=((-1.0)*r21*x9398);
IkReal gconst2=(r20*x9398);
IkReal x9400=r22*r22;
IkReal x9401=(cj1*r12*sj2);
IkReal x9402=(cj2*r12*sj1);
CheckValue<IkReal> x9406=IKPowWithIntegerCheck(((-1.0)+x9400),-1);
if(!x9406.valid){
continue;
}
IkReal x9403=x9406.value;
if((((1.0)+(((-1.0)*x9400)))) < -0.00001)
continue;
IkReal x9404=IKsqrt(((1.0)+(((-1.0)*x9400))));
IkReal x9405=(r22*x9403*x9404);
j4eval[0]=((IKabs((((x9401*x9405))+(((-1.0)*x9402*x9405)))))+(IKabs(((((-1.0)*x9401))+x9402))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9407=(cj2*sj1);
IkReal x9408=(cj1*sj2);
IkReal x9409=(gconst2*r10);
IkReal x9410=(gconst1*r11);
CheckValue<IkReal> x9411 = IKatan2WithCheck(IkReal(((((-1.0)*x9407*x9409))+(((-1.0)*x9408*x9410))+((x9408*x9409))+((x9407*x9410)))),IkReal((((r12*x9407))+(((-1.0)*r12*x9408)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9411.valid){
continue;
}
CheckValue<IkReal> x9412=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9411.value)+(((1.5707963267949)*(x9412.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9413=IKsin(j4);
IkReal x9414=IKcos(j4);
IkReal x9415=((1.0)*sj2);
IkReal x9416=((1.0)*x9414);
IkReal x9417=(gconst1*x9414);
IkReal x9418=(gconst2*x9413);
IkReal x9419=((1.0)*x9413);
IkReal x9420=(gconst1*x9419);
evalcond[0]=(((r20*x9418))+(((-1.0)*r22*x9416))+(((-1.0)*r21*x9420)));
evalcond[1]=((((-1.0)*r02*x9416))+((r00*x9418))+(((-1.0)*r01*x9420)));
evalcond[2]=((((-1.0)*r12*x9419))+((r11*x9417))+(((-1.0)*gconst2*r10*x9416)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9416))+((r10*x9418))+(((-1.0)*r11*x9420)));
evalcond[4]=(((cj2*sj1))+((r21*x9417))+(((-1.0)*cj1*x9415))+(((-1.0)*gconst2*r20*x9416))+(((-1.0)*r22*x9419)));
evalcond[5]=((((-1.0)*r02*x9419))+(((-1.0)*gconst2*r00*x9416))+(((-1.0)*cj1*cj2))+((r01*x9417))+(((-1.0)*sj1*x9415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9421=(gconst2*r10);
IkReal x9422=(gconst1*r11);
CheckValue<IkReal> x9423=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9421*x9421)+(((-2.0)*x9421*x9422))+(x9422*x9422))),-1);
if(!x9423.valid){
continue;
}
CheckValue<IkReal> x9424 = IKatan2WithCheck(IkReal(((((-1.0)*x9421))+x9422)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9424.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9423.value)))+(x9424.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9425=IKsin(j4);
IkReal x9426=IKcos(j4);
IkReal x9427=((1.0)*sj2);
IkReal x9428=((1.0)*x9426);
IkReal x9429=(gconst1*x9426);
IkReal x9430=(gconst2*x9425);
IkReal x9431=((1.0)*x9425);
IkReal x9432=(gconst1*x9431);
evalcond[0]=(((r20*x9430))+(((-1.0)*r21*x9432))+(((-1.0)*r22*x9428)));
evalcond[1]=((((-1.0)*r01*x9432))+(((-1.0)*r02*x9428))+((r00*x9430)));
evalcond[2]=((((-1.0)*gconst2*r10*x9428))+(((-1.0)*r12*x9431))+((r11*x9429)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9428))+(((-1.0)*r11*x9432))+((r10*x9430)));
evalcond[4]=(((cj2*sj1))+((r21*x9429))+(((-1.0)*gconst2*r20*x9428))+(((-1.0)*r22*x9431))+(((-1.0)*cj1*x9427)));
evalcond[5]=(((r01*x9429))+(((-1.0)*sj1*x9427))+(((-1.0)*cj1*cj2))+(((-1.0)*r02*x9431))+(((-1.0)*gconst2*r00*x9428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9433 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9433.valid){
continue;
}
CheckValue<IkReal> x9434=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9434.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9433.value)+(((1.5707963267949)*(x9434.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9435=IKsin(j4);
IkReal x9436=IKcos(j4);
IkReal x9437=((1.0)*sj2);
IkReal x9438=((1.0)*x9436);
IkReal x9439=(gconst1*x9436);
IkReal x9440=(gconst2*x9435);
IkReal x9441=((1.0)*x9435);
IkReal x9442=(gconst1*x9441);
evalcond[0]=(((r20*x9440))+(((-1.0)*r21*x9442))+(((-1.0)*r22*x9438)));
evalcond[1]=(((r00*x9440))+(((-1.0)*r01*x9442))+(((-1.0)*r02*x9438)));
evalcond[2]=((((-1.0)*gconst2*r10*x9438))+((r11*x9439))+(((-1.0)*r12*x9441)));
evalcond[3]=((1.0)+((r10*x9440))+(((-1.0)*r12*x9438))+(((-1.0)*r11*x9442)));
evalcond[4]=(((cj2*sj1))+((r21*x9439))+(((-1.0)*r22*x9441))+(((-1.0)*cj1*x9437))+(((-1.0)*gconst2*r20*x9438)));
evalcond[5]=((((-1.0)*gconst2*r00*x9438))+(((-1.0)*sj1*x9437))+(((-1.0)*cj1*cj2))+((r01*x9439))+(((-1.0)*r02*x9441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9445 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9445.valid){
continue;
}
IkReal x9443=((-1.0)*(x9445.value));
IkReal x9444=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x9443;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9443;
IkReal gconst1=((-1.0)*r21*x9444);
IkReal gconst2=(r20*x9444);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9448 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9448.valid){
continue;
}
IkReal x9446=((-1.0)*(x9448.value));
IkReal x9447=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x9446;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9446;
IkReal gconst1=((-1.0)*r21*x9447);
IkReal gconst2=(r20*x9447);
IkReal x9449=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9453=IKPowWithIntegerCheck(x9449,-1);
if(!x9453.valid){
continue;
}
IkReal x9450=x9453.value;
IkReal x9451=((1.0)*x9450);
IkReal x9452=((((-1.0)*x9451*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x9451*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x9450)));
j4eval[0]=x9452;
j4eval[1]=IKsign(x9452);
j4eval[2]=r12;
j4eval[3]=x9449;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9456 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9456.valid){
continue;
}
IkReal x9454=((-1.0)*(x9456.value));
IkReal x9455=x7791;
sj5=gconst1;
cj5=gconst2;
j5=x9454;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9454;
IkReal gconst1=((-1.0)*r21*x9455);
IkReal gconst2=(r20*x9455);
IkReal x9457=r22*r22;
IkReal x9458=(cj1*r12*sj2);
IkReal x9459=(cj2*r12*sj1);
CheckValue<IkReal> x9463=IKPowWithIntegerCheck(((-1.0)+x9457),-1);
if(!x9463.valid){
continue;
}
IkReal x9460=x9463.value;
if((((1.0)+(((-1.0)*x9457)))) < -0.00001)
continue;
IkReal x9461=IKsqrt(((1.0)+(((-1.0)*x9457))));
IkReal x9462=(r22*x9460*x9461);
j4eval[0]=((IKabs(((((-1.0)*x9458*x9462))+((x9459*x9462)))))+(IKabs(((((-1.0)*x9459))+x9458))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9464=(cj2*sj1);
IkReal x9465=(gconst1*r11);
IkReal x9466=(gconst2*r10);
IkReal x9467=(cj1*sj2);
CheckValue<IkReal> x9468=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9468.valid){
continue;
}
CheckValue<IkReal> x9469 = IKatan2WithCheck(IkReal((((x9465*x9467))+(((-1.0)*x9464*x9465))+(((-1.0)*x9466*x9467))+((x9464*x9466)))),IkReal(((((-1.0)*r12*x9464))+((r12*x9467)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9469.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9468.value)))+(x9469.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9470=IKcos(j4);
IkReal x9471=IKsin(j4);
IkReal x9472=((1.0)*sj2);
IkReal x9473=((1.0)*x9470);
IkReal x9474=(gconst2*x9470);
IkReal x9475=(gconst2*x9471);
IkReal x9476=((1.0)*gconst1*x9471);
evalcond[0]=((((-1.0)*gconst1*r11*x9473))+((r10*x9474))+((r12*x9471)));
evalcond[1]=((((-1.0)*r22*x9473))+((r20*x9475))+(((-1.0)*r21*x9476)));
evalcond[2]=((((-1.0)*r02*x9473))+((r00*x9475))+(((-1.0)*r01*x9476)));
evalcond[3]=((1.0)+((r10*x9475))+(((-1.0)*r12*x9473))+(((-1.0)*r11*x9476)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*cj1*x9472))+((r22*x9471))+(((-1.0)*gconst1*r21*x9473))+((r20*x9474)));
evalcond[5]=(((r00*x9474))+(((-1.0)*cj1*cj2))+(((-1.0)*sj1*x9472))+(((-1.0)*gconst1*r01*x9473))+((r02*x9471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9477=(gconst1*r11);
IkReal x9478=(gconst2*r10);
CheckValue<IkReal> x9479=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9478*x9478)))+(((2.0)*x9477*x9478))+(((-1.0)*(x9477*x9477)))+(((-1.0)*(r12*r12))))),-1);
if(!x9479.valid){
continue;
}
CheckValue<IkReal> x9480 = IKatan2WithCheck(IkReal(((((-1.0)*x9477))+x9478)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9480.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9479.value)))+(x9480.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9481=IKcos(j4);
IkReal x9482=IKsin(j4);
IkReal x9483=((1.0)*sj2);
IkReal x9484=((1.0)*x9481);
IkReal x9485=(gconst2*x9481);
IkReal x9486=(gconst2*x9482);
IkReal x9487=((1.0)*gconst1*x9482);
evalcond[0]=(((r12*x9482))+(((-1.0)*gconst1*r11*x9484))+((r10*x9485)));
evalcond[1]=((((-1.0)*r21*x9487))+((r20*x9486))+(((-1.0)*r22*x9484)));
evalcond[2]=((((-1.0)*r01*x9487))+((r00*x9486))+(((-1.0)*r02*x9484)));
evalcond[3]=((1.0)+((r10*x9486))+(((-1.0)*r11*x9487))+(((-1.0)*r12*x9484)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9484))+((r20*x9485))+((r22*x9482))+(((-1.0)*cj1*x9483)));
evalcond[5]=(((r00*x9485))+(((-1.0)*cj1*cj2))+(((-1.0)*sj1*x9483))+((r02*x9482))+(((-1.0)*gconst1*r01*x9484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9488 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9488.valid){
continue;
}
CheckValue<IkReal> x9489=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9489.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9488.value)+(((1.5707963267949)*(x9489.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9490=IKcos(j4);
IkReal x9491=IKsin(j4);
IkReal x9492=((1.0)*sj2);
IkReal x9493=((1.0)*x9490);
IkReal x9494=(gconst2*x9490);
IkReal x9495=(gconst2*x9491);
IkReal x9496=((1.0)*gconst1*x9491);
evalcond[0]=(((r12*x9491))+((r10*x9494))+(((-1.0)*gconst1*r11*x9493)));
evalcond[1]=((((-1.0)*r22*x9493))+(((-1.0)*r21*x9496))+((r20*x9495)));
evalcond[2]=((((-1.0)*r02*x9493))+((r00*x9495))+(((-1.0)*r01*x9496)));
evalcond[3]=((1.0)+((r10*x9495))+(((-1.0)*r12*x9493))+(((-1.0)*r11*x9496)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*cj1*x9492))+((r22*x9491))+(((-1.0)*gconst1*r21*x9493))+((r20*x9494)));
evalcond[5]=(((r02*x9491))+(((-1.0)*cj1*cj2))+(((-1.0)*gconst1*r01*x9493))+((r00*x9494))+(((-1.0)*sj1*x9492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9497=((-1.0)*px);
CheckValue<IkReal> x9499 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9499.valid){
continue;
}
IkReal x9498=((-1.0)*(x9499.value));
sj5=gconst1;
cj5=gconst2;
j5=x9498;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9497);
rxp1_1=(px*r21);
rxp1_2=(r11*x9497);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9498;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9500=((1.0)*sj3);
IkReal x9501=(r11*r21);
IkReal x9502=(r10*r20);
j4eval[0]=(x9502+x9501);
j4eval[1]=((((-1.0)*x9500*x9501))+(((-1.0)*x9500*x9502)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9503=((-1.0)*px);
CheckValue<IkReal> x9505 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9505.valid){
continue;
}
IkReal x9504=((-1.0)*(x9505.value));
sj5=gconst1;
cj5=gconst2;
j5=x9504;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9503);
rxp1_1=(px*r21);
rxp1_2=(r11*x9503);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9504;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9506=(r10*r20);
IkReal x9507=((1.0)*cj3);
IkReal x9508=(r11*r21);
j4eval[0]=(x9508+x9506);
j4eval[1]=((((-1.0)*x9507*x9508))+(((-1.0)*x9506*x9507)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9509=((-1.0)*px);
CheckValue<IkReal> x9511 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9511.valid){
continue;
}
IkReal x9510=((-1.0)*(x9511.value));
sj5=gconst1;
cj5=gconst2;
j5=x9510;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9509);
rxp1_1=(px*r21);
rxp1_2=(r11*x9509);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9510;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9512=((1.0)*cj3);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r10*r20*x9512))+(((-1.0)*r11*r21*x9512)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9513=((1.0)*gconst2);
CheckValue<IkReal> x9514=IKPowWithIntegerCheck(r02,-1);
if(!x9514.valid){
continue;
}
CheckValue<IkReal> x9515=IKPowWithIntegerCheck(sj3,-1);
if(!x9515.valid){
continue;
}
CheckValue<IkReal> x9516=IKPowWithIntegerCheck(((((-1.0)*cj3*r10*x9513))+((cj3*gconst1*r11))),-1);
if(!x9516.valid){
continue;
}
if( IKabs(((x9514.value)*(x9515.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9516.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x9513)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9514.value)*(x9515.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x9516.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x9513))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9514.value)*(x9515.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x9516.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x9513))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9517=IKsin(j4);
IkReal x9518=IKcos(j4);
IkReal x9519=(cj2*sj1);
IkReal x9520=(sj1*sj2);
IkReal x9521=((1.0)*cj3);
IkReal x9522=(gconst1*r10);
IkReal x9523=(gconst2*r21);
IkReal x9524=((1.0)*cj1);
IkReal x9525=(gconst1*sj3);
IkReal x9526=(gconst2*r11);
IkReal x9527=(cj3*gconst1);
IkReal x9528=((1.0)*sj3);
IkReal x9529=(sj2*x9524);
IkReal x9530=(gconst2*x9517);
IkReal x9531=(gconst2*x9518);
IkReal x9532=(r11*x9518);
IkReal x9533=(r02*x9517);
IkReal x9534=(r21*x9518);
IkReal x9535=((1.0)*gconst1*x9517);
evalcond[0]=((-1.0)*r02*x9518);
evalcond[1]=(((r20*x9530))+(((-1.0)*r21*x9535)));
evalcond[2]=((1.0)+((r10*x9530))+(((-1.0)*r11*x9535)));
evalcond[3]=(x9519+(((-1.0)*x9529))+(((-1.0)*x9528*x9533)));
evalcond[4]=((((-1.0)*x9521*x9533))+(((-1.0)*x9520))+(((-1.0)*cj2*x9524)));
evalcond[5]=((((-1.0)*r10*x9521*x9531))+((x9527*x9532))+((sj3*x9526))+((sj3*x9522)));
evalcond[6]=((((-1.0)*x9521*x9526))+(((-1.0)*x9521*x9522))+(((-1.0)*r10*x9528*x9531))+((x9525*x9532)));
evalcond[7]=(((r20*x9525))+(((-1.0)*r20*x9521*x9531))+((x9527*x9534))+x9519+((sj3*x9523))+(((-1.0)*x9529)));
evalcond[8]=((((-1.0)*x9521*x9523))+(((-1.0)*r20*x9528*x9531))+(((-1.0)*gconst1*r20*x9521))+x9520+((cj1*cj2))+((x9525*x9534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9536=((1.0)*r11);
IkReal x9537=(gconst2*r10);
CheckValue<IkReal> x9538=IKPowWithIntegerCheck(((((-1.0)*gconst1*x9536))+x9537),-1);
if(!x9538.valid){
continue;
}
CheckValue<IkReal> x9539=IKPowWithIntegerCheck(((((-1.0)*cj3*x9537))+((cj3*gconst1*r11))),-1);
if(!x9539.valid){
continue;
}
if( IKabs(((-1.0)*(x9538.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9539.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*gconst2*sj3*x9536)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x9538.value)))+IKsqr(((x9539.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*gconst2*sj3*x9536))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x9538.value)), ((x9539.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*gconst2*sj3*x9536))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9540=IKsin(j4);
IkReal x9541=IKcos(j4);
IkReal x9542=(cj2*sj1);
IkReal x9543=(sj1*sj2);
IkReal x9544=((1.0)*cj3);
IkReal x9545=(gconst1*r10);
IkReal x9546=(gconst2*r21);
IkReal x9547=((1.0)*cj1);
IkReal x9548=(gconst1*sj3);
IkReal x9549=(gconst2*r11);
IkReal x9550=(cj3*gconst1);
IkReal x9551=((1.0)*sj3);
IkReal x9552=(sj2*x9547);
IkReal x9553=(gconst2*x9540);
IkReal x9554=(gconst2*x9541);
IkReal x9555=(r11*x9541);
IkReal x9556=(r02*x9540);
IkReal x9557=(r21*x9541);
IkReal x9558=((1.0)*gconst1*x9540);
evalcond[0]=((-1.0)*r02*x9541);
evalcond[1]=((((-1.0)*r21*x9558))+((r20*x9553)));
evalcond[2]=((1.0)+((r10*x9553))+(((-1.0)*r11*x9558)));
evalcond[3]=((((-1.0)*x9551*x9556))+x9542+(((-1.0)*x9552)));
evalcond[4]=((((-1.0)*cj2*x9547))+(((-1.0)*x9544*x9556))+(((-1.0)*x9543)));
evalcond[5]=((((-1.0)*r10*x9544*x9554))+((x9550*x9555))+((sj3*x9549))+((sj3*x9545)));
evalcond[6]=(((x9548*x9555))+(((-1.0)*x9544*x9545))+(((-1.0)*x9544*x9549))+(((-1.0)*r10*x9551*x9554)));
evalcond[7]=((((-1.0)*r20*x9544*x9554))+((r20*x9548))+x9542+((x9550*x9557))+((sj3*x9546))+(((-1.0)*x9552)));
evalcond[8]=(((x9548*x9557))+(((-1.0)*x9544*x9546))+x9543+(((-1.0)*gconst1*r20*x9544))+((cj1*cj2))+(((-1.0)*r20*x9551*x9554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9559=(gconst1*r11);
IkReal x9560=(gconst2*r10);
CheckValue<IkReal> x9561=IKPowWithIntegerCheck((x9560+(((-1.0)*x9559))),-1);
if(!x9561.valid){
continue;
}
CheckValue<IkReal> x9562=IKPowWithIntegerCheck(((((-1.0)*sj3*x9560))+((sj3*x9559))),-1);
if(!x9562.valid){
continue;
}
if( IKabs(((-1.0)*(x9561.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9562.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x9561.value)))+IKsqr(((x9562.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x9561.value)), ((x9562.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9563=IKsin(j4);
IkReal x9564=IKcos(j4);
IkReal x9565=(cj2*sj1);
IkReal x9566=(sj1*sj2);
IkReal x9567=((1.0)*cj3);
IkReal x9568=(gconst1*r10);
IkReal x9569=(gconst2*r21);
IkReal x9570=((1.0)*cj1);
IkReal x9571=(gconst1*sj3);
IkReal x9572=(gconst2*r11);
IkReal x9573=(cj3*gconst1);
IkReal x9574=((1.0)*sj3);
IkReal x9575=(sj2*x9570);
IkReal x9576=(gconst2*x9563);
IkReal x9577=(gconst2*x9564);
IkReal x9578=(r11*x9564);
IkReal x9579=(r02*x9563);
IkReal x9580=(r21*x9564);
IkReal x9581=((1.0)*gconst1*x9563);
evalcond[0]=((-1.0)*r02*x9564);
evalcond[1]=((((-1.0)*r21*x9581))+((r20*x9576)));
evalcond[2]=((1.0)+(((-1.0)*r11*x9581))+((r10*x9576)));
evalcond[3]=((((-1.0)*x9575))+(((-1.0)*x9574*x9579))+x9565);
evalcond[4]=((((-1.0)*cj2*x9570))+(((-1.0)*x9566))+(((-1.0)*x9567*x9579)));
evalcond[5]=(((sj3*x9572))+((x9573*x9578))+((sj3*x9568))+(((-1.0)*r10*x9567*x9577)));
evalcond[6]=(((x9571*x9578))+(((-1.0)*x9567*x9572))+(((-1.0)*x9567*x9568))+(((-1.0)*r10*x9574*x9577)));
evalcond[7]=((((-1.0)*x9575))+((sj3*x9569))+x9565+((r20*x9571))+((x9573*x9580))+(((-1.0)*r20*x9567*x9577)));
evalcond[8]=(((x9571*x9580))+(((-1.0)*r20*x9574*x9577))+(((-1.0)*x9567*x9569))+(((-1.0)*gconst1*r20*x9567))+x9566+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9582=gconst2*gconst2;
IkReal x9583=gconst1*gconst1;
IkReal x9584=(r11*sj3);
IkReal x9585=(gconst1*gconst2);
IkReal x9586=((1.0)*r00);
IkReal x9587=(cj3*r11);
IkReal x9588=(cj3*r10);
IkReal x9589=((1.0)*r02);
IkReal x9590=(r10*sj3);
IkReal x9591=(r01*x9583);
CheckValue<IkReal> x9592 = IKatan2WithCheck(IkReal(((((-1.0)*gconst1*x9588*x9589))+(((-1.0)*gconst2*x9587*x9589)))),IkReal(((((-1.0)*x9585*x9586*x9588))+((r01*x9585*x9587))+((x9588*x9591))+(((-1.0)*x9582*x9586*x9587)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9592.valid){
continue;
}
CheckValue<IkReal> x9593=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r00*x9582*x9590))+(((-1.0)*x9584*x9585*x9586))+((x9584*x9591))+(((-1.0)*r01*x9585*x9590)))),-1);
if(!x9593.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9592.value)+(((1.5707963267949)*(x9593.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9594=IKsin(j4);
IkReal x9595=IKcos(j4);
IkReal x9596=(cj2*sj1);
IkReal x9597=(gconst1*r01);
IkReal x9598=(gconst2*sj3);
IkReal x9599=(sj1*sj2);
IkReal x9600=(cj3*gconst1);
IkReal x9601=(cj3*gconst2);
IkReal x9602=((1.0)*cj1);
IkReal x9603=(gconst1*r11);
IkReal x9604=(gconst1*r21);
IkReal x9605=(gconst1*sj3);
IkReal x9606=(sj2*x9602);
IkReal x9607=((1.0)*x9595);
IkReal x9608=((1.0)*x9594);
IkReal x9609=(sj3*x9595);
IkReal x9610=(gconst2*x9594);
evalcond[0]=((((-1.0)*r22*x9607))+((r20*x9610))+(((-1.0)*x9604*x9608)));
evalcond[1]=((((-1.0)*x9597*x9608))+((r00*x9610))+(((-1.0)*r02*x9607)));
evalcond[2]=((1.0)+((r10*x9610))+(((-1.0)*r12*x9607))+(((-1.0)*x9603*x9608)));
evalcond[3]=((((-1.0)*r10*x9601*x9607))+((r11*x9598))+(((-1.0)*cj3*r12*x9608))+((r10*x9605))+((r11*x9595*x9600)));
evalcond[4]=(((x9603*x9609))+(((-1.0)*r12*sj3*x9608))+(((-1.0)*r11*x9601))+(((-1.0)*r10*x9600))+(((-1.0)*r10*x9598*x9607)));
evalcond[5]=((((-1.0)*x9606))+(((-1.0)*r20*x9601*x9607))+((r21*x9595*x9600))+((r20*x9605))+(((-1.0)*cj3*r22*x9608))+x9596+((r21*x9598)));
evalcond[6]=((((-1.0)*r20*x9600))+((x9604*x9609))+(((-1.0)*r20*x9598*x9607))+(((-1.0)*r21*x9601))+x9599+(((-1.0)*r22*sj3*x9608))+((cj1*cj2)));
evalcond[7]=(((r01*x9598))+(((-1.0)*cj3*r02*x9608))+((r00*x9605))+(((-1.0)*cj2*x9602))+(((-1.0)*x9599))+((cj3*x9595*x9597))+(((-1.0)*r00*x9601*x9607)));
evalcond[8]=((((-1.0)*r01*x9601))+(((-1.0)*r02*sj3*x9608))+(((-1.0)*x9606))+(((-1.0)*r00*x9598*x9607))+((x9597*x9609))+x9596+(((-1.0)*r00*x9600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9611=gconst1*gconst1;
IkReal x9612=gconst2*gconst2;
IkReal x9613=(r01*r11);
IkReal x9614=(r00*r10);
IkReal x9615=(gconst2*r11);
IkReal x9616=(r02*sj3);
IkReal x9617=(r01*r10);
IkReal x9618=(gconst1*gconst2*sj3);
IkReal x9619=((1.0)*cj3*gconst1);
CheckValue<IkReal> x9620 = IKatan2WithCheck(IkReal((((x9615*x9616))+((gconst1*r10*x9616)))),IkReal(((((-1.0)*sj3*x9611*x9617))+(((-1.0)*x9613*x9618))+((r00*r11*sj3*x9612))+((x9614*x9618)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9620.valid){
continue;
}
CheckValue<IkReal> x9621=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+(((-1.0)*gconst2*x9617*x9619))+((cj3*x9611*x9613))+(((-1.0)*r00*x9615*x9619))+((cj3*x9612*x9614)))),-1);
if(!x9621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9620.value)+(((1.5707963267949)*(x9621.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9622=IKsin(j4);
IkReal x9623=IKcos(j4);
IkReal x9624=(cj2*sj1);
IkReal x9625=(gconst1*r01);
IkReal x9626=(gconst2*sj3);
IkReal x9627=(sj1*sj2);
IkReal x9628=(cj3*gconst1);
IkReal x9629=(cj3*gconst2);
IkReal x9630=((1.0)*cj1);
IkReal x9631=(gconst1*r11);
IkReal x9632=(gconst1*r21);
IkReal x9633=(gconst1*sj3);
IkReal x9634=(sj2*x9630);
IkReal x9635=((1.0)*x9623);
IkReal x9636=((1.0)*x9622);
IkReal x9637=(sj3*x9623);
IkReal x9638=(gconst2*x9622);
evalcond[0]=(((r20*x9638))+(((-1.0)*r22*x9635))+(((-1.0)*x9632*x9636)));
evalcond[1]=(((r00*x9638))+(((-1.0)*r02*x9635))+(((-1.0)*x9625*x9636)));
evalcond[2]=((1.0)+((r10*x9638))+(((-1.0)*r12*x9635))+(((-1.0)*x9631*x9636)));
evalcond[3]=(((r10*x9633))+((r11*x9623*x9628))+(((-1.0)*cj3*r12*x9636))+(((-1.0)*r10*x9629*x9635))+((r11*x9626)));
evalcond[4]=((((-1.0)*r11*x9629))+(((-1.0)*r10*x9628))+(((-1.0)*r12*sj3*x9636))+((x9631*x9637))+(((-1.0)*r10*x9626*x9635)));
evalcond[5]=((((-1.0)*r20*x9629*x9635))+((r20*x9633))+((r21*x9626))+x9624+(((-1.0)*cj3*r22*x9636))+((r21*x9623*x9628))+(((-1.0)*x9634)));
evalcond[6]=((((-1.0)*r21*x9629))+(((-1.0)*r22*sj3*x9636))+((x9632*x9637))+(((-1.0)*r20*x9626*x9635))+x9627+(((-1.0)*r20*x9628))+((cj1*cj2)));
evalcond[7]=(((r01*x9626))+((r00*x9633))+((cj3*x9623*x9625))+(((-1.0)*r00*x9629*x9635))+(((-1.0)*x9627))+(((-1.0)*cj2*x9630))+(((-1.0)*cj3*r02*x9636)));
evalcond[8]=((((-1.0)*r00*x9626*x9635))+(((-1.0)*r02*sj3*x9636))+x9624+(((-1.0)*r00*x9628))+(((-1.0)*r01*x9629))+((x9625*x9637))+(((-1.0)*x9634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9639 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9639.valid){
continue;
}
CheckValue<IkReal> x9640=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9640.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9639.value)+(((1.5707963267949)*(x9640.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9641=IKsin(j4);
IkReal x9642=IKcos(j4);
IkReal x9643=(cj2*sj1);
IkReal x9644=(gconst1*r01);
IkReal x9645=(gconst2*sj3);
IkReal x9646=(sj1*sj2);
IkReal x9647=(cj3*gconst1);
IkReal x9648=(cj3*gconst2);
IkReal x9649=((1.0)*cj1);
IkReal x9650=(gconst1*r11);
IkReal x9651=(gconst1*r21);
IkReal x9652=(gconst1*sj3);
IkReal x9653=(sj2*x9649);
IkReal x9654=((1.0)*x9642);
IkReal x9655=((1.0)*x9641);
IkReal x9656=(sj3*x9642);
IkReal x9657=(gconst2*x9641);
evalcond[0]=(((r20*x9657))+(((-1.0)*x9651*x9655))+(((-1.0)*r22*x9654)));
evalcond[1]=((((-1.0)*x9644*x9655))+((r00*x9657))+(((-1.0)*r02*x9654)));
evalcond[2]=((1.0)+(((-1.0)*x9650*x9655))+((r10*x9657))+(((-1.0)*r12*x9654)));
evalcond[3]=(((r11*x9645))+(((-1.0)*r10*x9648*x9654))+((r11*x9642*x9647))+(((-1.0)*cj3*r12*x9655))+((r10*x9652)));
evalcond[4]=((((-1.0)*r10*x9645*x9654))+(((-1.0)*r11*x9648))+(((-1.0)*r10*x9647))+(((-1.0)*r12*sj3*x9655))+((x9650*x9656)));
evalcond[5]=(((r21*x9642*x9647))+((r20*x9652))+(((-1.0)*cj3*r22*x9655))+x9643+(((-1.0)*r20*x9648*x9654))+((r21*x9645))+(((-1.0)*x9653)));
evalcond[6]=((((-1.0)*r20*x9647))+(((-1.0)*r20*x9645*x9654))+x9646+(((-1.0)*r22*sj3*x9655))+((cj1*cj2))+((x9651*x9656))+(((-1.0)*r21*x9648)));
evalcond[7]=((((-1.0)*cj3*r02*x9655))+(((-1.0)*cj2*x9649))+((r00*x9652))+((cj3*x9642*x9644))+((r01*x9645))+(((-1.0)*x9646))+(((-1.0)*r00*x9648*x9654)));
evalcond[8]=((((-1.0)*r00*x9647))+(((-1.0)*r01*x9648))+((x9644*x9656))+(((-1.0)*r02*sj3*x9655))+x9643+(((-1.0)*r00*x9645*x9654))+(((-1.0)*x9653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9658=((-1.0)*py);
CheckValue<IkReal> x9660 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9660.valid){
continue;
}
IkReal x9659=((-1.0)*(x9660.value));
sj5=gconst1;
cj5=gconst2;
j5=x9659;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9658);
rxp0_2=(py*r00);
rxp1_0=(r21*x9658);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9659;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=(((r00*r20))+((r01*r21)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9661=((-1.0)*py);
CheckValue<IkReal> x9663 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9663.valid){
continue;
}
IkReal x9662=((-1.0)*(x9663.value));
sj5=gconst1;
cj5=gconst2;
j5=x9662;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9661);
rxp0_2=(py*r00);
rxp1_0=(r21*x9661);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9662;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9664=((1.0)*cj3);
j4eval[0]=(((r00*r20))+((r01*r21)));
j4eval[1]=((((-1.0)*x9664))+((cj3*(r00*r00)))+(((-1.0)*x9664*(r21*r21))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9665=((-1.0)*py);
CheckValue<IkReal> x9667 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9667.valid){
continue;
}
IkReal x9666=((-1.0)*(x9667.value));
sj5=gconst1;
cj5=gconst2;
j5=x9666;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9665);
rxp0_2=(py*r00);
rxp1_0=(r21*x9665);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9666;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9669=IKPowWithIntegerCheck(r12,-1);
if(!x9669.valid){
continue;
}
IkReal x9668=x9669.value;
CheckValue<IkReal> x9670=IKPowWithIntegerCheck(cj3,-1);
if(!x9670.valid){
continue;
}
if( IKabs((x9668*(x9670.value)*((((cj1*cj2*sj0))+((sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x9668)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x9668*(x9670.value)*((((cj1*cj2*sj0))+((sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x9668))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x9668*(x9670.value)*((((cj1*cj2*sj0))+((sj0*sj1*sj2))))), ((-1.0)*cj0*x9668));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9671=IKsin(j4);
IkReal x9672=IKcos(j4);
IkReal x9673=(gconst1*r01);
IkReal x9674=(cj1*cj2);
IkReal x9675=(sj1*sj2);
IkReal x9676=((1.0)*gconst2);
IkReal x9677=(cj2*sj1);
IkReal x9678=(gconst1*r21);
IkReal x9679=(cj1*sj2);
IkReal x9680=(gconst1*r20);
IkReal x9681=((1.0)*cj0);
IkReal x9682=((1.0)*cj3);
IkReal x9683=(gconst1*r00);
IkReal x9684=(gconst2*sj3);
IkReal x9685=((1.0)*x9671);
IkReal x9686=(sj3*x9672);
IkReal x9687=(cj3*x9672);
IkReal x9688=(gconst2*x9671);
evalcond[0]=((((-1.0)*r12*x9672))+(((-1.0)*x9681)));
evalcond[1]=((((-1.0)*x9678*x9685))+((r20*x9688)));
evalcond[2]=(sj0+(((-1.0)*x9673*x9685))+((r00*x9688)));
evalcond[3]=((((-1.0)*r12*x9671*x9682))+((sj0*x9675))+((sj0*x9674)));
evalcond[4]=((((-1.0)*sj0*x9677))+((sj0*x9679))+(((-1.0)*r12*sj3*x9685)));
evalcond[5]=((((-1.0)*r20*x9676*x9687))+((r21*x9684))+x9677+(((-1.0)*x9679))+((x9678*x9687))+((sj3*x9680)));
evalcond[6]=((((-1.0)*cj3*r21*x9676))+(((-1.0)*x9680*x9682))+(((-1.0)*r20*x9676*x9686))+x9674+x9675+((x9678*x9686)));
evalcond[7]=((((-1.0)*r00*x9676*x9687))+((cj0*x9675))+((cj0*x9674))+((x9673*x9687))+((r01*x9684))+((sj3*x9683)));
evalcond[8]=((((-1.0)*x9677*x9681))+(((-1.0)*cj3*r01*x9676))+(((-1.0)*r00*x9676*x9686))+((cj0*x9679))+((x9673*x9686))+(((-1.0)*x9682*x9683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9689=((1.0)*sj3);
CheckValue<IkReal> x9690=IKPowWithIntegerCheck(((((-1.0)*gconst1*r01))+((gconst2*r00))),-1);
if(!x9690.valid){
continue;
}
CheckValue<IkReal> x9691=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*gconst2*r20))),-1);
if(!x9691.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x9690.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9691.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst2*r21*x9689))+(((-1.0)*gconst1*r20*x9689)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x9690.value)))+IKsqr(((x9691.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst2*r21*x9689))+(((-1.0)*gconst1*r20*x9689))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x9690.value)), ((x9691.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst2*r21*x9689))+(((-1.0)*gconst1*r20*x9689))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9692=IKsin(j4);
IkReal x9693=IKcos(j4);
IkReal x9694=(gconst1*r01);
IkReal x9695=(cj1*cj2);
IkReal x9696=(sj1*sj2);
IkReal x9697=((1.0)*gconst2);
IkReal x9698=(cj2*sj1);
IkReal x9699=(gconst1*r21);
IkReal x9700=(cj1*sj2);
IkReal x9701=(gconst1*r20);
IkReal x9702=((1.0)*cj0);
IkReal x9703=((1.0)*cj3);
IkReal x9704=(gconst1*r00);
IkReal x9705=(gconst2*sj3);
IkReal x9706=((1.0)*x9692);
IkReal x9707=(sj3*x9693);
IkReal x9708=(cj3*x9693);
IkReal x9709=(gconst2*x9692);
evalcond[0]=((((-1.0)*x9702))+(((-1.0)*r12*x9693)));
evalcond[1]=(((r20*x9709))+(((-1.0)*x9699*x9706)));
evalcond[2]=(sj0+((r00*x9709))+(((-1.0)*x9694*x9706)));
evalcond[3]=((((-1.0)*r12*x9692*x9703))+((sj0*x9696))+((sj0*x9695)));
evalcond[4]=((((-1.0)*r12*sj3*x9706))+((sj0*x9700))+(((-1.0)*sj0*x9698)));
evalcond[5]=((((-1.0)*r20*x9697*x9708))+(((-1.0)*x9700))+((sj3*x9701))+((x9699*x9708))+((r21*x9705))+x9698);
evalcond[6]=((((-1.0)*r20*x9697*x9707))+((x9699*x9707))+(((-1.0)*cj3*r21*x9697))+x9696+x9695+(((-1.0)*x9701*x9703)));
evalcond[7]=(((sj3*x9704))+((r01*x9705))+(((-1.0)*r00*x9697*x9708))+((x9694*x9708))+((cj0*x9696))+((cj0*x9695)));
evalcond[8]=((((-1.0)*cj3*r01*x9697))+(((-1.0)*x9698*x9702))+(((-1.0)*r00*x9697*x9707))+((x9694*x9707))+(((-1.0)*x9703*x9704))+((cj0*x9700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9710=IKPowWithIntegerCheck(((((-1.0)*gconst1*r01))+((gconst2*r00))),-1);
if(!x9710.valid){
continue;
}
CheckValue<IkReal> x9711=IKPowWithIntegerCheck(r12,-1);
if(!x9711.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x9710.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x9711.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x9710.value)))+IKsqr(((-1.0)*cj0*(x9711.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x9710.value)), ((-1.0)*cj0*(x9711.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9712=IKsin(j4);
IkReal x9713=IKcos(j4);
IkReal x9714=(gconst1*r01);
IkReal x9715=(cj1*cj2);
IkReal x9716=(sj1*sj2);
IkReal x9717=((1.0)*gconst2);
IkReal x9718=(cj2*sj1);
IkReal x9719=(gconst1*r21);
IkReal x9720=(cj1*sj2);
IkReal x9721=(gconst1*r20);
IkReal x9722=((1.0)*cj0);
IkReal x9723=((1.0)*cj3);
IkReal x9724=(gconst1*r00);
IkReal x9725=(gconst2*sj3);
IkReal x9726=((1.0)*x9712);
IkReal x9727=(sj3*x9713);
IkReal x9728=(cj3*x9713);
IkReal x9729=(gconst2*x9712);
evalcond[0]=((((-1.0)*r12*x9713))+(((-1.0)*x9722)));
evalcond[1]=(((r20*x9729))+(((-1.0)*x9719*x9726)));
evalcond[2]=((((-1.0)*x9714*x9726))+sj0+((r00*x9729)));
evalcond[3]=((((-1.0)*r12*x9712*x9723))+((sj0*x9715))+((sj0*x9716)));
evalcond[4]=((((-1.0)*sj0*x9718))+(((-1.0)*r12*sj3*x9726))+((sj0*x9720)));
evalcond[5]=((((-1.0)*r20*x9717*x9728))+((x9719*x9728))+((sj3*x9721))+x9718+((r21*x9725))+(((-1.0)*x9720)));
evalcond[6]=((((-1.0)*r20*x9717*x9727))+((x9719*x9727))+(((-1.0)*cj3*r21*x9717))+x9716+x9715+(((-1.0)*x9721*x9723)));
evalcond[7]=(((r01*x9725))+((x9714*x9728))+((sj3*x9724))+((cj0*x9715))+((cj0*x9716))+(((-1.0)*r00*x9717*x9728)));
evalcond[8]=(((x9714*x9727))+(((-1.0)*cj3*r01*x9717))+(((-1.0)*x9718*x9722))+((cj0*x9720))+(((-1.0)*r00*x9717*x9727))+(((-1.0)*x9723*x9724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9730=gconst1*gconst1;
IkReal x9731=r21*r21;
IkReal x9732=gconst2*gconst2;
IkReal x9733=r20*r20;
IkReal x9734=(gconst2*sj3);
IkReal x9735=((1.0)*gconst1);
IkReal x9736=(gconst2*r20);
IkReal x9737=(cj2*sj1);
IkReal x9738=(gconst1*r21);
IkReal x9739=((1.0)*cj1*sj2);
IkReal x9740=(r20*r21*sj3);
CheckValue<IkReal> x9741=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj3*x9736*x9738))+((cj3*(r22*r22)))+((cj3*x9732*x9733))+((cj3*x9730*x9731)))),-1);
if(!x9741.valid){
continue;
}
CheckValue<IkReal> x9742 = IKatan2WithCheck(IkReal((((gconst1*r20*r22*sj3))+((r21*r22*x9734))+(((-1.0)*r22*x9739))+((r22*x9737)))),IkReal(((((-1.0)*r21*x9735*x9737))+((cj1*sj2*x9738))+((x9736*x9737))+((x9732*x9740))+(((-1.0)*x9736*x9739))+(((-1.0)*x9731*x9734*x9735))+(((-1.0)*x9730*x9740))+((gconst1*x9733*x9734)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9742.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9741.value)))+(x9742.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9743=IKsin(j4);
IkReal x9744=IKcos(j4);
IkReal x9745=(gconst2*sj3);
IkReal x9746=(gconst1*r01);
IkReal x9747=((1.0)*cj3);
IkReal x9748=(cj2*sj0);
IkReal x9749=(sj1*sj2);
IkReal x9750=(gconst1*r10);
IkReal x9751=(cj3*gconst2);
IkReal x9752=((1.0)*sj1);
IkReal x9753=(cj0*cj2);
IkReal x9754=(gconst1*r11);
IkReal x9755=(gconst1*r21);
IkReal x9756=(cj1*sj2);
IkReal x9757=(gconst1*r20);
IkReal x9758=(gconst1*r00);
IkReal x9759=((1.0)*x9744);
IkReal x9760=((1.0)*x9743);
IkReal x9761=(sj3*x9744);
IkReal x9762=(gconst2*x9743);
IkReal x9763=(cj3*x9744);
evalcond[0]=((((-1.0)*r22*x9759))+(((-1.0)*x9755*x9760))+((r20*x9762)));
evalcond[1]=(sj0+((r00*x9762))+(((-1.0)*x9746*x9760))+(((-1.0)*r02*x9759)));
evalcond[2]=(((r10*x9762))+(((-1.0)*x9754*x9760))+(((-1.0)*r12*x9759))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9756))+((r21*x9745))+(((-1.0)*gconst2*r20*x9744*x9747))+((x9755*x9763))+((sj3*x9757))+(((-1.0)*r22*x9743*x9747)));
evalcond[4]=((((-1.0)*r20*x9745*x9759))+(((-1.0)*x9747*x9757))+x9749+(((-1.0)*gconst2*r21*x9747))+((cj1*cj2))+((x9755*x9761))+(((-1.0)*r22*sj3*x9760)));
evalcond[5]=(((cj1*x9753))+(((-1.0)*r02*x9743*x9747))+((r01*x9745))+(((-1.0)*gconst2*r00*x9744*x9747))+((x9746*x9763))+((sj3*x9758))+((cj0*x9749)));
evalcond[6]=(((sj0*x9749))+((r11*x9745))+((cj1*x9748))+((x9754*x9763))+(((-1.0)*r12*x9743*x9747))+(((-1.0)*gconst2*r10*x9744*x9747))+((sj3*x9750)));
evalcond[7]=((((-1.0)*r00*x9745*x9759))+(((-1.0)*x9747*x9758))+(((-1.0)*x9752*x9753))+((cj0*x9756))+((x9746*x9761))+(((-1.0)*r02*sj3*x9760))+(((-1.0)*gconst2*r01*x9747)));
evalcond[8]=((((-1.0)*x9747*x9750))+(((-1.0)*r10*x9745*x9759))+(((-1.0)*gconst2*r11*x9747))+((sj0*x9756))+(((-1.0)*x9748*x9752))+(((-1.0)*r12*sj3*x9760))+((x9754*x9761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9764=((1.0)*gconst1);
CheckValue<IkReal> x9765=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9764)))),-1);
if(!x9765.valid){
continue;
}
CheckValue<IkReal> x9766 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst2*r20))+(((-1.0)*cj0*r21*x9764)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9766.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9765.value)))+(x9766.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9767=IKsin(j4);
IkReal x9768=IKcos(j4);
IkReal x9769=(gconst2*sj3);
IkReal x9770=(gconst1*r01);
IkReal x9771=((1.0)*cj3);
IkReal x9772=(cj2*sj0);
IkReal x9773=(sj1*sj2);
IkReal x9774=(gconst1*r10);
IkReal x9775=(cj3*gconst2);
IkReal x9776=((1.0)*sj1);
IkReal x9777=(cj0*cj2);
IkReal x9778=(gconst1*r11);
IkReal x9779=(gconst1*r21);
IkReal x9780=(cj1*sj2);
IkReal x9781=(gconst1*r20);
IkReal x9782=(gconst1*r00);
IkReal x9783=((1.0)*x9768);
IkReal x9784=((1.0)*x9767);
IkReal x9785=(sj3*x9768);
IkReal x9786=(gconst2*x9767);
IkReal x9787=(cj3*x9768);
evalcond[0]=((((-1.0)*r22*x9783))+((r20*x9786))+(((-1.0)*x9779*x9784)));
evalcond[1]=(((r00*x9786))+sj0+(((-1.0)*x9770*x9784))+(((-1.0)*r02*x9783)));
evalcond[2]=((((-1.0)*r12*x9783))+(((-1.0)*x9778*x9784))+((r10*x9786))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((x9779*x9787))+(((-1.0)*r22*x9767*x9771))+((sj3*x9781))+((r21*x9769))+(((-1.0)*gconst2*r20*x9768*x9771))+(((-1.0)*x9780)));
evalcond[4]=((((-1.0)*gconst2*r21*x9771))+((x9779*x9785))+(((-1.0)*r22*sj3*x9784))+x9773+(((-1.0)*r20*x9769*x9783))+((cj1*cj2))+(((-1.0)*x9771*x9781)));
evalcond[5]=(((r01*x9769))+((cj1*x9777))+(((-1.0)*r02*x9767*x9771))+((sj3*x9782))+((x9770*x9787))+(((-1.0)*gconst2*r00*x9768*x9771))+((cj0*x9773)));
evalcond[6]=(((x9778*x9787))+((cj1*x9772))+((sj0*x9773))+(((-1.0)*gconst2*r10*x9768*x9771))+(((-1.0)*r12*x9767*x9771))+((sj3*x9774))+((r11*x9769)));
evalcond[7]=((((-1.0)*r02*sj3*x9784))+(((-1.0)*r00*x9769*x9783))+((cj0*x9780))+(((-1.0)*gconst2*r01*x9771))+(((-1.0)*x9776*x9777))+((x9770*x9785))+(((-1.0)*x9771*x9782)));
evalcond[8]=((((-1.0)*r10*x9769*x9783))+((sj0*x9780))+((x9778*x9785))+(((-1.0)*x9771*x9774))+(((-1.0)*r12*sj3*x9784))+(((-1.0)*gconst2*r11*x9771))+(((-1.0)*x9772*x9776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9788=((1.0)*gconst1);
CheckValue<IkReal> x9789 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x9788))+((gconst2*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9789.valid){
continue;
}
CheckValue<IkReal> x9790=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r11))+(((-1.0)*r10*x9788)))),-1);
if(!x9790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9789.value)+(((1.5707963267949)*(x9790.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9791=IKsin(j4);
IkReal x9792=IKcos(j4);
IkReal x9793=(gconst2*sj3);
IkReal x9794=(gconst1*r01);
IkReal x9795=((1.0)*cj3);
IkReal x9796=(cj2*sj0);
IkReal x9797=(sj1*sj2);
IkReal x9798=(gconst1*r10);
IkReal x9799=(cj3*gconst2);
IkReal x9800=((1.0)*sj1);
IkReal x9801=(cj0*cj2);
IkReal x9802=(gconst1*r11);
IkReal x9803=(gconst1*r21);
IkReal x9804=(cj1*sj2);
IkReal x9805=(gconst1*r20);
IkReal x9806=(gconst1*r00);
IkReal x9807=((1.0)*x9792);
IkReal x9808=((1.0)*x9791);
IkReal x9809=(sj3*x9792);
IkReal x9810=(gconst2*x9791);
IkReal x9811=(cj3*x9792);
evalcond[0]=((((-1.0)*r22*x9807))+(((-1.0)*x9803*x9808))+((r20*x9810)));
evalcond[1]=((((-1.0)*x9794*x9808))+(((-1.0)*r02*x9807))+sj0+((r00*x9810)));
evalcond[2]=((((-1.0)*x9802*x9808))+(((-1.0)*r12*x9807))+(((-1.0)*cj0))+((r10*x9810)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9804))+(((-1.0)*gconst2*r20*x9792*x9795))+((sj3*x9805))+(((-1.0)*r22*x9791*x9795))+((x9803*x9811))+((r21*x9793)));
evalcond[4]=((((-1.0)*r22*sj3*x9808))+(((-1.0)*gconst2*r21*x9795))+((x9803*x9809))+x9797+(((-1.0)*x9795*x9805))+((cj1*cj2))+(((-1.0)*r20*x9793*x9807)));
evalcond[5]=((((-1.0)*r02*x9791*x9795))+((sj3*x9806))+((x9794*x9811))+((cj1*x9801))+((r01*x9793))+(((-1.0)*gconst2*r00*x9792*x9795))+((cj0*x9797)));
evalcond[6]=(((sj3*x9798))+((r11*x9793))+((cj1*x9796))+(((-1.0)*gconst2*r10*x9792*x9795))+((sj0*x9797))+((x9802*x9811))+(((-1.0)*r12*x9791*x9795)));
evalcond[7]=((((-1.0)*x9800*x9801))+((x9794*x9809))+(((-1.0)*gconst2*r01*x9795))+(((-1.0)*x9795*x9806))+(((-1.0)*r00*x9793*x9807))+((cj0*x9804))+(((-1.0)*r02*sj3*x9808)));
evalcond[8]=((((-1.0)*r10*x9793*x9807))+((sj0*x9804))+(((-1.0)*x9795*x9798))+((x9802*x9809))+(((-1.0)*x9796*x9800))+(((-1.0)*r12*sj3*x9808))+(((-1.0)*gconst2*r11*x9795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9813 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x9813)==0){
continue;
}
IkReal x9812=pow(x9813,-0.5);
CheckValue<IkReal> x9814 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9814.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x9814.value))));
IkReal gconst4=((1.0)*r21*x9812);
IkReal gconst5=((-1.0)*r20*x9812);
CheckValue<IkReal> x9815 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9815.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x9815.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9818 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9818.valid){
continue;
}
IkReal x9816=((1.0)*(x9818.value));
IkReal x9817=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9816)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9816)));
IkReal gconst4=((1.0)*r21*x9817);
IkReal gconst5=((-1.0)*r20*x9817);
IkReal x9819=r22*r22;
IkReal x9820=((1.0)*x9819);
CheckValue<IkReal> x9824=IKPowWithIntegerCheck(((-1.0)+x9819),-1);
if(!x9824.valid){
continue;
}
IkReal x9821=x9824.value;
if((((1.0)+(((-1.0)*x9820)))) < -0.00001)
continue;
IkReal x9822=IKsqrt(((1.0)+(((-1.0)*x9820))));
IkReal x9823=(sj0*x9821*x9822);
j4eval[0]=((IKabs(((((-1.0)*x9820*x9823))+x9823)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9827 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9827.valid){
continue;
}
IkReal x9825=((1.0)*(x9827.value));
IkReal x9826=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9825)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9825)));
IkReal gconst4=((1.0)*r21*x9826);
IkReal gconst5=((-1.0)*r20*x9826);
IkReal x9828=r22*r22;
IkReal x9829=((1.0)*x9828);
CheckValue<IkReal> x9833=IKPowWithIntegerCheck(((-1.0)+x9828),-1);
if(!x9833.valid){
continue;
}
IkReal x9830=x9833.value;
if((((1.0)+(((-1.0)*x9829)))) < -0.00001)
continue;
IkReal x9831=IKsqrt(((1.0)+(((-1.0)*x9829))));
IkReal x9832=(cj0*x9830*x9831);
j4eval[0]=((IKabs(((((-1.0)*x9829*x9832))+x9832)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x9836 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9836.valid){
continue;
}
IkReal x9834=((1.0)*(x9836.value));
IkReal x9835=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9834)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9834)));
IkReal gconst4=((1.0)*r21*x9835);
IkReal gconst5=((-1.0)*r20*x9835);
IkReal x9837=r22*r22;
IkReal x9838=(cj0*r02);
IkReal x9839=(r12*sj0);
CheckValue<IkReal> x9843=IKPowWithIntegerCheck(((-1.0)+x9837),-1);
if(!x9843.valid){
continue;
}
IkReal x9840=x9843.value;
if((((1.0)+(((-1.0)*x9837)))) < -0.00001)
continue;
IkReal x9841=IKsqrt(((1.0)+(((-1.0)*x9837))));
IkReal x9842=((1.0)*r22*x9840*x9841);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x9839*x9842))+(((-1.0)*x9838*x9842)))))+(IKabs((x9838+x9839))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x9846 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9846.valid){
continue;
}
IkReal x9844=((1.0)*(x9846.value));
IkReal x9845=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9844)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9844)));
IkReal gconst4=((1.0)*r21*x9845);
IkReal gconst5=((-1.0)*r20*x9845);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9849 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9849.valid){
continue;
}
IkReal x9847=((1.0)*(x9849.value));
IkReal x9848=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9847)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9847)));
IkReal gconst4=((1.0)*r21*x9848);
IkReal gconst5=((-1.0)*r20*x9848);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x9852 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9852.valid){
continue;
}
IkReal x9850=((1.0)*(x9852.value));
IkReal x9851=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9850)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9850)));
IkReal gconst4=((1.0)*r21*x9851);
IkReal gconst5=((-1.0)*r20*x9851);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x9855 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9855.valid){
continue;
}
IkReal x9853=((1.0)*(x9855.value));
IkReal x9854=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9853)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9853)));
IkReal gconst4=((1.0)*r21*x9854);
IkReal gconst5=((-1.0)*r20*x9854);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9858 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9858.valid){
continue;
}
IkReal x9856=((1.0)*(x9858.value));
IkReal x9857=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9856)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9856)));
IkReal gconst4=((1.0)*r21*x9857);
IkReal gconst5=((-1.0)*r20*x9857);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x9861 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9861.valid){
continue;
}
IkReal x9859=((1.0)*(x9861.value));
IkReal x9860=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9859)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9859)));
IkReal gconst4=((1.0)*r21*x9860);
IkReal gconst5=((-1.0)*r20*x9860);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9862=(gconst4*r01);
IkReal x9863=(gconst5*r00);
CheckValue<IkReal> x9864 = IKatan2WithCheck(IkReal(((((-1.0)*x9863))+x9862)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9864.valid){
continue;
}
CheckValue<IkReal> x9865=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9862*x9863))+(x9862*x9862)+(r02*r02)+(x9863*x9863))),-1);
if(!x9865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9864.value)+(((1.5707963267949)*(x9865.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9866=IKsin(j4);
IkReal x9867=IKcos(j4);
IkReal x9868=(gconst4*r21);
IkReal x9869=(gconst5*r10);
IkReal x9870=(gconst4*r11);
IkReal x9871=(gconst4*r01);
IkReal x9872=((1.0)*x9867);
IkReal x9873=((1.0)*x9866);
IkReal x9874=(gconst5*x9866);
evalcond[0]=(((r20*x9874))+(((-1.0)*r22*x9872))+(((-1.0)*x9868*x9873)));
evalcond[1]=(((x9866*x9869))+(((-1.0)*x9870*x9873))+(((-1.0)*r12*x9872)));
evalcond[2]=((((-1.0)*r02*x9873))+((x9867*x9871))+(((-1.0)*gconst5*r00*x9872)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9872))+(((-1.0)*x9871*x9873))+((r00*x9874)));
evalcond[4]=((((-1.0)*gconst5*r20*x9872))+((x9867*x9868))+((sj1*sj2))+(((-1.0)*r22*x9873))+((cj1*cj2)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((x9867*x9870))+(((-1.0)*r12*x9873))+(((-1.0)*x9869*x9872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9875=((1.0)*gconst4);
CheckValue<IkReal> x9876 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x9875))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9876.valid){
continue;
}
CheckValue<IkReal> x9877=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9875))+(((-1.0)*gconst5*r11)))),-1);
if(!x9877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9876.value)+(((1.5707963267949)*(x9877.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9878=IKsin(j4);
IkReal x9879=IKcos(j4);
IkReal x9880=(gconst4*r21);
IkReal x9881=(gconst5*r10);
IkReal x9882=(gconst4*r11);
IkReal x9883=(gconst4*r01);
IkReal x9884=((1.0)*x9879);
IkReal x9885=((1.0)*x9878);
IkReal x9886=(gconst5*x9878);
evalcond[0]=((((-1.0)*r22*x9884))+((r20*x9886))+(((-1.0)*x9880*x9885)));
evalcond[1]=((((-1.0)*x9882*x9885))+((x9878*x9881))+(((-1.0)*r12*x9884)));
evalcond[2]=(((x9879*x9883))+(((-1.0)*gconst5*r00*x9884))+(((-1.0)*r02*x9885)));
evalcond[3]=((1.0)+(((-1.0)*x9883*x9885))+((r00*x9886))+(((-1.0)*r02*x9884)));
evalcond[4]=((((-1.0)*r22*x9885))+((x9879*x9880))+((sj1*sj2))+(((-1.0)*gconst5*r20*x9884))+((cj1*cj2)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((x9879*x9882))+(((-1.0)*r12*x9885))+(((-1.0)*x9881*x9884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9887 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9887.valid){
continue;
}
CheckValue<IkReal> x9888=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9888.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9887.value)+(((1.5707963267949)*(x9888.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9889=IKsin(j4);
IkReal x9890=IKcos(j4);
IkReal x9891=(gconst4*r21);
IkReal x9892=(gconst5*r10);
IkReal x9893=(gconst4*r11);
IkReal x9894=(gconst4*r01);
IkReal x9895=((1.0)*x9890);
IkReal x9896=((1.0)*x9889);
IkReal x9897=(gconst5*x9889);
evalcond[0]=((((-1.0)*x9891*x9896))+((r20*x9897))+(((-1.0)*r22*x9895)));
evalcond[1]=(((x9889*x9892))+(((-1.0)*r12*x9895))+(((-1.0)*x9893*x9896)));
evalcond[2]=(((x9890*x9894))+(((-1.0)*gconst5*r00*x9895))+(((-1.0)*r02*x9896)));
evalcond[3]=((1.0)+((r00*x9897))+(((-1.0)*x9894*x9896))+(((-1.0)*r02*x9895)));
evalcond[4]=(((x9890*x9891))+((sj1*sj2))+(((-1.0)*gconst5*r20*x9895))+((cj1*cj2))+(((-1.0)*r22*x9896)));
evalcond[5]=(((x9890*x9893))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x9896))+(((-1.0)*x9892*x9895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x9900 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9900.valid){
continue;
}
IkReal x9898=((1.0)*(x9900.value));
IkReal x9899=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9898)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9898)));
IkReal gconst4=((1.0)*r21*x9899);
IkReal gconst5=((-1.0)*r20*x9899);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9903 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9903.valid){
continue;
}
IkReal x9901=((1.0)*(x9903.value));
IkReal x9902=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9901)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9901)));
IkReal gconst4=((1.0)*r21*x9902);
IkReal gconst5=((-1.0)*r20*x9902);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9906 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9906.valid){
continue;
}
IkReal x9904=((1.0)*(x9906.value));
IkReal x9905=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9904)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9904)));
IkReal gconst4=((1.0)*r21*x9905);
IkReal gconst5=((-1.0)*r20*x9905);
IkReal x9907=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9911=IKPowWithIntegerCheck(x9907,-1);
if(!x9911.valid){
continue;
}
IkReal x9908=x9911.value;
IkReal x9909=((1.0)*x9908);
IkReal x9910=((((-2.0)*r00*r01*r20*r21*x9908))+(((-1.0)*x9909*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x9909*(r01*r01)*(r21*r21))));
j4eval[0]=x9910;
j4eval[1]=r02;
j4eval[2]=x9907;
j4eval[3]=IKsign(x9910);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9912=(gconst5*r00);
IkReal x9913=(gconst4*r01);
CheckValue<IkReal> x9914 = IKatan2WithCheck(IkReal(((((-1.0)*x9913))+x9912)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9914.valid){
continue;
}
CheckValue<IkReal> x9915=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9912*x9912)))+(((-1.0)*(r02*r02)))+(((2.0)*x9912*x9913))+(((-1.0)*(x9913*x9913))))),-1);
if(!x9915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9914.value)+(((1.5707963267949)*(x9915.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9916=IKcos(j4);
IkReal x9917=IKsin(j4);
IkReal x9918=((1.0)*x9916);
IkReal x9919=(gconst5*x9916);
IkReal x9920=(gconst5*x9917);
IkReal x9921=((1.0)*gconst4*x9917);
evalcond[0]=((((-1.0)*gconst4*r01*x9918))+((r00*x9919))+((r02*x9917)));
evalcond[1]=((((-1.0)*r21*x9921))+((r20*x9920))+(((-1.0)*r22*x9918)));
evalcond[2]=(((r10*x9920))+(((-1.0)*r12*x9918))+(((-1.0)*r11*x9921)));
evalcond[3]=((1.0)+(((-1.0)*r01*x9921))+(((-1.0)*r02*x9918))+((r00*x9920)));
evalcond[4]=(((r20*x9919))+((sj1*sj2))+((r22*x9917))+((cj1*cj2))+(((-1.0)*gconst4*r21*x9918)));
evalcond[5]=(((r12*x9917))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((r10*x9919))+(((-1.0)*gconst4*r11*x9918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9922=((1.0)*gconst4);
CheckValue<IkReal> x9923=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9922))+(((-1.0)*gconst5*r11)))),-1);
if(!x9923.valid){
continue;
}
CheckValue<IkReal> x9924 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x9922))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9923.value)))+(x9924.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9925=IKcos(j4);
IkReal x9926=IKsin(j4);
IkReal x9927=((1.0)*x9925);
IkReal x9928=(gconst5*x9925);
IkReal x9929=(gconst5*x9926);
IkReal x9930=((1.0)*gconst4*x9926);
evalcond[0]=((((-1.0)*gconst4*r01*x9927))+((r02*x9926))+((r00*x9928)));
evalcond[1]=(((r20*x9929))+(((-1.0)*r22*x9927))+(((-1.0)*r21*x9930)));
evalcond[2]=(((r10*x9929))+(((-1.0)*r12*x9927))+(((-1.0)*r11*x9930)));
evalcond[3]=((1.0)+(((-1.0)*r01*x9930))+(((-1.0)*r02*x9927))+((r00*x9929)));
evalcond[4]=((((-1.0)*gconst4*r21*x9927))+((r20*x9928))+((sj1*sj2))+((cj1*cj2))+((r22*x9926)));
evalcond[5]=(((r10*x9928))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((r12*x9926))+(((-1.0)*gconst4*r11*x9927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9931 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9931.valid){
continue;
}
CheckValue<IkReal> x9932=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9932.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9931.value)+(((1.5707963267949)*(x9932.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9933=IKcos(j4);
IkReal x9934=IKsin(j4);
IkReal x9935=((1.0)*x9933);
IkReal x9936=(gconst5*x9933);
IkReal x9937=(gconst5*x9934);
IkReal x9938=((1.0)*gconst4*x9934);
evalcond[0]=(((r00*x9936))+(((-1.0)*gconst4*r01*x9935))+((r02*x9934)));
evalcond[1]=((((-1.0)*r22*x9935))+(((-1.0)*r21*x9938))+((r20*x9937)));
evalcond[2]=(((r10*x9937))+(((-1.0)*r12*x9935))+(((-1.0)*r11*x9938)));
evalcond[3]=((1.0)+((r00*x9937))+(((-1.0)*r01*x9938))+(((-1.0)*r02*x9935)));
evalcond[4]=((((-1.0)*gconst4*r21*x9935))+((r22*x9934))+((sj1*sj2))+((cj1*cj2))+((r20*x9936)));
evalcond[5]=((((-1.0)*gconst4*r11*x9935))+((r10*x9936))+((r12*x9934))+((cj1*sj2))+(((-1.0)*cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x9941 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9941.valid){
continue;
}
IkReal x9939=((1.0)*(x9941.value));
IkReal x9940=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9939)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9939)));
IkReal gconst4=((1.0)*r21*x9940);
IkReal gconst5=((-1.0)*r20*x9940);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9944 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9944.valid){
continue;
}
IkReal x9942=((1.0)*(x9944.value));
IkReal x9943=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9942)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9942)));
IkReal gconst4=((1.0)*r21*x9943);
IkReal gconst5=((-1.0)*r20*x9943);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x9947 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9947.valid){
continue;
}
IkReal x9945=((1.0)*(x9947.value));
IkReal x9946=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9945)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9945)));
IkReal gconst4=((1.0)*r21*x9946);
IkReal gconst5=((-1.0)*r20*x9946);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9948=(gconst4*r01);
IkReal x9949=(gconst5*r00);
CheckValue<IkReal> x9950 = IKatan2WithCheck(IkReal(((((-1.0)*x9949))+x9948)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9950.valid){
continue;
}
CheckValue<IkReal> x9951=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9948*x9949))+(x9948*x9948)+(r02*r02)+(x9949*x9949))),-1);
if(!x9951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9950.value)+(((1.5707963267949)*(x9951.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9952=IKsin(j4);
IkReal x9953=IKcos(j4);
IkReal x9954=(gconst4*r21);
IkReal x9955=(gconst5*r10);
IkReal x9956=(gconst4*r11);
IkReal x9957=(gconst4*r01);
IkReal x9958=((1.0)*x9953);
IkReal x9959=((1.0)*x9952);
IkReal x9960=(gconst5*x9952);
evalcond[0]=((((-1.0)*r22*x9958))+(((-1.0)*x9954*x9959))+((r20*x9960)));
evalcond[1]=((((-1.0)*r12*x9958))+((x9952*x9955))+(((-1.0)*x9956*x9959)));
evalcond[2]=(((x9953*x9957))+(((-1.0)*r02*x9959))+(((-1.0)*gconst5*r00*x9958)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9958))+((r00*x9960))+(((-1.0)*x9957*x9959)));
evalcond[4]=((((-1.0)*x9955*x9958))+((x9953*x9956))+((sj1*sj2))+(((-1.0)*r12*x9959))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+((x9953*x9954))+(((-1.0)*gconst5*r20*x9958))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x9959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9961=((1.0)*gconst4);
CheckValue<IkReal> x9962 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*r21*x9961)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9962.valid){
continue;
}
CheckValue<IkReal> x9963=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9961))+(((-1.0)*gconst5*r11)))),-1);
if(!x9963.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9962.value)+(((1.5707963267949)*(x9963.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9964=IKsin(j4);
IkReal x9965=IKcos(j4);
IkReal x9966=(gconst4*r21);
IkReal x9967=(gconst5*r10);
IkReal x9968=(gconst4*r11);
IkReal x9969=(gconst4*r01);
IkReal x9970=((1.0)*x9965);
IkReal x9971=((1.0)*x9964);
IkReal x9972=(gconst5*x9964);
evalcond[0]=((((-1.0)*x9966*x9971))+((r20*x9972))+(((-1.0)*r22*x9970)));
evalcond[1]=(((x9964*x9967))+(((-1.0)*x9968*x9971))+(((-1.0)*r12*x9970)));
evalcond[2]=((((-1.0)*r02*x9971))+((x9965*x9969))+(((-1.0)*gconst5*r00*x9970)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9970))+(((-1.0)*x9969*x9971))+((r00*x9972)));
evalcond[4]=((((-1.0)*x9967*x9970))+((x9965*x9968))+((sj1*sj2))+(((-1.0)*r12*x9971))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+((x9965*x9966))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst5*r20*x9970))+(((-1.0)*r22*x9971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9973 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9973.valid){
continue;
}
CheckValue<IkReal> x9974=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9973.value)+(((1.5707963267949)*(x9974.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9975=IKsin(j4);
IkReal x9976=IKcos(j4);
IkReal x9977=(gconst4*r21);
IkReal x9978=(gconst5*r10);
IkReal x9979=(gconst4*r11);
IkReal x9980=(gconst4*r01);
IkReal x9981=((1.0)*x9976);
IkReal x9982=((1.0)*x9975);
IkReal x9983=(gconst5*x9975);
evalcond[0]=((((-1.0)*r22*x9981))+(((-1.0)*x9977*x9982))+((r20*x9983)));
evalcond[1]=(((x9975*x9978))+(((-1.0)*x9979*x9982))+(((-1.0)*r12*x9981)));
evalcond[2]=(((x9976*x9980))+(((-1.0)*r02*x9982))+(((-1.0)*gconst5*r00*x9981)));
evalcond[3]=((1.0)+((r00*x9983))+(((-1.0)*r02*x9981))+(((-1.0)*x9980*x9982)));
evalcond[4]=(((x9976*x9979))+((sj1*sj2))+(((-1.0)*x9978*x9981))+(((-1.0)*r12*x9982))+((cj1*cj2)));
evalcond[5]=((((-1.0)*gconst5*r20*x9981))+((cj2*sj1))+(((-1.0)*r22*x9982))+((x9976*x9977))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x9986 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9986.valid){
continue;
}
IkReal x9984=((1.0)*(x9986.value));
IkReal x9985=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9984)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9984)));
IkReal gconst4=((1.0)*r21*x9985);
IkReal gconst5=((-1.0)*r20*x9985);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9989 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9989.valid){
continue;
}
IkReal x9987=((1.0)*(x9989.value));
IkReal x9988=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9987)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9987)));
IkReal gconst4=((1.0)*r21*x9988);
IkReal gconst5=((-1.0)*r20*x9988);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9992 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9992.valid){
continue;
}
IkReal x9990=((1.0)*(x9992.value));
IkReal x9991=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9990)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9990)));
IkReal gconst4=((1.0)*r21*x9991);
IkReal gconst5=((-1.0)*r20*x9991);
IkReal x9993=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9997=IKPowWithIntegerCheck(x9993,-1);
if(!x9997.valid){
continue;
}
IkReal x9994=x9997.value;
IkReal x9995=((1.0)*x9994);
IkReal x9996=((((-2.0)*r00*r01*r20*r21*x9994))+(((-1.0)*(r02*r02)))+(((-1.0)*x9995*(r00*r00)*(r20*r20)))+(((-1.0)*x9995*(r01*r01)*(r21*r21))));
j4eval[0]=x9996;
j4eval[1]=r02;
j4eval[2]=x9993;
j4eval[3]=IKsign(x9996);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9998=(gconst5*r00);
IkReal x9999=(gconst4*r01);
CheckValue<IkReal> x10000=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9999*x9999)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9998*x9998)))+(((2.0)*x9998*x9999)))),-1);
if(!x10000.valid){
continue;
}
CheckValue<IkReal> x10001 = IKatan2WithCheck(IkReal(((((-1.0)*x9999))+x9998)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10000.value)))+(x10001.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10002=IKcos(j4);
IkReal x10003=IKsin(j4);
IkReal x10004=((1.0)*x10002);
IkReal x10005=(gconst5*x10002);
IkReal x10006=(gconst5*x10003);
IkReal x10007=((1.0)*gconst4*x10003);
evalcond[0]=(((r02*x10003))+((r00*x10005))+(((-1.0)*gconst4*r01*x10004)));
evalcond[1]=((((-1.0)*r21*x10007))+(((-1.0)*r22*x10004))+((r20*x10006)));
evalcond[2]=((((-1.0)*r11*x10007))+((r10*x10006))+(((-1.0)*r12*x10004)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10004))+((r00*x10006))+(((-1.0)*r01*x10007)));
evalcond[4]=((((-1.0)*gconst4*r11*x10004))+((r12*x10003))+((sj1*sj2))+((r10*x10005))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+((r22*x10003))+(((-1.0)*cj1*sj2))+((r20*x10005))+(((-1.0)*gconst4*r21*x10004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10008=((1.0)*gconst4);
CheckValue<IkReal> x10009 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10008))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10009.valid){
continue;
}
CheckValue<IkReal> x10010=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r11))+(((-1.0)*r10*x10008)))),-1);
if(!x10010.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10009.value)+(((1.5707963267949)*(x10010.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10011=IKcos(j4);
IkReal x10012=IKsin(j4);
IkReal x10013=((1.0)*x10011);
IkReal x10014=(gconst5*x10011);
IkReal x10015=(gconst5*x10012);
IkReal x10016=((1.0)*gconst4*x10012);
evalcond[0]=(((r02*x10012))+((r00*x10014))+(((-1.0)*gconst4*r01*x10013)));
evalcond[1]=((((-1.0)*r21*x10016))+(((-1.0)*r22*x10013))+((r20*x10015)));
evalcond[2]=(((r10*x10015))+(((-1.0)*r12*x10013))+(((-1.0)*r11*x10016)));
evalcond[3]=((1.0)+(((-1.0)*r01*x10016))+(((-1.0)*r02*x10013))+((r00*x10015)));
evalcond[4]=(((r12*x10012))+((r10*x10014))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst4*r11*x10013)));
evalcond[5]=(((cj2*sj1))+((r22*x10012))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r21*x10013))+((r20*x10014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10017 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10017.valid){
continue;
}
CheckValue<IkReal> x10018=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10017.value)+(((1.5707963267949)*(x10018.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10019=IKcos(j4);
IkReal x10020=IKsin(j4);
IkReal x10021=((1.0)*x10019);
IkReal x10022=(gconst5*x10019);
IkReal x10023=(gconst5*x10020);
IkReal x10024=((1.0)*gconst4*x10020);
evalcond[0]=((((-1.0)*gconst4*r01*x10021))+((r00*x10022))+((r02*x10020)));
evalcond[1]=((((-1.0)*r22*x10021))+((r20*x10023))+(((-1.0)*r21*x10024)));
evalcond[2]=((((-1.0)*r12*x10021))+((r10*x10023))+(((-1.0)*r11*x10024)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10021))+(((-1.0)*r01*x10024))+((r00*x10023)));
evalcond[4]=(((sj1*sj2))+((r10*x10022))+((r12*x10020))+((cj1*cj2))+(((-1.0)*gconst4*r11*x10021)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((r20*x10022))+((r22*x10020))+(((-1.0)*gconst4*r21*x10021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10025=gconst4*gconst4;
IkReal x10026=gconst5*gconst5;
IkReal x10027=(cj3*r20);
IkReal x10028=(r00*sj3);
IkReal x10029=(r01*sj3);
IkReal x10030=(gconst4*gconst5);
IkReal x10031=(r21*x10025);
IkReal x10032=((1.0)*r01*x10030);
CheckValue<IkReal> x10033=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj3*r00*r21*x10030))+((r00*x10026*x10027))+((cj3*r02*r22))+(((-1.0)*x10027*x10032))+((cj3*r01*x10031)))),-1);
if(!x10033.valid){
continue;
}
CheckValue<IkReal> x10034 = IKatan2WithCheck(IkReal((((gconst5*r22*x10029))+((gconst4*r22*x10028)))),IkReal(((((-1.0)*r21*x10029*x10030))+((r20*x10028*x10030))+((r20*x10026*x10029))+(((-1.0)*x10028*x10031)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10034.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10033.value)))+(x10034.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10035=IKsin(j4);
IkReal x10036=IKcos(j4);
IkReal x10037=(sj1*sj2);
IkReal x10038=(cj1*cj2);
IkReal x10039=(gconst5*sj3);
IkReal x10040=((1.0)*r21);
IkReal x10041=(cj3*gconst5);
IkReal x10042=(cj1*sj2);
IkReal x10043=((1.0)*r11);
IkReal x10044=((1.0)*cj3);
IkReal x10045=(gconst4*r20);
IkReal x10046=(cj2*sj1);
IkReal x10047=(gconst4*r10);
IkReal x10048=(gconst4*r00);
IkReal x10049=((1.0)*r01);
IkReal x10050=((1.0)*sj3);
IkReal x10051=((1.0)*x10036);
IkReal x10052=(gconst4*x10035);
IkReal x10053=(r22*x10035);
IkReal x10054=(gconst5*x10035);
IkReal x10055=(r02*x10035);
IkReal x10056=(r12*x10035);
IkReal x10057=(x10038+x10037);
IkReal x10058=(gconst4*sj3*x10036);
IkReal x10059=(cj3*gconst4*x10036);
evalcond[0]=(((r20*x10054))+(((-1.0)*x10040*x10052))+(((-1.0)*r22*x10051)));
evalcond[1]=((((-1.0)*x10043*x10052))+((r10*x10054))+(((-1.0)*r12*x10051)));
evalcond[2]=((1.0)+((r00*x10054))+(((-1.0)*x10049*x10052))+(((-1.0)*r02*x10051)));
evalcond[3]=(((r01*x10059))+((sj3*x10048))+(((-1.0)*x10044*x10055))+((r01*x10039))+(((-1.0)*r00*x10041*x10051)));
evalcond[4]=((((-1.0)*x10044*x10048))+(((-1.0)*x10041*x10049))+((r01*x10058))+(((-1.0)*r00*x10039*x10051))+(((-1.0)*x10050*x10055)));
evalcond[5]=(((sj3*x10047))+(((-1.0)*x10044*x10056))+(((-1.0)*r10*x10041*x10051))+((r11*x10039))+x10057+((r11*x10059)));
evalcond[6]=((((-1.0)*x10042))+(((-1.0)*r20*x10041*x10051))+((r21*x10039))+((sj3*x10045))+(((-1.0)*x10044*x10053))+x10046+((r21*x10059)));
evalcond[7]=((((-1.0)*x10044*x10045))+(((-1.0)*x10050*x10053))+(((-1.0)*r20*x10039*x10051))+x10057+((r21*x10058))+(((-1.0)*x10040*x10041)));
evalcond[8]=((((-1.0)*x10044*x10047))+(((-1.0)*x10041*x10043))+(((-1.0)*x10046))+(((-1.0)*r10*x10039*x10051))+(((-1.0)*x10050*x10056))+x10042+((r11*x10058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10060=((1.0)*gconst4);
CheckValue<IkReal> x10061=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x10060))+(((-1.0)*gconst5*r11)))),-1);
if(!x10061.valid){
continue;
}
CheckValue<IkReal> x10062 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10060))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10061.value)))+(x10062.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10063=IKsin(j4);
IkReal x10064=IKcos(j4);
IkReal x10065=(sj1*sj2);
IkReal x10066=(cj1*cj2);
IkReal x10067=(gconst5*sj3);
IkReal x10068=((1.0)*r21);
IkReal x10069=(cj3*gconst5);
IkReal x10070=(cj1*sj2);
IkReal x10071=((1.0)*r11);
IkReal x10072=((1.0)*cj3);
IkReal x10073=(gconst4*r20);
IkReal x10074=(cj2*sj1);
IkReal x10075=(gconst4*r10);
IkReal x10076=(gconst4*r00);
IkReal x10077=((1.0)*r01);
IkReal x10078=((1.0)*sj3);
IkReal x10079=((1.0)*x10064);
IkReal x10080=(gconst4*x10063);
IkReal x10081=(r22*x10063);
IkReal x10082=(gconst5*x10063);
IkReal x10083=(r02*x10063);
IkReal x10084=(r12*x10063);
IkReal x10085=(x10065+x10066);
IkReal x10086=(gconst4*sj3*x10064);
IkReal x10087=(cj3*gconst4*x10064);
evalcond[0]=((((-1.0)*x10068*x10080))+((r20*x10082))+(((-1.0)*r22*x10079)));
evalcond[1]=((((-1.0)*r12*x10079))+((r10*x10082))+(((-1.0)*x10071*x10080)));
evalcond[2]=((1.0)+((r00*x10082))+(((-1.0)*x10077*x10080))+(((-1.0)*r02*x10079)));
evalcond[3]=(((sj3*x10076))+(((-1.0)*r00*x10069*x10079))+((r01*x10087))+((r01*x10067))+(((-1.0)*x10072*x10083)));
evalcond[4]=((((-1.0)*x10072*x10076))+(((-1.0)*x10078*x10083))+((r01*x10086))+(((-1.0)*r00*x10067*x10079))+(((-1.0)*x10069*x10077)));
evalcond[5]=(((sj3*x10075))+x10085+((r11*x10067))+(((-1.0)*r10*x10069*x10079))+((r11*x10087))+(((-1.0)*x10072*x10084)));
evalcond[6]=(((sj3*x10073))+(((-1.0)*r20*x10069*x10079))+x10074+((r21*x10087))+((r21*x10067))+(((-1.0)*x10072*x10081))+(((-1.0)*x10070)));
evalcond[7]=((((-1.0)*r20*x10067*x10079))+(((-1.0)*x10072*x10073))+(((-1.0)*x10078*x10081))+(((-1.0)*x10068*x10069))+x10085+((r21*x10086)));
evalcond[8]=((((-1.0)*r10*x10067*x10079))+(((-1.0)*x10072*x10075))+(((-1.0)*x10078*x10084))+x10070+(((-1.0)*x10069*x10071))+((r11*x10086))+(((-1.0)*x10074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10088 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10088.valid){
continue;
}
CheckValue<IkReal> x10089=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10089.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10088.value)+(((1.5707963267949)*(x10089.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10090=IKsin(j4);
IkReal x10091=IKcos(j4);
IkReal x10092=(sj1*sj2);
IkReal x10093=(cj1*cj2);
IkReal x10094=(gconst5*sj3);
IkReal x10095=((1.0)*r21);
IkReal x10096=(cj3*gconst5);
IkReal x10097=(cj1*sj2);
IkReal x10098=((1.0)*r11);
IkReal x10099=((1.0)*cj3);
IkReal x10100=(gconst4*r20);
IkReal x10101=(cj2*sj1);
IkReal x10102=(gconst4*r10);
IkReal x10103=(gconst4*r00);
IkReal x10104=((1.0)*r01);
IkReal x10105=((1.0)*sj3);
IkReal x10106=((1.0)*x10091);
IkReal x10107=(gconst4*x10090);
IkReal x10108=(r22*x10090);
IkReal x10109=(gconst5*x10090);
IkReal x10110=(r02*x10090);
IkReal x10111=(r12*x10090);
IkReal x10112=(x10093+x10092);
IkReal x10113=(gconst4*sj3*x10091);
IkReal x10114=(cj3*gconst4*x10091);
evalcond[0]=(((r20*x10109))+(((-1.0)*r22*x10106))+(((-1.0)*x10095*x10107)));
evalcond[1]=((((-1.0)*r12*x10106))+((r10*x10109))+(((-1.0)*x10098*x10107)));
evalcond[2]=((1.0)+(((-1.0)*x10104*x10107))+((r00*x10109))+(((-1.0)*r02*x10106)));
evalcond[3]=(((r01*x10114))+(((-1.0)*r00*x10096*x10106))+(((-1.0)*x10099*x10110))+((sj3*x10103))+((r01*x10094)));
evalcond[4]=(((r01*x10113))+(((-1.0)*x10105*x10110))+(((-1.0)*r00*x10094*x10106))+(((-1.0)*x10099*x10103))+(((-1.0)*x10096*x10104)));
evalcond[5]=((((-1.0)*r10*x10096*x10106))+((r11*x10094))+x10112+((r11*x10114))+(((-1.0)*x10099*x10111))+((sj3*x10102)));
evalcond[6]=(((r21*x10114))+x10101+(((-1.0)*r20*x10096*x10106))+((r21*x10094))+(((-1.0)*x10099*x10108))+((sj3*x10100))+(((-1.0)*x10097)));
evalcond[7]=((((-1.0)*x10095*x10096))+((r21*x10113))+(((-1.0)*x10105*x10108))+x10112+(((-1.0)*r20*x10094*x10106))+(((-1.0)*x10099*x10100)));
evalcond[8]=((((-1.0)*x10101))+(((-1.0)*x10105*x10111))+(((-1.0)*r10*x10094*x10106))+(((-1.0)*x10096*x10098))+x10097+((r11*x10113))+(((-1.0)*x10099*x10102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10117 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10117.valid){
continue;
}
IkReal x10115=((1.0)*(x10117.value));
IkReal x10116=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10115)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10115)));
IkReal gconst4=((1.0)*r21*x10116);
IkReal gconst5=((-1.0)*r20*x10116);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10120 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10120.valid){
continue;
}
IkReal x10118=((1.0)*(x10120.value));
IkReal x10119=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10118)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10118)));
IkReal gconst4=((1.0)*r21*x10119);
IkReal gconst5=((-1.0)*r20*x10119);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x10123 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10123.valid){
continue;
}
IkReal x10121=((1.0)*(x10123.value));
IkReal x10122=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10121)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10121)));
IkReal gconst4=((1.0)*r21*x10122);
IkReal gconst5=((-1.0)*r20*x10122);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10126 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10126.valid){
continue;
}
IkReal x10124=((1.0)*(x10126.value));
IkReal x10125=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10124)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10124)));
IkReal gconst4=((1.0)*r21*x10125);
IkReal gconst5=((-1.0)*r20*x10125);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10129 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10129.valid){
continue;
}
IkReal x10127=((1.0)*(x10129.value));
IkReal x10128=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10127)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10127)));
IkReal gconst4=((1.0)*r21*x10128);
IkReal gconst5=((-1.0)*r20*x10128);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10132 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10132.valid){
continue;
}
IkReal x10130=((1.0)*(x10132.value));
IkReal x10131=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10130)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10130)));
IkReal gconst4=((1.0)*r21*x10131);
IkReal gconst5=((-1.0)*r20*x10131);
IkReal x10133=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10137=IKPowWithIntegerCheck(x10133,-1);
if(!x10137.valid){
continue;
}
IkReal x10134=x10137.value;
IkReal x10135=((1.0)*x10134);
IkReal x10136=((((-1.0)*x10135*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x10134))+(((-1.0)*x10135*(r01*r01)*(r21*r21))));
j4eval[0]=x10136;
j4eval[1]=r02;
j4eval[2]=x10133;
j4eval[3]=IKsign(x10136);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10138=(gconst4*r01);
IkReal x10139=(gconst5*r00);
CheckValue<IkReal> x10140=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x10138*x10139))+(((-1.0)*(x10139*x10139)))+(((-1.0)*(x10138*x10138))))),-1);
if(!x10140.valid){
continue;
}
CheckValue<IkReal> x10141 = IKatan2WithCheck(IkReal((x10138+(((-1.0)*x10139)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10140.value)))+(x10141.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10142=IKsin(j4);
IkReal x10143=IKcos(j4);
IkReal x10144=(gconst4*r21);
IkReal x10145=(gconst5*r10);
IkReal x10146=(gconst4*r11);
IkReal x10147=(gconst4*r01);
IkReal x10148=((1.0)*x10143);
IkReal x10149=((1.0)*x10142);
IkReal x10150=(gconst5*x10142);
evalcond[0]=((((-1.0)*x10144*x10149))+(((-1.0)*r22*x10148))+((r20*x10150)));
evalcond[1]=(((x10142*x10145))+(((-1.0)*r12*x10148))+(((-1.0)*x10146*x10149)));
evalcond[2]=((((-1.0)*r02*x10149))+((x10143*x10147))+(((-1.0)*gconst5*r00*x10148)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10148))+(((-1.0)*x10147*x10149))+((r00*x10150)));
evalcond[4]=(((sj1*sj2))+((x10143*x10144))+((cj1*cj2))+(((-1.0)*r22*x10149))+(((-1.0)*gconst5*r20*x10148)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((x10143*x10146))+(((-1.0)*x10145*x10148))+(((-1.0)*r12*x10149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10151=((1.0)*gconst4);
CheckValue<IkReal> x10152=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10151))+(((-1.0)*gconst5*r21)))),-1);
if(!x10152.valid){
continue;
}
CheckValue<IkReal> x10153 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*r11*x10151)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10152.value)))+(x10153.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10154=IKsin(j4);
IkReal x10155=IKcos(j4);
IkReal x10156=(gconst4*r21);
IkReal x10157=(gconst5*r10);
IkReal x10158=(gconst4*r11);
IkReal x10159=(gconst4*r01);
IkReal x10160=((1.0)*x10155);
IkReal x10161=((1.0)*x10154);
IkReal x10162=(gconst5*x10154);
evalcond[0]=((((-1.0)*x10156*x10161))+(((-1.0)*r22*x10160))+((r20*x10162)));
evalcond[1]=((((-1.0)*r12*x10160))+(((-1.0)*x10158*x10161))+((x10154*x10157)));
evalcond[2]=((((-1.0)*gconst5*r00*x10160))+(((-1.0)*r02*x10161))+((x10155*x10159)));
evalcond[3]=((-1.0)+((r00*x10162))+(((-1.0)*r02*x10160))+(((-1.0)*x10159*x10161)));
evalcond[4]=((((-1.0)*r22*x10161))+(((-1.0)*gconst5*r20*x10160))+((sj1*sj2))+((cj1*cj2))+((x10155*x10156)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r12*x10161))+(((-1.0)*cj1*sj2))+(((-1.0)*x10157*x10160))+((x10155*x10158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10163=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10163.valid){
continue;
}
CheckValue<IkReal> x10164 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10163.value)))+(x10164.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10165=IKsin(j4);
IkReal x10166=IKcos(j4);
IkReal x10167=(gconst4*r21);
IkReal x10168=(gconst5*r10);
IkReal x10169=(gconst4*r11);
IkReal x10170=(gconst4*r01);
IkReal x10171=((1.0)*x10166);
IkReal x10172=((1.0)*x10165);
IkReal x10173=(gconst5*x10165);
evalcond[0]=((((-1.0)*r22*x10171))+(((-1.0)*x10167*x10172))+((r20*x10173)));
evalcond[1]=((((-1.0)*x10169*x10172))+((x10165*x10168))+(((-1.0)*r12*x10171)));
evalcond[2]=(((x10166*x10170))+(((-1.0)*gconst5*r00*x10171))+(((-1.0)*r02*x10172)));
evalcond[3]=((-1.0)+((r00*x10173))+(((-1.0)*x10170*x10172))+(((-1.0)*r02*x10171)));
evalcond[4]=((((-1.0)*r22*x10172))+((x10166*x10167))+(((-1.0)*gconst5*r20*x10171))+((sj1*sj2))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+((x10166*x10169))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x10172))+(((-1.0)*x10168*x10171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10176 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10176.valid){
continue;
}
IkReal x10174=((1.0)*(x10176.value));
IkReal x10175=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10174)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10174)));
IkReal gconst4=((1.0)*r21*x10175);
IkReal gconst5=((-1.0)*r20*x10175);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10179 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10179.valid){
continue;
}
IkReal x10177=((1.0)*(x10179.value));
IkReal x10178=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10177)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10177)));
IkReal gconst4=((1.0)*r21*x10178);
IkReal gconst5=((-1.0)*r20*x10178);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10182 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10182.valid){
continue;
}
IkReal x10180=((1.0)*(x10182.value));
IkReal x10181=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10180)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10180)));
IkReal gconst4=((1.0)*r21*x10181);
IkReal gconst5=((-1.0)*r20*x10181);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10183=(gconst5*r00);
IkReal x10184=(gconst4*r01);
CheckValue<IkReal> x10185 = IKatan2WithCheck(IkReal(((((-1.0)*x10184))+x10183)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10185.valid){
continue;
}
CheckValue<IkReal> x10186=IKPowWithIntegerCheck(IKsign(((x10184*x10184)+(x10183*x10183)+(r02*r02)+(((-2.0)*x10183*x10184)))),-1);
if(!x10186.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10185.value)+(((1.5707963267949)*(x10186.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10187=IKcos(j4);
IkReal x10188=IKsin(j4);
IkReal x10189=((1.0)*x10187);
IkReal x10190=(gconst5*x10187);
IkReal x10191=(gconst5*x10188);
IkReal x10192=((1.0)*gconst4*x10188);
evalcond[0]=(((r02*x10188))+(((-1.0)*gconst4*r01*x10189))+((r00*x10190)));
evalcond[1]=((((-1.0)*r21*x10192))+((r20*x10191))+(((-1.0)*r22*x10189)));
evalcond[2]=(((r10*x10191))+(((-1.0)*r12*x10189))+(((-1.0)*r11*x10192)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10189))+((r00*x10191))+(((-1.0)*r01*x10192)));
evalcond[4]=(((r22*x10188))+((sj1*sj2))+(((-1.0)*gconst4*r21*x10189))+((cj1*cj2))+((r20*x10190)));
evalcond[5]=(((cj2*sj1))+((r10*x10190))+(((-1.0)*gconst4*r11*x10189))+((r12*x10188))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10193=((1.0)*gconst4);
CheckValue<IkReal> x10194 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*r11*x10193)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10194.valid){
continue;
}
CheckValue<IkReal> x10195=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10193))+(((-1.0)*gconst5*r21)))),-1);
if(!x10195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10194.value)+(((1.5707963267949)*(x10195.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10196=IKcos(j4);
IkReal x10197=IKsin(j4);
IkReal x10198=((1.0)*x10196);
IkReal x10199=(gconst5*x10196);
IkReal x10200=(gconst5*x10197);
IkReal x10201=((1.0)*gconst4*x10197);
evalcond[0]=(((r02*x10197))+(((-1.0)*gconst4*r01*x10198))+((r00*x10199)));
evalcond[1]=((((-1.0)*r21*x10201))+((r20*x10200))+(((-1.0)*r22*x10198)));
evalcond[2]=((((-1.0)*r11*x10201))+((r10*x10200))+(((-1.0)*r12*x10198)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10198))+(((-1.0)*r01*x10201))+((r00*x10200)));
evalcond[4]=(((r22*x10197))+((sj1*sj2))+(((-1.0)*gconst4*r21*x10198))+((cj1*cj2))+((r20*x10199)));
evalcond[5]=(((cj2*sj1))+((r10*x10199))+((r12*x10197))+(((-1.0)*gconst4*r11*x10198))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10202=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10202.valid){
continue;
}
CheckValue<IkReal> x10203 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10203.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10202.value)))+(x10203.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10204=IKcos(j4);
IkReal x10205=IKsin(j4);
IkReal x10206=((1.0)*x10204);
IkReal x10207=(gconst5*x10204);
IkReal x10208=(gconst5*x10205);
IkReal x10209=((1.0)*gconst4*x10205);
evalcond[0]=(((r02*x10205))+((r00*x10207))+(((-1.0)*gconst4*r01*x10206)));
evalcond[1]=((((-1.0)*r22*x10206))+(((-1.0)*r21*x10209))+((r20*x10208)));
evalcond[2]=((((-1.0)*r11*x10209))+((r10*x10208))+(((-1.0)*r12*x10206)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x10209))+(((-1.0)*r02*x10206))+((r00*x10208)));
evalcond[4]=(((r22*x10205))+((sj1*sj2))+(((-1.0)*gconst4*r21*x10206))+((r20*x10207))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+((r10*x10207))+(((-1.0)*gconst4*r11*x10206))+(((-1.0)*cj1*sj2))+((r12*x10205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10212 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10212.valid){
continue;
}
IkReal x10210=((1.0)*(x10212.value));
IkReal x10211=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10210)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10210)));
IkReal gconst4=((1.0)*r21*x10211);
IkReal gconst5=((-1.0)*r20*x10211);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10215 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10215.valid){
continue;
}
IkReal x10213=((1.0)*(x10215.value));
IkReal x10214=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10213)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10213)));
IkReal gconst4=((1.0)*r21*x10214);
IkReal gconst5=((-1.0)*r20*x10214);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10218 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10218.valid){
continue;
}
IkReal x10216=((1.0)*(x10218.value));
IkReal x10217=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10216)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10216)));
IkReal gconst4=((1.0)*r21*x10217);
IkReal gconst5=((-1.0)*r20*x10217);
IkReal x10219=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10223=IKPowWithIntegerCheck(x10219,-1);
if(!x10223.valid){
continue;
}
IkReal x10220=x10223.value;
IkReal x10221=((1.0)*x10220);
IkReal x10222=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x10220))+(((-1.0)*x10221*(r00*r00)*(r20*r20)))+(((-1.0)*x10221*(r01*r01)*(r21*r21))));
j4eval[0]=x10222;
j4eval[1]=r02;
j4eval[2]=x10219;
j4eval[3]=IKsign(x10222);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10224=(gconst4*r01);
IkReal x10225=(gconst5*r00);
CheckValue<IkReal> x10226 = IKatan2WithCheck(IkReal((x10224+(((-1.0)*x10225)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10226.valid){
continue;
}
CheckValue<IkReal> x10227=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x10225*x10225)))+(((2.0)*x10224*x10225))+(((-1.0)*(x10224*x10224))))),-1);
if(!x10227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10226.value)+(((1.5707963267949)*(x10227.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10228=IKsin(j4);
IkReal x10229=IKcos(j4);
IkReal x10230=(gconst4*r21);
IkReal x10231=(gconst5*r10);
IkReal x10232=((1.0)*sj2);
IkReal x10233=(gconst4*r11);
IkReal x10234=(gconst4*r01);
IkReal x10235=((1.0)*x10229);
IkReal x10236=((1.0)*x10228);
IkReal x10237=(gconst5*x10228);
evalcond[0]=((((-1.0)*x10230*x10236))+(((-1.0)*r22*x10235))+((r20*x10237)));
evalcond[1]=((((-1.0)*x10233*x10236))+((x10228*x10231))+(((-1.0)*r12*x10235)));
evalcond[2]=((((-1.0)*gconst5*r00*x10235))+((x10229*x10234))+(((-1.0)*r02*x10236)));
evalcond[3]=((-1.0)+(((-1.0)*x10234*x10236))+((r00*x10237))+(((-1.0)*r02*x10235)));
evalcond[4]=((((-1.0)*cj1*x10232))+((cj2*sj1))+(((-1.0)*gconst5*r20*x10235))+((x10229*x10230))+(((-1.0)*r22*x10236)));
evalcond[5]=((((-1.0)*sj1*x10232))+(((-1.0)*cj1*cj2))+((x10229*x10233))+(((-1.0)*r12*x10236))+(((-1.0)*x10231*x10235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10238=((1.0)*gconst4);
CheckValue<IkReal> x10239=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r21))+(((-1.0)*r20*x10238)))),-1);
if(!x10239.valid){
continue;
}
CheckValue<IkReal> x10240 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*r11*x10238)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10240.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10239.value)))+(x10240.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10241=IKsin(j4);
IkReal x10242=IKcos(j4);
IkReal x10243=(gconst4*r21);
IkReal x10244=(gconst5*r10);
IkReal x10245=((1.0)*sj2);
IkReal x10246=(gconst4*r11);
IkReal x10247=(gconst4*r01);
IkReal x10248=((1.0)*x10242);
IkReal x10249=((1.0)*x10241);
IkReal x10250=(gconst5*x10241);
evalcond[0]=((((-1.0)*r22*x10248))+((r20*x10250))+(((-1.0)*x10243*x10249)));
evalcond[1]=(((x10241*x10244))+(((-1.0)*x10246*x10249))+(((-1.0)*r12*x10248)));
evalcond[2]=(((x10242*x10247))+(((-1.0)*gconst5*r00*x10248))+(((-1.0)*r02*x10249)));
evalcond[3]=((-1.0)+(((-1.0)*x10247*x10249))+((r00*x10250))+(((-1.0)*r02*x10248)));
evalcond[4]=(((cj2*sj1))+((x10242*x10243))+(((-1.0)*gconst5*r20*x10248))+(((-1.0)*cj1*x10245))+(((-1.0)*r22*x10249)));
evalcond[5]=(((x10242*x10246))+(((-1.0)*cj1*cj2))+(((-1.0)*r12*x10249))+(((-1.0)*x10244*x10248))+(((-1.0)*sj1*x10245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10251=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10251.valid){
continue;
}
CheckValue<IkReal> x10252 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10252.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10251.value)))+(x10252.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10253=IKsin(j4);
IkReal x10254=IKcos(j4);
IkReal x10255=(gconst4*r21);
IkReal x10256=(gconst5*r10);
IkReal x10257=((1.0)*sj2);
IkReal x10258=(gconst4*r11);
IkReal x10259=(gconst4*r01);
IkReal x10260=((1.0)*x10254);
IkReal x10261=((1.0)*x10253);
IkReal x10262=(gconst5*x10253);
evalcond[0]=((((-1.0)*x10255*x10261))+(((-1.0)*r22*x10260))+((r20*x10262)));
evalcond[1]=((((-1.0)*r12*x10260))+(((-1.0)*x10258*x10261))+((x10253*x10256)));
evalcond[2]=(((x10254*x10259))+(((-1.0)*r02*x10261))+(((-1.0)*gconst5*r00*x10260)));
evalcond[3]=((-1.0)+((r00*x10262))+(((-1.0)*r02*x10260))+(((-1.0)*x10259*x10261)));
evalcond[4]=(((cj2*sj1))+((x10254*x10255))+(((-1.0)*r22*x10261))+(((-1.0)*cj1*x10257))+(((-1.0)*gconst5*r20*x10260)));
evalcond[5]=(((x10254*x10258))+(((-1.0)*cj1*cj2))+(((-1.0)*r12*x10261))+(((-1.0)*sj1*x10257))+(((-1.0)*x10256*x10260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10265 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10265.valid){
continue;
}
IkReal x10263=((1.0)*(x10265.value));
IkReal x10264=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10263)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10263)));
IkReal gconst4=((1.0)*r21*x10264);
IkReal gconst5=((-1.0)*r20*x10264);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10268 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10268.valid){
continue;
}
IkReal x10266=((1.0)*(x10268.value));
IkReal x10267=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10266)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10266)));
IkReal gconst4=((1.0)*r21*x10267);
IkReal gconst5=((-1.0)*r20*x10267);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10271 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10271.valid){
continue;
}
IkReal x10269=((1.0)*(x10271.value));
IkReal x10270=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10269)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10269)));
IkReal gconst4=((1.0)*r21*x10270);
IkReal gconst5=((-1.0)*r20*x10270);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10272=(gconst5*r00);
IkReal x10273=(gconst4*r01);
CheckValue<IkReal> x10274 = IKatan2WithCheck(IkReal((x10272+(((-1.0)*x10273)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10274.valid){
continue;
}
CheckValue<IkReal> x10275=IKPowWithIntegerCheck(IKsign(((x10272*x10272)+(((-2.0)*x10272*x10273))+(x10273*x10273)+(r02*r02))),-1);
if(!x10275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10274.value)+(((1.5707963267949)*(x10275.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10276=IKcos(j4);
IkReal x10277=IKsin(j4);
IkReal x10278=((1.0)*sj2);
IkReal x10279=((1.0)*x10276);
IkReal x10280=(gconst5*x10276);
IkReal x10281=(gconst5*x10277);
IkReal x10282=((1.0)*gconst4*x10277);
evalcond[0]=((((-1.0)*gconst4*r01*x10279))+((r02*x10277))+((r00*x10280)));
evalcond[1]=((((-1.0)*r21*x10282))+((r20*x10281))+(((-1.0)*r22*x10279)));
evalcond[2]=((((-1.0)*r11*x10282))+(((-1.0)*r12*x10279))+((r10*x10281)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10279))+(((-1.0)*r01*x10282))+((r00*x10281)));
evalcond[4]=(((cj2*sj1))+((r20*x10280))+(((-1.0)*gconst4*r21*x10279))+(((-1.0)*cj1*x10278))+((r22*x10277)));
evalcond[5]=(((r12*x10277))+(((-1.0)*cj1*cj2))+(((-1.0)*sj1*x10278))+((r10*x10280))+(((-1.0)*gconst4*r11*x10279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10283=((1.0)*gconst4);
CheckValue<IkReal> x10284=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r21))+(((-1.0)*r20*x10283)))),-1);
if(!x10284.valid){
continue;
}
CheckValue<IkReal> x10285 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*r11*x10283)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10284.value)))+(x10285.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10286=IKcos(j4);
IkReal x10287=IKsin(j4);
IkReal x10288=((1.0)*sj2);
IkReal x10289=((1.0)*x10286);
IkReal x10290=(gconst5*x10286);
IkReal x10291=(gconst5*x10287);
IkReal x10292=((1.0)*gconst4*x10287);
evalcond[0]=((((-1.0)*gconst4*r01*x10289))+((r02*x10287))+((r00*x10290)));
evalcond[1]=(((r20*x10291))+(((-1.0)*r22*x10289))+(((-1.0)*r21*x10292)));
evalcond[2]=((((-1.0)*r12*x10289))+(((-1.0)*r11*x10292))+((r10*x10291)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x10292))+(((-1.0)*r02*x10289))+((r00*x10291)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x10289))+((r20*x10290))+(((-1.0)*cj1*x10288))+((r22*x10287)));
evalcond[5]=((((-1.0)*gconst4*r11*x10289))+(((-1.0)*cj1*cj2))+((r12*x10287))+((r10*x10290))+(((-1.0)*sj1*x10288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10293=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10293.valid){
continue;
}
CheckValue<IkReal> x10294 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10293.value)))+(x10294.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10295=IKcos(j4);
IkReal x10296=IKsin(j4);
IkReal x10297=((1.0)*sj2);
IkReal x10298=((1.0)*x10295);
IkReal x10299=(gconst5*x10295);
IkReal x10300=(gconst5*x10296);
IkReal x10301=((1.0)*gconst4*x10296);
evalcond[0]=((((-1.0)*gconst4*r01*x10298))+((r02*x10296))+((r00*x10299)));
evalcond[1]=((((-1.0)*r21*x10301))+((r20*x10300))+(((-1.0)*r22*x10298)));
evalcond[2]=(((r10*x10300))+(((-1.0)*r11*x10301))+(((-1.0)*r12*x10298)));
evalcond[3]=((-1.0)+((r00*x10300))+(((-1.0)*r02*x10298))+(((-1.0)*r01*x10301)));
evalcond[4]=((((-1.0)*gconst4*r21*x10298))+((cj2*sj1))+((r20*x10299))+(((-1.0)*cj1*x10297))+((r22*x10296)));
evalcond[5]=((((-1.0)*sj1*x10297))+((r12*x10296))+(((-1.0)*cj1*cj2))+((r10*x10299))+(((-1.0)*gconst4*r11*x10298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x10304 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10304.valid){
continue;
}
IkReal x10302=((1.0)*(x10304.value));
IkReal x10303=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10302)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10303);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10302)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x10303;
IkReal x10305=((1.0)*r01*r21);
IkReal x10306=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x10306))+(((-1.0)*x10305)));
j4eval[1]=(((sj3*x10305))+((sj3*x10306)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10309 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10309.valid){
continue;
}
IkReal x10307=((1.0)*(x10309.value));
IkReal x10308=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10307)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10308);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10307)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x10308;
IkReal x10310=((1.0)*r01*r21);
IkReal x10311=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x10311))+(((-1.0)*x10310)));
j4eval[1]=(((cj3*x10311))+((cj3*x10310)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x10314 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10314.valid){
continue;
}
IkReal x10312=((1.0)*(x10314.value));
IkReal x10313=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10312)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10313);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10312)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x10313;
IkReal x10315=((1.0)*cj3);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=(((r01*r21*x10315))+((r00*r20*x10315)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10316=((1.0)*gconst5);
CheckValue<IkReal> x10317=IKPowWithIntegerCheck(r12,-1);
if(!x10317.valid){
continue;
}
CheckValue<IkReal> x10318=IKPowWithIntegerCheck(sj3,-1);
if(!x10318.valid){
continue;
}
CheckValue<IkReal> x10319=IKPowWithIntegerCheck((((cj3*gconst4*r01))+(((-1.0)*cj3*r00*x10316))),-1);
if(!x10319.valid){
continue;
}
if( IKabs(((x10317.value)*(x10318.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10319.value)*(((((-1.0)*r01*sj3*x10316))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10317.value)*(x10318.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x10319.value)*(((((-1.0)*r01*sj3*x10316))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10317.value)*(x10318.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x10319.value)*(((((-1.0)*r01*sj3*x10316))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10320=IKsin(j4);
IkReal x10321=IKcos(j4);
IkReal x10322=(cj2*sj1);
IkReal x10323=((1.0)*sj3);
IkReal x10324=((1.0)*r21);
IkReal x10325=(cj3*gconst5);
IkReal x10326=(gconst5*r20);
IkReal x10327=(sj1*sj2);
IkReal x10328=(cj3*gconst4);
IkReal x10329=((1.0)*r20);
IkReal x10330=((1.0)*cj1);
IkReal x10331=(gconst5*sj3);
IkReal x10332=(gconst5*r00);
IkReal x10333=(gconst4*sj3);
IkReal x10334=((1.0)*r01);
IkReal x10335=((1.0)*r00);
IkReal x10336=(sj2*x10330);
IkReal x10337=(r12*x10320);
IkReal x10338=(gconst4*x10320);
IkReal x10339=(x10321*x10333);
evalcond[0]=((-1.0)*r12*x10321);
evalcond[1]=((((-1.0)*x10324*x10338))+((x10320*x10326)));
evalcond[2]=((-1.0)+(((-1.0)*x10334*x10338))+((x10320*x10332)));
evalcond[3]=(x10322+(((-1.0)*x10336))+(((-1.0)*x10323*x10337)));
evalcond[4]=((((-1.0)*x10327))+(((-1.0)*cj2*x10330))+(((-1.0)*cj3*x10337)));
evalcond[5]=(((r01*x10321*x10328))+((r01*x10331))+(((-1.0)*x10321*x10325*x10335))+((r00*x10333)));
evalcond[6]=((((-1.0)*x10328*x10335))+(((-1.0)*x10321*x10323*x10332))+((r01*x10339))+(((-1.0)*x10325*x10334)));
evalcond[7]=(((r20*x10333))+((r21*x10321*x10328))+(((-1.0)*x10321*x10325*x10329))+((r21*x10331))+x10322+(((-1.0)*x10336)));
evalcond[8]=((((-1.0)*x10324*x10325))+(((-1.0)*x10321*x10323*x10326))+((r21*x10339))+x10327+((cj1*cj2))+(((-1.0)*x10328*x10329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10340=((1.0)*gconst5);
IkReal x10341=(gconst4*r01);
CheckValue<IkReal> x10342=IKPowWithIntegerCheck((((gconst5*r00))+(((-1.0)*x10341))),-1);
if(!x10342.valid){
continue;
}
CheckValue<IkReal> x10343=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x10340))+((cj3*x10341))),-1);
if(!x10343.valid){
continue;
}
if( IKabs(x10342.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10343.value)*(((((-1.0)*r01*sj3*x10340))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10342.value)+IKsqr(((x10343.value)*(((((-1.0)*r01*sj3*x10340))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10342.value, ((x10343.value)*(((((-1.0)*r01*sj3*x10340))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10344=IKsin(j4);
IkReal x10345=IKcos(j4);
IkReal x10346=(cj2*sj1);
IkReal x10347=((1.0)*sj3);
IkReal x10348=((1.0)*r21);
IkReal x10349=(cj3*gconst5);
IkReal x10350=(gconst5*r20);
IkReal x10351=(sj1*sj2);
IkReal x10352=(cj3*gconst4);
IkReal x10353=((1.0)*r20);
IkReal x10354=((1.0)*cj1);
IkReal x10355=(gconst5*sj3);
IkReal x10356=(gconst5*r00);
IkReal x10357=(gconst4*sj3);
IkReal x10358=((1.0)*r01);
IkReal x10359=((1.0)*r00);
IkReal x10360=(sj2*x10354);
IkReal x10361=(r12*x10344);
IkReal x10362=(gconst4*x10344);
IkReal x10363=(x10345*x10357);
evalcond[0]=((-1.0)*r12*x10345);
evalcond[1]=((((-1.0)*x10348*x10362))+((x10344*x10350)));
evalcond[2]=((-1.0)+(((-1.0)*x10358*x10362))+((x10344*x10356)));
evalcond[3]=((((-1.0)*x10347*x10361))+x10346+(((-1.0)*x10360)));
evalcond[4]=((((-1.0)*cj3*x10361))+(((-1.0)*cj2*x10354))+(((-1.0)*x10351)));
evalcond[5]=(((r01*x10345*x10352))+((r00*x10357))+((r01*x10355))+(((-1.0)*x10345*x10349*x10359)));
evalcond[6]=((((-1.0)*x10345*x10347*x10356))+((r01*x10363))+(((-1.0)*x10352*x10359))+(((-1.0)*x10349*x10358)));
evalcond[7]=(((r21*x10355))+((r20*x10357))+x10346+(((-1.0)*x10345*x10349*x10353))+(((-1.0)*x10360))+((r21*x10345*x10352)));
evalcond[8]=(((r21*x10363))+(((-1.0)*x10345*x10347*x10350))+(((-1.0)*x10352*x10353))+(((-1.0)*x10348*x10349))+x10351+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10364=(gconst5*r00);
IkReal x10365=(gconst4*r01);
CheckValue<IkReal> x10366=IKPowWithIntegerCheck(((((-1.0)*x10365))+x10364),-1);
if(!x10366.valid){
continue;
}
CheckValue<IkReal> x10367=IKPowWithIntegerCheck((((sj3*x10365))+(((-1.0)*sj3*x10364))),-1);
if(!x10367.valid){
continue;
}
if( IKabs(x10366.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10367.value)*((((cj3*gconst5*r01))+((cj3*gconst4*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10366.value)+IKsqr(((x10367.value)*((((cj3*gconst5*r01))+((cj3*gconst4*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10366.value, ((x10367.value)*((((cj3*gconst5*r01))+((cj3*gconst4*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10368=IKsin(j4);
IkReal x10369=IKcos(j4);
IkReal x10370=(cj2*sj1);
IkReal x10371=((1.0)*sj3);
IkReal x10372=((1.0)*r21);
IkReal x10373=(cj3*gconst5);
IkReal x10374=(gconst5*r20);
IkReal x10375=(sj1*sj2);
IkReal x10376=(cj3*gconst4);
IkReal x10377=((1.0)*r20);
IkReal x10378=((1.0)*cj1);
IkReal x10379=(gconst5*sj3);
IkReal x10380=(gconst5*r00);
IkReal x10381=(gconst4*sj3);
IkReal x10382=((1.0)*r01);
IkReal x10383=((1.0)*r00);
IkReal x10384=(sj2*x10378);
IkReal x10385=(r12*x10368);
IkReal x10386=(gconst4*x10368);
IkReal x10387=(x10369*x10381);
evalcond[0]=((-1.0)*r12*x10369);
evalcond[1]=((((-1.0)*x10372*x10386))+((x10368*x10374)));
evalcond[2]=((-1.0)+((x10368*x10380))+(((-1.0)*x10382*x10386)));
evalcond[3]=((((-1.0)*x10371*x10385))+(((-1.0)*x10384))+x10370);
evalcond[4]=((((-1.0)*cj2*x10378))+(((-1.0)*cj3*x10385))+(((-1.0)*x10375)));
evalcond[5]=(((r01*x10379))+((r01*x10369*x10376))+(((-1.0)*x10369*x10373*x10383))+((r00*x10381)));
evalcond[6]=((((-1.0)*x10376*x10383))+(((-1.0)*x10369*x10371*x10380))+(((-1.0)*x10373*x10382))+((r01*x10387)));
evalcond[7]=((((-1.0)*x10369*x10373*x10377))+(((-1.0)*x10384))+x10370+((r21*x10369*x10376))+((r20*x10381))+((r21*x10379)));
evalcond[8]=((((-1.0)*x10376*x10377))+((r21*x10387))+x10375+(((-1.0)*x10372*x10373))+((cj1*cj2))+(((-1.0)*x10369*x10371*x10374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10388=gconst4*gconst4;
IkReal x10389=gconst5*gconst5;
IkReal x10390=(cj3*r20);
IkReal x10391=(r00*sj3);
IkReal x10392=(r01*sj3);
IkReal x10393=(gconst4*gconst5);
IkReal x10394=(r21*x10388);
IkReal x10395=((1.0)*r01*x10393);
CheckValue<IkReal> x10396=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj3*r00*r21*x10393))+((r00*x10389*x10390))+((cj3*r02*r22))+(((-1.0)*x10390*x10395))+((cj3*r01*x10394)))),-1);
if(!x10396.valid){
continue;
}
CheckValue<IkReal> x10397 = IKatan2WithCheck(IkReal((((gconst5*r22*x10392))+((gconst4*r22*x10391)))),IkReal((((r20*x10389*x10392))+(((-1.0)*r21*x10392*x10393))+((r20*x10391*x10393))+(((-1.0)*x10391*x10394)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10396.value)))+(x10397.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10398=IKsin(j4);
IkReal x10399=IKcos(j4);
IkReal x10400=(cj2*sj1);
IkReal x10401=(gconst5*sj3);
IkReal x10402=((1.0)*r21);
IkReal x10403=(cj3*gconst5);
IkReal x10404=((1.0)*cj1);
IkReal x10405=(sj1*sj2);
IkReal x10406=((1.0)*r11);
IkReal x10407=((1.0)*cj3);
IkReal x10408=(gconst4*r20);
IkReal x10409=(gconst4*r10);
IkReal x10410=(gconst4*r00);
IkReal x10411=((1.0)*r01);
IkReal x10412=((1.0)*sj3);
IkReal x10413=(sj2*x10404);
IkReal x10414=((1.0)*x10399);
IkReal x10415=(gconst4*x10398);
IkReal x10416=(r22*x10398);
IkReal x10417=(gconst5*x10398);
IkReal x10418=(r02*x10398);
IkReal x10419=(r12*x10398);
IkReal x10420=(gconst4*sj3*x10399);
IkReal x10421=(cj3*gconst4*x10399);
evalcond[0]=((((-1.0)*x10402*x10415))+(((-1.0)*r22*x10414))+((r20*x10417)));
evalcond[1]=((((-1.0)*r12*x10414))+((r10*x10417))+(((-1.0)*x10406*x10415)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x10414))+((r00*x10417))+(((-1.0)*x10411*x10415)));
evalcond[3]=((((-1.0)*x10407*x10418))+((r01*x10421))+((r01*x10401))+((sj3*x10410))+(((-1.0)*r00*x10403*x10414)));
evalcond[4]=((((-1.0)*x10407*x10410))+((r01*x10420))+(((-1.0)*x10412*x10418))+(((-1.0)*r00*x10401*x10414))+(((-1.0)*x10403*x10411)));
evalcond[5]=((((-1.0)*x10407*x10416))+((r21*x10401))+(((-1.0)*r20*x10403*x10414))+((sj3*x10408))+(((-1.0)*x10413))+x10400+((r21*x10421)));
evalcond[6]=((((-1.0)*x10402*x10403))+(((-1.0)*x10412*x10416))+x10405+((cj1*cj2))+(((-1.0)*x10407*x10408))+((r21*x10420))+(((-1.0)*r20*x10401*x10414)));
evalcond[7]=((((-1.0)*x10407*x10419))+(((-1.0)*r10*x10403*x10414))+((sj3*x10409))+((r11*x10401))+((r11*x10421))+(((-1.0)*x10405))+(((-1.0)*cj2*x10404)));
evalcond[8]=((((-1.0)*x10412*x10419))+(((-1.0)*r10*x10401*x10414))+(((-1.0)*x10413))+x10400+((r11*x10420))+(((-1.0)*x10407*x10409))+(((-1.0)*x10403*x10406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10422=((1.0)*gconst4);
CheckValue<IkReal> x10423 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*r11*x10422)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10423.valid){
continue;
}
CheckValue<IkReal> x10424=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10422))+(((-1.0)*gconst5*r21)))),-1);
if(!x10424.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10423.value)+(((1.5707963267949)*(x10424.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10425=IKsin(j4);
IkReal x10426=IKcos(j4);
IkReal x10427=(cj2*sj1);
IkReal x10428=(gconst5*sj3);
IkReal x10429=((1.0)*r21);
IkReal x10430=(cj3*gconst5);
IkReal x10431=((1.0)*cj1);
IkReal x10432=(sj1*sj2);
IkReal x10433=((1.0)*r11);
IkReal x10434=((1.0)*cj3);
IkReal x10435=(gconst4*r20);
IkReal x10436=(gconst4*r10);
IkReal x10437=(gconst4*r00);
IkReal x10438=((1.0)*r01);
IkReal x10439=((1.0)*sj3);
IkReal x10440=(sj2*x10431);
IkReal x10441=((1.0)*x10426);
IkReal x10442=(gconst4*x10425);
IkReal x10443=(r22*x10425);
IkReal x10444=(gconst5*x10425);
IkReal x10445=(r02*x10425);
IkReal x10446=(r12*x10425);
IkReal x10447=(gconst4*sj3*x10426);
IkReal x10448=(cj3*gconst4*x10426);
evalcond[0]=((((-1.0)*x10429*x10442))+((r20*x10444))+(((-1.0)*r22*x10441)));
evalcond[1]=((((-1.0)*r12*x10441))+(((-1.0)*x10433*x10442))+((r10*x10444)));
evalcond[2]=((-1.0)+(((-1.0)*x10438*x10442))+(((-1.0)*r02*x10441))+((r00*x10444)));
evalcond[3]=(((r01*x10428))+(((-1.0)*x10434*x10445))+((sj3*x10437))+(((-1.0)*r00*x10430*x10441))+((r01*x10448)));
evalcond[4]=((((-1.0)*r00*x10428*x10441))+(((-1.0)*x10430*x10438))+((r01*x10447))+(((-1.0)*x10434*x10437))+(((-1.0)*x10439*x10445)));
evalcond[5]=((((-1.0)*x10434*x10443))+(((-1.0)*x10440))+((sj3*x10435))+((r21*x10448))+x10427+(((-1.0)*r20*x10430*x10441))+((r21*x10428)));
evalcond[6]=((((-1.0)*r20*x10428*x10441))+((r21*x10447))+x10432+(((-1.0)*x10429*x10430))+((cj1*cj2))+(((-1.0)*x10434*x10435))+(((-1.0)*x10439*x10443)));
evalcond[7]=((((-1.0)*x10434*x10446))+(((-1.0)*cj2*x10431))+(((-1.0)*r10*x10430*x10441))+((sj3*x10436))+((r11*x10448))+(((-1.0)*x10432))+((r11*x10428)));
evalcond[8]=((((-1.0)*x10430*x10433))+(((-1.0)*x10440))+((r11*x10447))+(((-1.0)*r10*x10428*x10441))+x10427+(((-1.0)*x10434*x10436))+(((-1.0)*x10439*x10446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10449=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10449.valid){
continue;
}
CheckValue<IkReal> x10450 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10449.value)))+(x10450.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10451=IKsin(j4);
IkReal x10452=IKcos(j4);
IkReal x10453=(cj2*sj1);
IkReal x10454=(gconst5*sj3);
IkReal x10455=((1.0)*r21);
IkReal x10456=(cj3*gconst5);
IkReal x10457=((1.0)*cj1);
IkReal x10458=(sj1*sj2);
IkReal x10459=((1.0)*r11);
IkReal x10460=((1.0)*cj3);
IkReal x10461=(gconst4*r20);
IkReal x10462=(gconst4*r10);
IkReal x10463=(gconst4*r00);
IkReal x10464=((1.0)*r01);
IkReal x10465=((1.0)*sj3);
IkReal x10466=(sj2*x10457);
IkReal x10467=((1.0)*x10452);
IkReal x10468=(gconst4*x10451);
IkReal x10469=(r22*x10451);
IkReal x10470=(gconst5*x10451);
IkReal x10471=(r02*x10451);
IkReal x10472=(r12*x10451);
IkReal x10473=(gconst4*sj3*x10452);
IkReal x10474=(cj3*gconst4*x10452);
evalcond[0]=(((r20*x10470))+(((-1.0)*r22*x10467))+(((-1.0)*x10455*x10468)));
evalcond[1]=((((-1.0)*x10459*x10468))+((r10*x10470))+(((-1.0)*r12*x10467)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x10467))+((r00*x10470))+(((-1.0)*x10464*x10468)));
evalcond[3]=((((-1.0)*r00*x10456*x10467))+((r01*x10474))+(((-1.0)*x10460*x10471))+((r01*x10454))+((sj3*x10463)));
evalcond[4]=((((-1.0)*x10465*x10471))+(((-1.0)*r00*x10454*x10467))+((r01*x10473))+(((-1.0)*x10460*x10463))+(((-1.0)*x10456*x10464)));
evalcond[5]=((((-1.0)*x10460*x10469))+((r21*x10474))+x10453+((sj3*x10461))+((r21*x10454))+(((-1.0)*r20*x10456*x10467))+(((-1.0)*x10466)));
evalcond[6]=((((-1.0)*x10455*x10456))+(((-1.0)*x10465*x10469))+(((-1.0)*r20*x10454*x10467))+(((-1.0)*x10460*x10461))+((r21*x10473))+x10458+((cj1*cj2)));
evalcond[7]=((((-1.0)*x10458))+((r11*x10454))+(((-1.0)*x10460*x10472))+(((-1.0)*r10*x10456*x10467))+((r11*x10474))+(((-1.0)*cj2*x10457))+((sj3*x10462)));
evalcond[8]=((((-1.0)*x10465*x10472))+(((-1.0)*r10*x10454*x10467))+(((-1.0)*x10460*x10462))+((r11*x10473))+x10453+(((-1.0)*x10456*x10459))+(((-1.0)*x10466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10477 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10477.valid){
continue;
}
IkReal x10475=((1.0)*(x10477.value));
IkReal x10476=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10475)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10475)));
IkReal gconst4=((1.0)*r21*x10476);
IkReal gconst5=((-1.0)*r20*x10476);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10480 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10480.valid){
continue;
}
IkReal x10478=((1.0)*(x10480.value));
IkReal x10479=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10478)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10478)));
IkReal gconst4=((1.0)*r21*x10479);
IkReal gconst5=((-1.0)*r20*x10479);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x10483 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10483.valid){
continue;
}
IkReal x10481=((1.0)*(x10483.value));
IkReal x10482=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10481)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10481)));
IkReal gconst4=((1.0)*r21*x10482);
IkReal gconst5=((-1.0)*r20*x10482);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10486 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10486.valid){
continue;
}
IkReal x10484=((1.0)*(x10486.value));
IkReal x10485=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10484)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10484)));
IkReal gconst4=((1.0)*r21*x10485);
IkReal gconst5=((-1.0)*r20*x10485);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10489 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10489.valid){
continue;
}
IkReal x10487=((1.0)*(x10489.value));
IkReal x10488=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10487)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10487)));
IkReal gconst4=((1.0)*r21*x10488);
IkReal gconst5=((-1.0)*r20*x10488);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10492 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10492.valid){
continue;
}
IkReal x10490=((1.0)*(x10492.value));
IkReal x10491=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10490)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10490)));
IkReal gconst4=((1.0)*r21*x10491);
IkReal gconst5=((-1.0)*r20*x10491);
IkReal x10493=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10497=IKPowWithIntegerCheck(x10493,-1);
if(!x10497.valid){
continue;
}
IkReal x10494=x10497.value;
IkReal x10495=((1.0)*x10494);
IkReal x10496=((((-1.0)*x10495*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x10494))+(((-1.0)*(r12*r12)))+(((-1.0)*x10495*(r10*r10)*(r20*r20))));
j4eval[0]=x10496;
j4eval[1]=r12;
j4eval[2]=x10493;
j4eval[3]=IKsign(x10496);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10498=(gconst5*r10);
IkReal x10499=(gconst4*r11);
CheckValue<IkReal> x10500 = IKatan2WithCheck(IkReal(((((-1.0)*x10498))+x10499)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10500.valid){
continue;
}
CheckValue<IkReal> x10501=IKPowWithIntegerCheck(IKsign(((((2.0)*x10498*x10499))+(((-1.0)*(x10499*x10499)))+(((-1.0)*(x10498*x10498)))+(((-1.0)*(r12*r12))))),-1);
if(!x10501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10500.value)+(((1.5707963267949)*(x10501.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10502=IKsin(j4);
IkReal x10503=IKcos(j4);
IkReal x10504=(gconst4*r21);
IkReal x10505=(gconst5*r10);
IkReal x10506=(gconst4*r11);
IkReal x10507=(gconst4*r01);
IkReal x10508=((1.0)*x10503);
IkReal x10509=((1.0)*x10502);
IkReal x10510=(gconst5*x10502);
evalcond[0]=((((-1.0)*r22*x10508))+((r20*x10510))+(((-1.0)*x10504*x10509)));
evalcond[1]=(((r00*x10510))+(((-1.0)*r02*x10508))+(((-1.0)*x10507*x10509)));
evalcond[2]=((((-1.0)*r12*x10509))+(((-1.0)*x10505*x10508))+((x10503*x10506)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10508))+(((-1.0)*x10506*x10509))+((x10502*x10505)));
evalcond[4]=((((-1.0)*r22*x10509))+((sj1*sj2))+(((-1.0)*gconst5*r20*x10508))+((cj1*cj2))+((x10503*x10504)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r02*x10509))+(((-1.0)*gconst5*r00*x10508))+((x10503*x10507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10511=((1.0)*gconst4);
CheckValue<IkReal> x10512 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10511))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10512.valid){
continue;
}
CheckValue<IkReal> x10513=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x10511))+(((-1.0)*gconst5*r01)))),-1);
if(!x10513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10512.value)+(((1.5707963267949)*(x10513.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10514=IKsin(j4);
IkReal x10515=IKcos(j4);
IkReal x10516=(gconst4*r21);
IkReal x10517=(gconst5*r10);
IkReal x10518=(gconst4*r11);
IkReal x10519=(gconst4*r01);
IkReal x10520=((1.0)*x10515);
IkReal x10521=((1.0)*x10514);
IkReal x10522=(gconst5*x10514);
evalcond[0]=((((-1.0)*r22*x10520))+((r20*x10522))+(((-1.0)*x10516*x10521)));
evalcond[1]=((((-1.0)*r02*x10520))+((r00*x10522))+(((-1.0)*x10519*x10521)));
evalcond[2]=((((-1.0)*r12*x10521))+((x10515*x10518))+(((-1.0)*x10517*x10520)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10520))+(((-1.0)*x10518*x10521))+((x10514*x10517)));
evalcond[4]=((((-1.0)*r22*x10521))+((sj1*sj2))+((x10515*x10516))+((cj1*cj2))+(((-1.0)*gconst5*r20*x10520)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r02*x10521))+((x10515*x10519))+(((-1.0)*gconst5*r00*x10520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10523 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10523.valid){
continue;
}
CheckValue<IkReal> x10524=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10524.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10523.value)+(((1.5707963267949)*(x10524.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10525=IKsin(j4);
IkReal x10526=IKcos(j4);
IkReal x10527=(gconst4*r21);
IkReal x10528=(gconst5*r10);
IkReal x10529=(gconst4*r11);
IkReal x10530=(gconst4*r01);
IkReal x10531=((1.0)*x10526);
IkReal x10532=((1.0)*x10525);
IkReal x10533=(gconst5*x10525);
evalcond[0]=((((-1.0)*r22*x10531))+((r20*x10533))+(((-1.0)*x10527*x10532)));
evalcond[1]=((((-1.0)*r02*x10531))+(((-1.0)*x10530*x10532))+((r00*x10533)));
evalcond[2]=((((-1.0)*r12*x10532))+((x10526*x10529))+(((-1.0)*x10528*x10531)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10531))+(((-1.0)*x10529*x10532))+((x10525*x10528)));
evalcond[4]=((((-1.0)*r22*x10532))+((sj1*sj2))+((x10526*x10527))+((cj1*cj2))+(((-1.0)*gconst5*r20*x10531)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r02*x10532))+((x10526*x10530))+(((-1.0)*gconst5*r00*x10531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10536 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10536.valid){
continue;
}
IkReal x10534=((1.0)*(x10536.value));
IkReal x10535=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10534)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10534)));
IkReal gconst4=((1.0)*r21*x10535);
IkReal gconst5=((-1.0)*r20*x10535);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10539 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10539.valid){
continue;
}
IkReal x10537=((1.0)*(x10539.value));
IkReal x10538=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10537)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10537)));
IkReal gconst4=((1.0)*r21*x10538);
IkReal gconst5=((-1.0)*r20*x10538);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10542 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10542.valid){
continue;
}
IkReal x10540=((1.0)*(x10542.value));
IkReal x10541=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10540)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10540)));
IkReal gconst4=((1.0)*r21*x10541);
IkReal gconst5=((-1.0)*r20*x10541);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10543=(gconst5*r10);
IkReal x10544=(gconst4*r11);
CheckValue<IkReal> x10545 = IKatan2WithCheck(IkReal(((((-1.0)*x10544))+x10543)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10545.valid){
continue;
}
CheckValue<IkReal> x10546=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10544*x10544)+(((-2.0)*x10543*x10544))+(x10543*x10543))),-1);
if(!x10546.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10545.value)+(((1.5707963267949)*(x10546.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10547=IKcos(j4);
IkReal x10548=IKsin(j4);
IkReal x10549=((1.0)*x10547);
IkReal x10550=(gconst5*x10548);
IkReal x10551=(gconst5*x10547);
IkReal x10552=((1.0)*gconst4*x10548);
evalcond[0]=((((-1.0)*gconst4*r11*x10549))+((r12*x10548))+((r10*x10551)));
evalcond[1]=((((-1.0)*r21*x10552))+(((-1.0)*r22*x10549))+((r20*x10550)));
evalcond[2]=((((-1.0)*r02*x10549))+(((-1.0)*r01*x10552))+((r00*x10550)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x10552))+((r10*x10550))+(((-1.0)*r12*x10549)));
evalcond[4]=(((r22*x10548))+(((-1.0)*gconst4*r21*x10549))+((sj1*sj2))+((r20*x10551))+((cj1*cj2)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((r02*x10548))+(((-1.0)*gconst4*r01*x10549))+((r00*x10551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10553=((1.0)*gconst4);
CheckValue<IkReal> x10554=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x10553))+(((-1.0)*gconst5*r01)))),-1);
if(!x10554.valid){
continue;
}
CheckValue<IkReal> x10555 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10553))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10554.value)))+(x10555.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10556=IKcos(j4);
IkReal x10557=IKsin(j4);
IkReal x10558=((1.0)*x10556);
IkReal x10559=(gconst5*x10557);
IkReal x10560=(gconst5*x10556);
IkReal x10561=((1.0)*gconst4*x10557);
evalcond[0]=(((r10*x10560))+(((-1.0)*gconst4*r11*x10558))+((r12*x10557)));
evalcond[1]=(((r20*x10559))+(((-1.0)*r21*x10561))+(((-1.0)*r22*x10558)));
evalcond[2]=((((-1.0)*r01*x10561))+(((-1.0)*r02*x10558))+((r00*x10559)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10558))+((r10*x10559))+(((-1.0)*r11*x10561)));
evalcond[4]=(((r22*x10557))+((r20*x10560))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst4*r21*x10558)));
evalcond[5]=(((r00*x10560))+((r02*x10557))+(((-1.0)*gconst4*r01*x10558))+((cj1*sj2))+(((-1.0)*cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10562 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10562.valid){
continue;
}
CheckValue<IkReal> x10563=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10562.value)+(((1.5707963267949)*(x10563.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10564=IKcos(j4);
IkReal x10565=IKsin(j4);
IkReal x10566=((1.0)*x10564);
IkReal x10567=(gconst5*x10565);
IkReal x10568=(gconst5*x10564);
IkReal x10569=((1.0)*gconst4*x10565);
evalcond[0]=(((r10*x10568))+(((-1.0)*gconst4*r11*x10566))+((r12*x10565)));
evalcond[1]=(((r20*x10567))+(((-1.0)*r22*x10566))+(((-1.0)*r21*x10569)));
evalcond[2]=(((r00*x10567))+(((-1.0)*r01*x10569))+(((-1.0)*r02*x10566)));
evalcond[3]=((-1.0)+((r10*x10567))+(((-1.0)*r12*x10566))+(((-1.0)*r11*x10569)));
evalcond[4]=(((r20*x10568))+((sj1*sj2))+((r22*x10565))+(((-1.0)*gconst4*r21*x10566))+((cj1*cj2)));
evalcond[5]=(((r00*x10568))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst4*r01*x10566))+((r02*x10565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10572 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10572.valid){
continue;
}
IkReal x10570=((1.0)*(x10572.value));
IkReal x10571=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10570)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10570)));
IkReal gconst4=((1.0)*r21*x10571);
IkReal gconst5=((-1.0)*r20*x10571);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10575 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10575.valid){
continue;
}
IkReal x10573=((1.0)*(x10575.value));
IkReal x10574=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10573)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10573)));
IkReal gconst4=((1.0)*r21*x10574);
IkReal gconst5=((-1.0)*r20*x10574);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10578 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10578.valid){
continue;
}
IkReal x10576=((1.0)*(x10578.value));
IkReal x10577=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10576)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10576)));
IkReal gconst4=((1.0)*r21*x10577);
IkReal gconst5=((-1.0)*r20*x10577);
IkReal x10579=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10583=IKPowWithIntegerCheck(x10579,-1);
if(!x10583.valid){
continue;
}
IkReal x10580=x10583.value;
IkReal x10581=((1.0)*x10580);
IkReal x10582=((((-1.0)*x10581*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10580))+(((-1.0)*(r12*r12)))+(((-1.0)*x10581*(r11*r11)*(r21*r21))));
j4eval[0]=x10582;
j4eval[1]=r12;
j4eval[2]=x10579;
j4eval[3]=IKsign(x10582);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10584=(gconst5*r10);
IkReal x10585=(gconst4*r11);
CheckValue<IkReal> x10586 = IKatan2WithCheck(IkReal((x10585+(((-1.0)*x10584)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10586.valid){
continue;
}
CheckValue<IkReal> x10587=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10585*x10585)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10584*x10584)))+(((2.0)*x10584*x10585)))),-1);
if(!x10587.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10586.value)+(((1.5707963267949)*(x10587.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10588=IKsin(j4);
IkReal x10589=IKcos(j4);
IkReal x10590=(gconst4*r21);
IkReal x10591=(gconst5*r10);
IkReal x10592=(gconst4*r11);
IkReal x10593=(gconst4*r01);
IkReal x10594=((1.0)*x10589);
IkReal x10595=((1.0)*x10588);
IkReal x10596=(gconst5*x10588);
evalcond[0]=((((-1.0)*r22*x10594))+((r20*x10596))+(((-1.0)*x10590*x10595)));
evalcond[1]=((((-1.0)*r02*x10594))+((r00*x10596))+(((-1.0)*x10593*x10595)));
evalcond[2]=((((-1.0)*r12*x10595))+(((-1.0)*x10591*x10594))+((x10589*x10592)));
evalcond[3]=((-1.0)+(((-1.0)*x10592*x10595))+(((-1.0)*r12*x10594))+((x10588*x10591)));
evalcond[4]=((((-1.0)*r02*x10595))+((sj1*sj2))+(((-1.0)*gconst5*r00*x10594))+((x10589*x10593))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r22*x10595))+(((-1.0)*cj1*sj2))+((x10589*x10590))+(((-1.0)*gconst5*r20*x10594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10597=((1.0)*gconst4);
CheckValue<IkReal> x10598=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r01))+(((-1.0)*r00*x10597)))),-1);
if(!x10598.valid){
continue;
}
CheckValue<IkReal> x10599 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10597))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10599.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10598.value)))+(x10599.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10600=IKsin(j4);
IkReal x10601=IKcos(j4);
IkReal x10602=(gconst4*r21);
IkReal x10603=(gconst5*r10);
IkReal x10604=(gconst4*r11);
IkReal x10605=(gconst4*r01);
IkReal x10606=((1.0)*x10601);
IkReal x10607=((1.0)*x10600);
IkReal x10608=(gconst5*x10600);
evalcond[0]=((((-1.0)*r22*x10606))+((r20*x10608))+(((-1.0)*x10602*x10607)));
evalcond[1]=(((r00*x10608))+(((-1.0)*r02*x10606))+(((-1.0)*x10605*x10607)));
evalcond[2]=(((x10601*x10604))+(((-1.0)*r12*x10607))+(((-1.0)*x10603*x10606)));
evalcond[3]=((-1.0)+((x10600*x10603))+(((-1.0)*r12*x10606))+(((-1.0)*x10604*x10607)));
evalcond[4]=(((x10601*x10605))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*r02*x10607))+(((-1.0)*gconst5*r00*x10606)));
evalcond[5]=(((x10601*x10602))+((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst5*r20*x10606))+(((-1.0)*r22*x10607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10609 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10609.valid){
continue;
}
CheckValue<IkReal> x10610=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10610.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10609.value)+(((1.5707963267949)*(x10610.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10611=IKsin(j4);
IkReal x10612=IKcos(j4);
IkReal x10613=(gconst4*r21);
IkReal x10614=(gconst5*r10);
IkReal x10615=(gconst4*r11);
IkReal x10616=(gconst4*r01);
IkReal x10617=((1.0)*x10612);
IkReal x10618=((1.0)*x10611);
IkReal x10619=(gconst5*x10611);
evalcond[0]=(((r20*x10619))+(((-1.0)*r22*x10617))+(((-1.0)*x10613*x10618)));
evalcond[1]=((((-1.0)*r02*x10617))+(((-1.0)*x10616*x10618))+((r00*x10619)));
evalcond[2]=(((x10612*x10615))+(((-1.0)*x10614*x10617))+(((-1.0)*r12*x10618)));
evalcond[3]=((-1.0)+(((-1.0)*x10615*x10618))+((x10611*x10614))+(((-1.0)*r12*x10617)));
evalcond[4]=((((-1.0)*gconst5*r00*x10617))+((x10612*x10616))+(((-1.0)*r02*x10618))+((sj1*sj2))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*gconst5*r20*x10617))+((x10612*x10613))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x10618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10622 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10622.valid){
continue;
}
IkReal x10620=((1.0)*(x10622.value));
IkReal x10621=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10620)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10620)));
IkReal gconst4=((1.0)*r21*x10621);
IkReal gconst5=((-1.0)*r20*x10621);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10625 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10625.valid){
continue;
}
IkReal x10623=((1.0)*(x10625.value));
IkReal x10624=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10623)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10623)));
IkReal gconst4=((1.0)*r21*x10624);
IkReal gconst5=((-1.0)*r20*x10624);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10628 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10628.valid){
continue;
}
IkReal x10626=((1.0)*(x10628.value));
IkReal x10627=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10626)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10626)));
IkReal gconst4=((1.0)*r21*x10627);
IkReal gconst5=((-1.0)*r20*x10627);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10629=(gconst5*r10);
IkReal x10630=(gconst4*r11);
CheckValue<IkReal> x10631 = IKatan2WithCheck(IkReal(((((-1.0)*x10630))+x10629)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10631.valid){
continue;
}
CheckValue<IkReal> x10632=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10630*x10630)+(((-2.0)*x10629*x10630))+(x10629*x10629))),-1);
if(!x10632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10631.value)+(((1.5707963267949)*(x10632.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10633=IKcos(j4);
IkReal x10634=IKsin(j4);
IkReal x10635=((1.0)*x10633);
IkReal x10636=(gconst5*x10634);
IkReal x10637=(gconst5*x10633);
IkReal x10638=((1.0)*gconst4*x10634);
evalcond[0]=((((-1.0)*gconst4*r11*x10635))+((r10*x10637))+((r12*x10634)));
evalcond[1]=(((r20*x10636))+(((-1.0)*r22*x10635))+(((-1.0)*r21*x10638)));
evalcond[2]=((((-1.0)*r02*x10635))+(((-1.0)*r01*x10638))+((r00*x10636)));
evalcond[3]=((-1.0)+((r10*x10636))+(((-1.0)*r12*x10635))+(((-1.0)*r11*x10638)));
evalcond[4]=(((r00*x10637))+(((-1.0)*gconst4*r01*x10635))+((sj1*sj2))+((r02*x10634))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+((r20*x10637))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r21*x10635))+((r22*x10634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10639=((1.0)*gconst4);
CheckValue<IkReal> x10640=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x10639))+(((-1.0)*gconst5*r01)))),-1);
if(!x10640.valid){
continue;
}
CheckValue<IkReal> x10641 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*r21*x10639)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10640.value)))+(x10641.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10642=IKcos(j4);
IkReal x10643=IKsin(j4);
IkReal x10644=((1.0)*x10642);
IkReal x10645=(gconst5*x10643);
IkReal x10646=(gconst5*x10642);
IkReal x10647=((1.0)*gconst4*x10643);
evalcond[0]=((((-1.0)*gconst4*r11*x10644))+((r10*x10646))+((r12*x10643)));
evalcond[1]=(((r20*x10645))+(((-1.0)*r22*x10644))+(((-1.0)*r21*x10647)));
evalcond[2]=((((-1.0)*r02*x10644))+(((-1.0)*r01*x10647))+((r00*x10645)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x10647))+(((-1.0)*r12*x10644))+((r10*x10645)));
evalcond[4]=(((r00*x10646))+((sj1*sj2))+(((-1.0)*gconst4*r01*x10644))+((r02*x10643))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+((r20*x10646))+(((-1.0)*cj1*sj2))+((r22*x10643))+(((-1.0)*gconst4*r21*x10644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10648 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10648.valid){
continue;
}
CheckValue<IkReal> x10649=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10648.value)+(((1.5707963267949)*(x10649.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10650=IKcos(j4);
IkReal x10651=IKsin(j4);
IkReal x10652=((1.0)*x10650);
IkReal x10653=(gconst5*x10651);
IkReal x10654=(gconst5*x10650);
IkReal x10655=((1.0)*gconst4*x10651);
evalcond[0]=((((-1.0)*gconst4*r11*x10652))+((r12*x10651))+((r10*x10654)));
evalcond[1]=((((-1.0)*r22*x10652))+(((-1.0)*r21*x10655))+((r20*x10653)));
evalcond[2]=(((r00*x10653))+(((-1.0)*r01*x10655))+(((-1.0)*r02*x10652)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10652))+((r10*x10653))+(((-1.0)*r11*x10655)));
evalcond[4]=(((r00*x10654))+((r02*x10651))+((sj1*sj2))+(((-1.0)*gconst4*r01*x10652))+((cj1*cj2)));
evalcond[5]=((((-1.0)*gconst4*r21*x10652))+((cj2*sj1))+(((-1.0)*cj1*sj2))+((r22*x10651))+((r20*x10654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((-1.0)+r12);
op[1]=((((-2.0)*gconst4*r11))+(((2.0)*gconst5*r10)));
op[2]=((-1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10656=gconst5*gconst5;
IkReal x10657=gconst4*gconst4;
IkReal x10658=(cj3*r10);
IkReal x10659=(r11*sj3);
IkReal x10660=(r10*sj3);
IkReal x10661=(cj3*r11);
IkReal x10662=(r21*x10657);
IkReal x10663=(gconst4*gconst5*r20);
IkReal x10664=(r20*x10656);
IkReal x10665=((1.0)*gconst4*gconst5*r21);
CheckValue<IkReal> x10666=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*x10658*x10665))+((x10658*x10664))+((x10661*x10662))+(((-1.0)*x10661*x10663)))),-1);
if(!x10666.valid){
continue;
}
CheckValue<IkReal> x10667 = IKatan2WithCheck(IkReal((((gconst5*r22*x10659))+((gconst4*r22*x10660)))),IkReal(((((-1.0)*x10660*x10662))+(((-1.0)*x10659*x10665))+((x10659*x10664))+((x10660*x10663)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10666.value)))+(x10667.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10668=IKsin(j4);
IkReal x10669=IKcos(j4);
IkReal x10670=(sj1*sj2);
IkReal x10671=(cj1*cj2);
IkReal x10672=(cj1*sj2);
IkReal x10673=(gconst5*sj3);
IkReal x10674=(gconst4*r21);
IkReal x10675=(cj3*r10);
IkReal x10676=(gconst4*r11);
IkReal x10677=(gconst4*r01);
IkReal x10678=((1.0)*gconst4);
IkReal x10679=(cj3*r20);
IkReal x10680=(cj2*sj1);
IkReal x10681=(cj3*r00);
IkReal x10682=(gconst4*sj3);
IkReal x10683=((1.0)*x10669);
IkReal x10684=((1.0)*x10668);
IkReal x10685=(sj3*x10669);
IkReal x10686=(gconst5*x10668);
IkReal x10687=(cj3*x10669);
IkReal x10688=((1.0)*cj3*gconst5);
IkReal x10689=(x10671+x10670);
evalcond[0]=((((-1.0)*r22*x10683))+((r20*x10686))+(((-1.0)*x10674*x10684)));
evalcond[1]=((((-1.0)*r02*x10683))+((r00*x10686))+(((-1.0)*x10677*x10684)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10683))+(((-1.0)*x10676*x10684))+((r10*x10686)));
evalcond[3]=(((r11*x10673))+((x10676*x10687))+(((-1.0)*gconst5*x10675*x10683))+(((-1.0)*cj3*r12*x10684))+((r10*x10682)));
evalcond[4]=((((-1.0)*r12*sj3*x10684))+((x10676*x10685))+(((-1.0)*r10*x10673*x10683))+(((-1.0)*x10675*x10678))+(((-1.0)*r11*x10688)));
evalcond[5]=(((x10677*x10687))+(((-1.0)*gconst5*x10681*x10683))+((r01*x10673))+((r00*x10682))+x10689+(((-1.0)*cj3*r02*x10684)));
evalcond[6]=(((x10674*x10687))+((r20*x10682))+(((-1.0)*cj3*r22*x10684))+(((-1.0)*x10672))+((r21*x10673))+(((-1.0)*gconst5*x10679*x10683))+x10680);
evalcond[7]=(((x10674*x10685))+(((-1.0)*r21*x10688))+(((-1.0)*x10678*x10679))+(((-1.0)*r22*sj3*x10684))+(((-1.0)*r20*x10673*x10683))+x10689);
evalcond[8]=((((-1.0)*r01*x10688))+(((-1.0)*x10678*x10681))+((x10677*x10685))+(((-1.0)*r02*sj3*x10684))+(((-1.0)*r00*x10673*x10683))+(((-1.0)*x10680))+x10672);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10690=((1.0)*gconst4);
CheckValue<IkReal> x10691=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x10690))+(((-1.0)*gconst5*r01)))),-1);
if(!x10691.valid){
continue;
}
CheckValue<IkReal> x10692 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10690))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10691.value)))+(x10692.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10693=IKsin(j4);
IkReal x10694=IKcos(j4);
IkReal x10695=(sj1*sj2);
IkReal x10696=(cj1*cj2);
IkReal x10697=(cj1*sj2);
IkReal x10698=(gconst5*sj3);
IkReal x10699=(gconst4*r21);
IkReal x10700=(cj3*r10);
IkReal x10701=(gconst4*r11);
IkReal x10702=(gconst4*r01);
IkReal x10703=((1.0)*gconst4);
IkReal x10704=(cj3*r20);
IkReal x10705=(cj2*sj1);
IkReal x10706=(cj3*r00);
IkReal x10707=(gconst4*sj3);
IkReal x10708=((1.0)*x10694);
IkReal x10709=((1.0)*x10693);
IkReal x10710=(sj3*x10694);
IkReal x10711=(gconst5*x10693);
IkReal x10712=(cj3*x10694);
IkReal x10713=((1.0)*cj3*gconst5);
IkReal x10714=(x10696+x10695);
evalcond[0]=(((r20*x10711))+(((-1.0)*r22*x10708))+(((-1.0)*x10699*x10709)));
evalcond[1]=((((-1.0)*x10702*x10709))+((r00*x10711))+(((-1.0)*r02*x10708)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10708))+((r10*x10711))+(((-1.0)*x10701*x10709)));
evalcond[3]=(((x10701*x10712))+((r11*x10698))+((r10*x10707))+(((-1.0)*gconst5*x10700*x10708))+(((-1.0)*cj3*r12*x10709)));
evalcond[4]=(((x10701*x10710))+(((-1.0)*r12*sj3*x10709))+(((-1.0)*r11*x10713))+(((-1.0)*r10*x10698*x10708))+(((-1.0)*x10700*x10703)));
evalcond[5]=(((r00*x10707))+(((-1.0)*gconst5*x10706*x10708))+((x10702*x10712))+x10714+((r01*x10698))+(((-1.0)*cj3*r02*x10709)));
evalcond[6]=(((r21*x10698))+(((-1.0)*cj3*r22*x10709))+(((-1.0)*x10697))+(((-1.0)*gconst5*x10704*x10708))+((x10699*x10712))+x10705+((r20*x10707)));
evalcond[7]=((((-1.0)*r21*x10713))+(((-1.0)*r22*sj3*x10709))+(((-1.0)*r20*x10698*x10708))+((x10699*x10710))+x10714+(((-1.0)*x10703*x10704)));
evalcond[8]=((((-1.0)*x10705))+(((-1.0)*r01*x10713))+(((-1.0)*r00*x10698*x10708))+((x10702*x10710))+(((-1.0)*x10703*x10706))+x10697+(((-1.0)*r02*sj3*x10709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10715 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10715.valid){
continue;
}
CheckValue<IkReal> x10716=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10715.value)+(((1.5707963267949)*(x10716.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10717=IKsin(j4);
IkReal x10718=IKcos(j4);
IkReal x10719=(sj1*sj2);
IkReal x10720=(cj1*cj2);
IkReal x10721=(cj1*sj2);
IkReal x10722=(gconst5*sj3);
IkReal x10723=(gconst4*r21);
IkReal x10724=(cj3*r10);
IkReal x10725=(gconst4*r11);
IkReal x10726=(gconst4*r01);
IkReal x10727=((1.0)*gconst4);
IkReal x10728=(cj3*r20);
IkReal x10729=(cj2*sj1);
IkReal x10730=(cj3*r00);
IkReal x10731=(gconst4*sj3);
IkReal x10732=((1.0)*x10718);
IkReal x10733=((1.0)*x10717);
IkReal x10734=(sj3*x10718);
IkReal x10735=(gconst5*x10717);
IkReal x10736=(cj3*x10718);
IkReal x10737=((1.0)*cj3*gconst5);
IkReal x10738=(x10719+x10720);
evalcond[0]=((((-1.0)*r22*x10732))+((r20*x10735))+(((-1.0)*x10723*x10733)));
evalcond[1]=((((-1.0)*r02*x10732))+(((-1.0)*x10726*x10733))+((r00*x10735)));
evalcond[2]=((-1.0)+(((-1.0)*x10725*x10733))+((r10*x10735))+(((-1.0)*r12*x10732)));
evalcond[3]=(((r10*x10731))+((x10725*x10736))+(((-1.0)*gconst5*x10724*x10732))+(((-1.0)*cj3*r12*x10733))+((r11*x10722)));
evalcond[4]=((((-1.0)*r12*sj3*x10733))+(((-1.0)*r10*x10722*x10732))+((x10725*x10734))+(((-1.0)*r11*x10737))+(((-1.0)*x10724*x10727)));
evalcond[5]=((((-1.0)*cj3*r02*x10733))+(((-1.0)*gconst5*x10730*x10732))+((x10726*x10736))+((r01*x10722))+x10738+((r00*x10731)));
evalcond[6]=(((r21*x10722))+((x10723*x10736))+(((-1.0)*x10721))+((r20*x10731))+x10729+(((-1.0)*cj3*r22*x10733))+(((-1.0)*gconst5*x10728*x10732)));
evalcond[7]=((((-1.0)*r22*sj3*x10733))+(((-1.0)*r20*x10722*x10732))+((x10723*x10734))+(((-1.0)*r21*x10737))+(((-1.0)*x10727*x10728))+x10738);
evalcond[8]=((((-1.0)*r01*x10737))+(((-1.0)*r02*sj3*x10733))+(((-1.0)*x10729))+(((-1.0)*x10727*x10730))+((x10726*x10734))+(((-1.0)*r00*x10722*x10732))+x10721);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10741 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10741.valid){
continue;
}
IkReal x10739=((1.0)*(x10741.value));
IkReal x10740=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10739)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10739)));
IkReal gconst4=((1.0)*r21*x10740);
IkReal gconst5=((-1.0)*r20*x10740);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10744 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10744.valid){
continue;
}
IkReal x10742=((1.0)*(x10744.value));
IkReal x10743=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10742)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10742)));
IkReal gconst4=((1.0)*r21*x10743);
IkReal gconst5=((-1.0)*r20*x10743);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x10747 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10747.valid){
continue;
}
IkReal x10745=((1.0)*(x10747.value));
IkReal x10746=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10745)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10745)));
IkReal gconst4=((1.0)*r21*x10746);
IkReal gconst5=((-1.0)*r20*x10746);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10750 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10750.valid){
continue;
}
IkReal x10748=((1.0)*(x10750.value));
IkReal x10749=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10748)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10748)));
IkReal gconst4=((1.0)*r21*x10749);
IkReal gconst5=((-1.0)*r20*x10749);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10753 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10753.valid){
continue;
}
IkReal x10751=((1.0)*(x10753.value));
IkReal x10752=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10751)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10751)));
IkReal gconst4=((1.0)*r21*x10752);
IkReal gconst5=((-1.0)*r20*x10752);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10756 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10756.valid){
continue;
}
IkReal x10754=((1.0)*(x10756.value));
IkReal x10755=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10754)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10754)));
IkReal gconst4=((1.0)*r21*x10755);
IkReal gconst5=((-1.0)*r20*x10755);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10757=(gconst5*r10);
IkReal x10758=(gconst4*r11);
CheckValue<IkReal> x10759=IKPowWithIntegerCheck(IKsign(((x10757*x10757)+(r12*r12)+(((-2.0)*x10757*x10758))+(x10758*x10758))),-1);
if(!x10759.valid){
continue;
}
CheckValue<IkReal> x10760 = IKatan2WithCheck(IkReal((x10758+(((-1.0)*x10757)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10759.value)))+(x10760.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10761=IKsin(j4);
IkReal x10762=IKcos(j4);
IkReal x10763=(gconst4*r21);
IkReal x10764=(gconst5*r10);
IkReal x10765=(gconst4*r11);
IkReal x10766=(gconst4*r01);
IkReal x10767=((1.0)*x10762);
IkReal x10768=((1.0)*x10761);
IkReal x10769=(gconst5*x10761);
evalcond[0]=((((-1.0)*x10763*x10768))+((r20*x10769))+(((-1.0)*r22*x10767)));
evalcond[1]=(((r00*x10769))+(((-1.0)*r02*x10767))+(((-1.0)*x10766*x10768)));
evalcond[2]=((((-1.0)*x10764*x10767))+(((-1.0)*r12*x10768))+((x10762*x10765)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10767))+((x10761*x10764))+(((-1.0)*x10765*x10768)));
evalcond[4]=((((-1.0)*gconst5*r20*x10767))+((sj1*sj2))+(((-1.0)*r22*x10768))+((cj1*cj2))+((x10762*x10763)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst5*r00*x10767))+(((-1.0)*r02*x10768))+((x10762*x10766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10770=((1.0)*gconst4);
CheckValue<IkReal> x10771 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst5*r00))+(((-1.0)*r01*x10770)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10771.valid){
continue;
}
CheckValue<IkReal> x10772=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10770))+(((-1.0)*gconst5*r21)))),-1);
if(!x10772.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10771.value)+(((1.5707963267949)*(x10772.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10773=IKsin(j4);
IkReal x10774=IKcos(j4);
IkReal x10775=(gconst4*r21);
IkReal x10776=(gconst5*r10);
IkReal x10777=(gconst4*r11);
IkReal x10778=(gconst4*r01);
IkReal x10779=((1.0)*x10774);
IkReal x10780=((1.0)*x10773);
IkReal x10781=(gconst5*x10773);
evalcond[0]=((((-1.0)*x10775*x10780))+(((-1.0)*r22*x10779))+((r20*x10781)));
evalcond[1]=((((-1.0)*r02*x10779))+(((-1.0)*x10778*x10780))+((r00*x10781)));
evalcond[2]=(((x10774*x10777))+(((-1.0)*x10776*x10779))+(((-1.0)*r12*x10780)));
evalcond[3]=((1.0)+((x10773*x10776))+(((-1.0)*r12*x10779))+(((-1.0)*x10777*x10780)));
evalcond[4]=((((-1.0)*gconst5*r20*x10779))+((x10774*x10775))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*r22*x10780)));
evalcond[5]=(((cj2*sj1))+((x10774*x10778))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst5*r00*x10779))+(((-1.0)*r02*x10780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10782 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10782.valid){
continue;
}
CheckValue<IkReal> x10783=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10783.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10782.value)+(((1.5707963267949)*(x10783.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10784=IKsin(j4);
IkReal x10785=IKcos(j4);
IkReal x10786=(gconst4*r21);
IkReal x10787=(gconst5*r10);
IkReal x10788=(gconst4*r11);
IkReal x10789=(gconst4*r01);
IkReal x10790=((1.0)*x10785);
IkReal x10791=((1.0)*x10784);
IkReal x10792=(gconst5*x10784);
evalcond[0]=(((r20*x10792))+(((-1.0)*x10786*x10791))+(((-1.0)*r22*x10790)));
evalcond[1]=((((-1.0)*r02*x10790))+((r00*x10792))+(((-1.0)*x10789*x10791)));
evalcond[2]=((((-1.0)*r12*x10791))+((x10785*x10788))+(((-1.0)*x10787*x10790)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10790))+((x10784*x10787))+(((-1.0)*x10788*x10791)));
evalcond[4]=(((x10785*x10786))+((sj1*sj2))+(((-1.0)*gconst5*r20*x10790))+((cj1*cj2))+(((-1.0)*r22*x10791)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*gconst5*r00*x10790))+(((-1.0)*r02*x10791))+(((-1.0)*cj1*sj2))+((x10785*x10789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10795 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10795.valid){
continue;
}
IkReal x10793=((1.0)*(x10795.value));
IkReal x10794=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10793)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10793)));
IkReal gconst4=((1.0)*r21*x10794);
IkReal gconst5=((-1.0)*r20*x10794);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10798 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10798.valid){
continue;
}
IkReal x10796=((1.0)*(x10798.value));
IkReal x10797=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10796)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10796)));
IkReal gconst4=((1.0)*r21*x10797);
IkReal gconst5=((-1.0)*r20*x10797);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10801 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10801.valid){
continue;
}
IkReal x10799=((1.0)*(x10801.value));
IkReal x10800=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10799)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10799)));
IkReal gconst4=((1.0)*r21*x10800);
IkReal gconst5=((-1.0)*r20*x10800);
IkReal x10802=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10806=IKPowWithIntegerCheck(x10802,-1);
if(!x10806.valid){
continue;
}
IkReal x10803=x10806.value;
IkReal x10804=((1.0)*x10803);
IkReal x10805=((((-2.0)*r10*r11*r20*r21*x10803))+(((-1.0)*x10804*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10804*(r10*r10)*(r20*r20))));
j4eval[0]=x10805;
j4eval[1]=r12;
j4eval[2]=x10802;
j4eval[3]=IKsign(x10805);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10807=(gconst5*r10);
IkReal x10808=(gconst4*r11);
CheckValue<IkReal> x10809=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10807*x10807)))+(((-1.0)*(r12*r12)))+(((2.0)*x10807*x10808))+(((-1.0)*(x10808*x10808))))),-1);
if(!x10809.valid){
continue;
}
CheckValue<IkReal> x10810 = IKatan2WithCheck(IkReal(((((-1.0)*x10808))+x10807)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10809.value)))+(x10810.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10811=IKcos(j4);
IkReal x10812=IKsin(j4);
IkReal x10813=((1.0)*x10811);
IkReal x10814=(gconst5*x10812);
IkReal x10815=(gconst5*x10811);
IkReal x10816=((1.0)*gconst4*x10812);
evalcond[0]=((((-1.0)*gconst4*r11*x10813))+((r10*x10815))+((r12*x10812)));
evalcond[1]=(((r20*x10814))+(((-1.0)*r21*x10816))+(((-1.0)*r22*x10813)));
evalcond[2]=((((-1.0)*r02*x10813))+(((-1.0)*r01*x10816))+((r00*x10814)));
evalcond[3]=((1.0)+(((-1.0)*r11*x10816))+(((-1.0)*r12*x10813))+((r10*x10814)));
evalcond[4]=(((r22*x10812))+(((-1.0)*gconst4*r21*x10813))+((sj1*sj2))+((r20*x10815))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+((r02*x10812))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r01*x10813))+((r00*x10815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10817=((1.0)*gconst4);
CheckValue<IkReal> x10818 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst5*r00))+(((-1.0)*r01*x10817)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10818.valid){
continue;
}
CheckValue<IkReal> x10819=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r21))+(((-1.0)*r20*x10817)))),-1);
if(!x10819.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10818.value)+(((1.5707963267949)*(x10819.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10820=IKcos(j4);
IkReal x10821=IKsin(j4);
IkReal x10822=((1.0)*x10820);
IkReal x10823=(gconst5*x10821);
IkReal x10824=(gconst5*x10820);
IkReal x10825=((1.0)*gconst4*x10821);
evalcond[0]=(((r12*x10821))+(((-1.0)*gconst4*r11*x10822))+((r10*x10824)));
evalcond[1]=(((r20*x10823))+(((-1.0)*r21*x10825))+(((-1.0)*r22*x10822)));
evalcond[2]=((((-1.0)*r02*x10822))+(((-1.0)*r01*x10825))+((r00*x10823)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10822))+(((-1.0)*r11*x10825))+((r10*x10823)));
evalcond[4]=((((-1.0)*gconst4*r21*x10822))+((sj1*sj2))+((r20*x10824))+((cj1*cj2))+((r22*x10821)));
evalcond[5]=(((cj2*sj1))+((r02*x10821))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r01*x10822))+((r00*x10824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10826 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10826.valid){
continue;
}
CheckValue<IkReal> x10827=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10826.value)+(((1.5707963267949)*(x10827.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10828=IKcos(j4);
IkReal x10829=IKsin(j4);
IkReal x10830=((1.0)*x10828);
IkReal x10831=(gconst5*x10829);
IkReal x10832=(gconst5*x10828);
IkReal x10833=((1.0)*gconst4*x10829);
evalcond[0]=(((r12*x10829))+((r10*x10832))+(((-1.0)*gconst4*r11*x10830)));
evalcond[1]=((((-1.0)*r21*x10833))+((r20*x10831))+(((-1.0)*r22*x10830)));
evalcond[2]=((((-1.0)*r01*x10833))+((r00*x10831))+(((-1.0)*r02*x10830)));
evalcond[3]=((1.0)+(((-1.0)*r11*x10833))+((r10*x10831))+(((-1.0)*r12*x10830)));
evalcond[4]=(((sj1*sj2))+((r20*x10832))+((cj1*cj2))+((r22*x10829))+(((-1.0)*gconst4*r21*x10830)));
evalcond[5]=(((cj2*sj1))+((r02*x10829))+(((-1.0)*gconst4*r01*x10830))+(((-1.0)*cj1*sj2))+((r00*x10832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10836 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10836.valid){
continue;
}
IkReal x10834=((1.0)*(x10836.value));
IkReal x10835=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10834)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10834)));
IkReal gconst4=((1.0)*r21*x10835);
IkReal gconst5=((-1.0)*r20*x10835);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10839 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10839.valid){
continue;
}
IkReal x10837=((1.0)*(x10839.value));
IkReal x10838=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10837)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10837)));
IkReal gconst4=((1.0)*r21*x10838);
IkReal gconst5=((-1.0)*r20*x10838);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10842 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10842.valid){
continue;
}
IkReal x10840=((1.0)*(x10842.value));
IkReal x10841=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10840)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10840)));
IkReal gconst4=((1.0)*r21*x10841);
IkReal gconst5=((-1.0)*r20*x10841);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10843=(gconst5*r10);
IkReal x10844=(gconst4*r11);
CheckValue<IkReal> x10845=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10843*x10844))+(r12*r12)+(x10844*x10844)+(x10843*x10843))),-1);
if(!x10845.valid){
continue;
}
CheckValue<IkReal> x10846 = IKatan2WithCheck(IkReal(((((-1.0)*x10843))+x10844)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10845.value)))+(x10846.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10847=IKsin(j4);
IkReal x10848=IKcos(j4);
IkReal x10849=(gconst4*r21);
IkReal x10850=(gconst5*r10);
IkReal x10851=((1.0)*sj2);
IkReal x10852=(gconst4*r11);
IkReal x10853=(gconst4*r01);
IkReal x10854=((1.0)*x10848);
IkReal x10855=((1.0)*x10847);
IkReal x10856=(gconst5*x10847);
evalcond[0]=((((-1.0)*x10849*x10855))+((r20*x10856))+(((-1.0)*r22*x10854)));
evalcond[1]=((((-1.0)*x10853*x10855))+(((-1.0)*r02*x10854))+((r00*x10856)));
evalcond[2]=((((-1.0)*r12*x10855))+((x10848*x10852))+(((-1.0)*x10850*x10854)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10854))+((x10847*x10850))+(((-1.0)*x10852*x10855)));
evalcond[4]=(((cj2*sj1))+((x10848*x10849))+(((-1.0)*gconst5*r20*x10854))+(((-1.0)*r22*x10855))+(((-1.0)*cj1*x10851)));
evalcond[5]=((((-1.0)*gconst5*r00*x10854))+(((-1.0)*cj1*cj2))+(((-1.0)*sj1*x10851))+((x10848*x10853))+(((-1.0)*r02*x10855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10857=((1.0)*gconst4);
CheckValue<IkReal> x10858=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10857))+(((-1.0)*gconst5*r21)))),-1);
if(!x10858.valid){
continue;
}
CheckValue<IkReal> x10859 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst5*r00))+(((-1.0)*r01*x10857)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10858.value)))+(x10859.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10860=IKsin(j4);
IkReal x10861=IKcos(j4);
IkReal x10862=(gconst4*r21);
IkReal x10863=(gconst5*r10);
IkReal x10864=((1.0)*sj2);
IkReal x10865=(gconst4*r11);
IkReal x10866=(gconst4*r01);
IkReal x10867=((1.0)*x10861);
IkReal x10868=((1.0)*x10860);
IkReal x10869=(gconst5*x10860);
evalcond[0]=((((-1.0)*r22*x10867))+(((-1.0)*x10862*x10868))+((r20*x10869)));
evalcond[1]=((((-1.0)*x10866*x10868))+((r00*x10869))+(((-1.0)*r02*x10867)));
evalcond[2]=((((-1.0)*r12*x10868))+(((-1.0)*x10863*x10867))+((x10861*x10865)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10867))+(((-1.0)*x10865*x10868))+((x10860*x10863)));
evalcond[4]=((((-1.0)*r22*x10868))+((cj2*sj1))+(((-1.0)*gconst5*r20*x10867))+(((-1.0)*cj1*x10864))+((x10861*x10862)));
evalcond[5]=((((-1.0)*gconst5*r00*x10867))+(((-1.0)*cj1*cj2))+(((-1.0)*sj1*x10864))+(((-1.0)*r02*x10868))+((x10861*x10866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10870 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10870.valid){
continue;
}
CheckValue<IkReal> x10871=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10871.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10870.value)+(((1.5707963267949)*(x10871.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10872=IKsin(j4);
IkReal x10873=IKcos(j4);
IkReal x10874=(gconst4*r21);
IkReal x10875=(gconst5*r10);
IkReal x10876=((1.0)*sj2);
IkReal x10877=(gconst4*r11);
IkReal x10878=(gconst4*r01);
IkReal x10879=((1.0)*x10873);
IkReal x10880=((1.0)*x10872);
IkReal x10881=(gconst5*x10872);
evalcond[0]=((((-1.0)*r22*x10879))+(((-1.0)*x10874*x10880))+((r20*x10881)));
evalcond[1]=(((r00*x10881))+(((-1.0)*x10878*x10880))+(((-1.0)*r02*x10879)));
evalcond[2]=((((-1.0)*x10875*x10879))+(((-1.0)*r12*x10880))+((x10873*x10877)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10879))+(((-1.0)*x10877*x10880))+((x10872*x10875)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst5*r20*x10879))+(((-1.0)*r22*x10880))+(((-1.0)*cj1*x10876))+((x10873*x10874)));
evalcond[5]=((((-1.0)*r02*x10880))+(((-1.0)*gconst5*r00*x10879))+(((-1.0)*cj1*cj2))+(((-1.0)*sj1*x10876))+((x10873*x10878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10884 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10884.valid){
continue;
}
IkReal x10882=((1.0)*(x10884.value));
IkReal x10883=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10882)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10882)));
IkReal gconst4=((1.0)*r21*x10883);
IkReal gconst5=((-1.0)*r20*x10883);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10887 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10887.valid){
continue;
}
IkReal x10885=((1.0)*(x10887.value));
IkReal x10886=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10885)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10885)));
IkReal gconst4=((1.0)*r21*x10886);
IkReal gconst5=((-1.0)*r20*x10886);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10890 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10890.valid){
continue;
}
IkReal x10888=((1.0)*(x10890.value));
IkReal x10889=x9812;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10888)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10888)));
IkReal gconst4=((1.0)*r21*x10889);
IkReal gconst5=((-1.0)*r20*x10889);
IkReal x10891=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10895=IKPowWithIntegerCheck(x10891,-1);
if(!x10895.valid){
continue;
}
IkReal x10892=x10895.value;
IkReal x10893=((1.0)*x10892);
IkReal x10894=((((-2.0)*r10*r11*r20*r21*x10892))+(((-1.0)*x10893*(r11*r11)*(r21*r21)))+(((-1.0)*x10893*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12))));
j4eval[0]=x10894;
j4eval[1]=r12;
j4eval[2]=x10891;
j4eval[3]=IKsign(x10894);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10896=(gconst5*r10);
IkReal x10897=(gconst4*r11);
CheckValue<IkReal> x10898 = IKatan2WithCheck(IkReal(((((-1.0)*x10897))+x10896)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10898.valid){
continue;
}
CheckValue<IkReal> x10899=IKPowWithIntegerCheck(IKsign(((((2.0)*x10896*x10897))+(((-1.0)*(x10896*x10896)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10897*x10897))))),-1);
if(!x10899.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10898.value)+(((1.5707963267949)*(x10899.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10900=IKcos(j4);
IkReal x10901=IKsin(j4);
IkReal x10902=((1.0)*sj2);
IkReal x10903=((1.0)*x10900);
IkReal x10904=(gconst5*x10901);
IkReal x10905=(gconst5*x10900);
IkReal x10906=((1.0)*gconst4*x10901);
evalcond[0]=(((r12*x10901))+(((-1.0)*gconst4*r11*x10903))+((r10*x10905)));
evalcond[1]=((((-1.0)*r21*x10906))+(((-1.0)*r22*x10903))+((r20*x10904)));
evalcond[2]=((((-1.0)*r01*x10906))+((r00*x10904))+(((-1.0)*r02*x10903)));
evalcond[3]=((1.0)+(((-1.0)*r11*x10906))+(((-1.0)*r12*x10903))+((r10*x10904)));
evalcond[4]=(((cj2*sj1))+((r22*x10901))+(((-1.0)*cj1*x10902))+(((-1.0)*gconst4*r21*x10903))+((r20*x10905)));
evalcond[5]=((((-1.0)*cj1*cj2))+((r00*x10905))+(((-1.0)*gconst4*r01*x10903))+(((-1.0)*sj1*x10902))+((r02*x10901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10907=((1.0)*gconst4);
CheckValue<IkReal> x10908 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x10907))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10908.valid){
continue;
}
CheckValue<IkReal> x10909=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10907))+(((-1.0)*gconst5*r21)))),-1);
if(!x10909.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10908.value)+(((1.5707963267949)*(x10909.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10910=IKcos(j4);
IkReal x10911=IKsin(j4);
IkReal x10912=((1.0)*sj2);
IkReal x10913=((1.0)*x10910);
IkReal x10914=(gconst5*x10911);
IkReal x10915=(gconst5*x10910);
IkReal x10916=((1.0)*gconst4*x10911);
evalcond[0]=((((-1.0)*gconst4*r11*x10913))+((r12*x10911))+((r10*x10915)));
evalcond[1]=((((-1.0)*r22*x10913))+(((-1.0)*r21*x10916))+((r20*x10914)));
evalcond[2]=((((-1.0)*r02*x10913))+((r00*x10914))+(((-1.0)*r01*x10916)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10913))+(((-1.0)*r11*x10916))+((r10*x10914)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*cj1*x10912))+(((-1.0)*gconst4*r21*x10913))+((r22*x10911))+((r20*x10915)));
evalcond[5]=((((-1.0)*sj1*x10912))+(((-1.0)*cj1*cj2))+((r02*x10911))+((r00*x10915))+(((-1.0)*gconst4*r01*x10913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10917 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10917.valid){
continue;
}
CheckValue<IkReal> x10918=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10917.value)+(((1.5707963267949)*(x10918.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10919=IKcos(j4);
IkReal x10920=IKsin(j4);
IkReal x10921=((1.0)*sj2);
IkReal x10922=((1.0)*x10919);
IkReal x10923=(gconst5*x10920);
IkReal x10924=(gconst5*x10919);
IkReal x10925=((1.0)*gconst4*x10920);
evalcond[0]=(((r10*x10924))+((r12*x10920))+(((-1.0)*gconst4*r11*x10922)));
evalcond[1]=((((-1.0)*r22*x10922))+(((-1.0)*r21*x10925))+((r20*x10923)));
evalcond[2]=((((-1.0)*r02*x10922))+((r00*x10923))+(((-1.0)*r01*x10925)));
evalcond[3]=((1.0)+((r10*x10923))+(((-1.0)*r11*x10925))+(((-1.0)*r12*x10922)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*cj1*x10921))+(((-1.0)*gconst4*r21*x10922))+((r22*x10920))+((r20*x10924)));
evalcond[5]=((((-1.0)*gconst4*r01*x10922))+((r02*x10920))+(((-1.0)*cj1*cj2))+((r00*x10924))+(((-1.0)*sj1*x10921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x10928 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10928.valid){
continue;
}
IkReal x10926=((1.0)*(x10928.value));
IkReal x10927=((-1.0)*px);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10926)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10927);
rxp1_1=(px*r21);
rxp1_2=(r11*x10927);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10926)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=((-1.0)*r20);
IkReal x10929=((1.0)*r11*r21);
IkReal x10930=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10929))+(((-1.0)*x10930)));
j4eval[1]=(((sj3*x10930))+((sj3*x10929)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10933 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10933.valid){
continue;
}
IkReal x10931=((1.0)*(x10933.value));
IkReal x10932=((-1.0)*px);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10931)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10932);
rxp1_1=(px*r21);
rxp1_2=(r11*x10932);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10931)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=((-1.0)*r20);
IkReal x10934=((1.0)*cj3);
IkReal x10935=(r10*r20);
IkReal x10936=(r11*r21);
j4eval[0]=((((-1.0)*x10935))+(((-1.0)*x10936)));
j4eval[1]=(((x10934*x10935))+((x10934*x10936)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x10939 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10939.valid){
continue;
}
IkReal x10937=((1.0)*(x10939.value));
IkReal x10938=((-1.0)*px);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10937)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10938);
rxp1_1=(px*r21);
rxp1_2=(r11*x10938);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10937)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=((-1.0)*r20);
IkReal x10940=((1.0)*cj3);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=(((r10*r20*x10940))+((r11*r21*x10940)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10941=((1.0)*r10);
CheckValue<IkReal> x10942=IKPowWithIntegerCheck(r02,-1);
if(!x10942.valid){
continue;
}
CheckValue<IkReal> x10943=IKPowWithIntegerCheck(sj3,-1);
if(!x10943.valid){
continue;
}
CheckValue<IkReal> x10944=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst5*x10941))+((cj3*gconst4*r11))),-1);
if(!x10944.valid){
continue;
}
if( IKabs(((x10942.value)*(x10943.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10944.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10941)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10942.value)*(x10943.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x10944.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10941))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10942.value)*(x10943.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x10944.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10941))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10945=IKsin(j4);
IkReal x10946=IKcos(j4);
IkReal x10947=(cj2*sj1);
IkReal x10948=(gconst5*sj3);
IkReal x10949=((1.0)*r21);
IkReal x10950=(cj3*gconst5);
IkReal x10951=(sj1*sj2);
IkReal x10952=((1.0)*r11);
IkReal x10953=((1.0)*cj1);
IkReal x10954=(cj3*gconst4);
IkReal x10955=(gconst4*sj3);
IkReal x10956=(sj2*x10953);
IkReal x10957=((1.0)*x10946);
IkReal x10958=(gconst4*x10945);
IkReal x10959=(gconst5*x10945);
IkReal x10960=(x10946*x10955);
IkReal x10961=((1.0)*r02*x10945);
evalcond[0]=((-1.0)*r02*x10946);
evalcond[1]=((((-1.0)*x10949*x10958))+((r20*x10959)));
evalcond[2]=((1.0)+((r10*x10959))+(((-1.0)*x10952*x10958)));
evalcond[3]=((((-1.0)*x10956))+(((-1.0)*sj3*x10961))+x10947);
evalcond[4]=((((-1.0)*cj3*x10961))+(((-1.0)*cj2*x10953))+(((-1.0)*x10951)));
evalcond[5]=(((r11*x10948))+((r10*x10955))+((r11*x10946*x10954))+(((-1.0)*r10*x10950*x10957)));
evalcond[6]=(((r11*x10960))+(((-1.0)*r10*x10948*x10957))+(((-1.0)*r10*x10954))+(((-1.0)*x10950*x10952)));
evalcond[7]=(((r21*x10946*x10954))+((r21*x10948))+((r20*x10955))+(((-1.0)*r20*x10950*x10957))+(((-1.0)*x10956))+x10947);
evalcond[8]=((((-1.0)*r20*x10948*x10957))+(((-1.0)*x10949*x10950))+((r21*x10960))+((cj1*cj2))+(((-1.0)*r20*x10954))+x10951);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10962=(gconst5*r10);
IkReal x10963=((1.0)*sj3);
IkReal x10964=(gconst4*r11);
CheckValue<IkReal> x10965=IKPowWithIntegerCheck(((((-1.0)*x10964))+x10962),-1);
if(!x10965.valid){
continue;
}
CheckValue<IkReal> x10966=IKPowWithIntegerCheck(((((-1.0)*cj3*x10962))+((cj3*x10964))),-1);
if(!x10966.valid){
continue;
}
if( IKabs(((-1.0)*(x10965.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10966.value)*(((((-1.0)*gconst4*r10*x10963))+(((-1.0)*gconst5*r11*x10963)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10965.value)))+IKsqr(((x10966.value)*(((((-1.0)*gconst4*r10*x10963))+(((-1.0)*gconst5*r11*x10963))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x10965.value)), ((x10966.value)*(((((-1.0)*gconst4*r10*x10963))+(((-1.0)*gconst5*r11*x10963))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10967=IKsin(j4);
IkReal x10968=IKcos(j4);
IkReal x10969=(cj2*sj1);
IkReal x10970=(gconst5*sj3);
IkReal x10971=((1.0)*r21);
IkReal x10972=(cj3*gconst5);
IkReal x10973=(sj1*sj2);
IkReal x10974=((1.0)*r11);
IkReal x10975=((1.0)*cj1);
IkReal x10976=(cj3*gconst4);
IkReal x10977=(gconst4*sj3);
IkReal x10978=(sj2*x10975);
IkReal x10979=((1.0)*x10968);
IkReal x10980=(gconst4*x10967);
IkReal x10981=(gconst5*x10967);
IkReal x10982=(x10968*x10977);
IkReal x10983=((1.0)*r02*x10967);
evalcond[0]=((-1.0)*r02*x10968);
evalcond[1]=((((-1.0)*x10971*x10980))+((r20*x10981)));
evalcond[2]=((1.0)+((r10*x10981))+(((-1.0)*x10974*x10980)));
evalcond[3]=((((-1.0)*sj3*x10983))+(((-1.0)*x10978))+x10969);
evalcond[4]=((((-1.0)*cj2*x10975))+(((-1.0)*cj3*x10983))+(((-1.0)*x10973)));
evalcond[5]=(((r11*x10970))+(((-1.0)*r10*x10972*x10979))+((r11*x10968*x10976))+((r10*x10977)));
evalcond[6]=(((r11*x10982))+(((-1.0)*r10*x10970*x10979))+(((-1.0)*x10972*x10974))+(((-1.0)*r10*x10976)));
evalcond[7]=(((r21*x10968*x10976))+(((-1.0)*r20*x10972*x10979))+((r20*x10977))+((r21*x10970))+(((-1.0)*x10978))+x10969);
evalcond[8]=((((-1.0)*x10971*x10972))+((r21*x10982))+((cj1*cj2))+x10973+(((-1.0)*r20*x10976))+(((-1.0)*r20*x10970*x10979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10984=(gconst5*r10);
IkReal x10985=(gconst4*r11);
CheckValue<IkReal> x10986=IKPowWithIntegerCheck(((((-1.0)*x10985))+x10984),-1);
if(!x10986.valid){
continue;
}
CheckValue<IkReal> x10987=IKPowWithIntegerCheck((((sj3*x10985))+(((-1.0)*sj3*x10984))),-1);
if(!x10987.valid){
continue;
}
if( IKabs(((-1.0)*(x10986.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10987.value)*((((cj3*gconst5*r11))+((cj3*gconst4*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10986.value)))+IKsqr(((x10987.value)*((((cj3*gconst5*r11))+((cj3*gconst4*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x10986.value)), ((x10987.value)*((((cj3*gconst5*r11))+((cj3*gconst4*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10988=IKsin(j4);
IkReal x10989=IKcos(j4);
IkReal x10990=(cj2*sj1);
IkReal x10991=(gconst5*sj3);
IkReal x10992=((1.0)*r21);
IkReal x10993=(cj3*gconst5);
IkReal x10994=(sj1*sj2);
IkReal x10995=((1.0)*r11);
IkReal x10996=((1.0)*cj1);
IkReal x10997=(cj3*gconst4);
IkReal x10998=(gconst4*sj3);
IkReal x10999=(sj2*x10996);
IkReal x11000=((1.0)*x10989);
IkReal x11001=(gconst4*x10988);
IkReal x11002=(gconst5*x10988);
IkReal x11003=(x10989*x10998);
IkReal x11004=((1.0)*r02*x10988);
evalcond[0]=((-1.0)*r02*x10989);
evalcond[1]=((((-1.0)*x10992*x11001))+((r20*x11002)));
evalcond[2]=((1.0)+(((-1.0)*x10995*x11001))+((r10*x11002)));
evalcond[3]=((((-1.0)*sj3*x11004))+(((-1.0)*x10999))+x10990);
evalcond[4]=((((-1.0)*cj2*x10996))+(((-1.0)*x10994))+(((-1.0)*cj3*x11004)));
evalcond[5]=(((r11*x10991))+((r10*x10998))+((r11*x10989*x10997))+(((-1.0)*r10*x10993*x11000)));
evalcond[6]=((((-1.0)*r10*x10991*x11000))+(((-1.0)*x10993*x10995))+(((-1.0)*r10*x10997))+((r11*x11003)));
evalcond[7]=(((r21*x10991))+((r20*x10998))+((r21*x10989*x10997))+(((-1.0)*x10999))+(((-1.0)*r20*x10993*x11000))+x10990);
evalcond[8]=((((-1.0)*x10992*x10993))+((r21*x11003))+(((-1.0)*r20*x10991*x11000))+(((-1.0)*r20*x10997))+((cj1*cj2))+x10994);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11005=gconst5*gconst5;
IkReal x11006=gconst4*gconst4;
IkReal x11007=(cj3*r10);
IkReal x11008=(r11*sj3);
IkReal x11009=(r10*sj3);
IkReal x11010=(cj3*r11);
IkReal x11011=(r21*x11006);
IkReal x11012=(gconst4*gconst5*r20);
IkReal x11013=(r20*x11005);
IkReal x11014=((1.0)*gconst4*gconst5*r21);
CheckValue<IkReal> x11015 = IKatan2WithCheck(IkReal((((gconst4*r22*x11009))+((gconst5*r22*x11008)))),IkReal((((x11008*x11013))+(((-1.0)*x11009*x11011))+((x11009*x11012))+(((-1.0)*x11008*x11014)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11015.valid){
continue;
}
CheckValue<IkReal> x11016=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((x11010*x11011))+((x11007*x11013))+(((-1.0)*x11007*x11014))+(((-1.0)*x11010*x11012)))),-1);
if(!x11016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11015.value)+(((1.5707963267949)*(x11016.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11017=IKsin(j4);
IkReal x11018=IKcos(j4);
IkReal x11019=(cj2*sj1);
IkReal x11020=(cj3*gconst5);
IkReal x11021=(gconst5*sj3);
IkReal x11022=(gconst4*r21);
IkReal x11023=(sj1*sj2);
IkReal x11024=((1.0)*cj1);
IkReal x11025=(gconst4*r11);
IkReal x11026=(gconst4*sj3);
IkReal x11027=(gconst4*r01);
IkReal x11028=(sj2*x11024);
IkReal x11029=((1.0)*x11018);
IkReal x11030=((1.0)*x11017);
IkReal x11031=(sj3*x11018);
IkReal x11032=((1.0)*cj3*gconst4);
IkReal x11033=(cj3*x11018);
IkReal x11034=(gconst5*x11017);
evalcond[0]=(((r20*x11034))+(((-1.0)*r22*x11029))+(((-1.0)*x11022*x11030)));
evalcond[1]=((((-1.0)*r02*x11029))+((r00*x11034))+(((-1.0)*x11027*x11030)));
evalcond[2]=((1.0)+((r10*x11034))+(((-1.0)*r12*x11029))+(((-1.0)*x11025*x11030)));
evalcond[3]=((((-1.0)*r10*x11020*x11029))+(((-1.0)*cj3*r12*x11030))+((r10*x11026))+((x11025*x11033))+((r11*x11021)));
evalcond[4]=((((-1.0)*r12*sj3*x11030))+(((-1.0)*r10*x11021*x11029))+(((-1.0)*r11*x11020))+((x11025*x11031))+(((-1.0)*r10*x11032)));
evalcond[5]=(((r20*x11026))+((r21*x11021))+((x11022*x11033))+x11019+(((-1.0)*cj3*r22*x11030))+(((-1.0)*r20*x11020*x11029))+(((-1.0)*x11028)));
evalcond[6]=((((-1.0)*r20*x11032))+(((-1.0)*r22*sj3*x11030))+((x11022*x11031))+(((-1.0)*r20*x11021*x11029))+x11023+(((-1.0)*r21*x11020))+((cj1*cj2)));
evalcond[7]=((((-1.0)*x11023))+((r01*x11021))+(((-1.0)*cj3*r02*x11030))+((r00*x11026))+((x11027*x11033))+(((-1.0)*cj2*x11024))+(((-1.0)*r00*x11020*x11029)));
evalcond[8]=(((r01*x11018*x11026))+x11019+(((-1.0)*r01*x11020))+(((-1.0)*r00*x11021*x11029))+(((-1.0)*r02*sj3*x11030))+(((-1.0)*r00*x11032))+(((-1.0)*x11028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11035=((1.0)*gconst4);
CheckValue<IkReal> x11036 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst5*r00))+(((-1.0)*r01*x11035)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11036.valid){
continue;
}
CheckValue<IkReal> x11037=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11035))+(((-1.0)*gconst5*r21)))),-1);
if(!x11037.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11036.value)+(((1.5707963267949)*(x11037.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11038=IKsin(j4);
IkReal x11039=IKcos(j4);
IkReal x11040=(cj2*sj1);
IkReal x11041=(cj3*gconst5);
IkReal x11042=(gconst5*sj3);
IkReal x11043=(gconst4*r21);
IkReal x11044=(sj1*sj2);
IkReal x11045=((1.0)*cj1);
IkReal x11046=(gconst4*r11);
IkReal x11047=(gconst4*sj3);
IkReal x11048=(gconst4*r01);
IkReal x11049=(sj2*x11045);
IkReal x11050=((1.0)*x11039);
IkReal x11051=((1.0)*x11038);
IkReal x11052=(sj3*x11039);
IkReal x11053=((1.0)*cj3*gconst4);
IkReal x11054=(cj3*x11039);
IkReal x11055=(gconst5*x11038);
evalcond[0]=(((r20*x11055))+(((-1.0)*r22*x11050))+(((-1.0)*x11043*x11051)));
evalcond[1]=(((r00*x11055))+(((-1.0)*r02*x11050))+(((-1.0)*x11048*x11051)));
evalcond[2]=((1.0)+((r10*x11055))+(((-1.0)*r12*x11050))+(((-1.0)*x11046*x11051)));
evalcond[3]=(((r11*x11042))+((r10*x11047))+((x11046*x11054))+(((-1.0)*r10*x11041*x11050))+(((-1.0)*cj3*r12*x11051)));
evalcond[4]=((((-1.0)*r12*sj3*x11051))+((x11046*x11052))+(((-1.0)*r11*x11041))+(((-1.0)*r10*x11053))+(((-1.0)*r10*x11042*x11050)));
evalcond[5]=((((-1.0)*x11049))+((r20*x11047))+(((-1.0)*r20*x11041*x11050))+((x11043*x11054))+x11040+((r21*x11042))+(((-1.0)*cj3*r22*x11051)));
evalcond[6]=((((-1.0)*r22*sj3*x11051))+(((-1.0)*r21*x11041))+((x11043*x11052))+x11044+(((-1.0)*r20*x11053))+((cj1*cj2))+(((-1.0)*r20*x11042*x11050)));
evalcond[7]=((((-1.0)*cj2*x11045))+((r01*x11042))+((r00*x11047))+(((-1.0)*cj3*r02*x11051))+(((-1.0)*x11044))+(((-1.0)*r00*x11041*x11050))+((x11048*x11054)));
evalcond[8]=((((-1.0)*x11049))+(((-1.0)*r00*x11053))+x11040+(((-1.0)*r02*sj3*x11051))+(((-1.0)*r01*x11041))+((r01*x11039*x11047))+(((-1.0)*r00*x11042*x11050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11056 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11056.valid){
continue;
}
CheckValue<IkReal> x11057=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x11057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11056.value)+(((1.5707963267949)*(x11057.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11058=IKsin(j4);
IkReal x11059=IKcos(j4);
IkReal x11060=(cj2*sj1);
IkReal x11061=(cj3*gconst5);
IkReal x11062=(gconst5*sj3);
IkReal x11063=(gconst4*r21);
IkReal x11064=(sj1*sj2);
IkReal x11065=((1.0)*cj1);
IkReal x11066=(gconst4*r11);
IkReal x11067=(gconst4*sj3);
IkReal x11068=(gconst4*r01);
IkReal x11069=(sj2*x11065);
IkReal x11070=((1.0)*x11059);
IkReal x11071=((1.0)*x11058);
IkReal x11072=(sj3*x11059);
IkReal x11073=((1.0)*cj3*gconst4);
IkReal x11074=(cj3*x11059);
IkReal x11075=(gconst5*x11058);
evalcond[0]=((((-1.0)*x11063*x11071))+((r20*x11075))+(((-1.0)*r22*x11070)));
evalcond[1]=((((-1.0)*r02*x11070))+(((-1.0)*x11068*x11071))+((r00*x11075)));
evalcond[2]=((1.0)+((r10*x11075))+(((-1.0)*x11066*x11071))+(((-1.0)*r12*x11070)));
evalcond[3]=(((x11066*x11074))+(((-1.0)*cj3*r12*x11071))+((r10*x11067))+((r11*x11062))+(((-1.0)*r10*x11061*x11070)));
evalcond[4]=(((x11066*x11072))+(((-1.0)*r12*sj3*x11071))+(((-1.0)*r10*x11062*x11070))+(((-1.0)*r11*x11061))+(((-1.0)*r10*x11073)));
evalcond[5]=((((-1.0)*x11069))+((r20*x11067))+(((-1.0)*r20*x11061*x11070))+x11060+((r21*x11062))+(((-1.0)*cj3*r22*x11071))+((x11063*x11074)));
evalcond[6]=((((-1.0)*r20*x11073))+(((-1.0)*r21*x11061))+x11064+(((-1.0)*r22*sj3*x11071))+(((-1.0)*r20*x11062*x11070))+((x11063*x11072))+((cj1*cj2)));
evalcond[7]=((((-1.0)*r00*x11061*x11070))+(((-1.0)*cj3*r02*x11071))+((r01*x11062))+((x11068*x11074))+((r00*x11067))+(((-1.0)*cj2*x11065))+(((-1.0)*x11064)));
evalcond[8]=((((-1.0)*x11069))+(((-1.0)*r00*x11062*x11070))+x11060+((r01*x11059*x11067))+(((-1.0)*r01*x11061))+(((-1.0)*r00*x11073))+(((-1.0)*r02*sj3*x11071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x11078 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11078.valid){
continue;
}
IkReal x11076=((1.0)*(x11078.value));
IkReal x11077=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11076)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11077);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11076)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11077;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11081 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11081.valid){
continue;
}
IkReal x11079=((1.0)*(x11081.value));
IkReal x11080=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11079)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11080);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11079)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11080;
IkReal x11082=((1.0)*cj3);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
j4eval[1]=(((x11082*(r21*r21)))+x11082+(((-1.0)*x11082*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11085 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11085.valid){
continue;
}
IkReal x11083=((1.0)*(x11085.value));
IkReal x11084=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11083)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11084);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11083)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11084;
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11088 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11088.valid){
continue;
}
IkReal x11086=((1.0)*(x11088.value));
IkReal x11087=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11086)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11087);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11086)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11087;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11091 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11091.valid){
continue;
}
IkReal x11089=((1.0)*(x11091.value));
IkReal x11090=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11089)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11090);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11089)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11090;
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11094 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11094.valid){
continue;
}
IkReal x11092=((1.0)*(x11094.value));
IkReal x11093=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11092)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11093);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11092)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11093;
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11097=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*gconst5*r00))),-1);
if(!x11097.valid){
continue;
}
IkReal x11095=x11097.value;
IkReal x11096=(cj0*x11095);
cj4array[0]=(((cj2*sj1*x11096))+(((-1.0)*cj1*sj2*x11096)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11098=IKsin(j4);
IkReal x11099=IKcos(j4);
IkReal x11100=(gconst4*r21);
IkReal x11101=(gconst5*x11098);
IkReal x11102=((1.0)*x11098);
IkReal x11103=((1.0)*x11099);
evalcond[0]=((-1.0)*r12*x11098);
evalcond[1]=((((-1.0)*r12*x11103))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x11100*x11102))+((r20*x11101)));
evalcond[3]=((((-1.0)*gconst4*r01*x11102))+((r00*x11101)));
evalcond[4]=((((-1.0)*gconst5*r20*x11103))+((sj1*sj2))+((x11099*x11100))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11106=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11106.valid){
continue;
}
IkReal x11104=x11106.value;
IkReal x11105=((1.0)*x11104);
cj4array[0]=((((-1.0)*cj1*cj2*x11105))+(((-1.0)*sj1*sj2*x11105)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11107=IKsin(j4);
IkReal x11108=IKcos(j4);
IkReal x11109=((1.0)*cj0);
IkReal x11110=(gconst5*x11107);
IkReal x11111=((1.0)*x11108);
IkReal x11112=((1.0)*gconst4*x11107);
evalcond[0]=((-1.0)*r12*x11107);
evalcond[1]=((((-1.0)*r12*x11111))+(((-1.0)*x11109)));
evalcond[2]=((((-1.0)*r21*x11112))+((r20*x11110)));
evalcond[3]=((((-1.0)*r01*x11112))+((r00*x11110)));
evalcond[4]=((((-1.0)*gconst5*r00*x11111))+((gconst4*r01*x11108))+(((-1.0)*cj2*sj1*x11109))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11113=IKPowWithIntegerCheck(r12,-1);
if(!x11113.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11113.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11114=IKsin(j4);
IkReal x11115=IKcos(j4);
IkReal x11116=(gconst4*r21);
IkReal x11117=(gconst4*r01);
IkReal x11118=(gconst5*x11114);
IkReal x11119=((1.0)*x11114);
IkReal x11120=((1.0)*gconst5*x11115);
evalcond[0]=((-1.0)*r12*x11114);
evalcond[1]=((((-1.0)*x11116*x11119))+((r20*x11118)));
evalcond[2]=((((-1.0)*x11117*x11119))+((r00*x11118)));
evalcond[3]=((((-1.0)*r20*x11120))+((sj1*sj2))+((x11115*x11116))+((cj1*cj2)));
evalcond[4]=((((-1.0)*cj0*cj2*sj1))+(((-1.0)*r00*x11120))+((x11115*x11117))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11123 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11123.valid){
continue;
}
IkReal x11121=((1.0)*(x11123.value));
IkReal x11122=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11121)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11122);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11121)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11122;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11126 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11126.valid){
continue;
}
IkReal x11124=((1.0)*(x11126.value));
IkReal x11125=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11124)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11125);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11124)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11125;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11129 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11129.valid){
continue;
}
IkReal x11127=((1.0)*(x11129.value));
IkReal x11128=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11127)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11128);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11127)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11128;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11132=IKPowWithIntegerCheck(((((-1.0)*gconst4*r01))+((gconst5*r00))),-1);
if(!x11132.valid){
continue;
}
IkReal x11130=x11132.value;
IkReal x11131=(cj0*x11130);
cj4array[0]=((((-1.0)*cj1*sj2*x11131))+((cj2*sj1*x11131)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11133=IKsin(j4);
IkReal x11134=IKcos(j4);
IkReal x11135=(gconst5*r20);
IkReal x11136=((1.0)*gconst4*r21);
evalcond[0]=(r12*x11133);
evalcond[1]=((((-1.0)*r12*x11134))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x11133*x11136))+((x11133*x11135)));
evalcond[3]=((((-1.0)*gconst4*r01*x11133))+((gconst5*r00*x11133)));
evalcond[4]=((((-1.0)*x11134*x11136))+((x11134*x11135))+((sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11139=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11139.valid){
continue;
}
IkReal x11137=x11139.value;
IkReal x11138=((1.0)*x11137);
cj4array[0]=((((-1.0)*cj1*cj2*x11138))+(((-1.0)*sj1*sj2*x11138)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11140=IKsin(j4);
IkReal x11141=IKcos(j4);
IkReal x11142=((1.0)*gconst4);
IkReal x11143=((1.0)*cj0);
IkReal x11144=(gconst5*x11140);
evalcond[0]=(r12*x11140);
evalcond[1]=((((-1.0)*r12*x11141))+(((-1.0)*x11143)));
evalcond[2]=(((r20*x11144))+(((-1.0)*r21*x11140*x11142)));
evalcond[3]=((((-1.0)*r01*x11140*x11142))+((r00*x11144)));
evalcond[4]=((((-1.0)*r01*x11141*x11142))+((gconst5*r00*x11141))+((cj0*cj1*sj2))+(((-1.0)*cj2*sj1*x11143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11145=IKPowWithIntegerCheck(r12,-1);
if(!x11145.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11145.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11146=IKsin(j4);
IkReal x11147=IKcos(j4);
IkReal x11148=(gconst5*r20);
IkReal x11149=((1.0)*gconst4);
IkReal x11150=(gconst5*r00);
evalcond[0]=(r12*x11146);
evalcond[1]=(((x11146*x11148))+(((-1.0)*r21*x11146*x11149)));
evalcond[2]=(((x11146*x11150))+(((-1.0)*r01*x11146*x11149)));
evalcond[3]=(((x11147*x11148))+(((-1.0)*r21*x11147*x11149))+((sj1*sj2))+((cj1*cj2)));
evalcond[4]=(((x11147*x11150))+(((-1.0)*cj0*cj2*sj1))+((cj0*cj1*sj2))+(((-1.0)*r01*x11147*x11149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11152=IKPowWithIntegerCheck(r12,-1);
if(!x11152.valid){
continue;
}
IkReal x11151=x11152.value;
CheckValue<IkReal> x11153=IKPowWithIntegerCheck(cj3,-1);
if(!x11153.valid){
continue;
}
if( IKabs((x11151*(x11153.value)*((((cj1*cj2*sj0))+((sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x11151)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11151*(x11153.value)*((((cj1*cj2*sj0))+((sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x11151))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11151*(x11153.value)*((((cj1*cj2*sj0))+((sj0*sj1*sj2))))), ((-1.0)*cj0*x11151));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11154=IKsin(j4);
IkReal x11155=IKcos(j4);
IkReal x11156=((1.0)*gconst5);
IkReal x11157=(cj3*r21);
IkReal x11158=(cj0*sj2);
IkReal x11159=(cj1*cj2);
IkReal x11160=(gconst4*r21);
IkReal x11161=(sj1*sj2);
IkReal x11162=(cj2*sj1);
IkReal x11163=(cj3*gconst4);
IkReal x11164=(cj1*sj2);
IkReal x11165=((1.0)*cj0);
IkReal x11166=(gconst5*sj3);
IkReal x11167=(gconst4*sj3);
IkReal x11168=(gconst4*r01);
IkReal x11169=((1.0)*x11154);
IkReal x11170=(sj3*x11155);
IkReal x11171=(gconst5*x11154);
IkReal x11172=(cj3*x11155);
evalcond[0]=((((-1.0)*x11165))+(((-1.0)*r12*x11155)));
evalcond[1]=(((r20*x11171))+(((-1.0)*x11160*x11169)));
evalcond[2]=(sj0+((r00*x11171))+(((-1.0)*x11168*x11169)));
evalcond[3]=(((sj0*x11159))+(((-1.0)*cj3*r12*x11169))+((sj0*x11161)));
evalcond[4]=((((-1.0)*r12*sj3*x11169))+((sj0*x11164))+(((-1.0)*sj0*x11162)));
evalcond[5]=(((r20*x11167))+((gconst4*x11155*x11157))+x11162+(((-1.0)*x11164))+(((-1.0)*r20*x11156*x11172))+((r21*x11166)));
evalcond[6]=(((x11160*x11170))+(((-1.0)*r20*x11163))+(((-1.0)*x11156*x11157))+x11159+x11161+(((-1.0)*r20*x11156*x11170)));
evalcond[7]=(((r01*x11166))+((sj1*x11158))+(((-1.0)*r00*x11156*x11172))+((r00*x11167))+((cj0*x11159))+((r01*x11155*x11163)));
evalcond[8]=((((-1.0)*r00*x11156*x11170))+((r01*x11155*x11167))+(((-1.0)*cj3*r01*x11156))+((cj1*x11158))+(((-1.0)*x11162*x11165))+(((-1.0)*r00*x11163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11173=((1.0)*gconst5);
IkReal x11174=((1.0)*gconst4);
CheckValue<IkReal> x11175=IKPowWithIntegerCheck(((((-1.0)*r01*x11174))+((gconst5*r00))),-1);
if(!x11175.valid){
continue;
}
CheckValue<IkReal> x11176=IKPowWithIntegerCheck((((cj3*gconst4*r21))+(((-1.0)*cj3*r20*x11173))),-1);
if(!x11176.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x11175.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11176.value)*(((((-1.0)*r21*sj3*x11173))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r20*sj3*x11174)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x11175.value)))+IKsqr(((x11176.value)*(((((-1.0)*r21*sj3*x11173))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r20*sj3*x11174))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x11175.value)), ((x11176.value)*(((((-1.0)*r21*sj3*x11173))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r20*sj3*x11174))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11177=IKsin(j4);
IkReal x11178=IKcos(j4);
IkReal x11179=((1.0)*gconst5);
IkReal x11180=(cj3*r21);
IkReal x11181=(cj0*sj2);
IkReal x11182=(cj1*cj2);
IkReal x11183=(gconst4*r21);
IkReal x11184=(sj1*sj2);
IkReal x11185=(cj2*sj1);
IkReal x11186=(cj3*gconst4);
IkReal x11187=(cj1*sj2);
IkReal x11188=((1.0)*cj0);
IkReal x11189=(gconst5*sj3);
IkReal x11190=(gconst4*sj3);
IkReal x11191=(gconst4*r01);
IkReal x11192=((1.0)*x11177);
IkReal x11193=(sj3*x11178);
IkReal x11194=(gconst5*x11177);
IkReal x11195=(cj3*x11178);
evalcond[0]=((((-1.0)*x11188))+(((-1.0)*r12*x11178)));
evalcond[1]=((((-1.0)*x11183*x11192))+((r20*x11194)));
evalcond[2]=(sj0+((r00*x11194))+(((-1.0)*x11191*x11192)));
evalcond[3]=((((-1.0)*cj3*r12*x11192))+((sj0*x11184))+((sj0*x11182)));
evalcond[4]=((((-1.0)*sj0*x11185))+(((-1.0)*r12*sj3*x11192))+((sj0*x11187)));
evalcond[5]=(((r20*x11190))+(((-1.0)*r20*x11179*x11195))+((gconst4*x11178*x11180))+x11185+(((-1.0)*x11187))+((r21*x11189)));
evalcond[6]=((((-1.0)*r20*x11186))+(((-1.0)*r20*x11179*x11193))+((x11183*x11193))+x11182+x11184+(((-1.0)*x11179*x11180)));
evalcond[7]=((((-1.0)*r00*x11179*x11195))+((r01*x11189))+((r00*x11190))+((cj0*x11182))+((r01*x11178*x11186))+((sj1*x11181)));
evalcond[8]=((((-1.0)*r00*x11179*x11193))+((cj1*x11181))+(((-1.0)*x11185*x11188))+(((-1.0)*cj3*r01*x11179))+((r01*x11178*x11190))+(((-1.0)*r00*x11186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11196=IKPowWithIntegerCheck(((((-1.0)*gconst4*r01))+((gconst5*r00))),-1);
if(!x11196.valid){
continue;
}
CheckValue<IkReal> x11197=IKPowWithIntegerCheck(r12,-1);
if(!x11197.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x11196.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x11197.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x11196.value)))+IKsqr(((-1.0)*cj0*(x11197.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x11196.value)), ((-1.0)*cj0*(x11197.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11198=IKsin(j4);
IkReal x11199=IKcos(j4);
IkReal x11200=((1.0)*gconst5);
IkReal x11201=(cj3*r21);
IkReal x11202=(cj0*sj2);
IkReal x11203=(cj1*cj2);
IkReal x11204=(gconst4*r21);
IkReal x11205=(sj1*sj2);
IkReal x11206=(cj2*sj1);
IkReal x11207=(cj3*gconst4);
IkReal x11208=(cj1*sj2);
IkReal x11209=((1.0)*cj0);
IkReal x11210=(gconst5*sj3);
IkReal x11211=(gconst4*sj3);
IkReal x11212=(gconst4*r01);
IkReal x11213=((1.0)*x11198);
IkReal x11214=(sj3*x11199);
IkReal x11215=(gconst5*x11198);
IkReal x11216=(cj3*x11199);
evalcond[0]=((((-1.0)*x11209))+(((-1.0)*r12*x11199)));
evalcond[1]=(((r20*x11215))+(((-1.0)*x11204*x11213)));
evalcond[2]=(sj0+(((-1.0)*x11212*x11213))+((r00*x11215)));
evalcond[3]=((((-1.0)*cj3*r12*x11213))+((sj0*x11203))+((sj0*x11205)));
evalcond[4]=((((-1.0)*r12*sj3*x11213))+(((-1.0)*sj0*x11206))+((sj0*x11208)));
evalcond[5]=(((r21*x11210))+((r20*x11211))+x11206+(((-1.0)*r20*x11200*x11216))+((gconst4*x11199*x11201))+(((-1.0)*x11208)));
evalcond[6]=(x11203+x11205+((x11204*x11214))+(((-1.0)*r20*x11207))+(((-1.0)*r20*x11200*x11214))+(((-1.0)*x11200*x11201)));
evalcond[7]=((((-1.0)*r00*x11200*x11216))+((cj0*x11203))+((sj1*x11202))+((r01*x11210))+((r00*x11211))+((r01*x11199*x11207)));
evalcond[8]=((((-1.0)*x11206*x11209))+(((-1.0)*cj3*r01*x11200))+(((-1.0)*r00*x11207))+(((-1.0)*r00*x11200*x11214))+((r01*x11199*x11211))+((cj1*x11202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11217=((1.0)*gconst4);
CheckValue<IkReal> x11218 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x11217))+((cj0*gconst5*r00))+(((-1.0)*r11*sj0*x11217))+((gconst5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11218.valid){
continue;
}
CheckValue<IkReal> x11219=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11219.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11218.value)+(((1.5707963267949)*(x11219.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11220=IKsin(j4);
IkReal x11221=IKcos(j4);
IkReal x11222=(gconst5*sj3);
IkReal x11223=((1.0)*r21);
IkReal x11224=(cj3*gconst5);
IkReal x11225=(cj0*sj2);
IkReal x11226=(sj1*sj2);
IkReal x11227=(cj1*sj0);
IkReal x11228=((1.0)*r11);
IkReal x11229=((1.0)*cj3);
IkReal x11230=(gconst4*r20);
IkReal x11231=(cj2*sj1);
IkReal x11232=(gconst4*r10);
IkReal x11233=((1.0)*cj0);
IkReal x11234=(gconst4*r00);
IkReal x11235=((1.0)*r01);
IkReal x11236=((1.0)*sj3);
IkReal x11237=(cj1*cj2);
IkReal x11238=((1.0)*x11221);
IkReal x11239=(gconst4*x11220);
IkReal x11240=(r22*x11220);
IkReal x11241=(gconst5*x11220);
IkReal x11242=(r02*x11220);
IkReal x11243=(r12*x11220);
IkReal x11244=(gconst4*sj3*x11221);
IkReal x11245=(cj3*gconst4*x11221);
evalcond[0]=(((r20*x11241))+(((-1.0)*x11223*x11239))+(((-1.0)*r22*x11238)));
evalcond[1]=((((-1.0)*r02*x11238))+sj0+(((-1.0)*x11235*x11239))+((r00*x11241)));
evalcond[2]=((((-1.0)*x11233))+(((-1.0)*x11228*x11239))+(((-1.0)*r12*x11238))+((r10*x11241)));
evalcond[3]=(x11231+(((-1.0)*cj1*sj2))+(((-1.0)*x11229*x11240))+((r21*x11222))+((r21*x11245))+(((-1.0)*r20*x11224*x11238))+((sj3*x11230)));
evalcond[4]=((((-1.0)*x11236*x11240))+x11226+x11237+(((-1.0)*x11229*x11230))+(((-1.0)*x11223*x11224))+((r21*x11244))+(((-1.0)*r20*x11222*x11238)));
evalcond[5]=(((sj1*x11225))+((cj0*x11237))+(((-1.0)*x11229*x11242))+((r01*x11222))+((r01*x11245))+(((-1.0)*r00*x11224*x11238))+((sj3*x11234)));
evalcond[6]=((((-1.0)*r10*x11224*x11238))+((sj0*x11226))+((r11*x11245))+((r11*x11222))+(((-1.0)*x11229*x11243))+((cj2*x11227))+((sj3*x11232)));
evalcond[7]=(((cj1*x11225))+(((-1.0)*x11236*x11242))+(((-1.0)*x11231*x11233))+(((-1.0)*x11224*x11235))+(((-1.0)*x11229*x11234))+(((-1.0)*r00*x11222*x11238))+((r01*x11244)));
evalcond[8]=((((-1.0)*x11236*x11243))+((sj2*x11227))+(((-1.0)*sj0*x11231))+((r11*x11244))+(((-1.0)*x11229*x11232))+(((-1.0)*x11224*x11228))+(((-1.0)*r10*x11222*x11238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11246=((1.0)*gconst4);
CheckValue<IkReal> x11247=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x11246))+(((-1.0)*gconst5*r01)))),-1);
if(!x11247.valid){
continue;
}
CheckValue<IkReal> x11248 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x11246))+((cj0*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11247.value)))+(x11248.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11249=IKsin(j4);
IkReal x11250=IKcos(j4);
IkReal x11251=(gconst5*sj3);
IkReal x11252=((1.0)*r21);
IkReal x11253=(cj3*gconst5);
IkReal x11254=(cj0*sj2);
IkReal x11255=(sj1*sj2);
IkReal x11256=(cj1*sj0);
IkReal x11257=((1.0)*r11);
IkReal x11258=((1.0)*cj3);
IkReal x11259=(gconst4*r20);
IkReal x11260=(cj2*sj1);
IkReal x11261=(gconst4*r10);
IkReal x11262=((1.0)*cj0);
IkReal x11263=(gconst4*r00);
IkReal x11264=((1.0)*r01);
IkReal x11265=((1.0)*sj3);
IkReal x11266=(cj1*cj2);
IkReal x11267=((1.0)*x11250);
IkReal x11268=(gconst4*x11249);
IkReal x11269=(r22*x11249);
IkReal x11270=(gconst5*x11249);
IkReal x11271=(r02*x11249);
IkReal x11272=(r12*x11249);
IkReal x11273=(gconst4*sj3*x11250);
IkReal x11274=(cj3*gconst4*x11250);
evalcond[0]=((((-1.0)*x11252*x11268))+(((-1.0)*r22*x11267))+((r20*x11270)));
evalcond[1]=(((r00*x11270))+sj0+(((-1.0)*r02*x11267))+(((-1.0)*x11264*x11268)));
evalcond[2]=(((r10*x11270))+(((-1.0)*r12*x11267))+(((-1.0)*x11262))+(((-1.0)*x11257*x11268)));
evalcond[3]=((((-1.0)*r20*x11253*x11267))+x11260+(((-1.0)*cj1*sj2))+((r21*x11274))+((r21*x11251))+((sj3*x11259))+(((-1.0)*x11258*x11269)));
evalcond[4]=((((-1.0)*x11258*x11259))+x11255+x11266+((r21*x11273))+(((-1.0)*x11252*x11253))+(((-1.0)*x11265*x11269))+(((-1.0)*r20*x11251*x11267)));
evalcond[5]=(((r01*x11274))+((sj3*x11263))+((sj1*x11254))+(((-1.0)*r00*x11253*x11267))+((cj0*x11266))+((r01*x11251))+(((-1.0)*x11258*x11271)));
evalcond[6]=(((r11*x11251))+((sj0*x11255))+((sj3*x11261))+(((-1.0)*r10*x11253*x11267))+((cj2*x11256))+(((-1.0)*x11258*x11272))+((r11*x11274)));
evalcond[7]=((((-1.0)*x11265*x11271))+(((-1.0)*r00*x11251*x11267))+(((-1.0)*x11260*x11262))+((r01*x11273))+((cj1*x11254))+(((-1.0)*x11253*x11264))+(((-1.0)*x11258*x11263)));
evalcond[8]=((((-1.0)*x11265*x11272))+(((-1.0)*r10*x11251*x11267))+(((-1.0)*x11253*x11257))+(((-1.0)*sj0*x11260))+((sj2*x11256))+(((-1.0)*x11258*x11261))+((r11*x11273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11275=((1.0)*gconst4);
CheckValue<IkReal> x11276 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x11275))+((gconst5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11276.valid){
continue;
}
CheckValue<IkReal> x11277=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x11275))+(((-1.0)*gconst5*r11)))),-1);
if(!x11277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11276.value)+(((1.5707963267949)*(x11277.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11278=IKsin(j4);
IkReal x11279=IKcos(j4);
IkReal x11280=(gconst5*sj3);
IkReal x11281=((1.0)*r21);
IkReal x11282=(cj3*gconst5);
IkReal x11283=(cj0*sj2);
IkReal x11284=(sj1*sj2);
IkReal x11285=(cj1*sj0);
IkReal x11286=((1.0)*r11);
IkReal x11287=((1.0)*cj3);
IkReal x11288=(gconst4*r20);
IkReal x11289=(cj2*sj1);
IkReal x11290=(gconst4*r10);
IkReal x11291=((1.0)*cj0);
IkReal x11292=(gconst4*r00);
IkReal x11293=((1.0)*r01);
IkReal x11294=((1.0)*sj3);
IkReal x11295=(cj1*cj2);
IkReal x11296=((1.0)*x11279);
IkReal x11297=(gconst4*x11278);
IkReal x11298=(r22*x11278);
IkReal x11299=(gconst5*x11278);
IkReal x11300=(r02*x11278);
IkReal x11301=(r12*x11278);
IkReal x11302=(gconst4*sj3*x11279);
IkReal x11303=(cj3*gconst4*x11279);
evalcond[0]=((((-1.0)*r22*x11296))+((r20*x11299))+(((-1.0)*x11281*x11297)));
evalcond[1]=(sj0+(((-1.0)*r02*x11296))+(((-1.0)*x11293*x11297))+((r00*x11299)));
evalcond[2]=(((r10*x11299))+(((-1.0)*x11291))+(((-1.0)*x11286*x11297))+(((-1.0)*r12*x11296)));
evalcond[3]=(((sj3*x11288))+x11289+((r21*x11280))+(((-1.0)*cj1*sj2))+((r21*x11303))+(((-1.0)*x11287*x11298))+(((-1.0)*r20*x11282*x11296)));
evalcond[4]=(x11284+x11295+(((-1.0)*r20*x11280*x11296))+(((-1.0)*x11294*x11298))+(((-1.0)*x11287*x11288))+(((-1.0)*x11281*x11282))+((r21*x11302)));
evalcond[5]=(((sj3*x11292))+(((-1.0)*x11287*x11300))+((cj0*x11295))+((r01*x11303))+(((-1.0)*r00*x11282*x11296))+((sj1*x11283))+((r01*x11280)));
evalcond[6]=(((sj3*x11290))+(((-1.0)*x11287*x11301))+(((-1.0)*r10*x11282*x11296))+((r11*x11303))+((r11*x11280))+((sj0*x11284))+((cj2*x11285)));
evalcond[7]=((((-1.0)*x11282*x11293))+((r01*x11302))+((cj1*x11283))+(((-1.0)*r00*x11280*x11296))+(((-1.0)*x11289*x11291))+(((-1.0)*x11294*x11300))+(((-1.0)*x11287*x11292)));
evalcond[8]=((((-1.0)*sj0*x11289))+(((-1.0)*x11282*x11286))+(((-1.0)*r10*x11280*x11296))+((sj2*x11285))+((r11*x11302))+(((-1.0)*x11294*x11301))+(((-1.0)*x11287*x11290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11304=((-1.0)*r00);
IkReal x11306 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x11306)==0){
continue;
}
IkReal x11305=pow(x11306,-0.5);
CheckValue<IkReal> x11307 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x11304),IKFAST_ATAN2_MAGTHRESH);
if(!x11307.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11307.value));
IkReal gconst7=(r01*x11305);
IkReal gconst8=(x11304*x11305);
CheckValue<IkReal> x11308 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11308.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11308.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11309=((-1.0)*r00);
IkReal x11310=x11305;
CheckValue<IkReal> x11312 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x11309),IKFAST_ATAN2_MAGTHRESH);
if(!x11312.valid){
continue;
}
IkReal x11311=((-1.0)*(x11312.value));
sj5=gconst7;
cj5=gconst8;
j5=x11311;
IkReal gconst6=x11311;
IkReal gconst7=(r01*x11310);
IkReal gconst8=(x11309*x11310);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11313=((1.0)*gconst7);
CheckValue<IkReal> x11314 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst8*r10*sj0))+(((-1.0)*cj0*r01*x11313))+(((-1.0)*r11*sj0*x11313))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11314.valid){
continue;
}
CheckValue<IkReal> x11315=IKPowWithIntegerCheck(IKsign((((gconst7*r20))+((gconst8*r21)))),-1);
if(!x11315.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11314.value)+(((1.5707963267949)*(x11315.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11316=IKsin(j4);
IkReal x11317=IKcos(j4);
IkReal x11318=(gconst7*sj3);
IkReal x11319=(cj0*sj2);
IkReal x11320=(cj2*sj0);
IkReal x11321=(cj3*gconst7);
IkReal x11322=(sj1*sj2);
IkReal x11323=(gconst8*sj3);
IkReal x11324=(cj3*gconst8);
IkReal x11325=((1.0)*r11);
IkReal x11326=(cj1*sj2);
IkReal x11327=(cj2*sj1);
IkReal x11328=((1.0)*cj0);
IkReal x11329=(cj1*cj2);
IkReal x11330=((1.0)*x11317);
IkReal x11331=(gconst8*x11316);
IkReal x11332=(r01*x11317);
IkReal x11333=(r11*x11317);
IkReal x11334=((1.0)*x11316);
IkReal x11335=(r21*x11317);
evalcond[0]=((((-1.0)*r22*x11330))+((r20*x11331))+(((-1.0)*gconst7*r21*x11334)));
evalcond[1]=(sj0+((r00*x11331))+(((-1.0)*r02*x11330))+(((-1.0)*gconst7*r01*x11334)));
evalcond[2]=((((-1.0)*r12*x11330))+((r10*x11331))+(((-1.0)*gconst7*x11316*x11325))+(((-1.0)*x11328)));
evalcond[3]=(x11327+(((-1.0)*cj3*r22*x11334))+((r21*x11323))+(((-1.0)*r20*x11324*x11330))+((x11321*x11335))+((r20*x11318))+(((-1.0)*x11326)));
evalcond[4]=(((x11318*x11335))+x11322+x11329+(((-1.0)*r20*x11321))+(((-1.0)*r20*x11323*x11330))+(((-1.0)*r22*sj3*x11334))+(((-1.0)*r21*x11324)));
evalcond[5]=((((-1.0)*r00*x11324*x11330))+((sj1*x11319))+(((-1.0)*cj3*r02*x11334))+((x11321*x11332))+((cj0*x11329))+((r00*x11318))+((r01*x11323)));
evalcond[6]=((((-1.0)*r10*x11324*x11330))+((sj0*x11322))+(((-1.0)*cj3*r12*x11334))+((r10*x11318))+((x11321*x11333))+((cj1*x11320))+((r11*x11323)));
evalcond[7]=(((cj1*x11319))+((x11318*x11332))+(((-1.0)*r00*x11323*x11330))+(((-1.0)*x11327*x11328))+(((-1.0)*r00*x11321))+(((-1.0)*r01*x11324))+(((-1.0)*r02*sj3*x11334)));
evalcond[8]=((((-1.0)*r12*sj3*x11334))+(((-1.0)*r10*x11323*x11330))+((sj0*x11326))+((x11318*x11333))+(((-1.0)*r10*x11321))+(((-1.0)*sj1*x11320))+(((-1.0)*x11324*x11325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11336=((1.0)*gconst7);
CheckValue<IkReal> x11337 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst8*r20*sj0))+(((-1.0)*r21*sj0*x11336)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11337.valid){
continue;
}
CheckValue<IkReal> x11338=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst8*r11))+(((-1.0)*r10*x11336)))),-1);
if(!x11338.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11337.value)+(((1.5707963267949)*(x11338.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11339=IKsin(j4);
IkReal x11340=IKcos(j4);
IkReal x11341=(gconst7*sj3);
IkReal x11342=(cj0*sj2);
IkReal x11343=(cj2*sj0);
IkReal x11344=(cj3*gconst7);
IkReal x11345=(sj1*sj2);
IkReal x11346=(gconst8*sj3);
IkReal x11347=(cj3*gconst8);
IkReal x11348=((1.0)*r11);
IkReal x11349=(cj1*sj2);
IkReal x11350=(cj2*sj1);
IkReal x11351=((1.0)*cj0);
IkReal x11352=(cj1*cj2);
IkReal x11353=((1.0)*x11340);
IkReal x11354=(gconst8*x11339);
IkReal x11355=(r01*x11340);
IkReal x11356=(r11*x11340);
IkReal x11357=((1.0)*x11339);
IkReal x11358=(r21*x11340);
evalcond[0]=(((r20*x11354))+(((-1.0)*r22*x11353))+(((-1.0)*gconst7*r21*x11357)));
evalcond[1]=((((-1.0)*gconst7*r01*x11357))+sj0+((r00*x11354))+(((-1.0)*r02*x11353)));
evalcond[2]=((((-1.0)*r12*x11353))+((r10*x11354))+(((-1.0)*x11351))+(((-1.0)*gconst7*x11339*x11348)));
evalcond[3]=(x11350+((r20*x11341))+(((-1.0)*cj3*r22*x11357))+(((-1.0)*x11349))+((x11344*x11358))+(((-1.0)*r20*x11347*x11353))+((r21*x11346)));
evalcond[4]=(((x11341*x11358))+x11352+x11345+(((-1.0)*r21*x11347))+(((-1.0)*r22*sj3*x11357))+(((-1.0)*r20*x11344))+(((-1.0)*r20*x11346*x11353)));
evalcond[5]=(((cj0*x11352))+(((-1.0)*r00*x11347*x11353))+(((-1.0)*cj3*r02*x11357))+((sj1*x11342))+((x11344*x11355))+((r00*x11341))+((r01*x11346)));
evalcond[6]=(((r11*x11346))+((r10*x11341))+(((-1.0)*cj3*r12*x11357))+(((-1.0)*r10*x11347*x11353))+((sj0*x11345))+((x11344*x11356))+((cj1*x11343)));
evalcond[7]=((((-1.0)*r00*x11346*x11353))+(((-1.0)*x11350*x11351))+((x11341*x11355))+(((-1.0)*r01*x11347))+(((-1.0)*r00*x11344))+(((-1.0)*r02*sj3*x11357))+((cj1*x11342)));
evalcond[8]=((((-1.0)*sj1*x11343))+((x11341*x11356))+((sj0*x11349))+(((-1.0)*x11347*x11348))+(((-1.0)*r10*x11346*x11353))+(((-1.0)*r12*sj3*x11357))+(((-1.0)*r10*x11344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11359=((-1.0)*r01);
IkReal x11361 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x11361)==0){
continue;
}
IkReal x11360=pow(x11361,-0.5);
CheckValue<IkReal> x11362 = IKatan2WithCheck(IkReal(x11359),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11362.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11362.value))));
IkReal gconst10=(x11359*x11360);
IkReal gconst11=((1.0)*r00*x11360);
CheckValue<IkReal> x11363 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11363.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11363.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11364=((-1.0)*r01);
CheckValue<IkReal> x11367 = IKatan2WithCheck(IkReal(x11364),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11367.valid){
continue;
}
IkReal x11365=((1.0)*(x11367.value));
IkReal x11366=x11360;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11365)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11365)));
IkReal gconst10=(x11364*x11366);
IkReal gconst11=((1.0)*r00*x11366);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x11368=((-1.0)*r01);
CheckValue<IkReal> x11371 = IKatan2WithCheck(IkReal(x11368),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11371.valid){
continue;
}
IkReal x11369=((1.0)*(x11371.value));
IkReal x11370=x11360;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11369)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11369)));
IkReal gconst10=(x11368*x11370);
IkReal gconst11=((1.0)*r00*x11370);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11372=((-1.0)*r01);
CheckValue<IkReal> x11375 = IKatan2WithCheck(IkReal(x11372),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11375.valid){
continue;
}
IkReal x11373=((1.0)*(x11375.value));
IkReal x11374=x11360;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11373)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11373)));
IkReal gconst10=(x11372*x11374);
IkReal gconst11=((1.0)*r00*x11374);
IkReal x11376=r02*r02;
IkReal x11377=(r12*sj0);
IkReal x11378=x11360;
IkReal x11379=(cj0*x11378);
j4eval[0]=((IKabs((x11377+((cj0*r02)))))+(IKabs(((((-1.0)*x11379))+((x11376*x11379))+((r02*x11377*x11378))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11380=((-1.0)*r01);
CheckValue<IkReal> x11383 = IKatan2WithCheck(IkReal(x11380),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11383.valid){
continue;
}
IkReal x11381=((1.0)*(x11383.value));
IkReal x11382=x11360;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11381)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11381)));
IkReal gconst10=(x11380*x11382);
IkReal gconst11=((1.0)*r00*x11382);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11384=((-1.0)*r01);
CheckValue<IkReal> x11387 = IKatan2WithCheck(IkReal(x11384),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11387.valid){
continue;
}
IkReal x11385=((1.0)*(x11387.value));
IkReal x11386=x11360;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11385)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11385)));
IkReal gconst10=(x11384*x11386);
IkReal gconst11=((1.0)*r00*x11386);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11388=gconst11*gconst11;
IkReal x11389=gconst10*gconst10;
IkReal x11390=(cj3*r10);
IkReal x11391=(cj3*r11);
IkReal x11392=(r10*sj3);
IkReal x11393=(gconst11*r11*sj3);
IkReal x11394=((1.0)*gconst10*r21);
IkReal x11395=(r21*x11389);
IkReal x11396=(r20*x11388);
IkReal x11397=(gconst10*gconst11*r20);
CheckValue<IkReal> x11398=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*x11391*x11397))+((x11391*x11395))+(((-1.0)*gconst11*x11390*x11394))+((x11390*x11396)))),-1);
if(!x11398.valid){
continue;
}
CheckValue<IkReal> x11399 = IKatan2WithCheck(IkReal((((gconst10*r22*x11392))+((r22*x11393)))),IkReal(((((-1.0)*x11393*x11394))+((r11*sj3*x11396))+((x11392*x11397))+(((-1.0)*x11392*x11395)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11398.value)))+(x11399.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11400=IKsin(j4);
IkReal x11401=IKcos(j4);
IkReal x11402=(sj1*sj2);
IkReal x11403=(cj1*cj2);
IkReal x11404=(cj3*r10);
IkReal x11405=(r21*sj3);
IkReal x11406=((1.0)*gconst10);
IkReal x11407=(cj3*gconst11);
IkReal x11408=(r01*sj3);
IkReal x11409=(gconst11*sj3);
IkReal x11410=(gconst10*sj3);
IkReal x11411=(cj1*sj2);
IkReal x11412=(cj2*sj1);
IkReal x11413=((1.0)*x11401);
IkReal x11414=((1.0)*x11400);
IkReal x11415=(gconst10*x11401);
IkReal x11416=(gconst11*x11400);
IkReal x11417=(x11403+x11402);
evalcond[0]=((((-1.0)*r21*x11400*x11406))+((r20*x11416))+(((-1.0)*r22*x11413)));
evalcond[1]=((((-1.0)*r01*x11400*x11406))+((r00*x11416))+(((-1.0)*r02*x11413)));
evalcond[2]=((-1.0)+((r10*x11416))+(((-1.0)*r12*x11413))+(((-1.0)*r11*x11400*x11406)));
evalcond[3]=((((-1.0)*gconst11*x11404*x11413))+((r10*x11410))+((r11*x11409))+((cj3*r11*x11415))+(((-1.0)*cj3*r12*x11414)));
evalcond[4]=((((-1.0)*r10*x11409*x11413))+((r11*x11401*x11410))+(((-1.0)*r12*sj3*x11414))+(((-1.0)*x11404*x11406))+(((-1.0)*r11*x11407)));
evalcond[5]=(x11417+(((-1.0)*r00*x11407*x11413))+((r00*x11410))+(((-1.0)*cj3*r02*x11414))+((cj3*r01*x11415))+((gconst11*x11408)));
evalcond[6]=((((-1.0)*cj3*r22*x11414))+x11412+(((-1.0)*r20*x11407*x11413))+(((-1.0)*x11411))+((cj3*r21*x11415))+((r20*x11410))+((gconst11*x11405)));
evalcond[7]=((((-1.0)*r22*sj3*x11414))+x11417+(((-1.0)*r21*x11407))+(((-1.0)*cj3*r20*x11406))+((x11405*x11415))+(((-1.0)*r20*x11409*x11413)));
evalcond[8]=((((-1.0)*r02*sj3*x11414))+(((-1.0)*r00*x11409*x11413))+(((-1.0)*r01*x11407))+x11411+(((-1.0)*x11412))+(((-1.0)*cj3*r00*x11406))+((x11408*x11415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11418=((1.0)*gconst10);
CheckValue<IkReal> x11419=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x11418))+(((-1.0)*gconst11*r01)))),-1);
if(!x11419.valid){
continue;
}
CheckValue<IkReal> x11420 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x11418))+((gconst11*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11420.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11419.value)))+(x11420.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11421=IKsin(j4);
IkReal x11422=IKcos(j4);
IkReal x11423=(sj1*sj2);
IkReal x11424=(cj1*cj2);
IkReal x11425=(cj3*r10);
IkReal x11426=(r21*sj3);
IkReal x11427=((1.0)*gconst10);
IkReal x11428=(cj3*gconst11);
IkReal x11429=(r01*sj3);
IkReal x11430=(gconst11*sj3);
IkReal x11431=(gconst10*sj3);
IkReal x11432=(cj1*sj2);
IkReal x11433=(cj2*sj1);
IkReal x11434=((1.0)*x11422);
IkReal x11435=((1.0)*x11421);
IkReal x11436=(gconst10*x11422);
IkReal x11437=(gconst11*x11421);
IkReal x11438=(x11423+x11424);
evalcond[0]=(((r20*x11437))+(((-1.0)*r21*x11421*x11427))+(((-1.0)*r22*x11434)));
evalcond[1]=((((-1.0)*r02*x11434))+((r00*x11437))+(((-1.0)*r01*x11421*x11427)));
evalcond[2]=((-1.0)+((r10*x11437))+(((-1.0)*r12*x11434))+(((-1.0)*r11*x11421*x11427)));
evalcond[3]=(((r10*x11431))+(((-1.0)*cj3*r12*x11435))+((cj3*r11*x11436))+((r11*x11430))+(((-1.0)*gconst11*x11425*x11434)));
evalcond[4]=((((-1.0)*r11*x11428))+(((-1.0)*x11425*x11427))+(((-1.0)*r12*sj3*x11435))+((r11*x11422*x11431))+(((-1.0)*r10*x11430*x11434)));
evalcond[5]=((((-1.0)*cj3*r02*x11435))+x11438+((r00*x11431))+((gconst11*x11429))+((cj3*r01*x11436))+(((-1.0)*r00*x11428*x11434)));
evalcond[6]=(((r20*x11431))+x11433+((cj3*r21*x11436))+(((-1.0)*r20*x11428*x11434))+(((-1.0)*x11432))+(((-1.0)*cj3*r22*x11435))+((gconst11*x11426)));
evalcond[7]=(x11438+(((-1.0)*r20*x11430*x11434))+((x11426*x11436))+(((-1.0)*cj3*r20*x11427))+(((-1.0)*r21*x11428))+(((-1.0)*r22*sj3*x11435)));
evalcond[8]=(x11432+((x11429*x11436))+(((-1.0)*r00*x11430*x11434))+(((-1.0)*x11433))+(((-1.0)*r01*x11428))+(((-1.0)*r02*sj3*x11435))+(((-1.0)*cj3*r00*x11427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11439 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst10*r01))+((gconst11*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11439.valid){
continue;
}
CheckValue<IkReal> x11440=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11440.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11439.value)+(((1.5707963267949)*(x11440.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11441=IKsin(j4);
IkReal x11442=IKcos(j4);
IkReal x11443=(sj1*sj2);
IkReal x11444=(cj1*cj2);
IkReal x11445=(cj3*r10);
IkReal x11446=(r21*sj3);
IkReal x11447=((1.0)*gconst10);
IkReal x11448=(cj3*gconst11);
IkReal x11449=(r01*sj3);
IkReal x11450=(gconst11*sj3);
IkReal x11451=(gconst10*sj3);
IkReal x11452=(cj1*sj2);
IkReal x11453=(cj2*sj1);
IkReal x11454=((1.0)*x11442);
IkReal x11455=((1.0)*x11441);
IkReal x11456=(gconst10*x11442);
IkReal x11457=(gconst11*x11441);
IkReal x11458=(x11443+x11444);
evalcond[0]=(((r20*x11457))+(((-1.0)*r21*x11441*x11447))+(((-1.0)*r22*x11454)));
evalcond[1]=((((-1.0)*r02*x11454))+(((-1.0)*r01*x11441*x11447))+((r00*x11457)));
evalcond[2]=((-1.0)+((r10*x11457))+(((-1.0)*r12*x11454))+(((-1.0)*r11*x11441*x11447)));
evalcond[3]=(((r10*x11451))+(((-1.0)*cj3*r12*x11455))+(((-1.0)*gconst11*x11445*x11454))+((cj3*r11*x11456))+((r11*x11450)));
evalcond[4]=((((-1.0)*r12*sj3*x11455))+(((-1.0)*x11445*x11447))+((r11*x11442*x11451))+(((-1.0)*r11*x11448))+(((-1.0)*r10*x11450*x11454)));
evalcond[5]=(x11458+(((-1.0)*cj3*r02*x11455))+(((-1.0)*r00*x11448*x11454))+((gconst11*x11449))+((r00*x11451))+((cj3*r01*x11456)));
evalcond[6]=(x11453+((r20*x11451))+((cj3*r21*x11456))+(((-1.0)*r20*x11448*x11454))+((gconst11*x11446))+(((-1.0)*x11452))+(((-1.0)*cj3*r22*x11455)));
evalcond[7]=(x11458+((x11446*x11456))+(((-1.0)*r20*x11450*x11454))+(((-1.0)*r21*x11448))+(((-1.0)*r22*sj3*x11455))+(((-1.0)*cj3*r20*x11447)));
evalcond[8]=((((-1.0)*cj3*r00*x11447))+x11452+(((-1.0)*r00*x11450*x11454))+(((-1.0)*r01*x11448))+(((-1.0)*x11453))+((x11449*x11456))+(((-1.0)*r02*sj3*x11455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11459=((-1.0)*r01);
CheckValue<IkReal> x11462 = IKatan2WithCheck(IkReal(x11459),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11462.valid){
continue;
}
IkReal x11460=((1.0)*(x11462.value));
IkReal x11461=x11360;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11460)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11460)));
IkReal gconst10=(x11459*x11461);
IkReal gconst11=((1.0)*r00*x11461);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11463=((-1.0)*r01);
CheckValue<IkReal> x11466 = IKatan2WithCheck(IkReal(x11463),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11466.valid){
continue;
}
IkReal x11464=((1.0)*(x11466.value));
IkReal x11465=x11360;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11464)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11464)));
IkReal gconst10=(x11463*x11465);
IkReal gconst11=((1.0)*r00*x11465);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11467=gconst11*gconst11;
IkReal x11468=gconst10*gconst10;
IkReal x11469=(cj3*r10);
IkReal x11470=(cj3*r11);
IkReal x11471=(r10*sj3);
IkReal x11472=(gconst11*r11*sj3);
IkReal x11473=((1.0)*gconst10*r21);
IkReal x11474=(r21*x11468);
IkReal x11475=(r20*x11467);
IkReal x11476=(gconst10*gconst11*r20);
CheckValue<IkReal> x11477 = IKatan2WithCheck(IkReal((((r22*x11472))+((gconst10*r22*x11471)))),IkReal((((x11471*x11476))+(((-1.0)*x11471*x11474))+(((-1.0)*x11472*x11473))+((r11*sj3*x11475)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11477.valid){
continue;
}
CheckValue<IkReal> x11478=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((x11469*x11475))+(((-1.0)*gconst11*x11469*x11473))+((x11470*x11474))+(((-1.0)*x11470*x11476)))),-1);
if(!x11478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11477.value)+(((1.5707963267949)*(x11478.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11479=IKsin(j4);
IkReal x11480=IKcos(j4);
IkReal x11481=(cj2*sj1);
IkReal x11482=(cj3*r10);
IkReal x11483=(cj3*r01);
IkReal x11484=((1.0)*gconst10);
IkReal x11485=(r21*sj3);
IkReal x11486=(cj3*gconst11);
IkReal x11487=(r01*sj3);
IkReal x11488=((1.0)*cj1);
IkReal x11489=(r20*sj3);
IkReal x11490=(r11*sj3);
IkReal x11491=(sj1*sj2);
IkReal x11492=(gconst10*sj3);
IkReal x11493=(gconst11*sj3);
IkReal x11494=(sj2*x11488);
IkReal x11495=((1.0)*x11480);
IkReal x11496=((1.0)*x11479);
IkReal x11497=(gconst10*x11480);
IkReal x11498=(gconst11*x11479);
evalcond[0]=(((r20*x11498))+(((-1.0)*r22*x11495))+(((-1.0)*r21*x11479*x11484)));
evalcond[1]=(((r00*x11498))+(((-1.0)*r01*x11479*x11484))+(((-1.0)*r02*x11495)));
evalcond[2]=((1.0)+(((-1.0)*r11*x11479*x11484))+((r10*x11498))+(((-1.0)*r12*x11495)));
evalcond[3]=(((gconst11*x11490))+((r10*x11492))+(((-1.0)*gconst11*x11482*x11495))+((cj3*r11*x11497))+(((-1.0)*cj3*r12*x11496)));
evalcond[4]=((((-1.0)*r11*x11486))+(((-1.0)*x11482*x11484))+((x11490*x11497))+(((-1.0)*r12*sj3*x11496))+(((-1.0)*r10*x11493*x11495)));
evalcond[5]=((((-1.0)*r20*x11486*x11495))+(((-1.0)*x11494))+x11481+((gconst10*x11489))+(((-1.0)*cj3*r22*x11496))+((cj3*r21*x11497))+((gconst11*x11485)));
evalcond[6]=(x11491+(((-1.0)*r21*x11486))+(((-1.0)*r22*sj3*x11496))+(((-1.0)*cj3*r20*x11484))+((x11485*x11497))+((cj1*cj2))+(((-1.0)*gconst11*x11489*x11495)));
evalcond[7]=(((r00*x11492))+((x11483*x11497))+(((-1.0)*cj3*r02*x11496))+((gconst11*x11487))+(((-1.0)*cj2*x11488))+(((-1.0)*x11491))+(((-1.0)*r00*x11486*x11495)));
evalcond[8]=((((-1.0)*x11494))+x11481+(((-1.0)*gconst11*x11483))+(((-1.0)*r00*x11493*x11495))+(((-1.0)*r02*sj3*x11496))+(((-1.0)*cj3*r00*x11484))+((x11487*x11497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11499=((1.0)*gconst10);
CheckValue<IkReal> x11500=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11499))+(((-1.0)*gconst11*r21)))),-1);
if(!x11500.valid){
continue;
}
CheckValue<IkReal> x11501 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x11499))+((gconst11*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11500.value)))+(x11501.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11502=IKsin(j4);
IkReal x11503=IKcos(j4);
IkReal x11504=(cj2*sj1);
IkReal x11505=(cj3*r10);
IkReal x11506=(cj3*r01);
IkReal x11507=((1.0)*gconst10);
IkReal x11508=(r21*sj3);
IkReal x11509=(cj3*gconst11);
IkReal x11510=(r01*sj3);
IkReal x11511=((1.0)*cj1);
IkReal x11512=(r20*sj3);
IkReal x11513=(r11*sj3);
IkReal x11514=(sj1*sj2);
IkReal x11515=(gconst10*sj3);
IkReal x11516=(gconst11*sj3);
IkReal x11517=(sj2*x11511);
IkReal x11518=((1.0)*x11503);
IkReal x11519=((1.0)*x11502);
IkReal x11520=(gconst10*x11503);
IkReal x11521=(gconst11*x11502);
evalcond[0]=((((-1.0)*r22*x11518))+(((-1.0)*r21*x11502*x11507))+((r20*x11521)));
evalcond[1]=((((-1.0)*r01*x11502*x11507))+(((-1.0)*r02*x11518))+((r00*x11521)));
evalcond[2]=((1.0)+((r10*x11521))+(((-1.0)*r12*x11518))+(((-1.0)*r11*x11502*x11507)));
evalcond[3]=(((gconst11*x11513))+(((-1.0)*cj3*r12*x11519))+(((-1.0)*gconst11*x11505*x11518))+((cj3*r11*x11520))+((r10*x11515)));
evalcond[4]=(((x11513*x11520))+(((-1.0)*r10*x11516*x11518))+(((-1.0)*r12*sj3*x11519))+(((-1.0)*x11505*x11507))+(((-1.0)*r11*x11509)));
evalcond[5]=((((-1.0)*cj3*r22*x11519))+x11504+((cj3*r21*x11520))+(((-1.0)*x11517))+((gconst11*x11508))+((gconst10*x11512))+(((-1.0)*r20*x11509*x11518)));
evalcond[6]=((((-1.0)*cj3*r20*x11507))+x11514+(((-1.0)*r21*x11509))+((x11508*x11520))+(((-1.0)*r22*sj3*x11519))+(((-1.0)*gconst11*x11512*x11518))+((cj1*cj2)));
evalcond[7]=(((gconst11*x11510))+((x11506*x11520))+(((-1.0)*x11514))+(((-1.0)*cj3*r02*x11519))+(((-1.0)*r00*x11509*x11518))+(((-1.0)*cj2*x11511))+((r00*x11515)));
evalcond[8]=((((-1.0)*cj3*r00*x11507))+x11504+(((-1.0)*gconst11*x11506))+((x11510*x11520))+(((-1.0)*x11517))+(((-1.0)*r02*sj3*x11519))+(((-1.0)*r00*x11516*x11518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11522=IKPowWithIntegerCheck(IKsign((((gconst10*r00))+((gconst11*r01)))),-1);
if(!x11522.valid){
continue;
}
CheckValue<IkReal> x11523 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst11*r20))+(((-1.0)*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11522.value)))+(x11523.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11524=IKsin(j4);
IkReal x11525=IKcos(j4);
IkReal x11526=(cj2*sj1);
IkReal x11527=(cj3*r10);
IkReal x11528=(cj3*r01);
IkReal x11529=((1.0)*gconst10);
IkReal x11530=(r21*sj3);
IkReal x11531=(cj3*gconst11);
IkReal x11532=(r01*sj3);
IkReal x11533=((1.0)*cj1);
IkReal x11534=(r20*sj3);
IkReal x11535=(r11*sj3);
IkReal x11536=(sj1*sj2);
IkReal x11537=(gconst10*sj3);
IkReal x11538=(gconst11*sj3);
IkReal x11539=(sj2*x11533);
IkReal x11540=((1.0)*x11525);
IkReal x11541=((1.0)*x11524);
IkReal x11542=(gconst10*x11525);
IkReal x11543=(gconst11*x11524);
evalcond[0]=((((-1.0)*r21*x11524*x11529))+((r20*x11543))+(((-1.0)*r22*x11540)));
evalcond[1]=(((r00*x11543))+(((-1.0)*r02*x11540))+(((-1.0)*r01*x11524*x11529)));
evalcond[2]=((1.0)+((r10*x11543))+(((-1.0)*r12*x11540))+(((-1.0)*r11*x11524*x11529)));
evalcond[3]=(((cj3*r11*x11542))+(((-1.0)*cj3*r12*x11541))+((r10*x11537))+((gconst11*x11535))+(((-1.0)*gconst11*x11527*x11540)));
evalcond[4]=((((-1.0)*x11527*x11529))+((x11535*x11542))+(((-1.0)*r12*sj3*x11541))+(((-1.0)*r11*x11531))+(((-1.0)*r10*x11538*x11540)));
evalcond[5]=((((-1.0)*r20*x11531*x11540))+((gconst10*x11534))+((cj3*r21*x11542))+x11526+((gconst11*x11530))+(((-1.0)*cj3*r22*x11541))+(((-1.0)*x11539)));
evalcond[6]=((((-1.0)*cj3*r20*x11529))+x11536+((x11530*x11542))+(((-1.0)*r21*x11531))+(((-1.0)*r22*sj3*x11541))+(((-1.0)*gconst11*x11534*x11540))+((cj1*cj2)));
evalcond[7]=((((-1.0)*cj2*x11533))+(((-1.0)*cj3*r02*x11541))+(((-1.0)*r00*x11531*x11540))+((r00*x11537))+((x11528*x11542))+((gconst11*x11532))+(((-1.0)*x11536)));
evalcond[8]=((((-1.0)*gconst11*x11528))+x11526+(((-1.0)*r00*x11538*x11540))+(((-1.0)*cj3*r00*x11529))+((x11532*x11542))+(((-1.0)*r02*sj3*x11541))+(((-1.0)*x11539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11544=((-1.0)*r01);
IkReal x11545=((-1.0)*py);
CheckValue<IkReal> x11547 = IKatan2WithCheck(IkReal(x11544),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11547.valid){
continue;
}
IkReal x11546=((1.0)*(x11547.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11546)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11545);
rxp0_2=(py*r00);
rxp1_0=(r21*x11545);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11546)));
IkReal gconst10=x11544;
IkReal gconst11=((1.0)*r00);
j4eval[0]=1.0;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11548=((-1.0)*r01);
IkReal x11549=((-1.0)*py);
CheckValue<IkReal> x11551 = IKatan2WithCheck(IkReal(x11548),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11551.valid){
continue;
}
IkReal x11550=((1.0)*(x11551.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11550)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11549);
rxp0_2=(py*r00);
rxp1_0=(r21*x11549);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11550)));
IkReal gconst10=x11548;
IkReal gconst11=((1.0)*r00);
IkReal x11552=((1.0)*cj3);
j4eval[0]=1.0;
j4eval[1]=((((-1.0)*r01*r21*x11552))+(((-1.0)*r00*r20*x11552)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11553=((-1.0)*r01);
IkReal x11554=((-1.0)*py);
CheckValue<IkReal> x11556 = IKatan2WithCheck(IkReal(x11553),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11556.valid){
continue;
}
IkReal x11555=((1.0)*(x11556.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11555)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11554);
rxp0_2=(py*r00);
rxp1_0=(r21*x11554);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11555)));
IkReal gconst10=x11553;
IkReal gconst11=((1.0)*r00);
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11557=((-1.0)*r01);
IkReal x11558=((-1.0)*py);
CheckValue<IkReal> x11560 = IKatan2WithCheck(IkReal(x11557),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11560.valid){
continue;
}
IkReal x11559=((1.0)*(x11560.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11559)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11558);
rxp0_2=(py*r00);
rxp1_0=(r21*x11558);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11559)));
IkReal gconst10=x11557;
IkReal gconst11=((1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11561=((-1.0)*r01);
IkReal x11562=((-1.0)*py);
CheckValue<IkReal> x11564 = IKatan2WithCheck(IkReal(x11561),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11564.valid){
continue;
}
IkReal x11563=((1.0)*(x11564.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11563)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11562);
rxp0_2=(py*r00);
rxp1_0=(r21*x11562);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11563)));
IkReal gconst10=x11561;
IkReal gconst11=((1.0)*r00);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11565=((-1.0)*r01);
IkReal x11566=((-1.0)*py);
CheckValue<IkReal> x11568 = IKatan2WithCheck(IkReal(x11565),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11568.valid){
continue;
}
IkReal x11567=((1.0)*(x11568.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11567)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11566);
rxp0_2=(py*r00);
rxp1_0=(r21*x11566);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11567)));
IkReal gconst10=x11565;
IkReal gconst11=((1.0)*r00);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11571=IKPowWithIntegerCheck((((gconst10*r01))+(((-1.0)*gconst11*r00))),-1);
if(!x11571.valid){
continue;
}
IkReal x11569=x11571.value;
IkReal x11570=(cj0*x11569);
cj4array[0]=(((cj2*sj1*x11570))+(((-1.0)*cj1*sj2*x11570)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11572=IKsin(j4);
IkReal x11573=IKcos(j4);
IkReal x11574=(gconst10*r21);
IkReal x11575=(gconst11*r20);
IkReal x11576=((1.0)*x11573);
IkReal x11577=((1.0)*x11572);
evalcond[0]=((-1.0)*r12*x11572);
evalcond[1]=((((-1.0)*r12*x11576))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x11574*x11577))+((x11572*x11575)));
evalcond[3]=(((gconst11*r00*x11572))+(((-1.0)*gconst10*r01*x11577)));
evalcond[4]=(((x11573*x11574))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*x11575*x11576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11580=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x11580.valid){
continue;
}
IkReal x11578=x11580.value;
IkReal x11579=((1.0)*x11578);
cj4array[0]=((((-1.0)*cj1*cj2*x11579))+(((-1.0)*sj1*sj2*x11579)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11581=IKsin(j4);
IkReal x11582=IKcos(j4);
IkReal x11583=(gconst10*r01);
IkReal x11584=((1.0)*cj0);
IkReal x11585=(gconst11*x11581);
IkReal x11586=((1.0)*x11582);
IkReal x11587=((1.0)*x11581);
evalcond[0]=((-1.0)*r12*x11581);
evalcond[1]=((((-1.0)*x11584))+(((-1.0)*r12*x11586)));
evalcond[2]=(((r20*x11585))+(((-1.0)*gconst10*r21*x11587)));
evalcond[3]=((((-1.0)*x11583*x11587))+((r00*x11585)));
evalcond[4]=((((-1.0)*cj2*sj1*x11584))+((x11582*x11583))+(((-1.0)*gconst11*r00*x11586))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11588=IKPowWithIntegerCheck(r12,-1);
if(!x11588.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11588.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11589=IKsin(j4);
IkReal x11590=IKcos(j4);
IkReal x11591=(gconst11*r20);
IkReal x11592=(gconst11*r00);
IkReal x11593=(gconst10*x11590);
IkReal x11594=((1.0)*x11590);
IkReal x11595=((1.0)*gconst10*x11589);
evalcond[0]=((-1.0)*r12*x11589);
evalcond[1]=(((x11589*x11591))+(((-1.0)*r21*x11595)));
evalcond[2]=(((x11589*x11592))+(((-1.0)*r01*x11595)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x11591*x11594))+((r21*x11593))+((cj1*cj2)));
evalcond[4]=((((-1.0)*cj0*cj2*sj1))+((r01*x11593))+(((-1.0)*x11592*x11594))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11596=((-1.0)*r01);
IkReal x11597=((-1.0)*py);
CheckValue<IkReal> x11599 = IKatan2WithCheck(IkReal(x11596),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11599.valid){
continue;
}
IkReal x11598=((1.0)*(x11599.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11598)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11597);
rxp0_2=(py*r00);
rxp1_0=(r21*x11597);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11598)));
IkReal gconst10=x11596;
IkReal gconst11=((1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11600=((-1.0)*r01);
IkReal x11601=((-1.0)*py);
CheckValue<IkReal> x11603 = IKatan2WithCheck(IkReal(x11600),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11603.valid){
continue;
}
IkReal x11602=((1.0)*(x11603.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11602)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11601);
rxp0_2=(py*r00);
rxp1_0=(r21*x11601);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11602)));
IkReal gconst10=x11600;
IkReal gconst11=((1.0)*r00);
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11604=((-1.0)*r01);
IkReal x11605=((-1.0)*py);
CheckValue<IkReal> x11607 = IKatan2WithCheck(IkReal(x11604),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11607.valid){
continue;
}
IkReal x11606=((1.0)*(x11607.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11606)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11605);
rxp0_2=(py*r00);
rxp1_0=(r21*x11605);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11606)));
IkReal gconst10=x11604;
IkReal gconst11=((1.0)*r00);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11610=IKPowWithIntegerCheck(((((-1.0)*gconst10*r01))+((gconst11*r00))),-1);
if(!x11610.valid){
continue;
}
IkReal x11608=x11610.value;
IkReal x11609=(cj0*x11608);
cj4array[0]=((((-1.0)*cj1*sj2*x11609))+((cj2*sj1*x11609)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11611=IKsin(j4);
IkReal x11612=IKcos(j4);
IkReal x11613=(gconst11*r20);
IkReal x11614=((1.0)*x11612);
IkReal x11615=((1.0)*gconst10*x11611);
evalcond[0]=(r12*x11611);
evalcond[1]=((((-1.0)*r12*x11614))+(((-1.0)*cj0)));
evalcond[2]=(((x11611*x11613))+(((-1.0)*r21*x11615)));
evalcond[3]=(((gconst11*r00*x11611))+(((-1.0)*r01*x11615)));
evalcond[4]=(((x11612*x11613))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst10*r21*x11614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11618=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x11618.valid){
continue;
}
IkReal x11616=x11618.value;
IkReal x11617=((1.0)*x11616);
cj4array[0]=((((-1.0)*cj1*cj2*x11617))+(((-1.0)*sj1*sj2*x11617)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11619=IKsin(j4);
IkReal x11620=IKcos(j4);
IkReal x11621=((1.0)*cj0);
IkReal x11622=((1.0)*gconst10*r01);
IkReal x11623=(gconst11*x11619);
evalcond[0]=(r12*x11619);
evalcond[1]=((((-1.0)*x11621))+(((-1.0)*r12*x11620)));
evalcond[2]=((((-1.0)*gconst10*r21*x11619))+((r20*x11623)));
evalcond[3]=((((-1.0)*x11619*x11622))+((r00*x11623)));
evalcond[4]=(((gconst11*r00*x11620))+(((-1.0)*x11620*x11622))+((cj0*cj1*sj2))+(((-1.0)*cj2*sj1*x11621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11624=IKPowWithIntegerCheck(r12,-1);
if(!x11624.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11624.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11625=IKsin(j4);
IkReal x11626=IKcos(j4);
IkReal x11627=(gconst11*r20);
IkReal x11628=(gconst11*r00);
IkReal x11629=((1.0)*gconst10*r01);
IkReal x11630=((1.0)*gconst10*r21);
evalcond[0]=(r12*x11625);
evalcond[1]=(((x11625*x11627))+(((-1.0)*x11625*x11630)));
evalcond[2]=(((x11625*x11628))+(((-1.0)*x11625*x11629)));
evalcond[3]=(((sj1*sj2))+((x11626*x11627))+((cj1*cj2))+(((-1.0)*x11626*x11630)));
evalcond[4]=((((-1.0)*cj0*cj2*sj1))+((x11626*x11628))+((cj0*cj1*sj2))+(((-1.0)*x11626*x11629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11632=IKPowWithIntegerCheck(r12,-1);
if(!x11632.valid){
continue;
}
IkReal x11631=x11632.value;
CheckValue<IkReal> x11633=IKPowWithIntegerCheck(cj3,-1);
if(!x11633.valid){
continue;
}
if( IKabs((x11631*(x11633.value)*((((cj1*cj2*sj0))+((sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x11631)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11631*(x11633.value)*((((cj1*cj2*sj0))+((sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x11631))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11631*(x11633.value)*((((cj1*cj2*sj0))+((sj0*sj1*sj2))))), ((-1.0)*cj0*x11631));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11634=IKsin(j4);
IkReal x11635=IKcos(j4);
IkReal x11636=((1.0)*sj3);
IkReal x11637=(cj0*sj2);
IkReal x11638=(cj1*cj2);
IkReal x11639=(cj3*r01);
IkReal x11640=(r21*sj3);
IkReal x11641=(sj1*sj2);
IkReal x11642=(r01*sj3);
IkReal x11643=(cj1*sj2);
IkReal x11644=(cj2*sj1);
IkReal x11645=((1.0)*gconst11);
IkReal x11646=(gconst10*sj3);
IkReal x11647=(cj3*r21);
IkReal x11648=((1.0)*cj3);
IkReal x11649=((1.0)*cj0);
IkReal x11650=(r12*x11634);
IkReal x11651=(gconst10*x11635);
IkReal x11652=(gconst11*x11635);
IkReal x11653=(gconst11*x11634);
IkReal x11654=((1.0)*gconst10*x11634);
evalcond[0]=((((-1.0)*r12*x11635))+(((-1.0)*x11649)));
evalcond[1]=(((r20*x11653))+(((-1.0)*r21*x11654)));
evalcond[2]=(sj0+(((-1.0)*r01*x11654))+((r00*x11653)));
evalcond[3]=(((sj0*x11641))+((sj0*x11638))+(((-1.0)*x11648*x11650)));
evalcond[4]=((((-1.0)*sj0*x11644))+((sj0*x11643))+(((-1.0)*x11636*x11650)));
evalcond[5]=(x11644+(((-1.0)*cj3*r20*x11635*x11645))+((gconst11*x11640))+(((-1.0)*x11643))+((x11647*x11651))+((r20*x11646)));
evalcond[6]=(x11638+x11641+((x11640*x11651))+(((-1.0)*r20*x11636*x11652))+(((-1.0)*x11645*x11647))+(((-1.0)*gconst10*r20*x11648)));
evalcond[7]=((((-1.0)*cj3*r00*x11635*x11645))+((gconst11*x11642))+((sj1*x11637))+((cj0*x11638))+((x11639*x11651))+((r00*x11646)));
evalcond[8]=((((-1.0)*x11639*x11645))+((cj1*x11637))+((x11642*x11651))+(((-1.0)*r00*x11636*x11652))+(((-1.0)*gconst10*r00*x11648))+(((-1.0)*x11644*x11649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11655=((1.0)*r20);
CheckValue<IkReal> x11656=IKPowWithIntegerCheck(((((-1.0)*gconst10*r01))+((gconst11*r00))),-1);
if(!x11656.valid){
continue;
}
CheckValue<IkReal> x11657=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst11*x11655))+((cj3*gconst10*r21))),-1);
if(!x11657.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x11656.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11657.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst10*sj3*x11655))+(((-1.0)*gconst11*r21*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x11656.value)))+IKsqr(((x11657.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst10*sj3*x11655))+(((-1.0)*gconst11*r21*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x11656.value)), ((x11657.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst10*sj3*x11655))+(((-1.0)*gconst11*r21*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11658=IKsin(j4);
IkReal x11659=IKcos(j4);
IkReal x11660=((1.0)*sj3);
IkReal x11661=(cj0*sj2);
IkReal x11662=(cj1*cj2);
IkReal x11663=(cj3*r01);
IkReal x11664=(r21*sj3);
IkReal x11665=(sj1*sj2);
IkReal x11666=(r01*sj3);
IkReal x11667=(cj1*sj2);
IkReal x11668=(cj2*sj1);
IkReal x11669=((1.0)*gconst11);
IkReal x11670=(gconst10*sj3);
IkReal x11671=(cj3*r21);
IkReal x11672=((1.0)*cj3);
IkReal x11673=((1.0)*cj0);
IkReal x11674=(r12*x11658);
IkReal x11675=(gconst10*x11659);
IkReal x11676=(gconst11*x11659);
IkReal x11677=(gconst11*x11658);
IkReal x11678=((1.0)*gconst10*x11658);
evalcond[0]=((((-1.0)*r12*x11659))+(((-1.0)*x11673)));
evalcond[1]=((((-1.0)*r21*x11678))+((r20*x11677)));
evalcond[2]=(sj0+((r00*x11677))+(((-1.0)*r01*x11678)));
evalcond[3]=((((-1.0)*x11672*x11674))+((sj0*x11662))+((sj0*x11665)));
evalcond[4]=((((-1.0)*x11660*x11674))+(((-1.0)*sj0*x11668))+((sj0*x11667)));
evalcond[5]=(x11668+((x11671*x11675))+((r20*x11670))+((gconst11*x11664))+(((-1.0)*x11667))+(((-1.0)*cj3*r20*x11659*x11669)));
evalcond[6]=((((-1.0)*gconst10*r20*x11672))+x11665+x11662+(((-1.0)*x11669*x11671))+(((-1.0)*r20*x11660*x11676))+((x11664*x11675)));
evalcond[7]=(((cj0*x11662))+(((-1.0)*cj3*r00*x11659*x11669))+((r00*x11670))+((x11663*x11675))+((gconst11*x11666))+((sj1*x11661)));
evalcond[8]=((((-1.0)*x11668*x11673))+((x11666*x11675))+(((-1.0)*r00*x11660*x11676))+((cj1*x11661))+(((-1.0)*gconst10*r00*x11672))+(((-1.0)*x11663*x11669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11679=IKPowWithIntegerCheck(((((-1.0)*gconst10*r01))+((gconst11*r00))),-1);
if(!x11679.valid){
continue;
}
CheckValue<IkReal> x11680=IKPowWithIntegerCheck(r12,-1);
if(!x11680.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x11679.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x11680.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x11679.value)))+IKsqr(((-1.0)*cj0*(x11680.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x11679.value)), ((-1.0)*cj0*(x11680.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11681=IKsin(j4);
IkReal x11682=IKcos(j4);
IkReal x11683=((1.0)*sj3);
IkReal x11684=(cj0*sj2);
IkReal x11685=(cj1*cj2);
IkReal x11686=(cj3*r01);
IkReal x11687=(r21*sj3);
IkReal x11688=(sj1*sj2);
IkReal x11689=(r01*sj3);
IkReal x11690=(cj1*sj2);
IkReal x11691=(cj2*sj1);
IkReal x11692=((1.0)*gconst11);
IkReal x11693=(gconst10*sj3);
IkReal x11694=(cj3*r21);
IkReal x11695=((1.0)*cj3);
IkReal x11696=((1.0)*cj0);
IkReal x11697=(r12*x11681);
IkReal x11698=(gconst10*x11682);
IkReal x11699=(gconst11*x11682);
IkReal x11700=(gconst11*x11681);
IkReal x11701=((1.0)*gconst10*x11681);
evalcond[0]=((((-1.0)*r12*x11682))+(((-1.0)*x11696)));
evalcond[1]=((((-1.0)*r21*x11701))+((r20*x11700)));
evalcond[2]=(sj0+((r00*x11700))+(((-1.0)*r01*x11701)));
evalcond[3]=(((sj0*x11685))+((sj0*x11688))+(((-1.0)*x11695*x11697)));
evalcond[4]=((((-1.0)*sj0*x11691))+(((-1.0)*x11683*x11697))+((sj0*x11690)));
evalcond[5]=(((gconst11*x11687))+x11691+((x11694*x11698))+(((-1.0)*cj3*r20*x11682*x11692))+((r20*x11693))+(((-1.0)*x11690)));
evalcond[6]=(x11688+x11685+((x11687*x11698))+(((-1.0)*r20*x11683*x11699))+(((-1.0)*x11692*x11694))+(((-1.0)*gconst10*r20*x11695)));
evalcond[7]=(((gconst11*x11689))+((sj1*x11684))+((r00*x11693))+((x11686*x11698))+(((-1.0)*cj3*r00*x11682*x11692))+((cj0*x11685)));
evalcond[8]=(((cj1*x11684))+(((-1.0)*x11686*x11692))+(((-1.0)*gconst10*r00*x11695))+((x11689*x11698))+(((-1.0)*x11691*x11696))+(((-1.0)*r00*x11683*x11699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11702=((-1.0)*r01);
CheckValue<IkReal> x11705 = IKatan2WithCheck(IkReal(x11702),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11705.valid){
continue;
}
IkReal x11703=((1.0)*(x11705.value));
IkReal x11704=x11360;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11703)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11703)));
IkReal gconst10=(x11702*x11704);
IkReal gconst11=((1.0)*r00*x11704);
IkReal x11706=r02*r02;
IkReal x11707=(r12*sj0);
IkReal x11708=x11360;
IkReal x11709=(cj0*x11708);
j4eval[0]=((IKabs((((r02*x11707*x11708))+(((-1.0)*x11709))+((x11706*x11709)))))+(IKabs((x11707+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11710=((1.0)*sj3);
IkReal x11711=(gconst11*r20);
IkReal x11712=(gconst10*r21);
IkReal x11713=((1.0)*sj1*sj2);
IkReal x11714=(cj3*gconst10*r20);
IkReal x11715=(cj3*gconst11*r21);
IkReal x11716=((1.0)*cj1*cj2);
CheckValue<IkReal> x11717=IKPowWithIntegerCheck((((gconst10*r01*sj3*x11711))+(((-1.0)*gconst10*r01*x11710*x11712))+((gconst11*r00*sj3*x11712))+(((-1.0)*gconst11*r00*x11710*x11711))),-1);
if(!x11717.valid){
continue;
}
CheckValue<IkReal> x11718=IKPowWithIntegerCheck(((((-1.0)*x11710*x11711))+((sj3*x11712))),-1);
if(!x11718.valid){
continue;
}
if( IKabs(((x11717.value)*((((sj0*sj3*x11711))+((r02*x11715))+((r02*x11714))+(((-1.0)*sj0*x11710*x11712))+(((-1.0)*r02*x11716))+(((-1.0)*r02*x11713)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11718.value)*((x11715+x11714+(((-1.0)*x11713))+(((-1.0)*x11716)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11717.value)*((((sj0*sj3*x11711))+((r02*x11715))+((r02*x11714))+(((-1.0)*sj0*x11710*x11712))+(((-1.0)*r02*x11716))+(((-1.0)*r02*x11713))))))+IKsqr(((x11718.value)*((x11715+x11714+(((-1.0)*x11713))+(((-1.0)*x11716))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11717.value)*((((sj0*sj3*x11711))+((r02*x11715))+((r02*x11714))+(((-1.0)*sj0*x11710*x11712))+(((-1.0)*r02*x11716))+(((-1.0)*r02*x11713))))), ((x11718.value)*((x11715+x11714+(((-1.0)*x11713))+(((-1.0)*x11716))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11719=IKsin(j4);
IkReal x11720=IKcos(j4);
IkReal x11721=((1.0)*sj3);
IkReal x11722=(cj1*sj2);
IkReal x11723=(cj1*cj2);
IkReal x11724=((1.0)*r10);
IkReal x11725=(gconst10*r01);
IkReal x11726=(cj3*gconst10);
IkReal x11727=(gconst10*r21);
IkReal x11728=(sj1*sj2);
IkReal x11729=(gconst11*r10);
IkReal x11730=(gconst11*sj3);
IkReal x11731=(gconst10*r11);
IkReal x11732=(gconst10*sj3);
IkReal x11733=(cj2*sj1);
IkReal x11734=((1.0)*cj3);
IkReal x11735=(gconst11*r00);
IkReal x11736=((1.0)*r20);
IkReal x11737=((1.0)*cj0);
IkReal x11738=(r12*x11719);
IkReal x11739=(cj3*x11720);
IkReal x11740=(sj3*x11720);
IkReal x11741=(gconst11*x11720);
IkReal x11742=(gconst11*x11734);
IkReal x11743=((1.0)*x11720);
IkReal x11744=(r02*x11719);
IkReal x11745=((1.0)*x11719);
evalcond[0]=(((gconst11*r20*x11719))+(((-1.0)*x11727*x11745)));
evalcond[1]=(sj0+((x11719*x11735))+(((-1.0)*r02*x11743))+(((-1.0)*x11725*x11745)));
evalcond[2]=((((-1.0)*x11737))+((x11719*x11729))+(((-1.0)*x11731*x11745))+(((-1.0)*r12*x11743)));
evalcond[3]=(x11733+(((-1.0)*r20*x11734*x11741))+((r21*x11720*x11726))+(((-1.0)*x11722))+((r20*x11732))+((r21*x11730)));
evalcond[4]=((((-1.0)*x11726*x11736))+((x11727*x11740))+x11723+x11728+(((-1.0)*r21*x11742))+(((-1.0)*r20*x11721*x11741)));
evalcond[5]=(((r01*x11730))+((r00*x11732))+((cj0*x11723))+((cj0*x11728))+(((-1.0)*x11720*x11734*x11735))+((x11725*x11739))+(((-1.0)*x11734*x11744)));
evalcond[6]=((((-1.0)*x11734*x11738))+((r11*x11730))+(((-1.0)*gconst11*x11724*x11739))+((sj0*x11728))+((sj0*x11723))+((r10*x11732))+((r11*x11720*x11726)));
evalcond[7]=((((-1.0)*r01*x11742))+(((-1.0)*x11721*x11744))+((cj0*x11722))+(((-1.0)*x11720*x11721*x11735))+(((-1.0)*r00*x11726))+((x11725*x11740))+(((-1.0)*x11733*x11737)));
evalcond[8]=(((sj0*x11722))+(((-1.0)*x11724*x11726))+(((-1.0)*x11721*x11738))+(((-1.0)*r11*x11742))+(((-1.0)*x11720*x11721*x11729))+((x11731*x11740))+(((-1.0)*sj0*x11733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11746=((1.0)*gconst10);
CheckValue<IkReal> x11747=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11747.valid){
continue;
}
CheckValue<IkReal> x11748 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x11746))+((cj0*gconst11*r00))+((gconst11*r10*sj0))+(((-1.0)*cj0*r01*x11746)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11747.value)))+(x11748.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11749=IKsin(j4);
IkReal x11750=IKcos(j4);
IkReal x11751=((1.0)*sj3);
IkReal x11752=(cj1*sj2);
IkReal x11753=(cj1*cj2);
IkReal x11754=((1.0)*r10);
IkReal x11755=(gconst10*r01);
IkReal x11756=(cj3*gconst10);
IkReal x11757=(gconst10*r21);
IkReal x11758=(sj1*sj2);
IkReal x11759=(gconst11*r10);
IkReal x11760=(gconst11*sj3);
IkReal x11761=(gconst10*r11);
IkReal x11762=(gconst10*sj3);
IkReal x11763=(cj2*sj1);
IkReal x11764=((1.0)*cj3);
IkReal x11765=(gconst11*r00);
IkReal x11766=((1.0)*r20);
IkReal x11767=((1.0)*cj0);
IkReal x11768=(r12*x11749);
IkReal x11769=(cj3*x11750);
IkReal x11770=(sj3*x11750);
IkReal x11771=(gconst11*x11750);
IkReal x11772=(gconst11*x11764);
IkReal x11773=((1.0)*x11750);
IkReal x11774=(r02*x11749);
IkReal x11775=((1.0)*x11749);
evalcond[0]=(((gconst11*r20*x11749))+(((-1.0)*x11757*x11775)));
evalcond[1]=(sj0+((x11749*x11765))+(((-1.0)*x11755*x11775))+(((-1.0)*r02*x11773)));
evalcond[2]=((((-1.0)*x11761*x11775))+((x11749*x11759))+(((-1.0)*r12*x11773))+(((-1.0)*x11767)));
evalcond[3]=(x11763+((r20*x11762))+((r21*x11750*x11756))+(((-1.0)*r20*x11764*x11771))+(((-1.0)*x11752))+((r21*x11760)));
evalcond[4]=(((x11757*x11770))+x11753+x11758+(((-1.0)*r20*x11751*x11771))+(((-1.0)*x11756*x11766))+(((-1.0)*r21*x11772)));
evalcond[5]=(((cj0*x11753))+((cj0*x11758))+(((-1.0)*x11750*x11764*x11765))+(((-1.0)*x11764*x11774))+((x11755*x11769))+((r00*x11762))+((r01*x11760)));
evalcond[6]=(((r11*x11760))+(((-1.0)*gconst11*x11754*x11769))+((r10*x11762))+((sj0*x11753))+((sj0*x11758))+(((-1.0)*x11764*x11768))+((r11*x11750*x11756)));
evalcond[7]=(((cj0*x11752))+(((-1.0)*r00*x11756))+(((-1.0)*x11751*x11774))+((x11755*x11770))+(((-1.0)*r01*x11772))+(((-1.0)*x11763*x11767))+(((-1.0)*x11750*x11751*x11765)));
evalcond[8]=((((-1.0)*x11754*x11756))+((x11761*x11770))+(((-1.0)*r11*x11772))+((sj0*x11752))+(((-1.0)*sj0*x11763))+(((-1.0)*x11751*x11768))+(((-1.0)*x11750*x11751*x11759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11776=((1.0)*gconst10);
CheckValue<IkReal> x11777 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x11776))+((cj0*gconst11*r00))+(((-1.0)*cj0*r01*x11776))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11777.valid){
continue;
}
CheckValue<IkReal> x11778=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11778.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11777.value)+(((1.5707963267949)*(x11778.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11779=IKsin(j4);
IkReal x11780=IKcos(j4);
IkReal x11781=(cj1*sj2);
IkReal x11782=(cj1*cj2);
IkReal x11783=(cj3*r10);
IkReal x11784=(cj3*r01);
IkReal x11785=((1.0)*gconst10);
IkReal x11786=(r21*sj3);
IkReal x11787=(sj1*sj2);
IkReal x11788=(r01*sj3);
IkReal x11789=(gconst11*r10);
IkReal x11790=(gconst11*sj3);
IkReal x11791=((1.0)*gconst11);
IkReal x11792=(cj3*r11);
IkReal x11793=(gconst10*sj3);
IkReal x11794=(cj2*sj1);
IkReal x11795=(cj3*r21);
IkReal x11796=(gconst11*r00);
IkReal x11797=(cj3*r20);
IkReal x11798=((1.0)*cj0);
IkReal x11799=((1.0)*x11780);
IkReal x11800=((1.0)*x11779);
IkReal x11801=(gconst10*x11780);
evalcond[0]=((((-1.0)*r21*x11779*x11785))+((gconst11*r20*x11779))+(((-1.0)*r22*x11799)));
evalcond[1]=(((x11779*x11796))+sj0+(((-1.0)*r01*x11779*x11785))+(((-1.0)*r02*x11799)));
evalcond[2]=((((-1.0)*r12*x11799))+((x11779*x11789))+(((-1.0)*r11*x11779*x11785))+(((-1.0)*x11798)));
evalcond[3]=(x11794+((r20*x11793))+(((-1.0)*x11780*x11791*x11797))+(((-1.0)*x11781))+((x11795*x11801))+(((-1.0)*cj3*r22*x11800))+((gconst11*x11786)));
evalcond[4]=(x11787+x11782+((x11786*x11801))+(((-1.0)*x11785*x11797))+(((-1.0)*r20*x11790*x11799))+(((-1.0)*r22*sj3*x11800))+(((-1.0)*x11791*x11795)));
evalcond[5]=(((x11784*x11801))+((cj0*x11782))+((cj0*x11787))+(((-1.0)*cj3*r00*x11780*x11791))+((gconst11*x11788))+((r00*x11793))+(((-1.0)*cj3*r02*x11800)));
evalcond[6]=(((x11792*x11801))+((r11*x11790))+((r10*x11793))+(((-1.0)*x11780*x11783*x11791))+(((-1.0)*cj3*r12*x11800))+((sj0*x11782))+((sj0*x11787)));
evalcond[7]=((((-1.0)*r02*sj3*x11800))+((cj0*x11781))+(((-1.0)*x11794*x11798))+(((-1.0)*cj3*r00*x11785))+(((-1.0)*x11784*x11791))+((x11788*x11801))+(((-1.0)*r00*x11790*x11799)));
evalcond[8]=((((-1.0)*sj0*x11794))+((r11*x11780*x11793))+((sj0*x11781))+(((-1.0)*x11783*x11785))+(((-1.0)*r12*sj3*x11800))+(((-1.0)*x11791*x11792))+(((-1.0)*sj3*x11789*x11799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11802=((1.0)*gconst10);
CheckValue<IkReal> x11803=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r01))+(((-1.0)*r00*x11802)))),-1);
if(!x11803.valid){
continue;
}
CheckValue<IkReal> x11804 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst11*r20))+(((-1.0)*cj0*r21*x11802)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11803.value)))+(x11804.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11805=IKsin(j4);
IkReal x11806=IKcos(j4);
IkReal x11807=(cj1*sj2);
IkReal x11808=(cj1*cj2);
IkReal x11809=(cj3*r10);
IkReal x11810=(cj3*r01);
IkReal x11811=((1.0)*gconst10);
IkReal x11812=(r21*sj3);
IkReal x11813=(sj1*sj2);
IkReal x11814=(r01*sj3);
IkReal x11815=(gconst11*r10);
IkReal x11816=(gconst11*sj3);
IkReal x11817=((1.0)*gconst11);
IkReal x11818=(cj3*r11);
IkReal x11819=(gconst10*sj3);
IkReal x11820=(cj2*sj1);
IkReal x11821=(cj3*r21);
IkReal x11822=(gconst11*r00);
IkReal x11823=(cj3*r20);
IkReal x11824=((1.0)*cj0);
IkReal x11825=((1.0)*x11806);
IkReal x11826=((1.0)*x11805);
IkReal x11827=(gconst10*x11806);
evalcond[0]=((((-1.0)*r22*x11825))+((gconst11*r20*x11805))+(((-1.0)*r21*x11805*x11811)));
evalcond[1]=(sj0+((x11805*x11822))+(((-1.0)*r02*x11825))+(((-1.0)*r01*x11805*x11811)));
evalcond[2]=((((-1.0)*r11*x11805*x11811))+((x11805*x11815))+(((-1.0)*r12*x11825))+(((-1.0)*x11824)));
evalcond[3]=(((gconst11*x11812))+(((-1.0)*x11807))+(((-1.0)*cj3*r22*x11826))+((x11821*x11827))+(((-1.0)*x11806*x11817*x11823))+((r20*x11819))+x11820);
evalcond[4]=((((-1.0)*r22*sj3*x11826))+(((-1.0)*x11811*x11823))+(((-1.0)*r20*x11816*x11825))+((x11812*x11827))+x11813+x11808+(((-1.0)*x11817*x11821)));
evalcond[5]=((((-1.0)*cj3*r02*x11826))+((gconst11*x11814))+(((-1.0)*cj3*r00*x11806*x11817))+((r00*x11819))+((cj0*x11813))+((cj0*x11808))+((x11810*x11827)));
evalcond[6]=(((sj0*x11813))+(((-1.0)*cj3*r12*x11826))+((x11818*x11827))+(((-1.0)*x11806*x11809*x11817))+((r10*x11819))+((sj0*x11808))+((r11*x11816)));
evalcond[7]=(((x11814*x11827))+(((-1.0)*x11820*x11824))+(((-1.0)*x11810*x11817))+((cj0*x11807))+(((-1.0)*cj3*r00*x11811))+(((-1.0)*r00*x11816*x11825))+(((-1.0)*r02*sj3*x11826)));
evalcond[8]=((((-1.0)*x11817*x11818))+(((-1.0)*x11809*x11811))+(((-1.0)*r12*sj3*x11826))+(((-1.0)*sj3*x11815*x11825))+((r11*x11806*x11819))+((sj0*x11807))+(((-1.0)*sj0*x11820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11828=((1.0)*gconst10);
CheckValue<IkReal> x11829=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x11828))+(((-1.0)*gconst11*r11)))),-1);
if(!x11829.valid){
continue;
}
CheckValue<IkReal> x11830 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x11828))+((gconst11*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11830.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11829.value)))+(x11830.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11831=IKsin(j4);
IkReal x11832=IKcos(j4);
IkReal x11833=(cj1*sj2);
IkReal x11834=(cj1*cj2);
IkReal x11835=(cj3*r10);
IkReal x11836=(cj3*r01);
IkReal x11837=((1.0)*gconst10);
IkReal x11838=(r21*sj3);
IkReal x11839=(sj1*sj2);
IkReal x11840=(r01*sj3);
IkReal x11841=(gconst11*r10);
IkReal x11842=(gconst11*sj3);
IkReal x11843=((1.0)*gconst11);
IkReal x11844=(cj3*r11);
IkReal x11845=(gconst10*sj3);
IkReal x11846=(cj2*sj1);
IkReal x11847=(cj3*r21);
IkReal x11848=(gconst11*r00);
IkReal x11849=(cj3*r20);
IkReal x11850=((1.0)*cj0);
IkReal x11851=((1.0)*x11832);
IkReal x11852=((1.0)*x11831);
IkReal x11853=(gconst10*x11832);
evalcond[0]=((((-1.0)*r21*x11831*x11837))+((gconst11*r20*x11831))+(((-1.0)*r22*x11851)));
evalcond[1]=((((-1.0)*r02*x11851))+(((-1.0)*r01*x11831*x11837))+sj0+((x11831*x11848)));
evalcond[2]=((((-1.0)*x11850))+(((-1.0)*r11*x11831*x11837))+((x11831*x11841))+(((-1.0)*r12*x11851)));
evalcond[3]=((((-1.0)*x11832*x11843*x11849))+((r20*x11845))+((gconst11*x11838))+(((-1.0)*x11833))+(((-1.0)*cj3*r22*x11852))+((x11847*x11853))+x11846);
evalcond[4]=((((-1.0)*x11843*x11847))+((x11838*x11853))+(((-1.0)*r20*x11842*x11851))+(((-1.0)*r22*sj3*x11852))+(((-1.0)*x11837*x11849))+x11839+x11834);
evalcond[5]=((((-1.0)*cj3*r02*x11852))+((x11836*x11853))+(((-1.0)*cj3*r00*x11832*x11843))+((gconst11*x11840))+((r00*x11845))+((cj0*x11839))+((cj0*x11834)));
evalcond[6]=((((-1.0)*cj3*r12*x11852))+(((-1.0)*x11832*x11835*x11843))+((r11*x11842))+((r10*x11845))+((x11844*x11853))+((sj0*x11839))+((sj0*x11834)));
evalcond[7]=(((x11840*x11853))+(((-1.0)*r00*x11842*x11851))+(((-1.0)*x11836*x11843))+(((-1.0)*r02*sj3*x11852))+(((-1.0)*cj3*r00*x11837))+((cj0*x11833))+(((-1.0)*x11846*x11850)));
evalcond[8]=((((-1.0)*x11843*x11844))+(((-1.0)*r12*sj3*x11852))+(((-1.0)*sj0*x11846))+(((-1.0)*x11835*x11837))+((r11*x11832*x11845))+((sj0*x11833))+(((-1.0)*sj3*x11841*x11851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x11854=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x11854;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x11854);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x11855=((1.0)*sj5);
IkReal x11856=((((-1.0)*cj5*r11))+(((-1.0)*r10*x11855)));
j4eval[0]=x11856;
j4eval[1]=IKsign(x11856);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x11855))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x11857=cj5*cj5;
IkReal x11858=(cj3*r00);
IkReal x11859=(cj3*r01);
IkReal x11860=((1.0)*cj5*sj5);
IkReal x11861=(((r21*x11859))+((r20*x11857*x11858))+(((-1.0)*r20*x11859*x11860))+(((-1.0)*r21*x11857*x11859))+(((-1.0)*r21*x11858*x11860))+((cj3*r02*r22)));
j4eval[0]=x11861;
j4eval[1]=IKsign(x11861);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x11862=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x11862;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x11862);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x11863=((1.0)*sj5);
IkReal x11864=((((-1.0)*cj5*r11))+(((-1.0)*r10*x11863)));
j4eval[0]=x11864;
j4eval[1]=IKsign(x11864);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x11863))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x11865=cj5*cj5;
IkReal x11866=r01*r01;
IkReal x11867=(cj5*r00);
IkReal x11868=(r01*sj5);
IkReal x11869=((((-1.0)*x11865*x11866))+(((-2.0)*x11867*x11868))+(r02*r02)+x11866+((x11865*(r00*r00))));
j4eval[0]=x11869;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x11867))+x11868))));
j4eval[2]=IKsign(x11869);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11870=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11870);
rxp0_2=(py*r00);
rxp1_0=(r21*x11870);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11871=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11871);
rxp0_2=(py*r00);
rxp1_0=(r21*x11871);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11872=((1.0)*cj2);
CheckValue<IkReal> x11873=IKPowWithIntegerCheck(r12,-1);
if(!x11873.valid){
continue;
}
CheckValue<IkReal> x11874=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x11874.valid){
continue;
}
if( IKabs(((x11873.value)*(((((-1.0)*sj1*x11872))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11874.value)*(((((-1.0)*cj1*x11872))+(((-1.0)*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11873.value)*(((((-1.0)*sj1*x11872))+((cj1*sj2))))))+IKsqr(((x11874.value)*(((((-1.0)*cj1*x11872))+(((-1.0)*sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11873.value)*(((((-1.0)*sj1*x11872))+((cj1*sj2))))), ((x11874.value)*(((((-1.0)*cj1*x11872))+(((-1.0)*sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11875=IKsin(j4);
IkReal x11876=IKcos(j4);
IkReal x11877=(r01*sj5);
IkReal x11878=(r21*sj5);
IkReal x11879=((1.0)*x11875);
IkReal x11880=(cj5*x11875);
IkReal x11881=((1.0)*cj5*x11876);
evalcond[0]=((-1.0)*r12*x11876);
evalcond[1]=((((-1.0)*x11878*x11879))+((r20*x11880)));
evalcond[2]=((((-1.0)*r00*x11881))+((x11876*x11877)));
evalcond[3]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x11879)));
evalcond[4]=((1.0)+((r00*x11880))+(((-1.0)*x11877*x11879)));
evalcond[5]=(((sj1*sj2))+((cj1*cj2))+((x11876*x11878))+(((-1.0)*r20*x11881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11882=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x11882.valid){
continue;
}
CheckValue<IkReal> x11883=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x11883.valid){
continue;
}
if( IKabs(((-1.0)*(x11882.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11883.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11882.value)))+IKsqr(((x11883.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11882.value)), ((x11883.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11884=IKsin(j4);
IkReal x11885=IKcos(j4);
IkReal x11886=(r01*sj5);
IkReal x11887=(r21*sj5);
IkReal x11888=((1.0)*x11884);
IkReal x11889=(cj5*x11884);
IkReal x11890=((1.0)*cj5*x11885);
evalcond[0]=((-1.0)*r12*x11885);
evalcond[1]=((((-1.0)*x11887*x11888))+((r20*x11889)));
evalcond[2]=((((-1.0)*r00*x11890))+((x11885*x11886)));
evalcond[3]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x11888)));
evalcond[4]=((1.0)+((r00*x11889))+(((-1.0)*x11886*x11888)));
evalcond[5]=((((-1.0)*r20*x11890))+((sj1*sj2))+((cj1*cj2))+((x11885*x11887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11891=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11891);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11891);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11892=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11892);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11892);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11893=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x11893.valid){
continue;
}
CheckValue<IkReal> x11894=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x11894.valid){
continue;
}
if( IKabs(((-1.0)*(x11893.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11894.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11893.value)))+IKsqr(((x11894.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11893.value)), ((x11894.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11895=IKsin(j4);
IkReal x11896=IKcos(j4);
IkReal x11897=(cj5*r00);
IkReal x11898=(cj5*r10);
IkReal x11899=((1.0)*x11896);
IkReal x11900=(sj5*x11896);
IkReal x11901=((1.0)*sj5*x11895);
evalcond[0]=((-1.0)*r22*x11896);
evalcond[1]=(((sj1*sj2))+(((-1.0)*r22*x11895))+((cj1*cj2)));
evalcond[2]=(((x11895*x11898))+(((-1.0)*r11*x11901)));
evalcond[3]=((((-1.0)*x11897*x11899))+((r01*x11900)));
evalcond[4]=((1.0)+((x11895*x11897))+(((-1.0)*r01*x11901)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x11898*x11899))+((r11*x11900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11902=IKPowWithIntegerCheck(r22,-1);
if(!x11902.valid){
continue;
}
CheckValue<IkReal> x11903=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x11903.valid){
continue;
}
if( IKabs(((x11902.value)*((((sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11903.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11902.value)*((((sj1*sj2))+((cj1*cj2))))))+IKsqr(((x11903.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11902.value)*((((sj1*sj2))+((cj1*cj2))))), ((x11903.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11904=IKsin(j4);
IkReal x11905=IKcos(j4);
IkReal x11906=(cj5*r00);
IkReal x11907=(cj5*r10);
IkReal x11908=((1.0)*x11905);
IkReal x11909=(sj5*x11905);
IkReal x11910=((1.0)*sj5*x11904);
evalcond[0]=((-1.0)*r22*x11905);
evalcond[1]=((((-1.0)*r22*x11904))+((sj1*sj2))+((cj1*cj2)));
evalcond[2]=((((-1.0)*r11*x11910))+((x11904*x11907)));
evalcond[3]=(((r01*x11909))+(((-1.0)*x11906*x11908)));
evalcond[4]=((1.0)+((x11904*x11906))+(((-1.0)*r01*x11910)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((r11*x11909))+(((-1.0)*x11907*x11908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11911=cj5*cj5;
IkReal x11912=r01*r01;
IkReal x11913=(r01*sj5);
IkReal x11914=(cj5*r00);
CheckValue<IkReal> x11915 = IKatan2WithCheck(IkReal((x11913+(((-1.0)*x11914)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11915.valid){
continue;
}
CheckValue<IkReal> x11916=IKPowWithIntegerCheck(IKsign((x11912+(((-2.0)*x11913*x11914))+((x11911*(r00*r00)))+(r02*r02)+(((-1.0)*x11911*x11912)))),-1);
if(!x11916.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11915.value)+(((1.5707963267949)*(x11916.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11917=IKsin(j4);
IkReal x11918=IKcos(j4);
IkReal x11919=(cj5*r00);
IkReal x11920=(cj5*r20);
IkReal x11921=(cj5*r10);
IkReal x11922=((1.0)*x11918);
IkReal x11923=(sj5*x11918);
IkReal x11924=((1.0)*x11917);
IkReal x11925=(sj5*x11924);
evalcond[0]=(((x11917*x11920))+(((-1.0)*r22*x11922))+(((-1.0)*r21*x11925)));
evalcond[1]=(((x11917*x11921))+(((-1.0)*r11*x11925))+(((-1.0)*r12*x11922)));
evalcond[2]=((((-1.0)*r02*x11924))+(((-1.0)*x11919*x11922))+((r01*x11923)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11922))+(((-1.0)*r01*x11925))+((x11917*x11919)));
evalcond[4]=(((r21*x11923))+((sj1*sj2))+(((-1.0)*r22*x11924))+(((-1.0)*x11920*x11922))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x11921*x11922))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((r11*x11923))+(((-1.0)*r12*x11924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11926=((1.0)*sj5);
CheckValue<IkReal> x11927 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x11926)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11927.valid){
continue;
}
CheckValue<IkReal> x11928=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x11926)))),-1);
if(!x11928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11927.value)+(((1.5707963267949)*(x11928.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11929=IKsin(j4);
IkReal x11930=IKcos(j4);
IkReal x11931=(cj5*r00);
IkReal x11932=(cj5*r20);
IkReal x11933=(cj5*r10);
IkReal x11934=((1.0)*x11930);
IkReal x11935=(sj5*x11930);
IkReal x11936=((1.0)*x11929);
IkReal x11937=(sj5*x11936);
evalcond[0]=((((-1.0)*r21*x11937))+((x11929*x11932))+(((-1.0)*r22*x11934)));
evalcond[1]=(((x11929*x11933))+(((-1.0)*r12*x11934))+(((-1.0)*r11*x11937)));
evalcond[2]=((((-1.0)*r02*x11936))+(((-1.0)*x11931*x11934))+((r01*x11935)));
evalcond[3]=((1.0)+((x11929*x11931))+(((-1.0)*r02*x11934))+(((-1.0)*r01*x11937)));
evalcond[4]=(((r21*x11935))+((sj1*sj2))+(((-1.0)*r22*x11936))+((cj1*cj2))+(((-1.0)*x11932*x11934)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x11933*x11934))+((r11*x11935))+(((-1.0)*r12*x11936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11938 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11938.valid){
continue;
}
CheckValue<IkReal> x11939=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x11939.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11938.value)+(((1.5707963267949)*(x11939.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11940=IKsin(j4);
IkReal x11941=IKcos(j4);
IkReal x11942=(cj5*r00);
IkReal x11943=(cj5*r20);
IkReal x11944=(cj5*r10);
IkReal x11945=((1.0)*x11941);
IkReal x11946=(sj5*x11941);
IkReal x11947=((1.0)*x11940);
IkReal x11948=(sj5*x11947);
evalcond[0]=((((-1.0)*r21*x11948))+(((-1.0)*r22*x11945))+((x11940*x11943)));
evalcond[1]=(((x11940*x11944))+(((-1.0)*r12*x11945))+(((-1.0)*r11*x11948)));
evalcond[2]=((((-1.0)*r02*x11947))+(((-1.0)*x11942*x11945))+((r01*x11946)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11945))+((x11940*x11942))+(((-1.0)*r01*x11948)));
evalcond[4]=((((-1.0)*x11943*x11945))+(((-1.0)*r22*x11947))+((sj1*sj2))+((r21*x11946))+((cj1*cj2)));
evalcond[5]=(((r11*x11946))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x11944*x11945))+(((-1.0)*r12*x11947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x11949=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x11949;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x11949);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x11950=((1.0)*sj5);
IkReal x11951=((((-1.0)*cj5*r11))+(((-1.0)*r10*x11950)));
j4eval[0]=x11951;
j4eval[1]=IKsign(x11951);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x11950))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x11952=cj5*cj5;
IkReal x11953=r01*r01;
IkReal x11954=(r01*sj5);
IkReal x11955=(cj5*r00);
IkReal x11956=((((-1.0)*(r02*r02)))+(((-1.0)*x11953))+(((-1.0)*x11952*(r00*r00)))+((x11952*x11953))+(((2.0)*x11954*x11955)));
j4eval[0]=x11956;
j4eval[1]=IKsign(x11956);
j4eval[2]=((IKabs(r02))+(IKabs((x11955+(((-1.0)*x11954))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11957=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11957);
rxp0_2=(py*r00);
rxp1_0=(r21*x11957);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11958=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11958);
rxp0_2=(py*r00);
rxp1_0=(r21*x11958);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x11959=((1.0)*sj5);
j4eval[0]=((((-1.0)*r01*x11959))+((cj5*r00)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*x11959)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11960=((1.0)*sj5);
CheckValue<IkReal> x11961=IKPowWithIntegerCheck(((((-1.0)*r01*x11960))+((cj5*r00))),-1);
if(!x11961.valid){
continue;
}
CheckValue<IkReal> x11962=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*x11960))),-1);
if(!x11962.valid){
continue;
}
if( IKabs(((-1.0)*(x11961.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11962.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11961.value)))+IKsqr(((x11962.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11961.value)), ((x11962.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11963=IKsin(j4);
IkReal x11964=IKcos(j4);
IkReal x11965=((1.0)*sj5);
IkReal x11966=(cj5*x11964);
IkReal x11967=(cj5*x11963);
evalcond[0]=((-1.0)*r12*x11964);
evalcond[1]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((r12*x11963)));
evalcond[2]=(((r20*x11967))+(((-1.0)*r21*x11963*x11965)));
evalcond[3]=(((r00*x11966))+(((-1.0)*r01*x11964*x11965)));
evalcond[4]=((1.0)+((r00*x11967))+(((-1.0)*r01*x11963*x11965)));
evalcond[5]=((((-1.0)*r21*x11964*x11965))+((sj1*sj2))+((r20*x11966))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11968=((1.0)*sj2);
CheckValue<IkReal> x11969=IKPowWithIntegerCheck(r12,-1);
if(!x11969.valid){
continue;
}
CheckValue<IkReal> x11970=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x11970.valid){
continue;
}
if( IKabs(((x11969.value)*((((cj2*sj1))+(((-1.0)*cj1*x11968)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11970.value)*(((((-1.0)*sj1*x11968))+(((-1.0)*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11969.value)*((((cj2*sj1))+(((-1.0)*cj1*x11968))))))+IKsqr(((x11970.value)*(((((-1.0)*sj1*x11968))+(((-1.0)*cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11969.value)*((((cj2*sj1))+(((-1.0)*cj1*x11968))))), ((x11970.value)*(((((-1.0)*sj1*x11968))+(((-1.0)*cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11971=IKsin(j4);
IkReal x11972=IKcos(j4);
IkReal x11973=((1.0)*sj5);
IkReal x11974=(cj5*x11972);
IkReal x11975=(cj5*x11971);
evalcond[0]=((-1.0)*r12*x11972);
evalcond[1]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((r12*x11971)));
evalcond[2]=((((-1.0)*r21*x11971*x11973))+((r20*x11975)));
evalcond[3]=(((r00*x11974))+(((-1.0)*r01*x11972*x11973)));
evalcond[4]=((1.0)+((r00*x11975))+(((-1.0)*r01*x11971*x11973)));
evalcond[5]=(((sj1*sj2))+((r20*x11974))+(((-1.0)*r21*x11972*x11973))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11976=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11976);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11976);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x11977=((1.0)*sj5);
j4eval[0]=((((-1.0)*r01*x11977))+((cj5*r00)));
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*x11977)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11978=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11978);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11978);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11979=((1.0)*cj1);
CheckValue<IkReal> x11980=IKPowWithIntegerCheck(r22,-1);
if(!x11980.valid){
continue;
}
CheckValue<IkReal> x11981=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x11981.valid){
continue;
}
if( IKabs(((x11980.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj2*x11979)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11981.value)*((((cj2*sj1))+(((-1.0)*sj2*x11979)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11980.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj2*x11979))))))+IKsqr(((x11981.value)*((((cj2*sj1))+(((-1.0)*sj2*x11979))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11980.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj2*x11979))))), ((x11981.value)*((((cj2*sj1))+(((-1.0)*sj2*x11979))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11982=IKsin(j4);
IkReal x11983=IKcos(j4);
IkReal x11984=(cj5*r00);
IkReal x11985=(cj5*r10);
IkReal x11986=((1.0)*sj5*x11982);
IkReal x11987=((1.0)*sj5*x11983);
evalcond[0]=((-1.0)*r22*x11983);
evalcond[1]=(((sj1*sj2))+((r22*x11982))+((cj1*cj2)));
evalcond[2]=((((-1.0)*r11*x11986))+((x11982*x11985)));
evalcond[3]=(((x11983*x11984))+(((-1.0)*r01*x11987)));
evalcond[4]=((1.0)+(((-1.0)*r01*x11986))+((x11982*x11984)));
evalcond[5]=((((-1.0)*r11*x11987))+((x11983*x11985))+((cj1*sj2))+(((-1.0)*cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11988=((1.0)*sj5);
CheckValue<IkReal> x11989=IKPowWithIntegerCheck(((((-1.0)*r01*x11988))+((cj5*r00))),-1);
if(!x11989.valid){
continue;
}
CheckValue<IkReal> x11990=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*x11988))),-1);
if(!x11990.valid){
continue;
}
if( IKabs(((-1.0)*(x11989.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11990.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11989.value)))+IKsqr(((x11990.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11989.value)), ((x11990.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11991=IKsin(j4);
IkReal x11992=IKcos(j4);
IkReal x11993=(cj5*r00);
IkReal x11994=(cj5*r10);
IkReal x11995=((1.0)*sj5*x11991);
IkReal x11996=((1.0)*sj5*x11992);
evalcond[0]=((-1.0)*r22*x11992);
evalcond[1]=(((sj1*sj2))+((r22*x11991))+((cj1*cj2)));
evalcond[2]=(((x11991*x11994))+(((-1.0)*r11*x11995)));
evalcond[3]=(((x11992*x11993))+(((-1.0)*r01*x11996)));
evalcond[4]=((1.0)+((x11991*x11993))+(((-1.0)*r01*x11995)));
evalcond[5]=(((x11992*x11994))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r11*x11996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11997=cj5*cj5;
IkReal x11998=r01*r01;
IkReal x11999=(r01*sj5);
IkReal x12000=(cj5*r00);
CheckValue<IkReal> x12001=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x11997*(r00*r00)))+(((-1.0)*x11998))+((x11997*x11998))+(((2.0)*x11999*x12000)))),-1);
if(!x12001.valid){
continue;
}
CheckValue<IkReal> x12002 = IKatan2WithCheck(IkReal((x12000+(((-1.0)*x11999)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12001.value)))+(x12002.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12003=IKcos(j4);
IkReal x12004=IKsin(j4);
IkReal x12005=((1.0)*x12003);
IkReal x12006=(cj5*x12003);
IkReal x12007=(cj5*x12004);
IkReal x12008=((1.0)*sj5*x12004);
evalcond[0]=(((r00*x12006))+(((-1.0)*r01*sj5*x12005))+((r02*x12004)));
evalcond[1]=((((-1.0)*r21*x12008))+((r20*x12007))+(((-1.0)*r22*x12005)));
evalcond[2]=((((-1.0)*r12*x12005))+((r10*x12007))+(((-1.0)*r11*x12008)));
evalcond[3]=((1.0)+((r00*x12007))+(((-1.0)*r01*x12008))+(((-1.0)*r02*x12005)));
evalcond[4]=((((-1.0)*r21*sj5*x12005))+((r20*x12006))+((sj1*sj2))+((r22*x12004))+((cj1*cj2)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r11*sj5*x12005))+((r12*x12004))+((r10*x12006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12009=((1.0)*sj5);
CheckValue<IkReal> x12010 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x12009))+((cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12010.valid){
continue;
}
CheckValue<IkReal> x12011=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x12009)))),-1);
if(!x12011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12010.value)+(((1.5707963267949)*(x12011.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12012=IKcos(j4);
IkReal x12013=IKsin(j4);
IkReal x12014=((1.0)*x12012);
IkReal x12015=(cj5*x12012);
IkReal x12016=(cj5*x12013);
IkReal x12017=((1.0)*sj5*x12013);
evalcond[0]=((((-1.0)*r01*sj5*x12014))+((r02*x12013))+((r00*x12015)));
evalcond[1]=((((-1.0)*r22*x12014))+(((-1.0)*r21*x12017))+((r20*x12016)));
evalcond[2]=(((r10*x12016))+(((-1.0)*r12*x12014))+(((-1.0)*r11*x12017)));
evalcond[3]=((1.0)+(((-1.0)*r01*x12017))+(((-1.0)*r02*x12014))+((r00*x12016)));
evalcond[4]=(((r22*x12013))+((sj1*sj2))+((r20*x12015))+((cj1*cj2))+(((-1.0)*r21*sj5*x12014)));
evalcond[5]=(((r12*x12013))+((cj1*sj2))+((r10*x12015))+(((-1.0)*cj2*sj1))+(((-1.0)*r11*sj5*x12014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12018 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12018.valid){
continue;
}
CheckValue<IkReal> x12019=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12018.value)+(((1.5707963267949)*(x12019.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12020=IKcos(j4);
IkReal x12021=IKsin(j4);
IkReal x12022=((1.0)*x12020);
IkReal x12023=(cj5*x12020);
IkReal x12024=(cj5*x12021);
IkReal x12025=((1.0)*sj5*x12021);
evalcond[0]=(((r00*x12023))+(((-1.0)*r01*sj5*x12022))+((r02*x12021)));
evalcond[1]=(((r20*x12024))+(((-1.0)*r22*x12022))+(((-1.0)*r21*x12025)));
evalcond[2]=((((-1.0)*r11*x12025))+(((-1.0)*r12*x12022))+((r10*x12024)));
evalcond[3]=((1.0)+(((-1.0)*r01*x12025))+((r00*x12024))+(((-1.0)*r02*x12022)));
evalcond[4]=(((r20*x12023))+((sj1*sj2))+((r22*x12021))+((cj1*cj2))+(((-1.0)*r21*sj5*x12022)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r11*sj5*x12022))+((r12*x12021))+((r10*x12023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12026=((-1.0)*r10);
IkReal x12028 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12028)==0){
continue;
}
IkReal x12027=pow(x12028,-0.5);
CheckValue<IkReal> x12029 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12026),IKFAST_ATAN2_MAGTHRESH);
if(!x12029.valid){
continue;
}
IkReal gconst18=((-1.0)*(x12029.value));
IkReal gconst19=(r11*x12027);
IkReal gconst20=(x12026*x12027);
CheckValue<IkReal> x12030 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12030.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12030.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12031=((-1.0)*r10);
IkReal x12032=x12027;
CheckValue<IkReal> x12034 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12031),IKFAST_ATAN2_MAGTHRESH);
if(!x12034.valid){
continue;
}
IkReal x12033=((-1.0)*(x12034.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12033;
IkReal gconst18=x12033;
IkReal gconst19=(r11*x12032);
IkReal gconst20=(x12031*x12032);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12035=((-1.0)*r10);
IkReal x12036=x12027;
CheckValue<IkReal> x12038 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12035),IKFAST_ATAN2_MAGTHRESH);
if(!x12038.valid){
continue;
}
IkReal x12037=((-1.0)*(x12038.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12037;
IkReal gconst18=x12037;
IkReal gconst19=(r11*x12036);
IkReal gconst20=(x12035*x12036);
CheckValue<IkReal> x12046=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x12046.valid){
continue;
}
IkReal x12039=x12046.value;
IkReal x12040=(cj3*x12039);
IkReal x12041=(r00*x12040);
IkReal x12042=(r21*x12040);
IkReal x12043=(r20*x12040);
IkReal x12044=(r01*x12040);
IkReal x12045=(r10*r11*x12040);
j4eval[0]=IKsign((((r01*r10*r11*x12043))+((r10*r11*r21*x12041))+((cj3*r02*r22))+((r01*x12042*(r11*r11)))+((r20*x12041*(r10*r10)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12047=((-1.0)*r10);
IkReal x12048=x12027;
CheckValue<IkReal> x12050 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12047),IKFAST_ATAN2_MAGTHRESH);
if(!x12050.valid){
continue;
}
IkReal x12049=((-1.0)*(x12050.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12049;
IkReal gconst18=x12049;
IkReal gconst19=(r11*x12048);
IkReal gconst20=(x12047*x12048);
CheckValue<IkReal> x12058=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x12058.valid){
continue;
}
IkReal x12051=x12058.value;
IkReal x12052=(sj3*x12051);
IkReal x12053=(r20*x12052);
IkReal x12054=(r00*x12052);
IkReal x12055=(r01*x12052);
IkReal x12056=(r21*x12052);
IkReal x12057=(r10*r11*x12052);
j4eval[0]=IKsign((((r00*x12053*(r10*r10)))+((r01*r10*r11*x12053))+((r10*r11*r21*x12054))+((r21*x12055*(r11*r11)))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12059=((-1.0)*r10);
IkReal x12060=x12027;
CheckValue<IkReal> x12062 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12059),IKFAST_ATAN2_MAGTHRESH);
if(!x12062.valid){
continue;
}
IkReal x12061=((-1.0)*(x12062.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12061;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst18=x12061;
IkReal gconst19=(r11*x12060);
IkReal gconst20=(x12059*x12060);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12063=((-1.0)*r10);
IkReal x12064=x12027;
CheckValue<IkReal> x12066 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12063),IKFAST_ATAN2_MAGTHRESH);
if(!x12066.valid){
continue;
}
IkReal x12065=((-1.0)*(x12066.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12065;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst18=x12065;
IkReal gconst19=(r11*x12064);
IkReal gconst20=(x12063*x12064);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12067=((-1.0)*r10);
IkReal x12068=x12027;
CheckValue<IkReal> x12070 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12067),IKFAST_ATAN2_MAGTHRESH);
if(!x12070.valid){
continue;
}
IkReal x12069=((-1.0)*(x12070.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12069;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst18=x12069;
IkReal gconst19=(r11*x12068);
IkReal gconst20=(x12067*x12068);
IkReal x12071=(r02*sj1*sj2);
IkReal x12072=(cj1*cj2*r02);
IkReal x12073=x12027;
IkReal x12074=(r12*x12073);
j4eval[0]=((IKabs((x12071+x12072)))+(IKabs((((x12071*x12074))+((x12072*x12074))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12075=(cj1*cj2);
IkReal x12076=(gconst19*r01);
IkReal x12077=(sj1*sj2);
IkReal x12078=((1.0)*gconst20*r00);
CheckValue<IkReal> x12079 = IKatan2WithCheck(IkReal((((x12076*x12077))+((x12075*x12076))+(((-1.0)*x12075*x12078))+(((-1.0)*x12077*x12078)))),IkReal((((r02*x12075))+((r02*x12077)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12079.valid){
continue;
}
CheckValue<IkReal> x12080=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x12080.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12079.value)+(((1.5707963267949)*(x12080.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12081=IKsin(j4);
IkReal x12082=IKcos(j4);
IkReal x12083=(gconst20*r20);
IkReal x12084=(gconst20*r00);
IkReal x12085=(gconst20*r10);
IkReal x12086=((1.0)*x12082);
IkReal x12087=(gconst19*x12082);
IkReal x12088=((1.0)*x12081);
evalcond[0]=(((x12081*x12083))+(((-1.0)*r22*x12086))+(((-1.0)*gconst19*r21*x12088)));
evalcond[1]=((((-1.0)*r12*x12086))+((x12081*x12085))+(((-1.0)*gconst19*r11*x12088)));
evalcond[2]=((((-1.0)*x12084*x12086))+((r01*x12087))+(((-1.0)*r02*x12088)));
evalcond[3]=((1.0)+((x12081*x12084))+(((-1.0)*gconst19*r01*x12088))+(((-1.0)*r02*x12086)));
evalcond[4]=((((-1.0)*r12*x12088))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*x12085*x12086))+((r11*x12087)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x12088))+((r21*x12087))+(((-1.0)*x12083*x12086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12089=(gconst19*r01);
IkReal x12090=(gconst20*r00);
CheckValue<IkReal> x12091=IKPowWithIntegerCheck(IKsign(((x12089*x12089)+(((-2.0)*x12089*x12090))+(x12090*x12090)+(r02*r02))),-1);
if(!x12091.valid){
continue;
}
CheckValue<IkReal> x12092 = IKatan2WithCheck(IkReal(((((-1.0)*x12090))+x12089)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12092.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12091.value)))+(x12092.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12093=IKsin(j4);
IkReal x12094=IKcos(j4);
IkReal x12095=(gconst20*r20);
IkReal x12096=(gconst20*r00);
IkReal x12097=(gconst20*r10);
IkReal x12098=((1.0)*x12094);
IkReal x12099=(gconst19*x12094);
IkReal x12100=((1.0)*x12093);
evalcond[0]=((((-1.0)*r22*x12098))+((x12093*x12095))+(((-1.0)*gconst19*r21*x12100)));
evalcond[1]=((((-1.0)*gconst19*r11*x12100))+(((-1.0)*r12*x12098))+((x12093*x12097)));
evalcond[2]=(((r01*x12099))+(((-1.0)*x12096*x12098))+(((-1.0)*r02*x12100)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12098))+((x12093*x12096))+(((-1.0)*gconst19*r01*x12100)));
evalcond[4]=(((r11*x12099))+(((-1.0)*r12*x12100))+(((-1.0)*x12097*x12098))+((sj1*sj2))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*x12095*x12098))+(((-1.0)*r22*x12100))+(((-1.0)*cj1*sj2))+((r21*x12099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12101 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst19*r11))+((gconst20*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12101.valid){
continue;
}
CheckValue<IkReal> x12102=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x12102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12101.value)+(((1.5707963267949)*(x12102.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12103=IKsin(j4);
IkReal x12104=IKcos(j4);
IkReal x12105=(gconst20*r20);
IkReal x12106=(gconst20*r00);
IkReal x12107=(gconst20*r10);
IkReal x12108=((1.0)*x12104);
IkReal x12109=(gconst19*x12104);
IkReal x12110=((1.0)*x12103);
evalcond[0]=((((-1.0)*r22*x12108))+((x12103*x12105))+(((-1.0)*gconst19*r21*x12110)));
evalcond[1]=((((-1.0)*r12*x12108))+(((-1.0)*gconst19*r11*x12110))+((x12103*x12107)));
evalcond[2]=((((-1.0)*x12106*x12108))+((r01*x12109))+(((-1.0)*r02*x12110)));
evalcond[3]=((1.0)+((x12103*x12106))+(((-1.0)*r02*x12108))+(((-1.0)*gconst19*r01*x12110)));
evalcond[4]=((((-1.0)*r12*x12110))+((sj1*sj2))+((cj1*cj2))+((r11*x12109))+(((-1.0)*x12107*x12108)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r22*x12110))+(((-1.0)*cj1*sj2))+(((-1.0)*x12105*x12108))+((r21*x12109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12111=((-1.0)*r10);
IkReal x12112=x12027;
CheckValue<IkReal> x12114 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12111),IKFAST_ATAN2_MAGTHRESH);
if(!x12114.valid){
continue;
}
IkReal x12113=((-1.0)*(x12114.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12113;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst18=x12113;
IkReal gconst19=(r11*x12112);
IkReal gconst20=(x12111*x12112);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12115=((-1.0)*r10);
IkReal x12116=x12027;
CheckValue<IkReal> x12118 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12115),IKFAST_ATAN2_MAGTHRESH);
if(!x12118.valid){
continue;
}
IkReal x12117=((-1.0)*(x12118.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12117;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst18=x12117;
IkReal gconst19=(r11*x12116);
IkReal gconst20=(x12115*x12116);
IkReal x12119=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x12123=IKPowWithIntegerCheck(x12119,-1);
if(!x12123.valid){
continue;
}
IkReal x12120=x12123.value;
IkReal x12121=((1.0)*x12120);
IkReal x12122=((((-1.0)*x12121*(r00*r00)*(r10*r10)))+(((-1.0)*x12121*(r01*r01)*(r11*r11)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r10*r11*x12120)));
j4eval[0]=x12122;
j4eval[1]=r02;
j4eval[2]=x12119;
j4eval[3]=IKsign(x12122);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12124=((-1.0)*r10);
IkReal x12125=x12027;
CheckValue<IkReal> x12127 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12124),IKFAST_ATAN2_MAGTHRESH);
if(!x12127.valid){
continue;
}
IkReal x12126=((-1.0)*(x12127.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12126;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst18=x12126;
IkReal gconst19=(r11*x12125);
IkReal gconst20=(x12124*x12125);
IkReal x12128=r12*r12;
IkReal x12129=((1.0)*r02);
IkReal x12130=(sj1*sj2);
IkReal x12131=(cj1*cj2);
CheckValue<IkReal> x12135=IKPowWithIntegerCheck(((-1.0)+x12128),-1);
if(!x12135.valid){
continue;
}
IkReal x12132=x12135.value;
if((((1.0)+(((-1.0)*x12128)))) < -0.00001)
continue;
IkReal x12133=IKsqrt(((1.0)+(((-1.0)*x12128))));
IkReal x12134=(r12*x12132*x12133);
j4eval[0]=((IKabs(((((-1.0)*x12129*x12130*x12134))+(((-1.0)*x12129*x12131*x12134)))))+(IKabs(((((-1.0)*x12129*x12130))+(((-1.0)*x12129*x12131))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12136=((1.0)*r02);
IkReal x12137=(sj1*sj2);
IkReal x12138=(cj1*cj2);
IkReal x12139=(gconst20*r00);
IkReal x12140=((1.0)*gconst19*r01);
CheckValue<IkReal> x12141 = IKatan2WithCheck(IkReal(((((-1.0)*x12137*x12140))+((x12138*x12139))+((x12137*x12139))+(((-1.0)*x12138*x12140)))),IkReal(((((-1.0)*x12136*x12138))+(((-1.0)*x12136*x12137)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12141.valid){
continue;
}
CheckValue<IkReal> x12142=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x12142.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12141.value)+(((1.5707963267949)*(x12142.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12143=IKcos(j4);
IkReal x12144=IKsin(j4);
IkReal x12145=(gconst20*r00);
IkReal x12146=(gconst19*r21);
IkReal x12147=(gconst20*r20);
IkReal x12148=(gconst19*r01);
IkReal x12149=(gconst20*r10);
IkReal x12150=(gconst19*r11);
IkReal x12151=((1.0)*x12143);
IkReal x12152=((1.0)*x12144);
evalcond[0]=(((x12143*x12145))+((r02*x12144))+(((-1.0)*x12148*x12151)));
evalcond[1]=((((-1.0)*r22*x12151))+(((-1.0)*x12146*x12152))+((x12144*x12147)));
evalcond[2]=((((-1.0)*r12*x12151))+(((-1.0)*x12150*x12152))+((x12144*x12149)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12151))+(((-1.0)*x12148*x12152))+((x12144*x12145)));
evalcond[4]=(((x12143*x12149))+((sj1*sj2))+((r12*x12144))+(((-1.0)*x12150*x12151))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+((r22*x12144))+((x12143*x12147))+(((-1.0)*cj1*sj2))+(((-1.0)*x12146*x12151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12153=(gconst20*r00);
IkReal x12154=(gconst19*r01);
CheckValue<IkReal> x12155 = IKatan2WithCheck(IkReal(((((-1.0)*x12154))+x12153)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12155.valid){
continue;
}
CheckValue<IkReal> x12156=IKPowWithIntegerCheck(IKsign(((((2.0)*x12153*x12154))+(((-1.0)*(x12154*x12154)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x12153*x12153))))),-1);
if(!x12156.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12155.value)+(((1.5707963267949)*(x12156.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12157=IKcos(j4);
IkReal x12158=IKsin(j4);
IkReal x12159=(gconst20*r00);
IkReal x12160=(gconst19*r21);
IkReal x12161=(gconst20*r20);
IkReal x12162=(gconst19*r01);
IkReal x12163=(gconst20*r10);
IkReal x12164=(gconst19*r11);
IkReal x12165=((1.0)*x12157);
IkReal x12166=((1.0)*x12158);
evalcond[0]=(((r02*x12158))+(((-1.0)*x12162*x12165))+((x12157*x12159)));
evalcond[1]=((((-1.0)*r22*x12165))+((x12158*x12161))+(((-1.0)*x12160*x12166)));
evalcond[2]=((((-1.0)*x12164*x12166))+((x12158*x12163))+(((-1.0)*r12*x12165)));
evalcond[3]=((1.0)+(((-1.0)*x12162*x12166))+((x12158*x12159))+(((-1.0)*r02*x12165)));
evalcond[4]=((((-1.0)*x12164*x12165))+((r12*x12158))+((sj1*sj2))+((cj1*cj2))+((x12157*x12163)));
evalcond[5]=(((cj2*sj1))+((r22*x12158))+(((-1.0)*x12160*x12165))+(((-1.0)*cj1*sj2))+((x12157*x12161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12167 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst19*r11))+((gconst20*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12167.valid){
continue;
}
CheckValue<IkReal> x12168=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x12168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12167.value)+(((1.5707963267949)*(x12168.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12169=IKcos(j4);
IkReal x12170=IKsin(j4);
IkReal x12171=(gconst20*r00);
IkReal x12172=(gconst19*r21);
IkReal x12173=(gconst20*r20);
IkReal x12174=(gconst19*r01);
IkReal x12175=(gconst20*r10);
IkReal x12176=(gconst19*r11);
IkReal x12177=((1.0)*x12169);
IkReal x12178=((1.0)*x12170);
evalcond[0]=(((x12169*x12171))+(((-1.0)*x12174*x12177))+((r02*x12170)));
evalcond[1]=((((-1.0)*r22*x12177))+((x12170*x12173))+(((-1.0)*x12172*x12178)));
evalcond[2]=((((-1.0)*x12176*x12178))+((x12170*x12175))+(((-1.0)*r12*x12177)));
evalcond[3]=((1.0)+(((-1.0)*x12174*x12178))+((x12170*x12171))+(((-1.0)*r02*x12177)));
evalcond[4]=(((x12169*x12175))+((sj1*sj2))+(((-1.0)*x12176*x12177))+((cj1*cj2))+((r12*x12170)));
evalcond[5]=(((cj2*sj1))+((x12169*x12173))+(((-1.0)*cj1*sj2))+((r22*x12170))+(((-1.0)*x12172*x12177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12179=((-1.0)*r10);
IkReal x12180=x12027;
CheckValue<IkReal> x12182 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12179),IKFAST_ATAN2_MAGTHRESH);
if(!x12182.valid){
continue;
}
IkReal x12181=((-1.0)*(x12182.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12181;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst18=x12181;
IkReal gconst19=(r11*x12180);
IkReal gconst20=(x12179*x12180);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12183=((-1.0)*r10);
IkReal x12184=x12027;
CheckValue<IkReal> x12186 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12183),IKFAST_ATAN2_MAGTHRESH);
if(!x12186.valid){
continue;
}
IkReal x12185=((-1.0)*(x12186.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12185;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst18=x12185;
IkReal gconst19=(r11*x12184);
IkReal gconst20=(x12183*x12184);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12187=((-1.0)*r10);
IkReal x12188=x12027;
CheckValue<IkReal> x12190 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12187),IKFAST_ATAN2_MAGTHRESH);
if(!x12190.valid){
continue;
}
IkReal x12189=((-1.0)*(x12190.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12189;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst18=x12189;
IkReal gconst19=(r11*x12188);
IkReal gconst20=(x12187*x12188);
IkReal x12191=r12*r12;
IkReal x12192=(cj1*cj2*r22);
IkReal x12193=(r22*sj1*sj2);
CheckValue<IkReal> x12197=IKPowWithIntegerCheck(((-1.0)+x12191),-1);
if(!x12197.valid){
continue;
}
IkReal x12194=x12197.value;
if((((1.0)+(((-1.0)*x12191)))) < -0.00001)
continue;
IkReal x12195=IKsqrt(((1.0)+(((-1.0)*x12191))));
IkReal x12196=((1.0)*r12*x12194*x12195);
j4eval[0]=((IKabs((x12192+x12193)))+(IKabs(((((-1.0)*x12192*x12196))+(((-1.0)*x12193*x12196))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12198=(sj1*sj2);
IkReal x12199=(gconst19*r21);
IkReal x12200=(cj1*cj2);
IkReal x12201=(gconst20*r20);
CheckValue<IkReal> x12202 = IKatan2WithCheck(IkReal((((r22*x12200))+((r22*x12198)))),IkReal((((x12200*x12201))+(((-1.0)*x12198*x12199))+(((-1.0)*x12199*x12200))+((x12198*x12201)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12202.valid){
continue;
}
CheckValue<IkReal> x12203=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x12199*x12201))+(x12199*x12199)+(x12201*x12201))),-1);
if(!x12203.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12202.value)+(((1.5707963267949)*(x12203.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12204=IKsin(j4);
IkReal x12205=IKcos(j4);
IkReal x12206=(gconst20*r20);
IkReal x12207=(gconst20*r00);
IkReal x12208=(gconst20*r10);
IkReal x12209=((1.0)*x12205);
IkReal x12210=(gconst19*x12205);
IkReal x12211=((1.0)*x12204);
evalcond[0]=((((-1.0)*r22*x12209))+((x12204*x12206))+(((-1.0)*gconst19*r21*x12211)));
evalcond[1]=((((-1.0)*r12*x12209))+(((-1.0)*gconst19*r11*x12211))+((x12204*x12208)));
evalcond[2]=((((-1.0)*r02*x12211))+(((-1.0)*x12207*x12209))+((r01*x12210)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12209))+((x12204*x12207))+(((-1.0)*gconst19*r01*x12211)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x12211))+((r21*x12210))+((cj1*cj2))+(((-1.0)*x12206*x12209)));
evalcond[5]=((((-1.0)*r12*x12211))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x12208*x12209))+((r11*x12210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12212=(gconst19*r01);
IkReal x12213=(gconst20*r00);
CheckValue<IkReal> x12214=IKPowWithIntegerCheck(IKsign(((((-2.0)*x12212*x12213))+(x12212*x12212)+(x12213*x12213)+(r02*r02))),-1);
if(!x12214.valid){
continue;
}
CheckValue<IkReal> x12215 = IKatan2WithCheck(IkReal((x12212+(((-1.0)*x12213)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12215.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12214.value)))+(x12215.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12216=IKsin(j4);
IkReal x12217=IKcos(j4);
IkReal x12218=(gconst20*r20);
IkReal x12219=(gconst20*r00);
IkReal x12220=(gconst20*r10);
IkReal x12221=((1.0)*x12217);
IkReal x12222=(gconst19*x12217);
IkReal x12223=((1.0)*x12216);
evalcond[0]=((((-1.0)*r22*x12221))+(((-1.0)*gconst19*r21*x12223))+((x12216*x12218)));
evalcond[1]=((((-1.0)*gconst19*r11*x12223))+((x12216*x12220))+(((-1.0)*r12*x12221)));
evalcond[2]=((((-1.0)*x12219*x12221))+((r01*x12222))+(((-1.0)*r02*x12223)));
evalcond[3]=((1.0)+((x12216*x12219))+(((-1.0)*gconst19*r01*x12223))+(((-1.0)*r02*x12221)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x12223))+((r21*x12222))+((cj1*cj2))+(((-1.0)*x12218*x12221)));
evalcond[5]=((((-1.0)*x12220*x12221))+((r11*x12222))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x12223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12224 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst19*r11))+((gconst20*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12224.valid){
continue;
}
CheckValue<IkReal> x12225=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x12225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12224.value)+(((1.5707963267949)*(x12225.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12226=IKsin(j4);
IkReal x12227=IKcos(j4);
IkReal x12228=(gconst20*r20);
IkReal x12229=(gconst20*r00);
IkReal x12230=(gconst20*r10);
IkReal x12231=((1.0)*x12227);
IkReal x12232=(gconst19*x12227);
IkReal x12233=((1.0)*x12226);
evalcond[0]=((((-1.0)*r22*x12231))+((x12226*x12228))+(((-1.0)*gconst19*r21*x12233)));
evalcond[1]=((((-1.0)*r12*x12231))+((x12226*x12230))+(((-1.0)*gconst19*r11*x12233)));
evalcond[2]=(((r01*x12232))+(((-1.0)*x12229*x12231))+(((-1.0)*r02*x12233)));
evalcond[3]=((1.0)+((x12226*x12229))+(((-1.0)*gconst19*r01*x12233))+(((-1.0)*r02*x12231)));
evalcond[4]=((((-1.0)*r22*x12233))+((sj1*sj2))+((cj1*cj2))+((r21*x12232))+(((-1.0)*x12228*x12231)));
evalcond[5]=((((-1.0)*r12*x12233))+(((-1.0)*x12230*x12231))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((r11*x12232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12234=((-1.0)*r10);
IkReal x12235=x12027;
CheckValue<IkReal> x12237 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12234),IKFAST_ATAN2_MAGTHRESH);
if(!x12237.valid){
continue;
}
IkReal x12236=((-1.0)*(x12237.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12236;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst18=x12236;
IkReal gconst19=(r11*x12235);
IkReal gconst20=(x12234*x12235);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12238=((-1.0)*r10);
IkReal x12239=x12027;
CheckValue<IkReal> x12241 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12238),IKFAST_ATAN2_MAGTHRESH);
if(!x12241.valid){
continue;
}
IkReal x12240=((-1.0)*(x12241.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12240;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst18=x12240;
IkReal gconst19=(r11*x12239);
IkReal gconst20=(x12238*x12239);
IkReal x12242=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x12246=IKPowWithIntegerCheck(x12242,-1);
if(!x12246.valid){
continue;
}
IkReal x12243=x12246.value;
IkReal x12244=((1.0)*x12243);
IkReal x12245=((((-1.0)*x12244*(r01*r01)*(r11*r11)))+(((-1.0)*(r02*r02)))+(((-1.0)*x12244*(r00*r00)*(r10*r10)))+(((-2.0)*r00*r01*r10*r11*x12243)));
j4eval[0]=x12245;
j4eval[1]=r02;
j4eval[2]=x12242;
j4eval[3]=IKsign(x12245);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12247=((-1.0)*r10);
IkReal x12248=x12027;
CheckValue<IkReal> x12250 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12247),IKFAST_ATAN2_MAGTHRESH);
if(!x12250.valid){
continue;
}
IkReal x12249=((-1.0)*(x12250.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12249;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst18=x12249;
IkReal gconst19=(r11*x12248);
IkReal gconst20=(x12247*x12248);
IkReal x12251=r12*r12;
IkReal x12252=(cj2*r02*sj1);
CheckValue<IkReal> x12257=IKPowWithIntegerCheck(((-1.0)+x12251),-1);
if(!x12257.valid){
continue;
}
IkReal x12253=x12257.value;
IkReal x12254=((1.0)*cj1*r02*sj2);
if((((1.0)+(((-1.0)*x12251)))) < -0.00001)
continue;
IkReal x12255=IKsqrt(((1.0)+(((-1.0)*x12251))));
IkReal x12256=(r12*x12253*x12255);
j4eval[0]=((IKabs((((x12252*x12256))+(((-1.0)*x12254*x12256)))))+(IKabs((x12252+(((-1.0)*x12254))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12258=(gconst19*r01);
IkReal x12259=(cj2*sj1);
IkReal x12260=(gconst20*r00);
IkReal x12261=((1.0)*cj1*sj2);
CheckValue<IkReal> x12262 = IKatan2WithCheck(IkReal(((((-1.0)*x12259*x12260))+(((-1.0)*x12258*x12261))+((x12258*x12259))+((cj1*sj2*x12260)))),IkReal(((((-1.0)*r02*x12261))+((r02*x12259)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12262.valid){
continue;
}
CheckValue<IkReal> x12263=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x12263.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12262.value)+(((1.5707963267949)*(x12263.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12264=IKcos(j4);
IkReal x12265=IKsin(j4);
IkReal x12266=(gconst20*r00);
IkReal x12267=(gconst19*r21);
IkReal x12268=(gconst20*r20);
IkReal x12269=(gconst19*r01);
IkReal x12270=(gconst20*r10);
IkReal x12271=(gconst19*r11);
IkReal x12272=((1.0)*x12264);
IkReal x12273=((1.0)*x12265);
evalcond[0]=((((-1.0)*x12269*x12272))+((x12264*x12266))+((r02*x12265)));
evalcond[1]=(((x12265*x12268))+(((-1.0)*r22*x12272))+(((-1.0)*x12267*x12273)));
evalcond[2]=((((-1.0)*r12*x12272))+((x12265*x12270))+(((-1.0)*x12271*x12273)));
evalcond[3]=((1.0)+(((-1.0)*x12269*x12273))+(((-1.0)*r02*x12272))+((x12265*x12266)));
evalcond[4]=(((x12264*x12268))+((sj1*sj2))+(((-1.0)*x12267*x12272))+((cj1*cj2))+((r22*x12265)));
evalcond[5]=(((r12*x12265))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((x12264*x12270))+(((-1.0)*x12271*x12272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12274=(gconst20*r00);
IkReal x12275=(gconst19*r01);
CheckValue<IkReal> x12276=IKPowWithIntegerCheck(IKsign(((((2.0)*x12274*x12275))+(((-1.0)*(x12274*x12274)))+(((-1.0)*(x12275*x12275)))+(((-1.0)*(r02*r02))))),-1);
if(!x12276.valid){
continue;
}
CheckValue<IkReal> x12277 = IKatan2WithCheck(IkReal(((((-1.0)*x12275))+x12274)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12276.value)))+(x12277.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12278=IKcos(j4);
IkReal x12279=IKsin(j4);
IkReal x12280=(gconst20*r00);
IkReal x12281=(gconst19*r21);
IkReal x12282=(gconst20*r20);
IkReal x12283=(gconst19*r01);
IkReal x12284=(gconst20*r10);
IkReal x12285=(gconst19*r11);
IkReal x12286=((1.0)*x12278);
IkReal x12287=((1.0)*x12279);
evalcond[0]=(((x12278*x12280))+((r02*x12279))+(((-1.0)*x12283*x12286)));
evalcond[1]=(((x12279*x12282))+(((-1.0)*x12281*x12287))+(((-1.0)*r22*x12286)));
evalcond[2]=(((x12279*x12284))+(((-1.0)*r12*x12286))+(((-1.0)*x12285*x12287)));
evalcond[3]=((1.0)+((x12279*x12280))+(((-1.0)*r02*x12286))+(((-1.0)*x12283*x12287)));
evalcond[4]=((((-1.0)*x12281*x12286))+((sj1*sj2))+((x12278*x12282))+((r22*x12279))+((cj1*cj2)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((x12278*x12284))+(((-1.0)*x12285*x12286))+((r12*x12279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12288 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst19*r11))+((gconst20*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12288.valid){
continue;
}
CheckValue<IkReal> x12289=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x12289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12288.value)+(((1.5707963267949)*(x12289.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12290=IKcos(j4);
IkReal x12291=IKsin(j4);
IkReal x12292=(gconst20*r00);
IkReal x12293=(gconst19*r21);
IkReal x12294=(gconst20*r20);
IkReal x12295=(gconst19*r01);
IkReal x12296=(gconst20*r10);
IkReal x12297=(gconst19*r11);
IkReal x12298=((1.0)*x12290);
IkReal x12299=((1.0)*x12291);
evalcond[0]=((((-1.0)*x12295*x12298))+((x12290*x12292))+((r02*x12291)));
evalcond[1]=(((x12291*x12294))+(((-1.0)*r22*x12298))+(((-1.0)*x12293*x12299)));
evalcond[2]=((((-1.0)*x12297*x12299))+((x12291*x12296))+(((-1.0)*r12*x12298)));
evalcond[3]=((1.0)+(((-1.0)*x12295*x12299))+((x12291*x12292))+(((-1.0)*r02*x12298)));
evalcond[4]=(((sj1*sj2))+((x12290*x12294))+((r22*x12291))+((cj1*cj2))+(((-1.0)*x12293*x12298)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((r12*x12291))+(((-1.0)*x12297*x12298))+((x12290*x12296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12300=((-1.0)*r10);
IkReal x12301=((-1.0)*pz);
CheckValue<IkReal> x12303 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12300),IKFAST_ATAN2_MAGTHRESH);
if(!x12303.valid){
continue;
}
IkReal x12302=((-1.0)*(x12303.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12302;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12301);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12301);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst18=x12302;
IkReal gconst19=r11;
IkReal gconst20=x12300;
IkReal x12304=(r00*r10);
IkReal x12305=(r01*r11);
j4eval[0]=((((-1.0)*x12304))+(((-1.0)*x12305)));
j4eval[1]=(((sj3*x12305))+((sj3*x12304)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12306=((-1.0)*r10);
IkReal x12307=((-1.0)*pz);
CheckValue<IkReal> x12309 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12306),IKFAST_ATAN2_MAGTHRESH);
if(!x12309.valid){
continue;
}
IkReal x12308=((-1.0)*(x12309.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12308;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12307);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12307);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst18=x12308;
IkReal gconst19=r11;
IkReal gconst20=x12306;
IkReal x12310=(r00*r10);
IkReal x12311=(r01*r11);
j4eval[0]=((((-1.0)*x12311))+(((-1.0)*x12310)));
j4eval[1]=(((cj3*x12310))+((cj3*x12311)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12312=((-1.0)*r10);
IkReal x12313=((-1.0)*pz);
CheckValue<IkReal> x12315 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12312),IKFAST_ATAN2_MAGTHRESH);
if(!x12315.valid){
continue;
}
IkReal x12314=((-1.0)*(x12315.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12314;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12313);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12313);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst18=x12314;
IkReal gconst19=r11;
IkReal gconst20=x12312;
j4eval[0]=r22;
j4eval[1]=sj3;
j4eval[2]=(((cj3*r01*r11))+((cj3*r00*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12316=((1.0)*r00);
CheckValue<IkReal> x12317=IKPowWithIntegerCheck(r22,-1);
if(!x12317.valid){
continue;
}
CheckValue<IkReal> x12318=IKPowWithIntegerCheck(sj3,-1);
if(!x12318.valid){
continue;
}
CheckValue<IkReal> x12319=IKPowWithIntegerCheck((((cj3*gconst19*r01))+(((-1.0)*cj3*gconst20*x12316))),-1);
if(!x12319.valid){
continue;
}
if( IKabs(((x12317.value)*(x12318.value)*((((sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12319.value)*(((((-1.0)*gconst19*sj3*x12316))+(((-1.0)*gconst20*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12317.value)*(x12318.value)*((((sj1*sj2))+((cj1*cj2))))))+IKsqr(((x12319.value)*(((((-1.0)*gconst19*sj3*x12316))+(((-1.0)*gconst20*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12317.value)*(x12318.value)*((((sj1*sj2))+((cj1*cj2))))), ((x12319.value)*(((((-1.0)*gconst19*sj3*x12316))+(((-1.0)*gconst20*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12320=IKsin(j4);
IkReal x12321=IKcos(j4);
IkReal x12322=(sj1*sj2);
IkReal x12323=(cj1*cj2);
IkReal x12324=(gconst20*r00);
IkReal x12325=(cj3*gconst19);
IkReal x12326=(gconst19*sj3);
IkReal x12327=((1.0)*cj3);
IkReal x12328=(cj1*sj2);
IkReal x12329=(gconst20*r11);
IkReal x12330=(gconst20*sj3);
IkReal x12331=(cj2*sj1);
IkReal x12332=(gconst20*r10);
IkReal x12333=(r22*x12320);
IkReal x12334=((1.0)*x12321);
IkReal x12335=(x12323+x12322);
IkReal x12336=(x12321*x12326);
IkReal x12337=((1.0)*gconst19*x12320);
evalcond[0]=((-1.0)*r22*x12321);
evalcond[1]=((((-1.0)*r11*x12337))+((x12320*x12332)));
evalcond[2]=((((-1.0)*sj3*x12333))+x12335);
evalcond[3]=((1.0)+(((-1.0)*r01*x12337))+((x12320*x12324)));
evalcond[4]=(x12331+(((-1.0)*x12327*x12333))+(((-1.0)*x12328)));
evalcond[5]=(((r00*x12326))+((r01*x12330))+((r01*x12321*x12325))+(((-1.0)*x12321*x12324*x12327)));
evalcond[6]=((((-1.0)*r00*x12325))+((r01*x12336))+(((-1.0)*sj3*x12324*x12334))+(((-1.0)*gconst20*r01*x12327)));
evalcond[7]=((((-1.0)*x12321*x12327*x12332))+((r11*x12321*x12325))+x12335+((sj3*x12329))+((r10*x12326)));
evalcond[8]=((((-1.0)*r10*x12325))+(((-1.0)*x12327*x12329))+x12328+((r11*x12336))+(((-1.0)*r10*x12330*x12334))+(((-1.0)*x12331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12338=((1.0)*r00);
IkReal x12339=(gconst19*r01);
CheckValue<IkReal> x12340=IKPowWithIntegerCheck((((gconst20*r00))+(((-1.0)*x12339))),-1);
if(!x12340.valid){
continue;
}
CheckValue<IkReal> x12341=IKPowWithIntegerCheck((((cj3*x12339))+(((-1.0)*cj3*gconst20*x12338))),-1);
if(!x12341.valid){
continue;
}
if( IKabs(((-1.0)*(x12340.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12341.value)*(((((-1.0)*gconst20*r01*sj3))+(((-1.0)*gconst19*sj3*x12338)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12340.value)))+IKsqr(((x12341.value)*(((((-1.0)*gconst20*r01*sj3))+(((-1.0)*gconst19*sj3*x12338))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12340.value)), ((x12341.value)*(((((-1.0)*gconst20*r01*sj3))+(((-1.0)*gconst19*sj3*x12338))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12342=IKsin(j4);
IkReal x12343=IKcos(j4);
IkReal x12344=(sj1*sj2);
IkReal x12345=(cj1*cj2);
IkReal x12346=(gconst20*r00);
IkReal x12347=(cj3*gconst19);
IkReal x12348=(gconst19*sj3);
IkReal x12349=((1.0)*cj3);
IkReal x12350=(cj1*sj2);
IkReal x12351=(gconst20*r11);
IkReal x12352=(gconst20*sj3);
IkReal x12353=(cj2*sj1);
IkReal x12354=(gconst20*r10);
IkReal x12355=(r22*x12342);
IkReal x12356=((1.0)*x12343);
IkReal x12357=(x12345+x12344);
IkReal x12358=(x12343*x12348);
IkReal x12359=((1.0)*gconst19*x12342);
evalcond[0]=((-1.0)*r22*x12343);
evalcond[1]=((((-1.0)*r11*x12359))+((x12342*x12354)));
evalcond[2]=((((-1.0)*sj3*x12355))+x12357);
evalcond[3]=((1.0)+(((-1.0)*r01*x12359))+((x12342*x12346)));
evalcond[4]=((((-1.0)*x12350))+(((-1.0)*x12349*x12355))+x12353);
evalcond[5]=(((r01*x12343*x12347))+((r00*x12348))+((r01*x12352))+(((-1.0)*x12343*x12346*x12349)));
evalcond[6]=((((-1.0)*sj3*x12346*x12356))+(((-1.0)*r00*x12347))+(((-1.0)*gconst20*r01*x12349))+((r01*x12358)));
evalcond[7]=(x12357+((sj3*x12351))+((r11*x12343*x12347))+(((-1.0)*x12343*x12349*x12354))+((r10*x12348)));
evalcond[8]=((((-1.0)*x12353))+(((-1.0)*x12349*x12351))+x12350+(((-1.0)*r10*x12347))+(((-1.0)*r10*x12352*x12356))+((r11*x12358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12360=(gconst20*r00);
IkReal x12361=(gconst19*r01);
CheckValue<IkReal> x12362=IKPowWithIntegerCheck((x12360+(((-1.0)*x12361))),-1);
if(!x12362.valid){
continue;
}
CheckValue<IkReal> x12363=IKPowWithIntegerCheck((((sj3*x12361))+(((-1.0)*sj3*x12360))),-1);
if(!x12363.valid){
continue;
}
if( IKabs(((-1.0)*(x12362.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12363.value)*((((cj3*gconst19*r00))+((cj3*gconst20*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12362.value)))+IKsqr(((x12363.value)*((((cj3*gconst19*r00))+((cj3*gconst20*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12362.value)), ((x12363.value)*((((cj3*gconst19*r00))+((cj3*gconst20*r01))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12364=IKsin(j4);
IkReal x12365=IKcos(j4);
IkReal x12366=(sj1*sj2);
IkReal x12367=(cj1*cj2);
IkReal x12368=(gconst20*r00);
IkReal x12369=(cj3*gconst19);
IkReal x12370=(gconst19*sj3);
IkReal x12371=((1.0)*cj3);
IkReal x12372=(cj1*sj2);
IkReal x12373=(gconst20*r11);
IkReal x12374=(gconst20*sj3);
IkReal x12375=(cj2*sj1);
IkReal x12376=(gconst20*r10);
IkReal x12377=(r22*x12364);
IkReal x12378=((1.0)*x12365);
IkReal x12379=(x12367+x12366);
IkReal x12380=(x12365*x12370);
IkReal x12381=((1.0)*gconst19*x12364);
evalcond[0]=((-1.0)*r22*x12365);
evalcond[1]=((((-1.0)*r11*x12381))+((x12364*x12376)));
evalcond[2]=(x12379+(((-1.0)*sj3*x12377)));
evalcond[3]=((1.0)+((x12364*x12368))+(((-1.0)*r01*x12381)));
evalcond[4]=(x12375+(((-1.0)*x12371*x12377))+(((-1.0)*x12372)));
evalcond[5]=((((-1.0)*x12365*x12368*x12371))+((r01*x12374))+((r00*x12370))+((r01*x12365*x12369)));
evalcond[6]=((((-1.0)*gconst20*r01*x12371))+((r01*x12380))+(((-1.0)*r00*x12369))+(((-1.0)*sj3*x12368*x12378)));
evalcond[7]=(((r11*x12365*x12369))+((r10*x12370))+x12379+((sj3*x12373))+(((-1.0)*x12365*x12371*x12376)));
evalcond[8]=(((r11*x12380))+x12372+(((-1.0)*x12371*x12373))+(((-1.0)*r10*x12369))+(((-1.0)*x12375))+(((-1.0)*r10*x12374*x12378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12382=gconst19*gconst19;
IkReal x12383=gconst20*gconst20;
IkReal x12384=(r20*sj3);
IkReal x12385=(cj3*r21);
IkReal x12386=(gconst19*r00);
IkReal x12387=((1.0)*gconst20);
IkReal x12388=(cj3*r20);
IkReal x12389=(r21*sj3);
IkReal x12390=(gconst19*gconst20*r01);
IkReal x12391=((1.0)*cj3*r22);
CheckValue<IkReal> x12392 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*r01*r22*x12387))+(((-1.0)*x12386*x12391)))),IkReal(((((-1.0)*x12386*x12387*x12388))+((x12385*x12390))+(((-1.0)*r01*x12383*x12388))+((r00*x12382*x12385)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12392.valid){
continue;
}
CheckValue<IkReal> x12393=IKPowWithIntegerCheck(IKsign((((r01*x12382*x12389))+(((-1.0)*x12386*x12387*x12389))+(((-1.0)*gconst19*r01*x12384*x12387))+((r00*x12383*x12384))+((r02*r22*sj3)))),-1);
if(!x12393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12392.value)+(((1.5707963267949)*(x12393.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12394=IKsin(j4);
IkReal x12395=IKcos(j4);
IkReal x12396=(sj1*sj2);
IkReal x12397=(cj1*cj2);
IkReal x12398=(gconst20*sj3);
IkReal x12399=(cj3*gconst19);
IkReal x12400=(gconst19*sj3);
IkReal x12401=(cj1*sj2);
IkReal x12402=(cj2*sj1);
IkReal x12403=(cj3*gconst20);
IkReal x12404=((1.0)*x12395);
IkReal x12405=((1.0)*x12394);
IkReal x12406=(gconst20*x12394);
IkReal x12407=((1.0)*x12403);
IkReal x12408=(x12396+x12397);
IkReal x12409=(x12395*x12400);
evalcond[0]=((((-1.0)*r22*x12404))+(((-1.0)*gconst19*r21*x12405))+((r20*x12406)));
evalcond[1]=((((-1.0)*r12*x12404))+((r10*x12406))+(((-1.0)*gconst19*r11*x12405)));
evalcond[2]=((1.0)+(((-1.0)*gconst19*r01*x12405))+(((-1.0)*r02*x12404))+((r00*x12406)));
evalcond[3]=(((r01*x12398))+(((-1.0)*r00*x12403*x12404))+((r01*x12395*x12399))+((r00*x12400))+(((-1.0)*cj3*r02*x12405)));
evalcond[4]=((((-1.0)*r00*x12399))+(((-1.0)*r00*x12398*x12404))+(((-1.0)*r01*x12407))+(((-1.0)*r02*sj3*x12405))+((r01*x12409)));
evalcond[5]=(((r11*x12395*x12399))+((r11*x12398))+(((-1.0)*cj3*r12*x12405))+((r10*x12400))+(((-1.0)*r10*x12403*x12404))+x12408);
evalcond[6]=(((r21*x12395*x12399))+(((-1.0)*cj3*r22*x12405))+(((-1.0)*r20*x12403*x12404))+((r21*x12398))+((r20*x12400))+x12402+(((-1.0)*x12401)));
evalcond[7]=((((-1.0)*r20*x12398*x12404))+((r21*x12409))+(((-1.0)*r20*x12399))+(((-1.0)*r21*x12407))+x12408+(((-1.0)*r22*sj3*x12405)));
evalcond[8]=((((-1.0)*r11*x12407))+(((-1.0)*r12*sj3*x12405))+(((-1.0)*r10*x12398*x12404))+x12401+(((-1.0)*r10*x12399))+((r11*x12409))+(((-1.0)*x12402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12410=gconst20*gconst20;
IkReal x12411=gconst19*gconst19;
IkReal x12412=(cj3*r21);
IkReal x12413=((1.0)*r00);
IkReal x12414=(gconst19*gconst20);
IkReal x12415=(r21*sj3);
IkReal x12416=(r00*r20);
IkReal x12417=(r01*r20);
IkReal x12418=(r22*sj3);
CheckValue<IkReal> x12419 = IKatan2WithCheck(IkReal((((gconst19*r00*x12418))+((gconst20*r01*x12418)))),IkReal((((sj3*x12410*x12417))+(((-1.0)*r01*x12414*x12415))+(((-1.0)*x12411*x12413*x12415))+((sj3*x12414*x12416)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12419.valid){
continue;
}
CheckValue<IkReal> x12420=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12412*x12413*x12414))+(((-1.0)*cj3*x12414*x12417))+((r01*x12411*x12412))+((cj3*x12410*x12416))+((cj3*r02*r22)))),-1);
if(!x12420.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12419.value)+(((1.5707963267949)*(x12420.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12421=IKsin(j4);
IkReal x12422=IKcos(j4);
IkReal x12423=(sj1*sj2);
IkReal x12424=(cj1*cj2);
IkReal x12425=(gconst20*sj3);
IkReal x12426=(cj3*gconst19);
IkReal x12427=(gconst19*sj3);
IkReal x12428=(cj1*sj2);
IkReal x12429=(cj2*sj1);
IkReal x12430=(cj3*gconst20);
IkReal x12431=((1.0)*x12422);
IkReal x12432=((1.0)*x12421);
IkReal x12433=(gconst20*x12421);
IkReal x12434=((1.0)*x12430);
IkReal x12435=(x12423+x12424);
IkReal x12436=(x12422*x12427);
evalcond[0]=(((r20*x12433))+(((-1.0)*r22*x12431))+(((-1.0)*gconst19*r21*x12432)));
evalcond[1]=(((r10*x12433))+(((-1.0)*r12*x12431))+(((-1.0)*gconst19*r11*x12432)));
evalcond[2]=((1.0)+(((-1.0)*gconst19*r01*x12432))+((r00*x12433))+(((-1.0)*r02*x12431)));
evalcond[3]=((((-1.0)*cj3*r02*x12432))+((r01*x12422*x12426))+((r01*x12425))+(((-1.0)*r00*x12430*x12431))+((r00*x12427)));
evalcond[4]=((((-1.0)*r01*x12434))+(((-1.0)*r02*sj3*x12432))+(((-1.0)*r00*x12425*x12431))+((r01*x12436))+(((-1.0)*r00*x12426)));
evalcond[5]=(((r11*x12422*x12426))+((r10*x12427))+((r11*x12425))+x12435+(((-1.0)*cj3*r12*x12432))+(((-1.0)*r10*x12430*x12431)));
evalcond[6]=(((r20*x12427))+(((-1.0)*x12428))+(((-1.0)*cj3*r22*x12432))+((r21*x12425))+(((-1.0)*r20*x12430*x12431))+((r21*x12422*x12426))+x12429);
evalcond[7]=((((-1.0)*r21*x12434))+(((-1.0)*r22*sj3*x12432))+((r21*x12436))+x12435+(((-1.0)*r20*x12426))+(((-1.0)*r20*x12425*x12431)));
evalcond[8]=((((-1.0)*x12429))+(((-1.0)*r12*sj3*x12432))+(((-1.0)*r10*x12426))+(((-1.0)*r10*x12425*x12431))+((r11*x12436))+(((-1.0)*r11*x12434))+x12428);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12437 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst19*r11))+((gconst20*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12437.valid){
continue;
}
CheckValue<IkReal> x12438=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x12438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12437.value)+(((1.5707963267949)*(x12438.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12439=IKsin(j4);
IkReal x12440=IKcos(j4);
IkReal x12441=(sj1*sj2);
IkReal x12442=(cj1*cj2);
IkReal x12443=(gconst20*sj3);
IkReal x12444=(cj3*gconst19);
IkReal x12445=(gconst19*sj3);
IkReal x12446=(cj1*sj2);
IkReal x12447=(cj2*sj1);
IkReal x12448=(cj3*gconst20);
IkReal x12449=((1.0)*x12440);
IkReal x12450=((1.0)*x12439);
IkReal x12451=(gconst20*x12439);
IkReal x12452=((1.0)*x12448);
IkReal x12453=(x12441+x12442);
IkReal x12454=(x12440*x12445);
evalcond[0]=((((-1.0)*gconst19*r21*x12450))+(((-1.0)*r22*x12449))+((r20*x12451)));
evalcond[1]=((((-1.0)*gconst19*r11*x12450))+(((-1.0)*r12*x12449))+((r10*x12451)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12449))+(((-1.0)*gconst19*r01*x12450))+((r00*x12451)));
evalcond[3]=(((r01*x12443))+((r00*x12445))+(((-1.0)*r00*x12448*x12449))+(((-1.0)*cj3*r02*x12450))+((r01*x12440*x12444)));
evalcond[4]=((((-1.0)*r00*x12444))+(((-1.0)*r01*x12452))+((r01*x12454))+(((-1.0)*r02*sj3*x12450))+(((-1.0)*r00*x12443*x12449)));
evalcond[5]=((((-1.0)*cj3*r12*x12450))+((r11*x12440*x12444))+((r11*x12443))+((r10*x12445))+x12453+(((-1.0)*r10*x12448*x12449)));
evalcond[6]=((((-1.0)*x12446))+((r21*x12443))+(((-1.0)*r20*x12448*x12449))+(((-1.0)*cj3*r22*x12450))+x12447+((r20*x12445))+((r21*x12440*x12444)));
evalcond[7]=((((-1.0)*r20*x12443*x12449))+(((-1.0)*r22*sj3*x12450))+(((-1.0)*r20*x12444))+x12453+(((-1.0)*r21*x12452))+((r21*x12454)));
evalcond[8]=((((-1.0)*r11*x12452))+(((-1.0)*r10*x12443*x12449))+(((-1.0)*x12447))+(((-1.0)*r12*sj3*x12450))+((r11*x12454))+(((-1.0)*r10*x12444))+x12446);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12455=((-1.0)*r11);
IkReal x12457 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12457)==0){
continue;
}
IkReal x12456=pow(x12457,-0.5);
CheckValue<IkReal> x12458 = IKatan2WithCheck(IkReal(x12455),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12458.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x12458.value))));
IkReal gconst22=(x12455*x12456);
IkReal gconst23=((1.0)*r10*x12456);
CheckValue<IkReal> x12459 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12459.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12459.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12460=((-1.0)*r11);
CheckValue<IkReal> x12463 = IKatan2WithCheck(IkReal(x12460),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12463.valid){
continue;
}
IkReal x12461=((1.0)*(x12463.value));
IkReal x12462=x12456;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x12461)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x12461)));
IkReal gconst22=(x12460*x12462);
IkReal gconst23=((1.0)*r10*x12462);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12464=((-1.0)*r11);
CheckValue<IkReal> x12467 = IKatan2WithCheck(IkReal(x12464),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12467.valid){
continue;
}
IkReal x12465=((1.0)*(x12467.value));
IkReal x12466=x12456;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x12465)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x12465)));
IkReal gconst22=(x12464*x12466);
IkReal gconst23=((1.0)*r10*x12466);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12468=gconst23*gconst23;
IkReal x12469=gconst22*gconst22;
IkReal x12470=(r01*sj3);
IkReal x12471=(cj3*r00);
IkReal x12472=(cj3*r01);
IkReal x12473=(r00*sj3);
IkReal x12474=((1.0)*gconst22*gconst23);
IkReal x12475=(r20*x12468);
IkReal x12476=(r21*x12469);
CheckValue<IkReal> x12477 = IKatan2WithCheck(IkReal((((gconst22*r22*x12473))+((gconst23*r22*x12470)))),IkReal(((((-1.0)*r21*x12470*x12474))+(((-1.0)*x12473*x12476))+((gconst22*gconst23*r20*x12473))+((x12470*x12475)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12477.valid){
continue;
}
CheckValue<IkReal> x12478=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12471*x12474))+((x12471*x12475))+((cj3*r02*r22))+(((-1.0)*r20*x12472*x12474))+((x12472*x12476)))),-1);
if(!x12478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12477.value)+(((1.5707963267949)*(x12478.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12479=IKsin(j4);
IkReal x12480=IKcos(j4);
IkReal x12481=(sj1*sj2);
IkReal x12482=(cj1*cj2);
IkReal x12483=(gconst23*sj3);
IkReal x12484=(gconst22*r21);
IkReal x12485=(gconst22*sj3);
IkReal x12486=(gconst22*r01);
IkReal x12487=((1.0)*cj3);
IkReal x12488=(cj2*sj1);
IkReal x12489=(cj1*sj2);
IkReal x12490=(cj3*gconst23);
IkReal x12491=(gconst22*r11);
IkReal x12492=((1.0)*x12480);
IkReal x12493=((1.0)*x12479);
IkReal x12494=(gconst23*x12479);
IkReal x12495=(cj3*x12480);
IkReal x12496=(x12481+x12482);
evalcond[0]=(((r20*x12494))+(((-1.0)*r22*x12492))+(((-1.0)*x12484*x12493)));
evalcond[1]=(((r10*x12494))+(((-1.0)*x12491*x12493))+(((-1.0)*r12*x12492)));
evalcond[2]=((1.0)+((r00*x12494))+(((-1.0)*r02*x12492))+(((-1.0)*x12486*x12493)));
evalcond[3]=((((-1.0)*gconst23*r00*x12480*x12487))+(((-1.0)*r02*x12479*x12487))+((x12486*x12495))+((r00*x12485))+((r01*x12483)));
evalcond[4]=((((-1.0)*gconst23*r01*x12487))+(((-1.0)*r00*x12483*x12492))+(((-1.0)*gconst22*r00*x12487))+((r01*x12480*x12485))+(((-1.0)*r02*sj3*x12493)));
evalcond[5]=(((r11*x12483))+(((-1.0)*r12*x12479*x12487))+(((-1.0)*gconst23*r10*x12480*x12487))+((x12491*x12495))+((r10*x12485))+x12496);
evalcond[6]=((((-1.0)*x12489))+(((-1.0)*gconst23*r20*x12480*x12487))+(((-1.0)*r22*x12479*x12487))+((x12484*x12495))+((r20*x12485))+x12488+((r21*x12483)));
evalcond[7]=((((-1.0)*gconst23*r21*x12487))+((sj3*x12480*x12484))+(((-1.0)*r20*x12483*x12492))+x12496+(((-1.0)*gconst22*r20*x12487))+(((-1.0)*r22*sj3*x12493)));
evalcond[8]=((((-1.0)*gconst22*r10*x12487))+(((-1.0)*x12488))+(((-1.0)*r12*sj3*x12493))+(((-1.0)*gconst23*r11*x12487))+(((-1.0)*r10*x12483*x12492))+((r11*x12480*x12485))+x12489);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12497=((1.0)*gconst22);
CheckValue<IkReal> x12498=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x12497))+(((-1.0)*gconst23*r11)))),-1);
if(!x12498.valid){
continue;
}
CheckValue<IkReal> x12499 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x12497))+((gconst23*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12499.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12498.value)))+(x12499.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12500=IKsin(j4);
IkReal x12501=IKcos(j4);
IkReal x12502=(sj1*sj2);
IkReal x12503=(cj1*cj2);
IkReal x12504=(gconst23*sj3);
IkReal x12505=(gconst22*r21);
IkReal x12506=(gconst22*sj3);
IkReal x12507=(gconst22*r01);
IkReal x12508=((1.0)*cj3);
IkReal x12509=(cj2*sj1);
IkReal x12510=(cj1*sj2);
IkReal x12511=(cj3*gconst23);
IkReal x12512=(gconst22*r11);
IkReal x12513=((1.0)*x12501);
IkReal x12514=((1.0)*x12500);
IkReal x12515=(gconst23*x12500);
IkReal x12516=(cj3*x12501);
IkReal x12517=(x12503+x12502);
evalcond[0]=((((-1.0)*r22*x12513))+((r20*x12515))+(((-1.0)*x12505*x12514)));
evalcond[1]=((((-1.0)*r12*x12513))+(((-1.0)*x12512*x12514))+((r10*x12515)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12513))+((r00*x12515))+(((-1.0)*x12507*x12514)));
evalcond[3]=(((r01*x12504))+((r00*x12506))+((x12507*x12516))+(((-1.0)*r02*x12500*x12508))+(((-1.0)*gconst23*r00*x12501*x12508)));
evalcond[4]=(((r01*x12501*x12506))+(((-1.0)*r02*sj3*x12514))+(((-1.0)*r00*x12504*x12513))+(((-1.0)*gconst22*r00*x12508))+(((-1.0)*gconst23*r01*x12508)));
evalcond[5]=((((-1.0)*gconst23*r10*x12501*x12508))+((r11*x12504))+((r10*x12506))+(((-1.0)*r12*x12500*x12508))+((x12512*x12516))+x12517);
evalcond[6]=((((-1.0)*r22*x12500*x12508))+((r20*x12506))+(((-1.0)*x12510))+((r21*x12504))+((x12505*x12516))+(((-1.0)*gconst23*r20*x12501*x12508))+x12509);
evalcond[7]=((((-1.0)*gconst22*r20*x12508))+(((-1.0)*r20*x12504*x12513))+(((-1.0)*r22*sj3*x12514))+(((-1.0)*gconst23*r21*x12508))+((sj3*x12501*x12505))+x12517);
evalcond[8]=((((-1.0)*x12509))+(((-1.0)*r10*x12504*x12513))+(((-1.0)*r12*sj3*x12514))+x12510+((r11*x12501*x12506))+(((-1.0)*gconst22*r10*x12508))+(((-1.0)*gconst23*r11*x12508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12518 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst22*r11))+((gconst23*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12518.valid){
continue;
}
CheckValue<IkReal> x12519=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x12519.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12518.value)+(((1.5707963267949)*(x12519.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12520=IKsin(j4);
IkReal x12521=IKcos(j4);
IkReal x12522=(sj1*sj2);
IkReal x12523=(cj1*cj2);
IkReal x12524=(gconst23*sj3);
IkReal x12525=(gconst22*r21);
IkReal x12526=(gconst22*sj3);
IkReal x12527=(gconst22*r01);
IkReal x12528=((1.0)*cj3);
IkReal x12529=(cj2*sj1);
IkReal x12530=(cj1*sj2);
IkReal x12531=(cj3*gconst23);
IkReal x12532=(gconst22*r11);
IkReal x12533=((1.0)*x12521);
IkReal x12534=((1.0)*x12520);
IkReal x12535=(gconst23*x12520);
IkReal x12536=(cj3*x12521);
IkReal x12537=(x12523+x12522);
evalcond[0]=(((r20*x12535))+(((-1.0)*x12525*x12534))+(((-1.0)*r22*x12533)));
evalcond[1]=((((-1.0)*r12*x12533))+(((-1.0)*x12532*x12534))+((r10*x12535)));
evalcond[2]=((1.0)+((r00*x12535))+(((-1.0)*r02*x12533))+(((-1.0)*x12527*x12534)));
evalcond[3]=(((x12527*x12536))+(((-1.0)*gconst23*r00*x12521*x12528))+(((-1.0)*r02*x12520*x12528))+((r01*x12524))+((r00*x12526)));
evalcond[4]=(((r01*x12521*x12526))+(((-1.0)*gconst23*r01*x12528))+(((-1.0)*gconst22*r00*x12528))+(((-1.0)*r02*sj3*x12534))+(((-1.0)*r00*x12524*x12533)));
evalcond[5]=(((x12532*x12536))+((r10*x12526))+(((-1.0)*gconst23*r10*x12521*x12528))+((r11*x12524))+(((-1.0)*r12*x12520*x12528))+x12537);
evalcond[6]=((((-1.0)*r22*x12520*x12528))+((x12525*x12536))+((r21*x12524))+((r20*x12526))+(((-1.0)*gconst23*r20*x12521*x12528))+(((-1.0)*x12530))+x12529);
evalcond[7]=((((-1.0)*gconst23*r21*x12528))+(((-1.0)*r22*sj3*x12534))+x12537+(((-1.0)*gconst22*r20*x12528))+(((-1.0)*r20*x12524*x12533))+((sj3*x12521*x12525)));
evalcond[8]=((((-1.0)*gconst22*r10*x12528))+(((-1.0)*gconst23*r11*x12528))+(((-1.0)*r12*sj3*x12534))+((r11*x12521*x12526))+x12530+(((-1.0)*x12529))+(((-1.0)*r10*x12524*x12533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12538=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12538);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12538);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12539=(cj5*r00);
IkReal x12540=(r01*sj5);
j4eval[0]=((((-1.0)*x12540))+x12539);
j4eval[1]=(((sj3*x12540))+(((-1.0)*sj3*x12539)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12541=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12541);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12541);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12542=(cj5*r00);
IkReal x12543=(r01*sj5);
j4eval[0]=((((-1.0)*x12543))+x12542);
j4eval[1]=(((cj3*x12543))+(((-1.0)*cj3*x12542)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12544=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12544);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12544);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12545=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12545);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12545);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12546=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12546);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12546);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12547=((1.0)*sj2);
CheckValue<IkReal> x12548=IKPowWithIntegerCheck(r22,-1);
if(!x12548.valid){
continue;
}
CheckValue<IkReal> x12549=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12549.valid){
continue;
}
if( IKabs(((x12548.value)*((((cj2*sj1))+(((-1.0)*cj1*x12547)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12549.value)*(((((-1.0)*cj1*cj2))+(((-1.0)*sj1*x12547)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12548.value)*((((cj2*sj1))+(((-1.0)*cj1*x12547))))))+IKsqr(((x12549.value)*(((((-1.0)*cj1*cj2))+(((-1.0)*sj1*x12547))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12548.value)*((((cj2*sj1))+(((-1.0)*cj1*x12547))))), ((x12549.value)*(((((-1.0)*cj1*cj2))+(((-1.0)*sj1*x12547))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12550=IKsin(j4);
IkReal x12551=IKcos(j4);
IkReal x12552=(cj5*r00);
IkReal x12553=(cj5*r10);
IkReal x12554=((1.0)*x12551);
IkReal x12555=(sj5*x12551);
IkReal x12556=((1.0)*sj5*x12550);
evalcond[0]=((-1.0)*r22*x12551);
evalcond[1]=(((x12550*x12553))+(((-1.0)*r11*x12556)));
evalcond[2]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x12550)));
evalcond[3]=(((r01*x12555))+(((-1.0)*x12552*x12554)));
evalcond[4]=((1.0)+(((-1.0)*r01*x12556))+((x12550*x12552)));
evalcond[5]=(((sj1*sj2))+((r11*x12555))+(((-1.0)*x12553*x12554))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12557=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12557.valid){
continue;
}
CheckValue<IkReal> x12558=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12558.valid){
continue;
}
if( IKabs(((-1.0)*(x12557.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12558.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12557.value)))+IKsqr(((x12558.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12557.value)), ((x12558.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12559=IKsin(j4);
IkReal x12560=IKcos(j4);
IkReal x12561=(cj5*r00);
IkReal x12562=(cj5*r10);
IkReal x12563=((1.0)*x12560);
IkReal x12564=(sj5*x12560);
IkReal x12565=((1.0)*sj5*x12559);
evalcond[0]=((-1.0)*r22*x12560);
evalcond[1]=((((-1.0)*r11*x12565))+((x12559*x12562)));
evalcond[2]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x12559)));
evalcond[3]=((((-1.0)*x12561*x12563))+((r01*x12564)));
evalcond[4]=((1.0)+(((-1.0)*r01*x12565))+((x12559*x12561)));
evalcond[5]=(((r11*x12564))+(((-1.0)*x12562*x12563))+((sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12566=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12566);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12566);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12567=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12567);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12567);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x12568=((1.0)*sj5);
j4eval[0]=((((-1.0)*r01*x12568))+((cj5*r00)));
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*x12568)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12569=((1.0)*sj5);
CheckValue<IkReal> x12570=IKPowWithIntegerCheck(((((-1.0)*r01*x12569))+((cj5*r00))),-1);
if(!x12570.valid){
continue;
}
CheckValue<IkReal> x12571=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*x12569))),-1);
if(!x12571.valid){
continue;
}
if( IKabs(((-1.0)*(x12570.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12571.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12570.value)))+IKsqr(((x12571.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12570.value)), ((x12571.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12572=IKsin(j4);
IkReal x12573=IKcos(j4);
IkReal x12574=(cj5*r00);
IkReal x12575=(cj5*r10);
IkReal x12576=((1.0)*r11*sj5);
IkReal x12577=((1.0)*r01*sj5);
evalcond[0]=((-1.0)*r22*x12573);
evalcond[1]=(((cj2*sj1))+((r22*x12572))+(((-1.0)*cj1*sj2)));
evalcond[2]=((((-1.0)*x12572*x12576))+((x12572*x12575)));
evalcond[3]=((((-1.0)*x12573*x12577))+((x12573*x12574)));
evalcond[4]=((1.0)+(((-1.0)*x12572*x12577))+((x12572*x12574)));
evalcond[5]=((((-1.0)*x12573*x12576))+((sj1*sj2))+((x12573*x12575))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12578=((1.0)*sj1);
CheckValue<IkReal> x12579=IKPowWithIntegerCheck(r22,-1);
if(!x12579.valid){
continue;
}
CheckValue<IkReal> x12580=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x12580.valid){
continue;
}
if( IKabs(((x12579.value)*((((cj1*sj2))+(((-1.0)*cj2*x12578)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12580.value)*(((((-1.0)*sj2*x12578))+(((-1.0)*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12579.value)*((((cj1*sj2))+(((-1.0)*cj2*x12578))))))+IKsqr(((x12580.value)*(((((-1.0)*sj2*x12578))+(((-1.0)*cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12579.value)*((((cj1*sj2))+(((-1.0)*cj2*x12578))))), ((x12580.value)*(((((-1.0)*sj2*x12578))+(((-1.0)*cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12581=IKsin(j4);
IkReal x12582=IKcos(j4);
IkReal x12583=(cj5*r00);
IkReal x12584=(cj5*r10);
IkReal x12585=((1.0)*r11*sj5);
IkReal x12586=((1.0)*r01*sj5);
evalcond[0]=((-1.0)*r22*x12582);
evalcond[1]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((r22*x12581)));
evalcond[2]=((((-1.0)*x12581*x12585))+((x12581*x12584)));
evalcond[3]=((((-1.0)*x12582*x12586))+((x12582*x12583)));
evalcond[4]=((1.0)+(((-1.0)*x12581*x12586))+((x12581*x12583)));
evalcond[5]=((((-1.0)*x12582*x12585))+((sj1*sj2))+((x12582*x12584))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12587=((1.0)*r00);
CheckValue<IkReal> x12588=IKPowWithIntegerCheck(r22,-1);
if(!x12588.valid){
continue;
}
CheckValue<IkReal> x12589=IKPowWithIntegerCheck(sj3,-1);
if(!x12589.valid){
continue;
}
CheckValue<IkReal> x12590=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x12587))),-1);
if(!x12590.valid){
continue;
}
if( IKabs(((x12588.value)*(x12589.value)*((((sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12590.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x12587)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12588.value)*(x12589.value)*((((sj1*sj2))+((cj1*cj2))))))+IKsqr(((x12590.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x12587))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12588.value)*(x12589.value)*((((sj1*sj2))+((cj1*cj2))))), ((x12590.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x12587))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12591=IKsin(j4);
IkReal x12592=IKcos(j4);
IkReal x12593=(sj1*sj2);
IkReal x12594=(cj1*cj2);
IkReal x12595=(cj5*sj3);
IkReal x12596=((1.0)*r11);
IkReal x12597=(cj3*cj5);
IkReal x12598=((1.0)*r10);
IkReal x12599=(cj3*sj5);
IkReal x12600=((1.0)*r01);
IkReal x12601=(cj1*sj2);
IkReal x12602=(sj3*sj5);
IkReal x12603=(cj2*sj1);
IkReal x12604=((1.0)*r00);
IkReal x12605=(sj5*x12591);
IkReal x12606=(r11*x12592);
IkReal x12607=(cj5*x12591);
IkReal x12608=(r01*x12592);
IkReal x12609=(x12594+x12593);
IkReal x12610=((1.0)*r22*x12591);
evalcond[0]=((-1.0)*r22*x12592);
evalcond[1]=(((r10*x12607))+(((-1.0)*x12596*x12605)));
evalcond[2]=((((-1.0)*sj3*x12610))+x12609);
evalcond[3]=((1.0)+((r00*x12607))+(((-1.0)*x12600*x12605)));
evalcond[4]=((((-1.0)*x12601))+x12603+(((-1.0)*cj3*x12610)));
evalcond[5]=(((x12599*x12608))+((r01*x12595))+((r00*x12602))+(((-1.0)*x12592*x12597*x12604)));
evalcond[6]=(((x12602*x12608))+(((-1.0)*x12592*x12595*x12604))+(((-1.0)*x12597*x12600))+(((-1.0)*x12599*x12604)));
evalcond[7]=(((x12599*x12606))+((r10*x12602))+(((-1.0)*x12592*x12597*x12598))+x12609+((r11*x12595)));
evalcond[8]=(((x12602*x12606))+(((-1.0)*x12596*x12597))+(((-1.0)*x12603))+(((-1.0)*x12592*x12595*x12598))+(((-1.0)*x12598*x12599))+x12601);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12611=((1.0)*sj5);
IkReal x12612=(cj5*r00);
CheckValue<IkReal> x12613=IKPowWithIntegerCheck(((((-1.0)*r01*x12611))+x12612),-1);
if(!x12613.valid){
continue;
}
CheckValue<IkReal> x12614=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*x12612))),-1);
if(!x12614.valid){
continue;
}
if( IKabs(((-1.0)*(x12613.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12614.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*r00*sj3*x12611)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12613.value)))+IKsqr(((x12614.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*r00*sj3*x12611))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12613.value)), ((x12614.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*r00*sj3*x12611))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12615=IKsin(j4);
IkReal x12616=IKcos(j4);
IkReal x12617=(sj1*sj2);
IkReal x12618=(cj1*cj2);
IkReal x12619=(cj5*sj3);
IkReal x12620=((1.0)*r11);
IkReal x12621=(cj3*cj5);
IkReal x12622=((1.0)*r10);
IkReal x12623=(cj3*sj5);
IkReal x12624=((1.0)*r01);
IkReal x12625=(cj1*sj2);
IkReal x12626=(sj3*sj5);
IkReal x12627=(cj2*sj1);
IkReal x12628=((1.0)*r00);
IkReal x12629=(sj5*x12615);
IkReal x12630=(r11*x12616);
IkReal x12631=(cj5*x12615);
IkReal x12632=(r01*x12616);
IkReal x12633=(x12618+x12617);
IkReal x12634=((1.0)*r22*x12615);
evalcond[0]=((-1.0)*r22*x12616);
evalcond[1]=((((-1.0)*x12620*x12629))+((r10*x12631)));
evalcond[2]=((((-1.0)*sj3*x12634))+x12633);
evalcond[3]=((1.0)+((r00*x12631))+(((-1.0)*x12624*x12629)));
evalcond[4]=((((-1.0)*x12625))+(((-1.0)*cj3*x12634))+x12627);
evalcond[5]=(((x12623*x12632))+((r00*x12626))+(((-1.0)*x12616*x12621*x12628))+((r01*x12619)));
evalcond[6]=((((-1.0)*x12621*x12624))+((x12626*x12632))+(((-1.0)*x12616*x12619*x12628))+(((-1.0)*x12623*x12628)));
evalcond[7]=(((x12623*x12630))+(((-1.0)*x12616*x12621*x12622))+x12633+((r11*x12619))+((r10*x12626)));
evalcond[8]=((((-1.0)*x12622*x12623))+(((-1.0)*x12620*x12621))+((x12626*x12630))+(((-1.0)*x12616*x12619*x12622))+(((-1.0)*x12627))+x12625);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12635=(r01*sj5);
IkReal x12636=(cj5*r00);
CheckValue<IkReal> x12637=IKPowWithIntegerCheck(((((-1.0)*x12635))+x12636),-1);
if(!x12637.valid){
continue;
}
CheckValue<IkReal> x12638=IKPowWithIntegerCheck((((sj3*x12635))+(((-1.0)*sj3*x12636))),-1);
if(!x12638.valid){
continue;
}
if( IKabs(((-1.0)*(x12637.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12638.value)*((((cj3*cj5*r01))+((cj3*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12637.value)))+IKsqr(((x12638.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12637.value)), ((x12638.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12639=IKsin(j4);
IkReal x12640=IKcos(j4);
IkReal x12641=(sj1*sj2);
IkReal x12642=(cj1*cj2);
IkReal x12643=(cj5*sj3);
IkReal x12644=((1.0)*r11);
IkReal x12645=(cj3*cj5);
IkReal x12646=((1.0)*r10);
IkReal x12647=(cj3*sj5);
IkReal x12648=((1.0)*r01);
IkReal x12649=(cj1*sj2);
IkReal x12650=(sj3*sj5);
IkReal x12651=(cj2*sj1);
IkReal x12652=((1.0)*r00);
IkReal x12653=(sj5*x12639);
IkReal x12654=(r11*x12640);
IkReal x12655=(cj5*x12639);
IkReal x12656=(r01*x12640);
IkReal x12657=(x12642+x12641);
IkReal x12658=((1.0)*r22*x12639);
evalcond[0]=((-1.0)*r22*x12640);
evalcond[1]=(((r10*x12655))+(((-1.0)*x12644*x12653)));
evalcond[2]=((((-1.0)*sj3*x12658))+x12657);
evalcond[3]=((1.0)+((r00*x12655))+(((-1.0)*x12648*x12653)));
evalcond[4]=((((-1.0)*x12649))+x12651+(((-1.0)*cj3*x12658)));
evalcond[5]=(((r01*x12643))+((x12647*x12656))+((r00*x12650))+(((-1.0)*x12640*x12645*x12652)));
evalcond[6]=((((-1.0)*x12647*x12652))+(((-1.0)*x12640*x12643*x12652))+(((-1.0)*x12645*x12648))+((x12650*x12656)));
evalcond[7]=(((r10*x12650))+(((-1.0)*x12640*x12645*x12646))+x12657+((x12647*x12654))+((r11*x12643)));
evalcond[8]=(((x12650*x12654))+x12649+(((-1.0)*x12640*x12643*x12646))+(((-1.0)*x12651))+(((-1.0)*x12646*x12647))+(((-1.0)*x12644*x12645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12659=cj5*cj5;
IkReal x12660=(cj3*r00);
IkReal x12661=(r01*sj3);
IkReal x12662=(r00*sj3);
IkReal x12663=(cj3*r01);
IkReal x12664=(cj5*r20*sj5);
IkReal x12665=(r21*x12659);
IkReal x12666=(r20*x12659);
IkReal x12667=((1.0)*cj5*r21*sj5);
CheckValue<IkReal> x12668=IKPowWithIntegerCheck(IKsign((((r21*x12663))+(((-1.0)*x12660*x12667))+(((-1.0)*x12663*x12665))+(((-1.0)*x12663*x12664))+((cj3*r02*r22))+((x12660*x12666)))),-1);
if(!x12668.valid){
continue;
}
CheckValue<IkReal> x12669 = IKatan2WithCheck(IkReal((((r22*sj5*x12662))+((cj5*r22*x12661)))),IkReal(((((-1.0)*x12661*x12667))+(((-1.0)*r21*x12662))+((x12662*x12665))+((x12662*x12664))+((x12661*x12666)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12668.value)))+(x12669.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12670=IKsin(j4);
IkReal x12671=IKcos(j4);
IkReal x12672=(sj1*sj2);
IkReal x12673=(cj1*cj2);
IkReal x12674=(r11*sj5);
IkReal x12675=(cj5*sj3);
IkReal x12676=(r21*sj5);
IkReal x12677=(r01*sj5);
IkReal x12678=(cj1*sj2);
IkReal x12679=(sj3*sj5);
IkReal x12680=(cj2*sj1);
IkReal x12681=(cj3*cj5);
IkReal x12682=((1.0)*x12671);
IkReal x12683=(cj3*x12671);
IkReal x12684=((1.0)*x12670);
IkReal x12685=((1.0)*x12681);
IkReal x12686=((1.0)*cj3*sj5);
IkReal x12687=(cj5*x12670);
IkReal x12688=(sj3*x12671);
IkReal x12689=(x12673+x12672);
evalcond[0]=((((-1.0)*x12676*x12684))+((r20*x12687))+(((-1.0)*r22*x12682)));
evalcond[1]=((((-1.0)*x12674*x12684))+((r10*x12687))+(((-1.0)*r12*x12682)));
evalcond[2]=((1.0)+((r00*x12687))+(((-1.0)*r02*x12682))+(((-1.0)*x12677*x12684)));
evalcond[3]=((((-1.0)*cj3*r02*x12684))+((r00*x12679))+((x12677*x12683))+((r01*x12675))+(((-1.0)*r00*x12681*x12682)));
evalcond[4]=((((-1.0)*r00*x12686))+(((-1.0)*r00*x12675*x12682))+(((-1.0)*r01*x12685))+(((-1.0)*r02*sj3*x12684))+((x12677*x12688)));
evalcond[5]=(((r10*x12679))+((x12674*x12683))+(((-1.0)*r10*x12681*x12682))+((r11*x12675))+x12689+(((-1.0)*cj3*r12*x12684)));
evalcond[6]=(((r20*x12679))+((r21*x12675))+((x12676*x12683))+(((-1.0)*x12678))+(((-1.0)*r20*x12681*x12682))+x12680+(((-1.0)*cj3*r22*x12684)));
evalcond[7]=((((-1.0)*r22*sj3*x12684))+(((-1.0)*r20*x12686))+(((-1.0)*r21*x12685))+((x12676*x12688))+x12689+(((-1.0)*r20*x12675*x12682)));
evalcond[8]=(((x12674*x12688))+(((-1.0)*r10*x12675*x12682))+(((-1.0)*r11*x12685))+x12678+(((-1.0)*r12*sj3*x12684))+(((-1.0)*r10*x12686))+(((-1.0)*x12680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12690=((1.0)*sj5);
CheckValue<IkReal> x12691=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x12690)))),-1);
if(!x12691.valid){
continue;
}
CheckValue<IkReal> x12692 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x12690)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12691.value)))+(x12692.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12693=IKsin(j4);
IkReal x12694=IKcos(j4);
IkReal x12695=(sj1*sj2);
IkReal x12696=(cj1*cj2);
IkReal x12697=(r11*sj5);
IkReal x12698=(cj5*sj3);
IkReal x12699=(r21*sj5);
IkReal x12700=(r01*sj5);
IkReal x12701=(cj1*sj2);
IkReal x12702=(sj3*sj5);
IkReal x12703=(cj2*sj1);
IkReal x12704=(cj3*cj5);
IkReal x12705=((1.0)*x12694);
IkReal x12706=(cj3*x12694);
IkReal x12707=((1.0)*x12693);
IkReal x12708=((1.0)*x12704);
IkReal x12709=((1.0)*cj3*sj5);
IkReal x12710=(cj5*x12693);
IkReal x12711=(sj3*x12694);
IkReal x12712=(x12695+x12696);
evalcond[0]=((((-1.0)*r22*x12705))+((r20*x12710))+(((-1.0)*x12699*x12707)));
evalcond[1]=((((-1.0)*x12697*x12707))+((r10*x12710))+(((-1.0)*r12*x12705)));
evalcond[2]=((1.0)+(((-1.0)*x12700*x12707))+((r00*x12710))+(((-1.0)*r02*x12705)));
evalcond[3]=(((x12700*x12706))+(((-1.0)*r00*x12704*x12705))+(((-1.0)*cj3*r02*x12707))+((r00*x12702))+((r01*x12698)));
evalcond[4]=((((-1.0)*r00*x12698*x12705))+((x12700*x12711))+(((-1.0)*r01*x12708))+(((-1.0)*r00*x12709))+(((-1.0)*r02*sj3*x12707)));
evalcond[5]=((((-1.0)*cj3*r12*x12707))+((x12697*x12706))+((r10*x12702))+(((-1.0)*r10*x12704*x12705))+((r11*x12698))+x12712);
evalcond[6]=(((x12699*x12706))+((r21*x12698))+((r20*x12702))+x12703+(((-1.0)*r20*x12704*x12705))+(((-1.0)*cj3*r22*x12707))+(((-1.0)*x12701)));
evalcond[7]=((((-1.0)*r20*x12698*x12705))+(((-1.0)*r20*x12709))+(((-1.0)*r22*sj3*x12707))+(((-1.0)*r21*x12708))+x12712+((x12699*x12711)));
evalcond[8]=(((x12697*x12711))+(((-1.0)*r11*x12708))+(((-1.0)*r10*x12709))+(((-1.0)*r10*x12698*x12705))+x12701+(((-1.0)*r12*sj3*x12707))+(((-1.0)*x12703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12713 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12713.valid){
continue;
}
CheckValue<IkReal> x12714=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12714.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12713.value)+(((1.5707963267949)*(x12714.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12715=IKsin(j4);
IkReal x12716=IKcos(j4);
IkReal x12717=(sj1*sj2);
IkReal x12718=(cj1*cj2);
IkReal x12719=(r11*sj5);
IkReal x12720=(cj5*sj3);
IkReal x12721=(r21*sj5);
IkReal x12722=(r01*sj5);
IkReal x12723=(cj1*sj2);
IkReal x12724=(sj3*sj5);
IkReal x12725=(cj2*sj1);
IkReal x12726=(cj3*cj5);
IkReal x12727=((1.0)*x12716);
IkReal x12728=(cj3*x12716);
IkReal x12729=((1.0)*x12715);
IkReal x12730=((1.0)*x12726);
IkReal x12731=((1.0)*cj3*sj5);
IkReal x12732=(cj5*x12715);
IkReal x12733=(sj3*x12716);
IkReal x12734=(x12717+x12718);
evalcond[0]=((((-1.0)*r22*x12727))+((r20*x12732))+(((-1.0)*x12721*x12729)));
evalcond[1]=((((-1.0)*x12719*x12729))+((r10*x12732))+(((-1.0)*r12*x12727)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12727))+(((-1.0)*x12722*x12729))+((r00*x12732)));
evalcond[3]=((((-1.0)*cj3*r02*x12729))+((x12722*x12728))+(((-1.0)*r00*x12726*x12727))+((r00*x12724))+((r01*x12720)));
evalcond[4]=((((-1.0)*r00*x12731))+((x12722*x12733))+(((-1.0)*r01*x12730))+(((-1.0)*r02*sj3*x12729))+(((-1.0)*r00*x12720*x12727)));
evalcond[5]=(((r11*x12720))+(((-1.0)*cj3*r12*x12729))+((x12719*x12728))+x12734+((r10*x12724))+(((-1.0)*r10*x12726*x12727)));
evalcond[6]=(((x12721*x12728))+(((-1.0)*x12723))+((r21*x12720))+((r20*x12724))+(((-1.0)*r20*x12726*x12727))+x12725+(((-1.0)*cj3*r22*x12729)));
evalcond[7]=(((x12721*x12733))+(((-1.0)*r20*x12720*x12727))+x12734+(((-1.0)*r20*x12731))+(((-1.0)*r22*sj3*x12729))+(((-1.0)*r21*x12730)));
evalcond[8]=((((-1.0)*r12*sj3*x12729))+(((-1.0)*x12725))+(((-1.0)*r10*x12731))+((x12719*x12733))+x12723+(((-1.0)*r11*x12730))+(((-1.0)*r10*x12720*x12727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12735=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12735;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x12735);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12736=((1.0)*sj5);
IkReal x12737=((((-1.0)*cj5*r21))+(((-1.0)*r20*x12736)));
j4eval[0]=x12737;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x12736))))));
j4eval[2]=IKsign(x12737);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12738=cj5*cj5;
IkReal x12739=(cj3*r00);
IkReal x12740=(cj3*r01);
IkReal x12741=((1.0)*cj5*sj5);
IkReal x12742=((((-1.0)*r21*x12738*x12740))+((cj3*r02*r22))+(((-1.0)*r20*x12740*x12741))+((r21*x12740))+(((-1.0)*r21*x12739*x12741))+((r20*x12738*x12739)));
j4eval[0]=x12742;
j4eval[1]=IKsign(x12742);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12743=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12743;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x12743);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12744=((1.0)*sj5);
IkReal x12745=((((-1.0)*cj5*r21))+(((-1.0)*r20*x12744)));
j4eval[0]=x12745;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x12744))))));
j4eval[2]=IKsign(x12745);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12746=cj5*cj5;
IkReal x12747=r01*r01;
IkReal x12748=(r01*sj5);
IkReal x12749=(cj5*r00);
IkReal x12750=((((-1.0)*x12747))+(((-1.0)*(r02*r02)))+(((-1.0)*x12746*(r00*r00)))+(((2.0)*x12748*x12749))+((x12746*x12747)));
j4eval[0]=x12750;
j4eval[1]=IKsign(x12750);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x12749))+x12748))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12751=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12751);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12751);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12752=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12752);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12752);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12753=IKPowWithIntegerCheck(r22,-1);
if(!x12753.valid){
continue;
}
CheckValue<IkReal> x12754=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12754.valid){
continue;
}
if( IKabs(((x12753.value)*((((sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12754.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12753.value)*((((sj1*sj2))+((cj1*cj2))))))+IKsqr(((x12754.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12753.value)*((((sj1*sj2))+((cj1*cj2))))), ((x12754.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12755=IKsin(j4);
IkReal x12756=IKcos(j4);
IkReal x12757=(cj5*r00);
IkReal x12758=(cj5*r10);
IkReal x12759=((1.0)*x12756);
IkReal x12760=(sj5*x12756);
IkReal x12761=((1.0)*sj5*x12755);
evalcond[0]=((-1.0)*r22*x12756);
evalcond[1]=(((sj1*sj2))+(((-1.0)*r22*x12755))+((cj1*cj2)));
evalcond[2]=(((x12755*x12758))+(((-1.0)*r11*x12761)));
evalcond[3]=((((-1.0)*x12757*x12759))+((r01*x12760)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x12761))+((x12755*x12757)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x12758*x12759))+((r11*x12760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12762=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12762.valid){
continue;
}
CheckValue<IkReal> x12763=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12763.valid){
continue;
}
if( IKabs(x12762.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12763.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12762.value)+IKsqr(((x12763.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12762.value, ((x12763.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12764=IKsin(j4);
IkReal x12765=IKcos(j4);
IkReal x12766=(cj5*r00);
IkReal x12767=(cj5*r10);
IkReal x12768=((1.0)*x12765);
IkReal x12769=(sj5*x12765);
IkReal x12770=((1.0)*sj5*x12764);
evalcond[0]=((-1.0)*r22*x12765);
evalcond[1]=(((sj1*sj2))+(((-1.0)*r22*x12764))+((cj1*cj2)));
evalcond[2]=(((x12764*x12767))+(((-1.0)*r11*x12770)));
evalcond[3]=((((-1.0)*x12766*x12768))+((r01*x12769)));
evalcond[4]=((-1.0)+((x12764*x12766))+(((-1.0)*r01*x12770)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x12767*x12768))+((r11*x12769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12771=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12771);
rxp0_2=(py*r00);
rxp1_0=(r21*x12771);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12772=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12772);
rxp0_2=(py*r00);
rxp1_0=(r21*x12772);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12773=((1.0)*sj2);
CheckValue<IkReal> x12774=IKPowWithIntegerCheck(r12,-1);
if(!x12774.valid){
continue;
}
CheckValue<IkReal> x12775=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12775.valid){
continue;
}
if( IKabs(((x12774.value)*((((cj2*sj1))+(((-1.0)*cj1*x12773)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12775.value)*(((((-1.0)*cj1*cj2))+(((-1.0)*sj1*x12773)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12774.value)*((((cj2*sj1))+(((-1.0)*cj1*x12773))))))+IKsqr(((x12775.value)*(((((-1.0)*cj1*cj2))+(((-1.0)*sj1*x12773))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12774.value)*((((cj2*sj1))+(((-1.0)*cj1*x12773))))), ((x12775.value)*(((((-1.0)*cj1*cj2))+(((-1.0)*sj1*x12773))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12776=IKsin(j4);
IkReal x12777=IKcos(j4);
IkReal x12778=(r01*sj5);
IkReal x12779=(r21*sj5);
IkReal x12780=((1.0)*x12776);
IkReal x12781=(cj5*x12776);
IkReal x12782=((1.0)*cj5*x12777);
evalcond[0]=((-1.0)*r12*x12777);
evalcond[1]=(((r20*x12781))+(((-1.0)*x12779*x12780)));
evalcond[2]=((((-1.0)*r00*x12782))+((x12777*x12778)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x12780)));
evalcond[4]=((-1.0)+(((-1.0)*x12778*x12780))+((r00*x12781)));
evalcond[5]=(((sj1*sj2))+(((-1.0)*r20*x12782))+((cj1*cj2))+((x12777*x12779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12783=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12783.valid){
continue;
}
CheckValue<IkReal> x12784=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12784.valid){
continue;
}
if( IKabs(x12783.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12784.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12783.value)+IKsqr(((x12784.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12783.value, ((x12784.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12785=IKsin(j4);
IkReal x12786=IKcos(j4);
IkReal x12787=(r01*sj5);
IkReal x12788=(r21*sj5);
IkReal x12789=((1.0)*x12785);
IkReal x12790=(cj5*x12785);
IkReal x12791=((1.0)*cj5*x12786);
evalcond[0]=((-1.0)*r12*x12786);
evalcond[1]=(((r20*x12790))+(((-1.0)*x12788*x12789)));
evalcond[2]=(((x12786*x12787))+(((-1.0)*r00*x12791)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x12789)));
evalcond[4]=((-1.0)+(((-1.0)*x12787*x12789))+((r00*x12790)));
evalcond[5]=(((x12786*x12788))+(((-1.0)*r20*x12791))+((sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12792=cj5*cj5;
IkReal x12793=r01*r01;
IkReal x12794=(r01*sj5);
IkReal x12795=(cj5*r00);
CheckValue<IkReal> x12796 = IKatan2WithCheck(IkReal(((((-1.0)*x12795))+x12794)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12796.valid){
continue;
}
CheckValue<IkReal> x12797=IKPowWithIntegerCheck(IKsign((((x12792*x12793))+(((-1.0)*(r02*r02)))+(((-1.0)*x12792*(r00*r00)))+(((2.0)*x12794*x12795))+(((-1.0)*x12793)))),-1);
if(!x12797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12796.value)+(((1.5707963267949)*(x12797.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12798=IKsin(j4);
IkReal x12799=IKcos(j4);
IkReal x12800=(cj5*r00);
IkReal x12801=(cj5*r20);
IkReal x12802=(cj5*r10);
IkReal x12803=((1.0)*x12799);
IkReal x12804=(sj5*x12799);
IkReal x12805=((1.0)*x12798);
IkReal x12806=(sj5*x12805);
evalcond[0]=(((x12798*x12801))+(((-1.0)*r21*x12806))+(((-1.0)*r22*x12803)));
evalcond[1]=(((x12798*x12802))+(((-1.0)*r11*x12806))+(((-1.0)*r12*x12803)));
evalcond[2]=((((-1.0)*x12800*x12803))+(((-1.0)*r02*x12805))+((r01*x12804)));
evalcond[3]=((-1.0)+((x12798*x12800))+(((-1.0)*r02*x12803))+(((-1.0)*r01*x12806)));
evalcond[4]=(((sj1*sj2))+((r21*x12804))+(((-1.0)*r22*x12805))+(((-1.0)*x12801*x12803))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x12805))+((r11*x12804))+(((-1.0)*x12802*x12803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12807=((1.0)*sj5);
CheckValue<IkReal> x12808=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12807))+(((-1.0)*cj5*r21)))),-1);
if(!x12808.valid){
continue;
}
CheckValue<IkReal> x12809 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x12807)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12808.value)))+(x12809.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12810=IKsin(j4);
IkReal x12811=IKcos(j4);
IkReal x12812=(cj5*r00);
IkReal x12813=(cj5*r20);
IkReal x12814=(cj5*r10);
IkReal x12815=((1.0)*x12811);
IkReal x12816=(sj5*x12811);
IkReal x12817=((1.0)*x12810);
IkReal x12818=(sj5*x12817);
evalcond[0]=(((x12810*x12813))+(((-1.0)*r21*x12818))+(((-1.0)*r22*x12815)));
evalcond[1]=(((x12810*x12814))+(((-1.0)*r11*x12818))+(((-1.0)*r12*x12815)));
evalcond[2]=((((-1.0)*x12812*x12815))+(((-1.0)*r02*x12817))+((r01*x12816)));
evalcond[3]=((-1.0)+((x12810*x12812))+(((-1.0)*r02*x12815))+(((-1.0)*r01*x12818)));
evalcond[4]=((((-1.0)*x12813*x12815))+((sj1*sj2))+((r21*x12816))+(((-1.0)*r22*x12817))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*x12814*x12815))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x12817))+((r11*x12816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12819=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12819.valid){
continue;
}
CheckValue<IkReal> x12820 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12820.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12819.value)))+(x12820.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12821=IKsin(j4);
IkReal x12822=IKcos(j4);
IkReal x12823=(cj5*r00);
IkReal x12824=(cj5*r20);
IkReal x12825=(cj5*r10);
IkReal x12826=((1.0)*x12822);
IkReal x12827=(sj5*x12822);
IkReal x12828=((1.0)*x12821);
IkReal x12829=(sj5*x12828);
evalcond[0]=((((-1.0)*r22*x12826))+(((-1.0)*r21*x12829))+((x12821*x12824)));
evalcond[1]=((((-1.0)*r11*x12829))+(((-1.0)*r12*x12826))+((x12821*x12825)));
evalcond[2]=((((-1.0)*r02*x12828))+((r01*x12827))+(((-1.0)*x12823*x12826)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12826))+((x12821*x12823))+(((-1.0)*r01*x12829)));
evalcond[4]=((((-1.0)*x12824*x12826))+(((-1.0)*r22*x12828))+((sj1*sj2))+((r21*x12827))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*x12825*x12826))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x12828))+((r11*x12827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12830=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12830;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x12830);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12831=((1.0)*sj5);
IkReal x12832=((((-1.0)*r20*x12831))+(((-1.0)*cj5*r21)));
j4eval[0]=x12832;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x12831))))));
j4eval[2]=IKsign(x12832);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12833=cj5*cj5;
IkReal x12834=r01*r01;
IkReal x12835=(cj5*r00);
IkReal x12836=(r01*sj5);
IkReal x12837=(x12834+((x12833*(r00*r00)))+(((-1.0)*x12833*x12834))+(((-2.0)*x12835*x12836))+(r02*r02));
j4eval[0]=x12837;
j4eval[1]=((IKabs(r02))+(IKabs((x12835+(((-1.0)*x12836))))));
j4eval[2]=IKsign(x12837);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12838=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12838);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12838);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12839=((1.0)*sj5);
j4eval[0]=((((-1.0)*r01*x12839))+((cj5*r00)));
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*x12839)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12840=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12840);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12840);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12841=((1.0)*cj2);
CheckValue<IkReal> x12842=IKPowWithIntegerCheck(r22,-1);
if(!x12842.valid){
continue;
}
CheckValue<IkReal> x12843=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x12843.valid){
continue;
}
if( IKabs(((x12842.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*x12841)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12843.value)*((((cj1*sj2))+(((-1.0)*sj1*x12841)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12842.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*x12841))))))+IKsqr(((x12843.value)*((((cj1*sj2))+(((-1.0)*sj1*x12841))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12842.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*x12841))))), ((x12843.value)*((((cj1*sj2))+(((-1.0)*sj1*x12841))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12844=IKsin(j4);
IkReal x12845=IKcos(j4);
IkReal x12846=((1.0)*sj5);
IkReal x12847=(cj5*r00);
IkReal x12848=(cj5*r10);
evalcond[0]=((-1.0)*r22*x12845);
evalcond[1]=(((r22*x12844))+((sj1*sj2))+((cj1*cj2)));
evalcond[2]=((((-1.0)*r11*x12844*x12846))+((x12844*x12848)));
evalcond[3]=((((-1.0)*r01*x12845*x12846))+((x12845*x12847)));
evalcond[4]=((-1.0)+((x12844*x12847))+(((-1.0)*r01*x12844*x12846)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r11*x12845*x12846))+(((-1.0)*cj1*sj2))+((x12845*x12848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12849=((1.0)*sj5);
CheckValue<IkReal> x12850=IKPowWithIntegerCheck(((((-1.0)*r01*x12849))+((cj5*r00))),-1);
if(!x12850.valid){
continue;
}
CheckValue<IkReal> x12851=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*x12849))),-1);
if(!x12851.valid){
continue;
}
if( IKabs(x12850.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12851.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12850.value)+IKsqr(((x12851.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12850.value, ((x12851.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12852=IKsin(j4);
IkReal x12853=IKcos(j4);
IkReal x12854=((1.0)*sj5);
IkReal x12855=(cj5*r00);
IkReal x12856=(cj5*r10);
evalcond[0]=((-1.0)*r22*x12853);
evalcond[1]=(((r22*x12852))+((sj1*sj2))+((cj1*cj2)));
evalcond[2]=(((x12852*x12856))+(((-1.0)*r11*x12852*x12854)));
evalcond[3]=(((x12853*x12855))+(((-1.0)*r01*x12853*x12854)));
evalcond[4]=((-1.0)+((x12852*x12855))+(((-1.0)*r01*x12852*x12854)));
evalcond[5]=(((x12853*x12856))+((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*x12853*x12854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12857=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12857);
rxp0_2=(py*r00);
rxp1_0=(r21*x12857);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x12858=((1.0)*sj5);
j4eval[0]=(((cj5*r00))+(((-1.0)*r01*x12858)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*x12858)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12859=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12859);
rxp0_2=(py*r00);
rxp1_0=(r21*x12859);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12860=((1.0)*cj2);
CheckValue<IkReal> x12861=IKPowWithIntegerCheck(r12,-1);
if(!x12861.valid){
continue;
}
CheckValue<IkReal> x12862=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12862.valid){
continue;
}
if( IKabs(((x12861.value)*(((((-1.0)*sj1*x12860))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12862.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*x12860)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12861.value)*(((((-1.0)*sj1*x12860))+((cj1*sj2))))))+IKsqr(((x12862.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*x12860))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12861.value)*(((((-1.0)*sj1*x12860))+((cj1*sj2))))), ((x12862.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*x12860))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12863=IKsin(j4);
IkReal x12864=IKcos(j4);
IkReal x12865=((1.0)*sj5);
IkReal x12866=(cj5*x12864);
IkReal x12867=(cj5*x12863);
evalcond[0]=((-1.0)*r12*x12864);
evalcond[1]=(((cj2*sj1))+((r12*x12863))+(((-1.0)*cj1*sj2)));
evalcond[2]=(((r20*x12867))+(((-1.0)*r21*x12863*x12865)));
evalcond[3]=((((-1.0)*r01*x12864*x12865))+((r00*x12866)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x12863*x12865))+((r00*x12867)));
evalcond[5]=(((r20*x12866))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*r21*x12864*x12865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12868=((1.0)*sj5);
CheckValue<IkReal> x12869=IKPowWithIntegerCheck(((((-1.0)*r01*x12868))+((cj5*r00))),-1);
if(!x12869.valid){
continue;
}
CheckValue<IkReal> x12870=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*x12868))),-1);
if(!x12870.valid){
continue;
}
if( IKabs(x12869.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12870.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12869.value)+IKsqr(((x12870.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12869.value, ((x12870.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12871=IKsin(j4);
IkReal x12872=IKcos(j4);
IkReal x12873=((1.0)*sj5);
IkReal x12874=(cj5*x12872);
IkReal x12875=(cj5*x12871);
evalcond[0]=((-1.0)*r12*x12872);
evalcond[1]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((r12*x12871)));
evalcond[2]=((((-1.0)*r21*x12871*x12873))+((r20*x12875)));
evalcond[3]=(((r00*x12874))+(((-1.0)*r01*x12872*x12873)));
evalcond[4]=((-1.0)+((r00*x12875))+(((-1.0)*r01*x12871*x12873)));
evalcond[5]=(((sj1*sj2))+(((-1.0)*r21*x12872*x12873))+((r20*x12874))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12876=cj5*cj5;
IkReal x12877=r01*r01;
IkReal x12878=(r01*sj5);
IkReal x12879=(cj5*r00);
CheckValue<IkReal> x12880=IKPowWithIntegerCheck(IKsign((((x12876*(r00*r00)))+x12877+(((-1.0)*x12876*x12877))+(r02*r02)+(((-2.0)*x12878*x12879)))),-1);
if(!x12880.valid){
continue;
}
CheckValue<IkReal> x12881 = IKatan2WithCheck(IkReal((x12879+(((-1.0)*x12878)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12881.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12880.value)))+(x12881.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12882=IKcos(j4);
IkReal x12883=IKsin(j4);
IkReal x12884=((1.0)*x12882);
IkReal x12885=(cj5*x12882);
IkReal x12886=(cj5*x12883);
IkReal x12887=((1.0)*sj5*x12883);
evalcond[0]=(((r00*x12885))+(((-1.0)*r01*sj5*x12884))+((r02*x12883)));
evalcond[1]=((((-1.0)*r22*x12884))+(((-1.0)*r21*x12887))+((r20*x12886)));
evalcond[2]=((((-1.0)*r12*x12884))+(((-1.0)*r11*x12887))+((r10*x12886)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12884))+((r00*x12886))+(((-1.0)*r01*x12887)));
evalcond[4]=((((-1.0)*r21*sj5*x12884))+((r20*x12885))+((sj1*sj2))+((r22*x12883))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x12884))+((r12*x12883))+((r10*x12885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12888=((1.0)*sj5);
CheckValue<IkReal> x12889=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12888))+(((-1.0)*cj5*r21)))),-1);
if(!x12889.valid){
continue;
}
CheckValue<IkReal> x12890 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x12888)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12889.value)))+(x12890.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12891=IKcos(j4);
IkReal x12892=IKsin(j4);
IkReal x12893=((1.0)*x12891);
IkReal x12894=(cj5*x12891);
IkReal x12895=(cj5*x12892);
IkReal x12896=((1.0)*sj5*x12892);
evalcond[0]=((((-1.0)*r01*sj5*x12893))+((r00*x12894))+((r02*x12892)));
evalcond[1]=((((-1.0)*r22*x12893))+((r20*x12895))+(((-1.0)*r21*x12896)));
evalcond[2]=(((r10*x12895))+(((-1.0)*r11*x12896))+(((-1.0)*r12*x12893)));
evalcond[3]=((-1.0)+((r00*x12895))+(((-1.0)*r01*x12896))+(((-1.0)*r02*x12893)));
evalcond[4]=(((r22*x12892))+((sj1*sj2))+(((-1.0)*r21*sj5*x12893))+((cj1*cj2))+((r20*x12894)));
evalcond[5]=(((r12*x12892))+((cj2*sj1))+(((-1.0)*cj1*sj2))+((r10*x12894))+(((-1.0)*r11*sj5*x12893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12897=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12897.valid){
continue;
}
CheckValue<IkReal> x12898 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12898.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12897.value)))+(x12898.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12899=IKcos(j4);
IkReal x12900=IKsin(j4);
IkReal x12901=((1.0)*x12899);
IkReal x12902=(cj5*x12899);
IkReal x12903=(cj5*x12900);
IkReal x12904=((1.0)*sj5*x12900);
evalcond[0]=(((r00*x12902))+((r02*x12900))+(((-1.0)*r01*sj5*x12901)));
evalcond[1]=((((-1.0)*r21*x12904))+((r20*x12903))+(((-1.0)*r22*x12901)));
evalcond[2]=((((-1.0)*r12*x12901))+(((-1.0)*r11*x12904))+((r10*x12903)));
evalcond[3]=((-1.0)+((r00*x12903))+(((-1.0)*r01*x12904))+(((-1.0)*r02*x12901)));
evalcond[4]=(((sj1*sj2))+((r20*x12902))+(((-1.0)*r21*sj5*x12901))+((cj1*cj2))+((r22*x12900)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((r12*x12900))+((r10*x12902))+(((-1.0)*r11*sj5*x12901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12905=((-1.0)*r20);
IkReal x12907 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x12907)==0){
continue;
}
IkReal x12906=pow(x12907,-0.5);
CheckValue<IkReal> x12908 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x12905),IKFAST_ATAN2_MAGTHRESH);
if(!x12908.valid){
continue;
}
IkReal gconst30=((-1.0)*(x12908.value));
IkReal gconst31=(r21*x12906);
IkReal gconst32=(x12905*x12906);
CheckValue<IkReal> x12909 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x12909.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12909.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12910=((-1.0)*r20);
IkReal x12911=x12906;
CheckValue<IkReal> x12913 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x12910),IKFAST_ATAN2_MAGTHRESH);
if(!x12913.valid){
continue;
}
IkReal x12912=((-1.0)*(x12913.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x12912;
IkReal gconst30=x12912;
IkReal gconst31=(r21*x12911);
IkReal gconst32=(x12910*x12911);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12914=((-1.0)*r20);
IkReal x12915=x12906;
CheckValue<IkReal> x12917 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x12914),IKFAST_ATAN2_MAGTHRESH);
if(!x12917.valid){
continue;
}
IkReal x12916=((-1.0)*(x12917.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x12916;
IkReal gconst30=x12916;
IkReal gconst31=(r21*x12915);
IkReal gconst32=(x12914*x12915);
CheckValue<IkReal> x12925=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x12925.valid){
continue;
}
IkReal x12918=x12925.value;
IkReal x12919=(cj3*x12918);
IkReal x12920=(r11*x12919);
IkReal x12921=(r01*x12919);
IkReal x12922=(r00*x12919);
IkReal x12923=(r10*x12919);
IkReal x12924=(r20*r21*x12919);
j4eval[0]=IKsign((((cj3*r02*r12))+((r10*x12922*(r20*r20)))+((r00*r20*r21*x12920))+((r01*x12920*(r21*r21)))+((r10*r20*r21*x12921))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12926=((-1.0)*r20);
IkReal x12927=x12906;
CheckValue<IkReal> x12929 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x12926),IKFAST_ATAN2_MAGTHRESH);
if(!x12929.valid){
continue;
}
IkReal x12928=((-1.0)*(x12929.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x12928;
IkReal gconst30=x12928;
IkReal gconst31=(r21*x12927);
IkReal gconst32=(x12926*x12927);
CheckValue<IkReal> x12937=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x12937.valid){
continue;
}
IkReal x12930=x12937.value;
IkReal x12931=(sj3*x12930);
IkReal x12932=(r11*x12931);
IkReal x12933=(r00*x12931);
IkReal x12934=(r01*x12931);
IkReal x12935=(r10*x12931);
IkReal x12936=(r20*r21*x12931);
j4eval[0]=IKsign((((r00*r20*r21*x12932))+((r02*r12*sj3))+((r10*x12933*(r20*r20)))+((r10*r20*r21*x12934))+((r01*x12932*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12938=((-1.0)*r20);
IkReal x12939=x12906;
CheckValue<IkReal> x12941 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x12938),IKFAST_ATAN2_MAGTHRESH);
if(!x12941.valid){
continue;
}
IkReal x12940=((-1.0)*(x12941.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x12940;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst30=x12940;
IkReal gconst31=(r21*x12939);
IkReal gconst32=(x12938*x12939);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12942=((-1.0)*r20);
IkReal x12943=x12906;
CheckValue<IkReal> x12945 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x12942),IKFAST_ATAN2_MAGTHRESH);
if(!x12945.valid){
continue;
}
IkReal x12944=((-1.0)*(x12945.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x12944;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst30=x12944;
IkReal gconst31=(r21*x12943);
IkReal gconst32=(x12942*x12943);
IkReal x12946=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x12950=IKPowWithIntegerCheck(x12946,-1);
if(!x12950.valid){
continue;
}
IkReal x12947=x12950.value;
IkReal x12948=((1.0)*x12947);
IkReal x12949=((((-2.0)*r00*r01*r20*r21*x12947))+(((-1.0)*(r02*r02)))+(((-1.0)*x12948*(r00*r00)*(r20*r20)))+(((-1.0)*x12948*(r01*r01)*(r21*r21))));
j4eval[0]=x12949;
j4eval[1]=IKsign(x12949);
j4eval[2]=r02;
j4eval[3]=x12946;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12951=((-1.0)*r20);
IkReal x12952=x12906;
CheckValue<IkReal> x12954 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x12951),IKFAST_ATAN2_MAGTHRESH);
if(!x12954.valid){
continue;
}
IkReal x12953=((-1.0)*(x12954.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x12953;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst30=x12953;
IkReal gconst31=(r21*x12952);
IkReal gconst32=(x12951*x12952);
IkReal x12955=r22*r22;
IkReal x12956=(cj2*r02*sj1);
CheckValue<IkReal> x12961=IKPowWithIntegerCheck(((-1.0)+x12955),-1);
if(!x12961.valid){
continue;
}
IkReal x12957=x12961.value;
IkReal x12958=((1.0)*cj1*r02*sj2);
if((((1.0)+(((-1.0)*x12955)))) < -0.00001)
continue;
IkReal x12959=IKsqrt(((1.0)+(((-1.0)*x12955))));
IkReal x12960=(r22*x12957*x12959);
j4eval[0]=((IKabs(((((-1.0)*x12958*x12960))+((x12956*x12960)))))+(IKabs((x12956+(((-1.0)*x12958))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12962=((1.0)*gconst32);
IkReal x12963=(cj2*sj1);
IkReal x12964=(gconst31*r01);
IkReal x12965=((1.0)*cj1*sj2);
CheckValue<IkReal> x12966 = IKatan2WithCheck(IkReal((((cj1*gconst32*r00*sj2))+(((-1.0)*r00*x12962*x12963))+((x12963*x12964))+(((-1.0)*x12964*x12965)))),IkReal((((r02*x12963))+(((-1.0)*r02*x12965)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12966.valid){
continue;
}
CheckValue<IkReal> x12967=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst31*r10))+(((-1.0)*r11*x12962)))),-1);
if(!x12967.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12966.value)+(((1.5707963267949)*(x12967.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12968=IKsin(j4);
IkReal x12969=IKcos(j4);
IkReal x12970=(gconst32*r20);
IkReal x12971=((1.0)*sj2);
IkReal x12972=((1.0)*x12969);
IkReal x12973=(gconst31*x12969);
IkReal x12974=(gconst32*x12968);
IkReal x12975=((1.0)*x12968);
IkReal x12976=(gconst31*x12975);
evalcond[0]=((((-1.0)*r21*x12976))+(((-1.0)*r22*x12972))+((x12968*x12970)));
evalcond[1]=((((-1.0)*r11*x12976))+(((-1.0)*r12*x12972))+((r10*x12974)));
evalcond[2]=(((r01*x12973))+(((-1.0)*gconst32*r00*x12972))+(((-1.0)*r02*x12975)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x12976))+((r00*x12974))+(((-1.0)*r02*x12972)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*cj1*x12971))+(((-1.0)*r22*x12975))+(((-1.0)*x12970*x12972))+((r21*x12973)));
evalcond[5]=((((-1.0)*cj1*cj2))+(((-1.0)*sj1*x12971))+(((-1.0)*gconst32*r10*x12972))+(((-1.0)*r12*x12975))+((r11*x12973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12977=(gconst32*r00);
IkReal x12978=(gconst31*r01);
CheckValue<IkReal> x12979 = IKatan2WithCheck(IkReal((x12978+(((-1.0)*x12977)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12979.valid){
continue;
}
CheckValue<IkReal> x12980=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x12978*x12978)))+(((-1.0)*(r02*r02)))+(((2.0)*x12977*x12978))+(((-1.0)*(x12977*x12977))))),-1);
if(!x12980.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12979.value)+(((1.5707963267949)*(x12980.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12981=IKsin(j4);
IkReal x12982=IKcos(j4);
IkReal x12983=(gconst32*r20);
IkReal x12984=((1.0)*sj2);
IkReal x12985=((1.0)*x12982);
IkReal x12986=(gconst31*x12982);
IkReal x12987=(gconst32*x12981);
IkReal x12988=((1.0)*x12981);
IkReal x12989=(gconst31*x12988);
evalcond[0]=((((-1.0)*r22*x12985))+(((-1.0)*r21*x12989))+((x12981*x12983)));
evalcond[1]=(((r10*x12987))+(((-1.0)*r12*x12985))+(((-1.0)*r11*x12989)));
evalcond[2]=(((r01*x12986))+(((-1.0)*r02*x12988))+(((-1.0)*gconst32*r00*x12985)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x12989))+((r00*x12987))+(((-1.0)*r02*x12985)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x12983*x12985))+(((-1.0)*cj1*x12984))+(((-1.0)*r22*x12988))+((r21*x12986)));
evalcond[5]=((((-1.0)*cj1*cj2))+(((-1.0)*gconst32*r10*x12985))+((r11*x12986))+(((-1.0)*r12*x12988))+(((-1.0)*sj1*x12984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12990=IKPowWithIntegerCheck(IKsign((((gconst32*r11))+((gconst31*r10)))),-1);
if(!x12990.valid){
continue;
}
CheckValue<IkReal> x12991 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst32*r20))+(((-1.0)*gconst31*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12990.value)))+(x12991.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12992=IKsin(j4);
IkReal x12993=IKcos(j4);
IkReal x12994=(gconst32*r20);
IkReal x12995=((1.0)*sj2);
IkReal x12996=((1.0)*x12993);
IkReal x12997=(gconst31*x12993);
IkReal x12998=(gconst32*x12992);
IkReal x12999=((1.0)*x12992);
IkReal x13000=(gconst31*x12999);
evalcond[0]=((((-1.0)*r22*x12996))+(((-1.0)*r21*x13000))+((x12992*x12994)));
evalcond[1]=((((-1.0)*r11*x13000))+((r10*x12998))+(((-1.0)*r12*x12996)));
evalcond[2]=((((-1.0)*gconst32*r00*x12996))+((r01*x12997))+(((-1.0)*r02*x12999)));
evalcond[3]=((-1.0)+((r00*x12998))+(((-1.0)*r01*x13000))+(((-1.0)*r02*x12996)));
evalcond[4]=((((-1.0)*x12994*x12996))+((cj2*sj1))+(((-1.0)*r22*x12999))+(((-1.0)*cj1*x12995))+((r21*x12997)));
evalcond[5]=((((-1.0)*cj1*cj2))+(((-1.0)*gconst32*r10*x12996))+((r11*x12997))+(((-1.0)*r12*x12999))+(((-1.0)*sj1*x12995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13001=((-1.0)*r20);
IkReal x13002=x12906;
CheckValue<IkReal> x13004 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13001),IKFAST_ATAN2_MAGTHRESH);
if(!x13004.valid){
continue;
}
IkReal x13003=((-1.0)*(x13004.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x13003;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst30=x13003;
IkReal gconst31=(r21*x13002);
IkReal gconst32=(x13001*x13002);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13005=((-1.0)*r20);
IkReal x13006=x12906;
CheckValue<IkReal> x13008 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13005),IKFAST_ATAN2_MAGTHRESH);
if(!x13008.valid){
continue;
}
IkReal x13007=((-1.0)*(x13008.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x13007;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst30=x13007;
IkReal gconst31=(r21*x13006);
IkReal gconst32=(x13005*x13006);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13009=((-1.0)*r20);
IkReal x13010=x12906;
CheckValue<IkReal> x13012 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13009),IKFAST_ATAN2_MAGTHRESH);
if(!x13012.valid){
continue;
}
IkReal x13011=((-1.0)*(x13012.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x13011;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst30=x13011;
IkReal gconst31=(r21*x13010);
IkReal gconst32=(x13009*x13010);
IkReal x13013=r22*r22;
IkReal x13014=(cj1*r02*sj2);
CheckValue<IkReal> x13019=IKPowWithIntegerCheck(((-1.0)+x13013),-1);
if(!x13019.valid){
continue;
}
IkReal x13015=x13019.value;
IkReal x13016=((1.0)*cj2*r02*sj1);
if((((1.0)+(((-1.0)*x13013)))) < -0.00001)
continue;
IkReal x13017=IKsqrt(((1.0)+(((-1.0)*x13013))));
IkReal x13018=(r22*x13015*x13017);
j4eval[0]=((IKabs(((((-1.0)*x13016))+x13014)))+(IKabs(((((-1.0)*x13016*x13018))+((x13014*x13018))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13020=((1.0)*gconst32);
IkReal x13021=(cj1*sj2);
IkReal x13022=(gconst31*r01);
IkReal x13023=(cj2*sj1);
CheckValue<IkReal> x13024 = IKatan2WithCheck(IkReal((((gconst32*r00*x13023))+((x13021*x13022))+(((-1.0)*x13022*x13023))+(((-1.0)*r00*x13020*x13021)))),IkReal((((r02*x13021))+(((-1.0)*r02*x13023)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13024.valid){
continue;
}
CheckValue<IkReal> x13025=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst31*r10))+(((-1.0)*r11*x13020)))),-1);
if(!x13025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13024.value)+(((1.5707963267949)*(x13025.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13026=IKcos(j4);
IkReal x13027=IKsin(j4);
IkReal x13028=(gconst31*r21);
IkReal x13029=((1.0)*sj2);
IkReal x13030=(gconst31*r01);
IkReal x13031=(gconst31*r11);
IkReal x13032=((1.0)*x13026);
IkReal x13033=((1.0)*x13027);
IkReal x13034=(gconst32*x13027);
IkReal x13035=(gconst32*x13026);
evalcond[0]=((((-1.0)*x13030*x13032))+((r02*x13027))+((r00*x13035)));
evalcond[1]=((((-1.0)*x13028*x13033))+(((-1.0)*r22*x13032))+((r20*x13034)));
evalcond[2]=((((-1.0)*x13031*x13033))+(((-1.0)*r12*x13032))+((r10*x13034)));
evalcond[3]=((-1.0)+(((-1.0)*x13030*x13033))+(((-1.0)*r02*x13032))+((r00*x13034)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*cj1*x13029))+(((-1.0)*x13028*x13032))+((r22*x13027))+((r20*x13035)));
evalcond[5]=((((-1.0)*x13031*x13032))+(((-1.0)*sj1*x13029))+(((-1.0)*cj1*cj2))+((r10*x13035))+((r12*x13027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13036=(gconst32*r00);
IkReal x13037=(gconst31*r01);
CheckValue<IkReal> x13038 = IKatan2WithCheck(IkReal(((((-1.0)*x13037))+x13036)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13038.valid){
continue;
}
CheckValue<IkReal> x13039=IKPowWithIntegerCheck(IKsign(((((-2.0)*x13036*x13037))+(x13037*x13037)+(x13036*x13036)+(r02*r02))),-1);
if(!x13039.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13038.value)+(((1.5707963267949)*(x13039.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13040=IKcos(j4);
IkReal x13041=IKsin(j4);
IkReal x13042=(gconst31*r21);
IkReal x13043=((1.0)*sj2);
IkReal x13044=(gconst31*r01);
IkReal x13045=(gconst31*r11);
IkReal x13046=((1.0)*x13040);
IkReal x13047=((1.0)*x13041);
IkReal x13048=(gconst32*x13041);
IkReal x13049=(gconst32*x13040);
evalcond[0]=(((r02*x13041))+((r00*x13049))+(((-1.0)*x13044*x13046)));
evalcond[1]=(((r20*x13048))+(((-1.0)*r22*x13046))+(((-1.0)*x13042*x13047)));
evalcond[2]=((((-1.0)*x13045*x13047))+((r10*x13048))+(((-1.0)*r12*x13046)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x13046))+((r00*x13048))+(((-1.0)*x13044*x13047)));
evalcond[4]=(((cj2*sj1))+((r20*x13049))+((r22*x13041))+(((-1.0)*cj1*x13043))+(((-1.0)*x13042*x13046)));
evalcond[5]=((((-1.0)*sj1*x13043))+(((-1.0)*x13045*x13046))+(((-1.0)*cj1*cj2))+((r10*x13049))+((r12*x13041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13050=IKPowWithIntegerCheck(IKsign((((gconst32*r11))+((gconst31*r10)))),-1);
if(!x13050.valid){
continue;
}
CheckValue<IkReal> x13051 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst32*r20))+(((-1.0)*gconst31*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13051.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13050.value)))+(x13051.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13052=IKcos(j4);
IkReal x13053=IKsin(j4);
IkReal x13054=(gconst31*r21);
IkReal x13055=((1.0)*sj2);
IkReal x13056=(gconst31*r01);
IkReal x13057=(gconst31*r11);
IkReal x13058=((1.0)*x13052);
IkReal x13059=((1.0)*x13053);
IkReal x13060=(gconst32*x13053);
IkReal x13061=(gconst32*x13052);
evalcond[0]=(((r02*x13053))+(((-1.0)*x13056*x13058))+((r00*x13061)));
evalcond[1]=(((r20*x13060))+(((-1.0)*x13054*x13059))+(((-1.0)*r22*x13058)));
evalcond[2]=((((-1.0)*x13057*x13059))+(((-1.0)*r12*x13058))+((r10*x13060)));
evalcond[3]=((-1.0)+(((-1.0)*x13056*x13059))+(((-1.0)*r02*x13058))+((r00*x13060)));
evalcond[4]=(((r20*x13061))+((cj2*sj1))+(((-1.0)*x13054*x13058))+((r22*x13053))+(((-1.0)*cj1*x13055)));
evalcond[5]=((((-1.0)*sj1*x13055))+((r12*x13053))+(((-1.0)*x13057*x13058))+(((-1.0)*cj1*cj2))+((r10*x13061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13062=((-1.0)*r20);
IkReal x13063=x12906;
CheckValue<IkReal> x13065 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13062),IKFAST_ATAN2_MAGTHRESH);
if(!x13065.valid){
continue;
}
IkReal x13064=((-1.0)*(x13065.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x13064;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst30=x13064;
IkReal gconst31=(r21*x13063);
IkReal gconst32=(x13062*x13063);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13066=((-1.0)*r20);
IkReal x13067=x12906;
CheckValue<IkReal> x13069 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13066),IKFAST_ATAN2_MAGTHRESH);
if(!x13069.valid){
continue;
}
IkReal x13068=((-1.0)*(x13069.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x13068;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst30=x13068;
IkReal gconst31=(r21*x13067);
IkReal gconst32=(x13066*x13067);
IkReal x13070=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13074=IKPowWithIntegerCheck(x13070,-1);
if(!x13074.valid){
continue;
}
IkReal x13071=x13074.value;
IkReal x13072=((1.0)*x13071);
IkReal x13073=((((-1.0)*x13072*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x13072*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x13071)));
j4eval[0]=x13073;
j4eval[1]=IKsign(x13073);
j4eval[2]=r02;
j4eval[3]=x13070;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13075=((-1.0)*r20);
IkReal x13076=x12906;
CheckValue<IkReal> x13078 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13075),IKFAST_ATAN2_MAGTHRESH);
if(!x13078.valid){
continue;
}
IkReal x13077=((-1.0)*(x13078.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x13077;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst30=x13077;
IkReal gconst31=(r21*x13076);
IkReal gconst32=(x13075*x13076);
IkReal x13079=r22*r22;
IkReal x13080=(r02*sj1*sj2);
IkReal x13081=(cj1*cj2*r02);
CheckValue<IkReal> x13085=IKPowWithIntegerCheck(((-1.0)+x13079),-1);
if(!x13085.valid){
continue;
}
IkReal x13082=x13085.value;
if((((1.0)+(((-1.0)*x13079)))) < -0.00001)
continue;
IkReal x13083=IKsqrt(((1.0)+(((-1.0)*x13079))));
IkReal x13084=(r22*x13082*x13083);
j4eval[0]=((IKabs((((x13081*x13084))+((x13080*x13084)))))+(IKabs((x13081+x13080))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13086=((1.0)*gconst32);
IkReal x13087=(sj1*sj2);
IkReal x13088=(gconst31*r01);
IkReal x13089=(cj1*cj2);
CheckValue<IkReal> x13090 = IKatan2WithCheck(IkReal((((x13088*x13089))+((x13087*x13088))+(((-1.0)*r00*x13086*x13089))+(((-1.0)*r00*x13086*x13087)))),IkReal((((r02*x13089))+((r02*x13087)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13090.valid){
continue;
}
CheckValue<IkReal> x13091=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst31*r10))+(((-1.0)*r11*x13086)))),-1);
if(!x13091.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13090.value)+(((1.5707963267949)*(x13091.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13092=IKsin(j4);
IkReal x13093=IKcos(j4);
IkReal x13094=(gconst32*r20);
IkReal x13095=((1.0)*x13093);
IkReal x13096=(gconst31*x13093);
IkReal x13097=(gconst32*x13092);
IkReal x13098=((1.0)*x13092);
IkReal x13099=(gconst31*x13098);
evalcond[0]=(((x13092*x13094))+(((-1.0)*r22*x13095))+(((-1.0)*r21*x13099)));
evalcond[1]=((((-1.0)*r12*x13095))+(((-1.0)*r11*x13099))+((r10*x13097)));
evalcond[2]=((((-1.0)*gconst32*r00*x13095))+((r01*x13096))+(((-1.0)*r02*x13098)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x13099))+((r00*x13097))+(((-1.0)*r02*x13095)));
evalcond[4]=((((-1.0)*x13094*x13095))+((sj1*sj2))+(((-1.0)*r22*x13098))+((cj1*cj2))+((r21*x13096)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r12*x13098))+(((-1.0)*cj1*sj2))+((r11*x13096))+(((-1.0)*gconst32*r10*x13095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13100=(gconst32*r00);
IkReal x13101=(gconst31*r01);
CheckValue<IkReal> x13102=IKPowWithIntegerCheck(IKsign(((((2.0)*x13100*x13101))+(((-1.0)*(r02*r02)))+(((-1.0)*(x13100*x13100)))+(((-1.0)*(x13101*x13101))))),-1);
if(!x13102.valid){
continue;
}
CheckValue<IkReal> x13103 = IKatan2WithCheck(IkReal(((((-1.0)*x13100))+x13101)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x13103.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13102.value)))+(x13103.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13104=IKsin(j4);
IkReal x13105=IKcos(j4);
IkReal x13106=(gconst32*r20);
IkReal x13107=((1.0)*x13105);
IkReal x13108=(gconst31*x13105);
IkReal x13109=(gconst32*x13104);
IkReal x13110=((1.0)*x13104);
IkReal x13111=(gconst31*x13110);
evalcond[0]=(((x13104*x13106))+(((-1.0)*r22*x13107))+(((-1.0)*r21*x13111)));
evalcond[1]=((((-1.0)*r11*x13111))+(((-1.0)*r12*x13107))+((r10*x13109)));
evalcond[2]=(((r01*x13108))+(((-1.0)*gconst32*r00*x13107))+(((-1.0)*r02*x13110)));
evalcond[3]=((-1.0)+((r00*x13109))+(((-1.0)*r01*x13111))+(((-1.0)*r02*x13107)));
evalcond[4]=((((-1.0)*x13106*x13107))+((sj1*sj2))+((cj1*cj2))+((r21*x13108))+(((-1.0)*r22*x13110)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r12*x13110))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst32*r10*x13107))+((r11*x13108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13112=IKPowWithIntegerCheck(IKsign((((gconst32*r11))+((gconst31*r10)))),-1);
if(!x13112.valid){
continue;
}
CheckValue<IkReal> x13113 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst32*r20))+(((-1.0)*gconst31*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13112.value)))+(x13113.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13114=IKsin(j4);
IkReal x13115=IKcos(j4);
IkReal x13116=(gconst32*r20);
IkReal x13117=((1.0)*x13115);
IkReal x13118=(gconst31*x13115);
IkReal x13119=(gconst32*x13114);
IkReal x13120=((1.0)*x13114);
IkReal x13121=(gconst31*x13120);
evalcond[0]=((((-1.0)*r21*x13121))+((x13114*x13116))+(((-1.0)*r22*x13117)));
evalcond[1]=((((-1.0)*r12*x13117))+((r10*x13119))+(((-1.0)*r11*x13121)));
evalcond[2]=((((-1.0)*r02*x13120))+(((-1.0)*gconst32*r00*x13117))+((r01*x13118)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x13121))+(((-1.0)*r02*x13117))+((r00*x13119)));
evalcond[4]=(((r21*x13118))+(((-1.0)*x13116*x13117))+((sj1*sj2))+(((-1.0)*r22*x13120))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*gconst32*r10*x13117))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x13120))+((r11*x13118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13122=((-1.0)*r20);
IkReal x13123=x12906;
CheckValue<IkReal> x13125 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13122),IKFAST_ATAN2_MAGTHRESH);
if(!x13125.valid){
continue;
}
IkReal x13124=((-1.0)*(x13125.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x13124;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst30=x13124;
IkReal gconst31=(r21*x13123);
IkReal gconst32=(x13122*x13123);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13126=((-1.0)*r20);
IkReal x13127=x12906;
CheckValue<IkReal> x13129 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13126),IKFAST_ATAN2_MAGTHRESH);
if(!x13129.valid){
continue;
}
IkReal x13128=((-1.0)*(x13129.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x13128;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst30=x13128;
IkReal gconst31=(r21*x13127);
IkReal gconst32=(x13126*x13127);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13130=((-1.0)*r20);
IkReal x13131=x12906;
CheckValue<IkReal> x13133 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13130),IKFAST_ATAN2_MAGTHRESH);
if(!x13133.valid){
continue;
}
IkReal x13132=((-1.0)*(x13133.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x13132;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst30=x13132;
IkReal gconst31=(r21*x13131);
IkReal gconst32=(x13130*x13131);
IkReal x13134=r22*r22;
IkReal x13135=((1.0)*r02);
IkReal x13136=(sj1*sj2);
IkReal x13137=(cj1*cj2);
CheckValue<IkReal> x13141=IKPowWithIntegerCheck(((-1.0)+x13134),-1);
if(!x13141.valid){
continue;
}
IkReal x13138=x13141.value;
if((((1.0)+(((-1.0)*x13134)))) < -0.00001)
continue;
IkReal x13139=IKsqrt(((1.0)+(((-1.0)*x13134))));
IkReal x13140=(r22*x13138*x13139);
j4eval[0]=((IKabs(((((-1.0)*x13135*x13136*x13140))+(((-1.0)*x13135*x13137*x13140)))))+(IKabs(((((-1.0)*x13135*x13136))+(((-1.0)*x13135*x13137))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13142=((1.0)*r02);
IkReal x13143=(sj1*sj2);
IkReal x13144=(cj1*cj2);
IkReal x13145=(gconst32*r00);
IkReal x13146=((1.0)*gconst31*r01);
CheckValue<IkReal> x13147 = IKatan2WithCheck(IkReal(((((-1.0)*x13143*x13146))+(((-1.0)*x13144*x13146))+((x13143*x13145))+((x13144*x13145)))),IkReal(((((-1.0)*x13142*x13144))+(((-1.0)*x13142*x13143)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13147.valid){
continue;
}
CheckValue<IkReal> x13148=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst31*r10))+(((-1.0)*gconst32*r11)))),-1);
if(!x13148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13147.value)+(((1.5707963267949)*(x13148.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13149=IKcos(j4);
IkReal x13150=IKsin(j4);
IkReal x13151=(gconst31*r21);
IkReal x13152=(gconst31*r01);
IkReal x13153=(gconst31*r11);
IkReal x13154=((1.0)*x13149);
IkReal x13155=((1.0)*x13150);
IkReal x13156=(gconst32*x13150);
IkReal x13157=(gconst32*x13149);
evalcond[0]=(((r02*x13150))+(((-1.0)*x13152*x13154))+((r00*x13157)));
evalcond[1]=((((-1.0)*x13151*x13155))+((r20*x13156))+(((-1.0)*r22*x13154)));
evalcond[2]=((((-1.0)*r12*x13154))+((r10*x13156))+(((-1.0)*x13153*x13155)));
evalcond[3]=((-1.0)+(((-1.0)*x13152*x13155))+(((-1.0)*r02*x13154))+((r00*x13156)));
evalcond[4]=((((-1.0)*x13151*x13154))+((r20*x13157))+((sj1*sj2))+((cj1*cj2))+((r22*x13150)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((r12*x13150))+((r10*x13157))+(((-1.0)*x13153*x13154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13158=(gconst32*r00);
IkReal x13159=(gconst31*r01);
CheckValue<IkReal> x13160=IKPowWithIntegerCheck(IKsign(((x13158*x13158)+(r02*r02)+(x13159*x13159)+(((-2.0)*x13158*x13159)))),-1);
if(!x13160.valid){
continue;
}
CheckValue<IkReal> x13161 = IKatan2WithCheck(IkReal((x13158+(((-1.0)*x13159)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13160.value)))+(x13161.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13162=IKcos(j4);
IkReal x13163=IKsin(j4);
IkReal x13164=(gconst31*r21);
IkReal x13165=(gconst31*r01);
IkReal x13166=(gconst31*r11);
IkReal x13167=((1.0)*x13162);
IkReal x13168=((1.0)*x13163);
IkReal x13169=(gconst32*x13163);
IkReal x13170=(gconst32*x13162);
evalcond[0]=(((r00*x13170))+((r02*x13163))+(((-1.0)*x13165*x13167)));
evalcond[1]=(((r20*x13169))+(((-1.0)*x13164*x13168))+(((-1.0)*r22*x13167)));
evalcond[2]=((((-1.0)*r12*x13167))+(((-1.0)*x13166*x13168))+((r10*x13169)));
evalcond[3]=((-1.0)+((r00*x13169))+(((-1.0)*x13165*x13168))+(((-1.0)*r02*x13167)));
evalcond[4]=(((r20*x13170))+((r22*x13163))+((sj1*sj2))+(((-1.0)*x13164*x13167))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x13166*x13167))+((r12*x13163))+((r10*x13170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13171=IKPowWithIntegerCheck(IKsign((((gconst32*r11))+((gconst31*r10)))),-1);
if(!x13171.valid){
continue;
}
CheckValue<IkReal> x13172 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst32*r20))+(((-1.0)*gconst31*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13171.value)))+(x13172.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13173=IKcos(j4);
IkReal x13174=IKsin(j4);
IkReal x13175=(gconst31*r21);
IkReal x13176=(gconst31*r01);
IkReal x13177=(gconst31*r11);
IkReal x13178=((1.0)*x13173);
IkReal x13179=((1.0)*x13174);
IkReal x13180=(gconst32*x13174);
IkReal x13181=(gconst32*x13173);
evalcond[0]=(((r02*x13174))+((r00*x13181))+(((-1.0)*x13176*x13178)));
evalcond[1]=(((r20*x13180))+(((-1.0)*r22*x13178))+(((-1.0)*x13175*x13179)));
evalcond[2]=(((r10*x13180))+(((-1.0)*r12*x13178))+(((-1.0)*x13177*x13179)));
evalcond[3]=((-1.0)+((r00*x13180))+(((-1.0)*r02*x13178))+(((-1.0)*x13176*x13179)));
evalcond[4]=(((sj1*sj2))+((r22*x13174))+((r20*x13181))+(((-1.0)*x13175*x13178))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+((r10*x13181))+(((-1.0)*cj1*sj2))+((r12*x13174))+(((-1.0)*x13177*x13178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13182=((-1.0)*r20);
IkReal x13183=((-1.0)*r21);
CheckValue<IkReal> x13185 = IKatan2WithCheck(IkReal(x13183),IkReal(x13182),IKFAST_ATAN2_MAGTHRESH);
if(!x13185.valid){
continue;
}
IkReal x13184=((-1.0)*(x13185.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x13184;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x13182);
rxp0_2=(py*r00);
rxp1_0=(py*x13183);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst30=x13184;
IkReal gconst31=r21;
IkReal gconst32=x13182;
IkReal x13186=(r01*r21);
IkReal x13187=(r00*r20);
j4eval[0]=((((-1.0)*x13186))+(((-1.0)*x13187)));
j4eval[1]=(((sj3*x13187))+((sj3*x13186)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13188=((-1.0)*r20);
IkReal x13189=((-1.0)*r21);
CheckValue<IkReal> x13191 = IKatan2WithCheck(IkReal(x13189),IkReal(x13188),IKFAST_ATAN2_MAGTHRESH);
if(!x13191.valid){
continue;
}
IkReal x13190=((-1.0)*(x13191.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x13190;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x13188);
rxp0_2=(py*r00);
rxp1_0=(py*x13189);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst30=x13190;
IkReal gconst31=r21;
IkReal gconst32=x13188;
IkReal x13192=(r01*r21);
IkReal x13193=(r00*r20);
j4eval[0]=((((-1.0)*x13193))+(((-1.0)*x13192)));
j4eval[1]=(((cj3*x13192))+((cj3*x13193)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13194=((-1.0)*r20);
IkReal x13195=((-1.0)*r21);
CheckValue<IkReal> x13197 = IKatan2WithCheck(IkReal(x13195),IkReal(x13194),IKFAST_ATAN2_MAGTHRESH);
if(!x13197.valid){
continue;
}
IkReal x13196=((-1.0)*(x13197.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x13196;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x13194);
rxp0_2=(py*r00);
rxp1_0=(py*x13195);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst30=x13196;
IkReal gconst31=r21;
IkReal gconst32=x13194;
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=(((cj3*r01*r21))+((cj3*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13198=((1.0)*r00);
CheckValue<IkReal> x13199=IKPowWithIntegerCheck(r12,-1);
if(!x13199.valid){
continue;
}
CheckValue<IkReal> x13200=IKPowWithIntegerCheck(sj3,-1);
if(!x13200.valid){
continue;
}
CheckValue<IkReal> x13201=IKPowWithIntegerCheck((((cj3*gconst31*r01))+(((-1.0)*cj3*gconst32*x13198))),-1);
if(!x13201.valid){
continue;
}
if( IKabs(((x13199.value)*(x13200.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13201.value)*(((((-1.0)*gconst32*r01*sj3))+(((-1.0)*gconst31*sj3*x13198)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13199.value)*(x13200.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13201.value)*(((((-1.0)*gconst32*r01*sj3))+(((-1.0)*gconst31*sj3*x13198))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13199.value)*(x13200.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13201.value)*(((((-1.0)*gconst32*r01*sj3))+(((-1.0)*gconst31*sj3*x13198))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13202=IKsin(j4);
IkReal x13203=IKcos(j4);
IkReal x13204=(cj2*sj1);
IkReal x13205=(r21*sj3);
IkReal x13206=((1.0)*sj3);
IkReal x13207=(gconst31*sj3);
IkReal x13208=(sj1*sj2);
IkReal x13209=((1.0)*gconst31);
IkReal x13210=((1.0)*cj1);
IkReal x13211=(r01*sj3);
IkReal x13212=(sj2*x13210);
IkReal x13213=(r12*x13202);
IkReal x13214=((1.0)*cj3*gconst32);
IkReal x13215=(gconst31*x13203);
IkReal x13216=(gconst32*x13203);
IkReal x13217=(gconst32*x13202);
evalcond[0]=((-1.0)*r12*x13203);
evalcond[1]=((((-1.0)*r21*x13202*x13209))+((r20*x13217)));
evalcond[2]=((-1.0)+((r00*x13217))+(((-1.0)*r01*x13202*x13209)));
evalcond[3]=((((-1.0)*x13206*x13213))+(((-1.0)*x13212))+x13204);
evalcond[4]=((((-1.0)*cj3*x13213))+(((-1.0)*cj2*x13210))+(((-1.0)*x13208)));
evalcond[5]=(((gconst32*x13211))+(((-1.0)*r00*x13203*x13214))+((r00*x13207))+((cj3*r01*x13215)));
evalcond[6]=(((r01*x13203*x13207))+(((-1.0)*r00*x13206*x13216))+(((-1.0)*r01*x13214))+(((-1.0)*cj3*r00*x13209)));
evalcond[7]=(((gconst32*x13205))+(((-1.0)*x13212))+(((-1.0)*r20*x13203*x13214))+((cj3*r21*x13215))+x13204+((r20*x13207)));
evalcond[8]=((((-1.0)*cj3*r20*x13209))+((x13205*x13215))+((cj1*cj2))+(((-1.0)*r20*x13206*x13216))+x13208+(((-1.0)*r21*x13214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13218=(gconst32*r00);
IkReal x13219=((1.0)*gconst31);
CheckValue<IkReal> x13220=IKPowWithIntegerCheck((x13218+(((-1.0)*r01*x13219))),-1);
if(!x13220.valid){
continue;
}
CheckValue<IkReal> x13221=IKPowWithIntegerCheck(((((-1.0)*cj3*x13218))+((cj3*gconst31*r01))),-1);
if(!x13221.valid){
continue;
}
if( IKabs(x13220.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13221.value)*(((((-1.0)*gconst32*r01*sj3))+(((-1.0)*r00*sj3*x13219)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13220.value)+IKsqr(((x13221.value)*(((((-1.0)*gconst32*r01*sj3))+(((-1.0)*r00*sj3*x13219))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13220.value, ((x13221.value)*(((((-1.0)*gconst32*r01*sj3))+(((-1.0)*r00*sj3*x13219))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13222=IKsin(j4);
IkReal x13223=IKcos(j4);
IkReal x13224=(cj2*sj1);
IkReal x13225=(r21*sj3);
IkReal x13226=((1.0)*sj3);
IkReal x13227=(gconst31*sj3);
IkReal x13228=(sj1*sj2);
IkReal x13229=((1.0)*gconst31);
IkReal x13230=((1.0)*cj1);
IkReal x13231=(r01*sj3);
IkReal x13232=(sj2*x13230);
IkReal x13233=(r12*x13222);
IkReal x13234=((1.0)*cj3*gconst32);
IkReal x13235=(gconst31*x13223);
IkReal x13236=(gconst32*x13223);
IkReal x13237=(gconst32*x13222);
evalcond[0]=((-1.0)*r12*x13223);
evalcond[1]=(((r20*x13237))+(((-1.0)*r21*x13222*x13229)));
evalcond[2]=((-1.0)+(((-1.0)*r01*x13222*x13229))+((r00*x13237)));
evalcond[3]=((((-1.0)*x13226*x13233))+x13224+(((-1.0)*x13232)));
evalcond[4]=((((-1.0)*cj3*x13233))+(((-1.0)*x13228))+(((-1.0)*cj2*x13230)));
evalcond[5]=(((cj3*r01*x13235))+(((-1.0)*r00*x13223*x13234))+((r00*x13227))+((gconst32*x13231)));
evalcond[6]=((((-1.0)*r00*x13226*x13236))+(((-1.0)*r01*x13234))+(((-1.0)*cj3*r00*x13229))+((r01*x13223*x13227)));
evalcond[7]=(((cj3*r21*x13235))+((gconst32*x13225))+(((-1.0)*r20*x13223*x13234))+x13224+((r20*x13227))+(((-1.0)*x13232)));
evalcond[8]=((((-1.0)*r20*x13226*x13236))+((x13225*x13235))+(((-1.0)*r21*x13234))+((cj1*cj2))+(((-1.0)*cj3*r20*x13229))+x13228);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13238=(gconst32*r00);
IkReal x13239=(gconst31*r01);
CheckValue<IkReal> x13240=IKPowWithIntegerCheck((x13238+(((-1.0)*x13239))),-1);
if(!x13240.valid){
continue;
}
CheckValue<IkReal> x13241=IKPowWithIntegerCheck(((((-1.0)*sj3*x13238))+((sj3*x13239))),-1);
if(!x13241.valid){
continue;
}
if( IKabs(x13240.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13241.value)*((((cj3*gconst31*r00))+((cj3*gconst32*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13240.value)+IKsqr(((x13241.value)*((((cj3*gconst31*r00))+((cj3*gconst32*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13240.value, ((x13241.value)*((((cj3*gconst31*r00))+((cj3*gconst32*r01))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13242=IKsin(j4);
IkReal x13243=IKcos(j4);
IkReal x13244=(cj2*sj1);
IkReal x13245=(r21*sj3);
IkReal x13246=((1.0)*sj3);
IkReal x13247=(gconst31*sj3);
IkReal x13248=(sj1*sj2);
IkReal x13249=((1.0)*gconst31);
IkReal x13250=((1.0)*cj1);
IkReal x13251=(r01*sj3);
IkReal x13252=(sj2*x13250);
IkReal x13253=(r12*x13242);
IkReal x13254=((1.0)*cj3*gconst32);
IkReal x13255=(gconst31*x13243);
IkReal x13256=(gconst32*x13243);
IkReal x13257=(gconst32*x13242);
evalcond[0]=((-1.0)*r12*x13243);
evalcond[1]=((((-1.0)*r21*x13242*x13249))+((r20*x13257)));
evalcond[2]=((-1.0)+(((-1.0)*r01*x13242*x13249))+((r00*x13257)));
evalcond[3]=((((-1.0)*x13246*x13253))+(((-1.0)*x13252))+x13244);
evalcond[4]=((((-1.0)*cj3*x13253))+(((-1.0)*x13248))+(((-1.0)*cj2*x13250)));
evalcond[5]=(((gconst32*x13251))+((r00*x13247))+(((-1.0)*r00*x13243*x13254))+((cj3*r01*x13255)));
evalcond[6]=((((-1.0)*cj3*r00*x13249))+((r01*x13243*x13247))+(((-1.0)*r00*x13246*x13256))+(((-1.0)*r01*x13254)));
evalcond[7]=((((-1.0)*r20*x13243*x13254))+((cj3*r21*x13255))+((gconst32*x13245))+(((-1.0)*x13252))+x13244+((r20*x13247)));
evalcond[8]=((((-1.0)*r20*x13246*x13256))+((x13245*x13255))+((cj1*cj2))+x13248+(((-1.0)*r21*x13254))+(((-1.0)*cj3*r20*x13249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13258=gconst32*gconst32;
IkReal x13259=gconst31*gconst31;
IkReal x13260=(gconst31*r00);
IkReal x13261=(gconst32*r01);
IkReal x13262=((1.0)*cj3);
IkReal x13263=(cj3*r11);
IkReal x13264=((1.0)*sj3);
IkReal x13265=(r12*x13262);
IkReal x13266=(r10*x13258);
CheckValue<IkReal> x13267 = IKatan2WithCheck(IkReal(((((-1.0)*x13261*x13265))+(((-1.0)*x13260*x13265)))),IkReal(((((-1.0)*r01*x13262*x13266))+((r00*x13259*x13263))+(((-1.0)*gconst32*r10*x13260*x13262))+((gconst31*x13261*x13263)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13267.valid){
continue;
}
CheckValue<IkReal> x13268=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst32*r11*x13260*x13264))+((r02*r12*sj3))+(((-1.0)*gconst31*r10*x13261*x13264))+((r00*sj3*x13266))+((r01*r11*sj3*x13259)))),-1);
if(!x13268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13267.value)+(((1.5707963267949)*(x13268.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13269=IKsin(j4);
IkReal x13270=IKcos(j4);
IkReal x13271=(cj2*sj1);
IkReal x13272=(r21*sj3);
IkReal x13273=(cj3*gconst32);
IkReal x13274=((1.0)*r01);
IkReal x13275=(gconst32*sj3);
IkReal x13276=(gconst31*r00);
IkReal x13277=(sj1*sj2);
IkReal x13278=((1.0)*cj1);
IkReal x13279=((1.0)*cj3);
IkReal x13280=(gconst31*r10);
IkReal x13281=(gconst31*r20);
IkReal x13282=(sj2*x13278);
IkReal x13283=((1.0)*x13270);
IkReal x13284=(gconst31*x13270);
IkReal x13285=((1.0)*x13269);
IkReal x13286=(gconst32*x13269);
evalcond[0]=((((-1.0)*r22*x13283))+((r20*x13286))+(((-1.0)*gconst31*r21*x13285)));
evalcond[1]=(((r10*x13286))+(((-1.0)*gconst31*r11*x13285))+(((-1.0)*r12*x13283)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x13283))+(((-1.0)*gconst31*x13269*x13274))+((r00*x13286)));
evalcond[3]=(((r01*x13275))+((sj3*x13276))+((cj3*r01*x13284))+(((-1.0)*r02*x13269*x13279))+(((-1.0)*r00*x13273*x13283)));
evalcond[4]=(((r01*sj3*x13284))+(((-1.0)*x13273*x13274))+(((-1.0)*r00*x13275*x13283))+(((-1.0)*x13276*x13279))+(((-1.0)*r02*sj3*x13285)));
evalcond[5]=((((-1.0)*r20*x13273*x13283))+((gconst32*x13272))+((sj3*x13281))+((cj3*r21*x13284))+(((-1.0)*r22*x13269*x13279))+x13271+(((-1.0)*x13282)));
evalcond[6]=(((x13272*x13284))+(((-1.0)*r22*sj3*x13285))+(((-1.0)*r20*x13275*x13283))+(((-1.0)*r21*x13273))+((cj1*cj2))+(((-1.0)*x13279*x13281))+x13277);
evalcond[7]=(((r11*x13275))+(((-1.0)*x13277))+((sj3*x13280))+(((-1.0)*cj2*x13278))+(((-1.0)*r12*x13269*x13279))+(((-1.0)*r10*x13273*x13283))+((cj3*r11*x13284)));
evalcond[8]=(((r11*sj3*x13284))+(((-1.0)*r11*x13273))+(((-1.0)*r10*x13275*x13283))+(((-1.0)*r12*sj3*x13285))+(((-1.0)*x13279*x13280))+x13271+(((-1.0)*x13282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13287=gconst31*gconst31;
IkReal x13288=gconst32*gconst32;
IkReal x13289=((1.0)*r11);
IkReal x13290=(r00*sj3);
IkReal x13291=(gconst31*gconst32);
IkReal x13292=(cj3*r01);
IkReal x13293=(cj3*r00);
IkReal x13294=(gconst32*r01*sj3);
IkReal x13295=(r10*x13288);
CheckValue<IkReal> x13296 = IKatan2WithCheck(IkReal((((r12*x13294))+((gconst31*r12*x13290)))),IkReal((((r01*sj3*x13295))+(((-1.0)*r01*sj3*x13289*x13291))+((r10*x13290*x13291))+(((-1.0)*x13287*x13289*x13290)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13296.valid){
continue;
}
CheckValue<IkReal> x13297=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+((r11*x13287*x13292))+(((-1.0)*r10*x13291*x13292))+((x13293*x13295))+(((-1.0)*x13289*x13291*x13293)))),-1);
if(!x13297.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13296.value)+(((1.5707963267949)*(x13297.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13298=IKsin(j4);
IkReal x13299=IKcos(j4);
IkReal x13300=(cj2*sj1);
IkReal x13301=(r21*sj3);
IkReal x13302=(cj3*gconst32);
IkReal x13303=((1.0)*r01);
IkReal x13304=(gconst32*sj3);
IkReal x13305=(gconst31*r00);
IkReal x13306=(sj1*sj2);
IkReal x13307=((1.0)*cj1);
IkReal x13308=((1.0)*cj3);
IkReal x13309=(gconst31*r10);
IkReal x13310=(gconst31*r20);
IkReal x13311=(sj2*x13307);
IkReal x13312=((1.0)*x13299);
IkReal x13313=(gconst31*x13299);
IkReal x13314=((1.0)*x13298);
IkReal x13315=(gconst32*x13298);
evalcond[0]=(((r20*x13315))+(((-1.0)*gconst31*r21*x13314))+(((-1.0)*r22*x13312)));
evalcond[1]=(((r10*x13315))+(((-1.0)*gconst31*r11*x13314))+(((-1.0)*r12*x13312)));
evalcond[2]=((-1.0)+(((-1.0)*gconst31*x13298*x13303))+((r00*x13315))+(((-1.0)*r02*x13312)));
evalcond[3]=((((-1.0)*r00*x13302*x13312))+((sj3*x13305))+(((-1.0)*r02*x13298*x13308))+((r01*x13304))+((cj3*r01*x13313)));
evalcond[4]=((((-1.0)*x13302*x13303))+(((-1.0)*r02*sj3*x13314))+((r01*sj3*x13313))+(((-1.0)*r00*x13304*x13312))+(((-1.0)*x13305*x13308)));
evalcond[5]=(((gconst32*x13301))+(((-1.0)*r22*x13298*x13308))+((cj3*r21*x13313))+((sj3*x13310))+(((-1.0)*r20*x13302*x13312))+(((-1.0)*x13311))+x13300);
evalcond[6]=((((-1.0)*r22*sj3*x13314))+(((-1.0)*r20*x13304*x13312))+(((-1.0)*x13308*x13310))+(((-1.0)*r21*x13302))+((x13301*x13313))+((cj1*cj2))+x13306);
evalcond[7]=(((cj3*r11*x13313))+(((-1.0)*r10*x13302*x13312))+((sj3*x13309))+(((-1.0)*cj2*x13307))+(((-1.0)*r12*x13298*x13308))+((r11*x13304))+(((-1.0)*x13306)));
evalcond[8]=(((r11*sj3*x13313))+(((-1.0)*r11*x13302))+(((-1.0)*x13311))+(((-1.0)*r10*x13304*x13312))+x13300+(((-1.0)*r12*sj3*x13314))+(((-1.0)*x13308*x13309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13316=IKPowWithIntegerCheck(IKsign((((gconst32*r11))+((gconst31*r10)))),-1);
if(!x13316.valid){
continue;
}
CheckValue<IkReal> x13317 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst32*r20))+(((-1.0)*gconst31*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13317.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13316.value)))+(x13317.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13318=IKsin(j4);
IkReal x13319=IKcos(j4);
IkReal x13320=(cj2*sj1);
IkReal x13321=(r21*sj3);
IkReal x13322=(cj3*gconst32);
IkReal x13323=((1.0)*r01);
IkReal x13324=(gconst32*sj3);
IkReal x13325=(gconst31*r00);
IkReal x13326=(sj1*sj2);
IkReal x13327=((1.0)*cj1);
IkReal x13328=((1.0)*cj3);
IkReal x13329=(gconst31*r10);
IkReal x13330=(gconst31*r20);
IkReal x13331=(sj2*x13327);
IkReal x13332=((1.0)*x13319);
IkReal x13333=(gconst31*x13319);
IkReal x13334=((1.0)*x13318);
IkReal x13335=(gconst32*x13318);
evalcond[0]=((((-1.0)*r22*x13332))+((r20*x13335))+(((-1.0)*gconst31*r21*x13334)));
evalcond[1]=(((r10*x13335))+(((-1.0)*r12*x13332))+(((-1.0)*gconst31*r11*x13334)));
evalcond[2]=((-1.0)+((r00*x13335))+(((-1.0)*gconst31*x13318*x13323))+(((-1.0)*r02*x13332)));
evalcond[3]=(((sj3*x13325))+(((-1.0)*r02*x13318*x13328))+((r01*x13324))+(((-1.0)*r00*x13322*x13332))+((cj3*r01*x13333)));
evalcond[4]=(((r01*sj3*x13333))+(((-1.0)*r02*sj3*x13334))+(((-1.0)*x13322*x13323))+(((-1.0)*x13325*x13328))+(((-1.0)*r00*x13324*x13332)));
evalcond[5]=((((-1.0)*x13331))+(((-1.0)*r20*x13322*x13332))+((cj3*r21*x13333))+((gconst32*x13321))+((sj3*x13330))+(((-1.0)*r22*x13318*x13328))+x13320);
evalcond[6]=(((x13321*x13333))+(((-1.0)*r21*x13322))+((cj1*cj2))+(((-1.0)*r22*sj3*x13334))+(((-1.0)*x13328*x13330))+(((-1.0)*r20*x13324*x13332))+x13326);
evalcond[7]=((((-1.0)*x13326))+((cj3*r11*x13333))+(((-1.0)*cj2*x13327))+((sj3*x13329))+(((-1.0)*r12*x13318*x13328))+((r11*x13324))+(((-1.0)*r10*x13322*x13332)));
evalcond[8]=((((-1.0)*x13331))+((r11*sj3*x13333))+(((-1.0)*r10*x13324*x13332))+(((-1.0)*x13328*x13329))+(((-1.0)*r12*sj3*x13334))+(((-1.0)*r11*x13322))+x13320);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13336=((-1.0)*r21);
IkReal x13338 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13338)==0){
continue;
}
IkReal x13337=pow(x13338,-0.5);
CheckValue<IkReal> x13339 = IKatan2WithCheck(IkReal(x13336),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13339.valid){
continue;
}
IkReal gconst33=((3.14159265358979)+(((-1.0)*(x13339.value))));
IkReal gconst34=(x13336*x13337);
IkReal gconst35=((1.0)*r20*x13337);
CheckValue<IkReal> x13340 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13340.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13340.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13341=((-1.0)*r21);
CheckValue<IkReal> x13344 = IKatan2WithCheck(IkReal(x13341),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13344.valid){
continue;
}
IkReal x13342=((1.0)*(x13344.value));
IkReal x13343=x13337;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13342)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13342)));
IkReal gconst34=(x13341*x13343);
IkReal gconst35=((1.0)*r20*x13343);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13345=((-1.0)*r21);
CheckValue<IkReal> x13348 = IKatan2WithCheck(IkReal(x13345),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13348.valid){
continue;
}
IkReal x13346=((1.0)*(x13348.value));
IkReal x13347=x13337;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13346)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13346)));
IkReal gconst34=(x13345*x13347);
IkReal gconst35=((1.0)*r20*x13347);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13349=((-1.0)*r21);
CheckValue<IkReal> x13352 = IKatan2WithCheck(IkReal(x13349),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13352.valid){
continue;
}
IkReal x13350=((1.0)*(x13352.value));
IkReal x13351=x13337;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13350)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13350)));
IkReal gconst34=(x13349*x13351);
IkReal gconst35=((1.0)*r20*x13351);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13353=((-1.0)*r21);
CheckValue<IkReal> x13356 = IKatan2WithCheck(IkReal(x13353),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13356.valid){
continue;
}
IkReal x13354=((1.0)*(x13356.value));
IkReal x13355=x13337;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13354)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13354)));
IkReal gconst34=(x13353*x13355);
IkReal gconst35=((1.0)*r20*x13355);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13357=((-1.0)*r21);
CheckValue<IkReal> x13360 = IKatan2WithCheck(IkReal(x13357),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13360.valid){
continue;
}
IkReal x13358=((1.0)*(x13360.value));
IkReal x13359=x13337;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13358)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13358)));
IkReal gconst34=(x13357*x13359);
IkReal gconst35=((1.0)*r20*x13359);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13361=((-1.0)*r21);
CheckValue<IkReal> x13364 = IKatan2WithCheck(IkReal(x13361),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13364.valid){
continue;
}
IkReal x13362=((1.0)*(x13364.value));
IkReal x13363=x13337;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13362)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13362)));
IkReal gconst34=(x13361*x13363);
IkReal gconst35=((1.0)*r20*x13363);
IkReal x13365=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13369=IKPowWithIntegerCheck(x13365,-1);
if(!x13369.valid){
continue;
}
IkReal x13366=x13369.value;
IkReal x13367=((1.0)*x13366);
IkReal x13368=((((-2.0)*r00*r01*r20*r21*x13366))+(((-1.0)*(r02*r02)))+(((-1.0)*x13367*(r01*r01)*(r21*r21)))+(((-1.0)*x13367*(r00*r00)*(r20*r20))));
j4eval[0]=x13368;
j4eval[1]=r02;
j4eval[2]=x13365;
j4eval[3]=IKsign(x13368);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13370=(gconst35*r00);
IkReal x13371=(gconst34*r01);
CheckValue<IkReal> x13372=IKPowWithIntegerCheck(IKsign(((((2.0)*x13370*x13371))+(((-1.0)*(r02*r02)))+(((-1.0)*(x13371*x13371)))+(((-1.0)*(x13370*x13370))))),-1);
if(!x13372.valid){
continue;
}
CheckValue<IkReal> x13373 = IKatan2WithCheck(IkReal((x13371+(((-1.0)*x13370)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x13373.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13372.value)))+(x13373.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13374=IKsin(j4);
IkReal x13375=IKcos(j4);
IkReal x13376=(gconst35*r10);
IkReal x13377=(gconst34*r01);
IkReal x13378=((1.0)*x13375);
IkReal x13379=(gconst35*x13374);
IkReal x13380=((1.0)*x13374);
IkReal x13381=(gconst34*x13375);
evalcond[0]=((((-1.0)*r22*x13378))+((r20*x13379))+(((-1.0)*gconst34*r21*x13380)));
evalcond[1]=(((x13374*x13376))+(((-1.0)*gconst34*r11*x13380))+(((-1.0)*r12*x13378)));
evalcond[2]=((((-1.0)*gconst35*r00*x13378))+(((-1.0)*r02*x13380))+((x13375*x13377)));
evalcond[3]=((-1.0)+((r00*x13379))+(((-1.0)*r02*x13378))+(((-1.0)*x13377*x13380)));
evalcond[4]=((((-1.0)*r22*x13380))+(((-1.0)*gconst35*r20*x13378))+((sj1*sj2))+((cj1*cj2))+((r21*x13381)));
evalcond[5]=((((-1.0)*x13376*x13378))+((cj2*sj1))+((r11*x13381))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x13380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13382=((1.0)*gconst34);
CheckValue<IkReal> x13383 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst35*r10))+(((-1.0)*r11*x13382)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13383.valid){
continue;
}
CheckValue<IkReal> x13384=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*r21))+(((-1.0)*r20*x13382)))),-1);
if(!x13384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13383.value)+(((1.5707963267949)*(x13384.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13385=IKsin(j4);
IkReal x13386=IKcos(j4);
IkReal x13387=(gconst35*r10);
IkReal x13388=(gconst34*r01);
IkReal x13389=((1.0)*x13386);
IkReal x13390=(gconst35*x13385);
IkReal x13391=((1.0)*x13385);
IkReal x13392=(gconst34*x13386);
evalcond[0]=((((-1.0)*r22*x13389))+((r20*x13390))+(((-1.0)*gconst34*r21*x13391)));
evalcond[1]=(((x13385*x13387))+(((-1.0)*gconst34*r11*x13391))+(((-1.0)*r12*x13389)));
evalcond[2]=(((x13386*x13388))+(((-1.0)*gconst35*r00*x13389))+(((-1.0)*r02*x13391)));
evalcond[3]=((-1.0)+((r00*x13390))+(((-1.0)*x13388*x13391))+(((-1.0)*r02*x13389)));
evalcond[4]=(((r21*x13392))+(((-1.0)*r22*x13391))+((sj1*sj2))+(((-1.0)*gconst35*r20*x13389))+((cj1*cj2)));
evalcond[5]=(((r11*x13392))+((cj2*sj1))+(((-1.0)*x13387*x13389))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x13391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13393=IKPowWithIntegerCheck(IKsign((((gconst35*r11))+((gconst34*r10)))),-1);
if(!x13393.valid){
continue;
}
CheckValue<IkReal> x13394 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst34*r21))+((gconst35*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13393.value)))+(x13394.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13395=IKsin(j4);
IkReal x13396=IKcos(j4);
IkReal x13397=(gconst35*r10);
IkReal x13398=(gconst34*r01);
IkReal x13399=((1.0)*x13396);
IkReal x13400=(gconst35*x13395);
IkReal x13401=((1.0)*x13395);
IkReal x13402=(gconst34*x13396);
evalcond[0]=((((-1.0)*r22*x13399))+(((-1.0)*gconst34*r21*x13401))+((r20*x13400)));
evalcond[1]=((((-1.0)*gconst34*r11*x13401))+(((-1.0)*r12*x13399))+((x13395*x13397)));
evalcond[2]=((((-1.0)*r02*x13401))+(((-1.0)*gconst35*r00*x13399))+((x13396*x13398)));
evalcond[3]=((-1.0)+((r00*x13400))+(((-1.0)*r02*x13399))+(((-1.0)*x13398*x13401)));
evalcond[4]=(((r21*x13402))+((sj1*sj2))+(((-1.0)*gconst35*r20*x13399))+((cj1*cj2))+(((-1.0)*r22*x13401)));
evalcond[5]=(((cj2*sj1))+((r11*x13402))+(((-1.0)*cj1*sj2))+(((-1.0)*x13397*x13399))+(((-1.0)*r12*x13401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13403=((-1.0)*r21);
CheckValue<IkReal> x13406 = IKatan2WithCheck(IkReal(x13403),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13406.valid){
continue;
}
IkReal x13404=((1.0)*(x13406.value));
IkReal x13405=x13337;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13404)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13404)));
IkReal gconst34=(x13403*x13405);
IkReal gconst35=((1.0)*r20*x13405);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13407=((-1.0)*r21);
CheckValue<IkReal> x13410 = IKatan2WithCheck(IkReal(x13407),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13410.valid){
continue;
}
IkReal x13408=((1.0)*(x13410.value));
IkReal x13409=x13337;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13408)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13408)));
IkReal gconst34=(x13407*x13409);
IkReal gconst35=((1.0)*r20*x13409);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13411=((-1.0)*r21);
CheckValue<IkReal> x13414 = IKatan2WithCheck(IkReal(x13411),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13414.valid){
continue;
}
IkReal x13412=((1.0)*(x13414.value));
IkReal x13413=x13337;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13412)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13412)));
IkReal gconst34=(x13411*x13413);
IkReal gconst35=((1.0)*r20*x13413);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13415=(gconst34*r01);
IkReal x13416=(gconst35*r00);
CheckValue<IkReal> x13417 = IKatan2WithCheck(IkReal((x13416+(((-1.0)*x13415)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13417.valid){
continue;
}
CheckValue<IkReal> x13418=IKPowWithIntegerCheck(IKsign(((((-2.0)*x13415*x13416))+(x13415*x13415)+(x13416*x13416)+(r02*r02))),-1);
if(!x13418.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13417.value)+(((1.5707963267949)*(x13418.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13419=IKcos(j4);
IkReal x13420=IKsin(j4);
IkReal x13421=(gconst34*r11);
IkReal x13422=(gconst34*r01);
IkReal x13423=(gconst34*r21);
IkReal x13424=((1.0)*x13419);
IkReal x13425=(gconst35*x13420);
IkReal x13426=((1.0)*x13420);
IkReal x13427=(gconst35*x13419);
evalcond[0]=((((-1.0)*x13422*x13424))+((r02*x13420))+((r00*x13427)));
evalcond[1]=((((-1.0)*x13423*x13426))+(((-1.0)*r22*x13424))+((r20*x13425)));
evalcond[2]=((((-1.0)*x13421*x13426))+(((-1.0)*r12*x13424))+((r10*x13425)));
evalcond[3]=((-1.0)+(((-1.0)*x13422*x13426))+(((-1.0)*r02*x13424))+((r00*x13425)));
evalcond[4]=((((-1.0)*x13423*x13424))+((sj1*sj2))+((r22*x13420))+((cj1*cj2))+((r20*x13427)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*x13421*x13424))+(((-1.0)*cj1*sj2))+((r12*x13420))+((r10*x13427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13428=((1.0)*gconst34);
CheckValue<IkReal> x13429 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst35*r10))+(((-1.0)*r11*x13428)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13429.valid){
continue;
}
CheckValue<IkReal> x13430=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*r21))+(((-1.0)*r20*x13428)))),-1);
if(!x13430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13429.value)+(((1.5707963267949)*(x13430.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13431=IKcos(j4);
IkReal x13432=IKsin(j4);
IkReal x13433=(gconst34*r11);
IkReal x13434=(gconst34*r01);
IkReal x13435=(gconst34*r21);
IkReal x13436=((1.0)*x13431);
IkReal x13437=(gconst35*x13432);
IkReal x13438=((1.0)*x13432);
IkReal x13439=(gconst35*x13431);
evalcond[0]=((((-1.0)*x13434*x13436))+((r02*x13432))+((r00*x13439)));
evalcond[1]=((((-1.0)*r22*x13436))+((r20*x13437))+(((-1.0)*x13435*x13438)));
evalcond[2]=((((-1.0)*r12*x13436))+(((-1.0)*x13433*x13438))+((r10*x13437)));
evalcond[3]=((-1.0)+(((-1.0)*x13434*x13438))+(((-1.0)*r02*x13436))+((r00*x13437)));
evalcond[4]=(((r22*x13432))+((sj1*sj2))+((cj1*cj2))+((r20*x13439))+(((-1.0)*x13435*x13436)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x13433*x13436))+((r12*x13432))+((r10*x13439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13440=IKPowWithIntegerCheck(IKsign((((gconst35*r11))+((gconst34*r10)))),-1);
if(!x13440.valid){
continue;
}
CheckValue<IkReal> x13441 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst34*r21))+((gconst35*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13441.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13440.value)))+(x13441.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13442=IKcos(j4);
IkReal x13443=IKsin(j4);
IkReal x13444=(gconst34*r11);
IkReal x13445=(gconst34*r01);
IkReal x13446=(gconst34*r21);
IkReal x13447=((1.0)*x13442);
IkReal x13448=(gconst35*x13443);
IkReal x13449=((1.0)*x13443);
IkReal x13450=(gconst35*x13442);
evalcond[0]=(((r02*x13443))+(((-1.0)*x13445*x13447))+((r00*x13450)));
evalcond[1]=((((-1.0)*r22*x13447))+((r20*x13448))+(((-1.0)*x13446*x13449)));
evalcond[2]=((((-1.0)*r12*x13447))+((r10*x13448))+(((-1.0)*x13444*x13449)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x13447))+((r00*x13448))+(((-1.0)*x13445*x13449)));
evalcond[4]=(((r22*x13443))+((r20*x13450))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*x13446*x13447)));
evalcond[5]=(((cj2*sj1))+((r10*x13450))+(((-1.0)*cj1*sj2))+((r12*x13443))+(((-1.0)*x13444*x13447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13451=((-1.0)*r21);
CheckValue<IkReal> x13454 = IKatan2WithCheck(IkReal(x13451),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13454.valid){
continue;
}
IkReal x13452=((1.0)*(x13454.value));
IkReal x13453=x13337;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13452)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13452)));
IkReal gconst34=(x13451*x13453);
IkReal gconst35=((1.0)*r20*x13453);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13455=((-1.0)*r21);
CheckValue<IkReal> x13458 = IKatan2WithCheck(IkReal(x13455),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13458.valid){
continue;
}
IkReal x13456=((1.0)*(x13458.value));
IkReal x13457=x13337;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13456)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13456)));
IkReal gconst34=(x13455*x13457);
IkReal gconst35=((1.0)*r20*x13457);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13459=((-1.0)*r21);
CheckValue<IkReal> x13462 = IKatan2WithCheck(IkReal(x13459),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13462.valid){
continue;
}
IkReal x13460=((1.0)*(x13462.value));
IkReal x13461=x13337;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13460)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13460)));
IkReal gconst34=(x13459*x13461);
IkReal gconst35=((1.0)*r20*x13461);
IkReal x13463=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13467=IKPowWithIntegerCheck(x13463,-1);
if(!x13467.valid){
continue;
}
IkReal x13464=x13467.value;
IkReal x13465=((1.0)*x13464);
IkReal x13466=((((-1.0)*x13465*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x13465*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x13464)));
j4eval[0]=x13466;
j4eval[1]=r02;
j4eval[2]=x13463;
j4eval[3]=IKsign(x13466);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13468=(gconst35*r00);
IkReal x13469=(gconst34*r01);
CheckValue<IkReal> x13470=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13468*x13468)))+(((-1.0)*(r02*r02)))+(((2.0)*x13468*x13469))+(((-1.0)*(x13469*x13469))))),-1);
if(!x13470.valid){
continue;
}
CheckValue<IkReal> x13471 = IKatan2WithCheck(IkReal((x13469+(((-1.0)*x13468)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x13471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13470.value)))+(x13471.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13472=IKsin(j4);
IkReal x13473=IKcos(j4);
IkReal x13474=(gconst35*r10);
IkReal x13475=(gconst34*r01);
IkReal x13476=((1.0)*cj1);
IkReal x13477=((1.0)*x13473);
IkReal x13478=(gconst35*x13472);
IkReal x13479=((1.0)*x13472);
IkReal x13480=(gconst34*x13473);
evalcond[0]=((((-1.0)*gconst34*r21*x13479))+((r20*x13478))+(((-1.0)*r22*x13477)));
evalcond[1]=(((x13472*x13474))+(((-1.0)*gconst34*r11*x13479))+(((-1.0)*r12*x13477)));
evalcond[2]=((((-1.0)*r02*x13479))+((x13473*x13475))+(((-1.0)*gconst35*r00*x13477)));
evalcond[3]=((-1.0)+((r00*x13478))+(((-1.0)*r02*x13477))+(((-1.0)*x13475*x13479)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst35*r20*x13477))+(((-1.0)*sj2*x13476))+(((-1.0)*r22*x13479))+((r21*x13480)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x13474*x13477))+(((-1.0)*r12*x13479))+((r11*x13480))+(((-1.0)*cj2*x13476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13481=((1.0)*gconst34);
CheckValue<IkReal> x13482 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x13481))+((gconst35*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13482.valid){
continue;
}
CheckValue<IkReal> x13483=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*r21))+(((-1.0)*r20*x13481)))),-1);
if(!x13483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13482.value)+(((1.5707963267949)*(x13483.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13484=IKsin(j4);
IkReal x13485=IKcos(j4);
IkReal x13486=(gconst35*r10);
IkReal x13487=(gconst34*r01);
IkReal x13488=((1.0)*cj1);
IkReal x13489=((1.0)*x13485);
IkReal x13490=(gconst35*x13484);
IkReal x13491=((1.0)*x13484);
IkReal x13492=(gconst34*x13485);
evalcond[0]=((((-1.0)*r22*x13489))+((r20*x13490))+(((-1.0)*gconst34*r21*x13491)));
evalcond[1]=((((-1.0)*r12*x13489))+((x13484*x13486))+(((-1.0)*gconst34*r11*x13491)));
evalcond[2]=((((-1.0)*r02*x13491))+(((-1.0)*gconst35*r00*x13489))+((x13485*x13487)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x13489))+((r00*x13490))+(((-1.0)*x13487*x13491)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x13491))+(((-1.0)*gconst35*r20*x13489))+((r21*x13492))+(((-1.0)*sj2*x13488)));
evalcond[5]=((((-1.0)*r12*x13491))+(((-1.0)*sj1*sj2))+(((-1.0)*x13486*x13489))+(((-1.0)*cj2*x13488))+((r11*x13492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13493=IKPowWithIntegerCheck(IKsign((((gconst35*r11))+((gconst34*r10)))),-1);
if(!x13493.valid){
continue;
}
CheckValue<IkReal> x13494 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst34*r21))+((gconst35*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13493.value)))+(x13494.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13495=IKsin(j4);
IkReal x13496=IKcos(j4);
IkReal x13497=(gconst35*r10);
IkReal x13498=(gconst34*r01);
IkReal x13499=((1.0)*cj1);
IkReal x13500=((1.0)*x13496);
IkReal x13501=(gconst35*x13495);
IkReal x13502=((1.0)*x13495);
IkReal x13503=(gconst34*x13496);
evalcond[0]=(((r20*x13501))+(((-1.0)*gconst34*r21*x13502))+(((-1.0)*r22*x13500)));
evalcond[1]=((((-1.0)*r12*x13500))+(((-1.0)*gconst34*r11*x13502))+((x13495*x13497)));
evalcond[2]=((((-1.0)*gconst35*r00*x13500))+((x13496*x13498))+(((-1.0)*r02*x13502)));
evalcond[3]=((-1.0)+(((-1.0)*x13498*x13502))+(((-1.0)*r02*x13500))+((r00*x13501)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*sj2*x13499))+(((-1.0)*gconst35*r20*x13500))+((r21*x13503))+(((-1.0)*r22*x13502)));
evalcond[5]=((((-1.0)*r12*x13502))+(((-1.0)*cj2*x13499))+(((-1.0)*sj1*sj2))+(((-1.0)*x13497*x13500))+((r11*x13503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13504=((-1.0)*r21);
CheckValue<IkReal> x13507 = IKatan2WithCheck(IkReal(x13504),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13507.valid){
continue;
}
IkReal x13505=((1.0)*(x13507.value));
IkReal x13506=x13337;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13505)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13505)));
IkReal gconst34=(x13504*x13506);
IkReal gconst35=((1.0)*r20*x13506);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13508=((-1.0)*r21);
CheckValue<IkReal> x13511 = IKatan2WithCheck(IkReal(x13508),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13511.valid){
continue;
}
IkReal x13509=((1.0)*(x13511.value));
IkReal x13510=x13337;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13509)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13509)));
IkReal gconst34=(x13508*x13510);
IkReal gconst35=((1.0)*r20*x13510);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13512=((-1.0)*r21);
CheckValue<IkReal> x13515 = IKatan2WithCheck(IkReal(x13512),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13515.valid){
continue;
}
IkReal x13513=((1.0)*(x13515.value));
IkReal x13514=x13337;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13513)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13513)));
IkReal gconst34=(x13512*x13514);
IkReal gconst35=((1.0)*r20*x13514);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13516=(gconst34*r01);
IkReal x13517=(gconst35*r00);
CheckValue<IkReal> x13518=IKPowWithIntegerCheck(IKsign(((x13517*x13517)+(((-2.0)*x13516*x13517))+(r02*r02)+(x13516*x13516))),-1);
if(!x13518.valid){
continue;
}
CheckValue<IkReal> x13519 = IKatan2WithCheck(IkReal((x13517+(((-1.0)*x13516)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13519.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13518.value)))+(x13519.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13520=IKcos(j4);
IkReal x13521=IKsin(j4);
IkReal x13522=(gconst34*r11);
IkReal x13523=(gconst34*r01);
IkReal x13524=((1.0)*cj1);
IkReal x13525=(gconst34*r21);
IkReal x13526=((1.0)*x13520);
IkReal x13527=(gconst35*x13521);
IkReal x13528=((1.0)*x13521);
IkReal x13529=(gconst35*x13520);
evalcond[0]=(((r02*x13521))+(((-1.0)*x13523*x13526))+((r00*x13529)));
evalcond[1]=((((-1.0)*r22*x13526))+((r20*x13527))+(((-1.0)*x13525*x13528)));
evalcond[2]=((((-1.0)*r12*x13526))+((r10*x13527))+(((-1.0)*x13522*x13528)));
evalcond[3]=((-1.0)+(((-1.0)*x13523*x13528))+((r00*x13527))+(((-1.0)*r02*x13526)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*sj2*x13524))+((r20*x13529))+((r22*x13521))+(((-1.0)*x13525*x13526)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*cj2*x13524))+((r12*x13521))+((r10*x13529))+(((-1.0)*x13522*x13526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13530=((1.0)*gconst34);
CheckValue<IkReal> x13531=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*r21))+(((-1.0)*r20*x13530)))),-1);
if(!x13531.valid){
continue;
}
CheckValue<IkReal> x13532 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x13530))+((gconst35*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13531.value)))+(x13532.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13533=IKcos(j4);
IkReal x13534=IKsin(j4);
IkReal x13535=(gconst34*r11);
IkReal x13536=(gconst34*r01);
IkReal x13537=((1.0)*cj1);
IkReal x13538=(gconst34*r21);
IkReal x13539=((1.0)*x13533);
IkReal x13540=(gconst35*x13534);
IkReal x13541=((1.0)*x13534);
IkReal x13542=(gconst35*x13533);
evalcond[0]=(((r02*x13534))+((r00*x13542))+(((-1.0)*x13536*x13539)));
evalcond[1]=((((-1.0)*r22*x13539))+(((-1.0)*x13538*x13541))+((r20*x13540)));
evalcond[2]=((((-1.0)*r12*x13539))+((r10*x13540))+(((-1.0)*x13535*x13541)));
evalcond[3]=((-1.0)+(((-1.0)*x13536*x13541))+((r00*x13540))+(((-1.0)*r02*x13539)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13538*x13539))+(((-1.0)*sj2*x13537))+((r22*x13534))+((r20*x13542)));
evalcond[5]=(((r10*x13542))+(((-1.0)*sj1*sj2))+(((-1.0)*x13535*x13539))+(((-1.0)*cj2*x13537))+((r12*x13534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13543=IKPowWithIntegerCheck(IKsign((((gconst35*r11))+((gconst34*r10)))),-1);
if(!x13543.valid){
continue;
}
CheckValue<IkReal> x13544 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst34*r21))+((gconst35*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13544.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13543.value)))+(x13544.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13545=IKcos(j4);
IkReal x13546=IKsin(j4);
IkReal x13547=(gconst34*r11);
IkReal x13548=(gconst34*r01);
IkReal x13549=((1.0)*cj1);
IkReal x13550=(gconst34*r21);
IkReal x13551=((1.0)*x13545);
IkReal x13552=(gconst35*x13546);
IkReal x13553=((1.0)*x13546);
IkReal x13554=(gconst35*x13545);
evalcond[0]=(((r00*x13554))+(((-1.0)*x13548*x13551))+((r02*x13546)));
evalcond[1]=((((-1.0)*x13550*x13553))+((r20*x13552))+(((-1.0)*r22*x13551)));
evalcond[2]=((((-1.0)*x13547*x13553))+((r10*x13552))+(((-1.0)*r12*x13551)));
evalcond[3]=((-1.0)+((r00*x13552))+(((-1.0)*r02*x13551))+(((-1.0)*x13548*x13553)));
evalcond[4]=(((cj2*sj1))+((r22*x13546))+(((-1.0)*x13550*x13551))+(((-1.0)*sj2*x13549))+((r20*x13554)));
evalcond[5]=(((r12*x13546))+(((-1.0)*x13547*x13551))+(((-1.0)*cj2*x13549))+((r10*x13554))+(((-1.0)*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13555=((-1.0)*r21);
IkReal x13556=((-1.0)*r20);
CheckValue<IkReal> x13558 = IKatan2WithCheck(IkReal(x13555),IkReal(x13556),IKFAST_ATAN2_MAGTHRESH);
if(!x13558.valid){
continue;
}
IkReal x13557=((1.0)*(x13558.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13557)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x13556);
rxp0_2=(py*r00);
rxp1_0=(py*x13555);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13557)));
IkReal gconst34=x13555;
IkReal gconst35=((1.0)*r20);
IkReal x13559=((1.0)*r01*r21);
IkReal x13560=((1.0)*r00*r20);
j4eval[0]=(x13560+x13559);
j4eval[1]=((((-1.0)*sj3*x13560))+(((-1.0)*sj3*x13559)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13561=((-1.0)*r21);
IkReal x13562=((-1.0)*r20);
CheckValue<IkReal> x13564 = IKatan2WithCheck(IkReal(x13561),IkReal(x13562),IKFAST_ATAN2_MAGTHRESH);
if(!x13564.valid){
continue;
}
IkReal x13563=((1.0)*(x13564.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13563)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x13562);
rxp0_2=(py*r00);
rxp1_0=(py*x13561);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13563)));
IkReal gconst34=x13561;
IkReal gconst35=((1.0)*r20);
IkReal x13565=((1.0)*r01*r21);
IkReal x13566=((1.0)*r00*r20);
j4eval[0]=(x13565+x13566);
j4eval[1]=((((-1.0)*cj3*x13566))+(((-1.0)*cj3*x13565)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13567=((-1.0)*r21);
IkReal x13568=((-1.0)*r20);
CheckValue<IkReal> x13570 = IKatan2WithCheck(IkReal(x13567),IkReal(x13568),IKFAST_ATAN2_MAGTHRESH);
if(!x13570.valid){
continue;
}
IkReal x13569=((1.0)*(x13570.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13569)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x13568);
rxp0_2=(py*r00);
rxp1_0=(py*x13567);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13569)));
IkReal gconst34=x13567;
IkReal gconst35=((1.0)*r20);
IkReal x13571=((1.0)*cj3);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r01*r21*x13571))+(((-1.0)*r00*r20*x13571)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13572=((1.0)*gconst35);
CheckValue<IkReal> x13573=IKPowWithIntegerCheck(r12,-1);
if(!x13573.valid){
continue;
}
CheckValue<IkReal> x13574=IKPowWithIntegerCheck(sj3,-1);
if(!x13574.valid){
continue;
}
CheckValue<IkReal> x13575=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x13572))+((cj3*gconst34*r01))),-1);
if(!x13575.valid){
continue;
}
if( IKabs(((x13573.value)*(x13574.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13575.value)*(((((-1.0)*r01*sj3*x13572))+(((-1.0)*gconst34*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13573.value)*(x13574.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13575.value)*(((((-1.0)*r01*sj3*x13572))+(((-1.0)*gconst34*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13573.value)*(x13574.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13575.value)*(((((-1.0)*r01*sj3*x13572))+(((-1.0)*gconst34*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13576=IKsin(j4);
IkReal x13577=IKcos(j4);
IkReal x13578=(cj2*sj1);
IkReal x13579=((1.0)*sj3);
IkReal x13580=(gconst34*sj3);
IkReal x13581=((1.0)*cj3);
IkReal x13582=(gconst34*r01);
IkReal x13583=(sj1*sj2);
IkReal x13584=(gconst35*r21);
IkReal x13585=((1.0)*cj1);
IkReal x13586=(gconst35*r01);
IkReal x13587=(sj2*x13585);
IkReal x13588=(r12*x13576);
IkReal x13589=(r21*x13577);
IkReal x13590=(gconst35*x13577);
IkReal x13591=(gconst35*x13576);
IkReal x13592=((1.0)*x13576);
evalcond[0]=((-1.0)*r12*x13577);
evalcond[1]=((((-1.0)*gconst34*r21*x13592))+((r20*x13591)));
evalcond[2]=((-1.0)+(((-1.0)*x13582*x13592))+((r00*x13591)));
evalcond[3]=(x13578+(((-1.0)*x13579*x13588))+(((-1.0)*x13587)));
evalcond[4]=((((-1.0)*x13581*x13588))+(((-1.0)*x13583))+(((-1.0)*cj2*x13585)));
evalcond[5]=(((cj3*x13577*x13582))+((r00*x13580))+(((-1.0)*r00*x13581*x13590))+((sj3*x13586)));
evalcond[6]=((((-1.0)*gconst34*r00*x13581))+((r01*x13577*x13580))+(((-1.0)*x13581*x13586))+(((-1.0)*r00*x13579*x13590)));
evalcond[7]=(x13578+(((-1.0)*r20*x13581*x13590))+((sj3*x13584))+((cj3*gconst34*x13589))+((r20*x13580))+(((-1.0)*x13587)));
evalcond[8]=(x13583+(((-1.0)*gconst34*r20*x13581))+(((-1.0)*x13581*x13584))+((x13580*x13589))+((cj1*cj2))+(((-1.0)*r20*x13579*x13590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13593=(gconst35*r00);
IkReal x13594=((1.0)*r01);
CheckValue<IkReal> x13595=IKPowWithIntegerCheck((x13593+(((-1.0)*gconst34*x13594))),-1);
if(!x13595.valid){
continue;
}
CheckValue<IkReal> x13596=IKPowWithIntegerCheck((((cj3*gconst34*r01))+(((-1.0)*cj3*x13593))),-1);
if(!x13596.valid){
continue;
}
if( IKabs(x13595.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13596.value)*(((((-1.0)*gconst35*sj3*x13594))+(((-1.0)*gconst34*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13595.value)+IKsqr(((x13596.value)*(((((-1.0)*gconst35*sj3*x13594))+(((-1.0)*gconst34*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13595.value, ((x13596.value)*(((((-1.0)*gconst35*sj3*x13594))+(((-1.0)*gconst34*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13597=IKsin(j4);
IkReal x13598=IKcos(j4);
IkReal x13599=(cj2*sj1);
IkReal x13600=((1.0)*sj3);
IkReal x13601=(gconst34*sj3);
IkReal x13602=((1.0)*cj3);
IkReal x13603=(gconst34*r01);
IkReal x13604=(sj1*sj2);
IkReal x13605=(gconst35*r21);
IkReal x13606=((1.0)*cj1);
IkReal x13607=(gconst35*r01);
IkReal x13608=(sj2*x13606);
IkReal x13609=(r12*x13597);
IkReal x13610=(r21*x13598);
IkReal x13611=(gconst35*x13598);
IkReal x13612=(gconst35*x13597);
IkReal x13613=((1.0)*x13597);
evalcond[0]=((-1.0)*r12*x13598);
evalcond[1]=((((-1.0)*gconst34*r21*x13613))+((r20*x13612)));
evalcond[2]=((-1.0)+((r00*x13612))+(((-1.0)*x13603*x13613)));
evalcond[3]=(x13599+(((-1.0)*x13608))+(((-1.0)*x13600*x13609)));
evalcond[4]=((((-1.0)*x13604))+(((-1.0)*cj2*x13606))+(((-1.0)*x13602*x13609)));
evalcond[5]=(((cj3*x13598*x13603))+(((-1.0)*r00*x13602*x13611))+((sj3*x13607))+((r00*x13601)));
evalcond[6]=(((r01*x13598*x13601))+(((-1.0)*r00*x13600*x13611))+(((-1.0)*gconst34*r00*x13602))+(((-1.0)*x13602*x13607)));
evalcond[7]=(x13599+((cj3*gconst34*x13610))+(((-1.0)*r20*x13602*x13611))+(((-1.0)*x13608))+((sj3*x13605))+((r20*x13601)));
evalcond[8]=(x13604+(((-1.0)*r20*x13600*x13611))+((x13601*x13610))+(((-1.0)*gconst34*r20*x13602))+((cj1*cj2))+(((-1.0)*x13602*x13605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13614=(gconst34*r01);
IkReal x13615=(gconst35*r00);
CheckValue<IkReal> x13616=IKPowWithIntegerCheck((x13615+(((-1.0)*x13614))),-1);
if(!x13616.valid){
continue;
}
CheckValue<IkReal> x13617=IKPowWithIntegerCheck((((sj3*x13614))+(((-1.0)*sj3*x13615))),-1);
if(!x13617.valid){
continue;
}
if( IKabs(x13616.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13617.value)*((((cj3*gconst34*r00))+((cj3*gconst35*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13616.value)+IKsqr(((x13617.value)*((((cj3*gconst34*r00))+((cj3*gconst35*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13616.value, ((x13617.value)*((((cj3*gconst34*r00))+((cj3*gconst35*r01))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13618=IKsin(j4);
IkReal x13619=IKcos(j4);
IkReal x13620=(cj2*sj1);
IkReal x13621=((1.0)*sj3);
IkReal x13622=(gconst34*sj3);
IkReal x13623=((1.0)*cj3);
IkReal x13624=(gconst34*r01);
IkReal x13625=(sj1*sj2);
IkReal x13626=(gconst35*r21);
IkReal x13627=((1.0)*cj1);
IkReal x13628=(gconst35*r01);
IkReal x13629=(sj2*x13627);
IkReal x13630=(r12*x13618);
IkReal x13631=(r21*x13619);
IkReal x13632=(gconst35*x13619);
IkReal x13633=(gconst35*x13618);
IkReal x13634=((1.0)*x13618);
evalcond[0]=((-1.0)*r12*x13619);
evalcond[1]=(((r20*x13633))+(((-1.0)*gconst34*r21*x13634)));
evalcond[2]=((-1.0)+(((-1.0)*x13624*x13634))+((r00*x13633)));
evalcond[3]=(x13620+(((-1.0)*x13621*x13630))+(((-1.0)*x13629)));
evalcond[4]=((((-1.0)*x13623*x13630))+(((-1.0)*cj2*x13627))+(((-1.0)*x13625)));
evalcond[5]=(((cj3*x13619*x13624))+(((-1.0)*r00*x13623*x13632))+((r00*x13622))+((sj3*x13628)));
evalcond[6]=((((-1.0)*x13623*x13628))+(((-1.0)*gconst34*r00*x13623))+((r01*x13619*x13622))+(((-1.0)*r00*x13621*x13632)));
evalcond[7]=(x13620+((cj3*gconst34*x13631))+(((-1.0)*x13629))+(((-1.0)*r20*x13623*x13632))+((r20*x13622))+((sj3*x13626)));
evalcond[8]=((((-1.0)*r20*x13621*x13632))+x13625+(((-1.0)*x13623*x13626))+((x13622*x13631))+(((-1.0)*gconst34*r20*x13623))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13635=gconst35*gconst35;
IkReal x13636=gconst34*gconst34;
IkReal x13637=(r20*sj3);
IkReal x13638=((1.0)*r21);
IkReal x13639=(gconst34*sj3);
IkReal x13640=(gconst35*r01);
IkReal x13641=(cj3*r20);
IkReal x13642=(gconst34*gconst35*r00);
CheckValue<IkReal> x13643 = IKatan2WithCheck(IkReal((((r00*r22*x13639))+((r22*sj3*x13640)))),IkReal(((((-1.0)*r00*sj3*x13636*x13638))+(((-1.0)*x13638*x13639*x13640))+((r01*x13635*x13637))+((x13637*x13642)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13643.valid){
continue;
}
CheckValue<IkReal> x13644=IKPowWithIntegerCheck(IKsign((((r00*x13635*x13641))+(((-1.0)*gconst34*x13640*x13641))+(((-1.0)*cj3*x13638*x13642))+((cj3*r01*r21*x13636))+((cj3*r02*r22)))),-1);
if(!x13644.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13643.value)+(((1.5707963267949)*(x13644.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13645=IKsin(j4);
IkReal x13646=IKcos(j4);
IkReal x13647=(cj2*sj1);
IkReal x13648=(r21*sj3);
IkReal x13649=(gconst35*r20);
IkReal x13650=(gconst35*r00);
IkReal x13651=(cj3*r01);
IkReal x13652=(sj1*sj2);
IkReal x13653=(cj3*r11);
IkReal x13654=((1.0)*cj1);
IkReal x13655=(cj3*r21);
IkReal x13656=((1.0)*gconst35);
IkReal x13657=(gconst35*r10);
IkReal x13658=(r01*sj3);
IkReal x13659=(gconst34*r00);
IkReal x13660=((1.0)*cj3);
IkReal x13661=(r11*sj3);
IkReal x13662=(gconst34*r20);
IkReal x13663=(gconst34*r10);
IkReal x13664=(sj2*x13654);
IkReal x13665=((1.0)*x13646);
IkReal x13666=((1.0)*x13645);
IkReal x13667=(gconst34*x13646);
evalcond[0]=((((-1.0)*gconst34*r21*x13666))+(((-1.0)*r22*x13665))+((x13645*x13649)));
evalcond[1]=((((-1.0)*r12*x13665))+((x13645*x13657))+(((-1.0)*gconst34*r11*x13666)));
evalcond[2]=((-1.0)+(((-1.0)*gconst34*r01*x13666))+((x13645*x13650))+(((-1.0)*r02*x13665)));
evalcond[3]=(((x13651*x13667))+(((-1.0)*x13646*x13650*x13660))+((sj3*x13659))+(((-1.0)*r02*x13645*x13660))+((gconst35*x13658)));
evalcond[4]=((((-1.0)*sj3*x13650*x13665))+(((-1.0)*r02*sj3*x13666))+(((-1.0)*x13651*x13656))+(((-1.0)*x13659*x13660))+((x13658*x13667)));
evalcond[5]=(x13647+((x13655*x13667))+(((-1.0)*x13664))+((gconst35*x13648))+((sj3*x13662))+(((-1.0)*r22*x13645*x13660))+(((-1.0)*x13646*x13649*x13660)));
evalcond[6]=((((-1.0)*r22*sj3*x13666))+x13652+((x13648*x13667))+(((-1.0)*x13655*x13656))+(((-1.0)*x13660*x13662))+(((-1.0)*sj3*x13649*x13665))+((cj1*cj2)));
evalcond[7]=((((-1.0)*cj3*r10*x13646*x13656))+((x13653*x13667))+(((-1.0)*x13652))+(((-1.0)*cj2*x13654))+((sj3*x13663))+((gconst35*x13661))+(((-1.0)*r12*x13645*x13660)));
evalcond[8]=(x13647+(((-1.0)*x13664))+(((-1.0)*x13660*x13663))+(((-1.0)*r10*sj3*x13646*x13656))+(((-1.0)*x13653*x13656))+(((-1.0)*r12*sj3*x13666))+((x13661*x13667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13668=((1.0)*gconst34);
CheckValue<IkReal> x13669=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*r21))+(((-1.0)*r20*x13668)))),-1);
if(!x13669.valid){
continue;
}
CheckValue<IkReal> x13670 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst35*r10))+(((-1.0)*r11*x13668)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13670.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13669.value)))+(x13670.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13671=IKsin(j4);
IkReal x13672=IKcos(j4);
IkReal x13673=(cj2*sj1);
IkReal x13674=(r21*sj3);
IkReal x13675=(gconst35*r20);
IkReal x13676=(gconst35*r00);
IkReal x13677=(cj3*r01);
IkReal x13678=(sj1*sj2);
IkReal x13679=(cj3*r11);
IkReal x13680=((1.0)*cj1);
IkReal x13681=(cj3*r21);
IkReal x13682=((1.0)*gconst35);
IkReal x13683=(gconst35*r10);
IkReal x13684=(r01*sj3);
IkReal x13685=(gconst34*r00);
IkReal x13686=((1.0)*cj3);
IkReal x13687=(r11*sj3);
IkReal x13688=(gconst34*r20);
IkReal x13689=(gconst34*r10);
IkReal x13690=(sj2*x13680);
IkReal x13691=((1.0)*x13672);
IkReal x13692=((1.0)*x13671);
IkReal x13693=(gconst34*x13672);
evalcond[0]=((((-1.0)*gconst34*r21*x13692))+(((-1.0)*r22*x13691))+((x13671*x13675)));
evalcond[1]=((((-1.0)*gconst34*r11*x13692))+((x13671*x13683))+(((-1.0)*r12*x13691)));
evalcond[2]=((-1.0)+(((-1.0)*gconst34*r01*x13692))+(((-1.0)*r02*x13691))+((x13671*x13676)));
evalcond[3]=((((-1.0)*x13672*x13676*x13686))+((x13677*x13693))+(((-1.0)*r02*x13671*x13686))+((sj3*x13685))+((gconst35*x13684)));
evalcond[4]=(((x13684*x13693))+(((-1.0)*x13677*x13682))+(((-1.0)*x13685*x13686))+(((-1.0)*sj3*x13676*x13691))+(((-1.0)*r02*sj3*x13692)));
evalcond[5]=((((-1.0)*x13672*x13675*x13686))+x13673+(((-1.0)*x13690))+(((-1.0)*r22*x13671*x13686))+((gconst35*x13674))+((sj3*x13688))+((x13681*x13693)));
evalcond[6]=((((-1.0)*r22*sj3*x13692))+x13678+((x13674*x13693))+(((-1.0)*x13686*x13688))+(((-1.0)*sj3*x13675*x13691))+((cj1*cj2))+(((-1.0)*x13681*x13682)));
evalcond[7]=((((-1.0)*r12*x13671*x13686))+(((-1.0)*cj2*x13680))+((x13679*x13693))+((sj3*x13689))+(((-1.0)*x13678))+((gconst35*x13687))+(((-1.0)*cj3*r10*x13672*x13682)));
evalcond[8]=((((-1.0)*r10*sj3*x13672*x13682))+x13673+(((-1.0)*x13690))+(((-1.0)*x13686*x13689))+(((-1.0)*x13679*x13682))+(((-1.0)*r12*sj3*x13692))+((x13687*x13693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13694=IKPowWithIntegerCheck(IKsign((((gconst35*r11))+((gconst34*r10)))),-1);
if(!x13694.valid){
continue;
}
CheckValue<IkReal> x13695 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst34*r21))+((gconst35*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13694.value)))+(x13695.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13696=IKsin(j4);
IkReal x13697=IKcos(j4);
IkReal x13698=(cj2*sj1);
IkReal x13699=(r21*sj3);
IkReal x13700=(gconst35*r20);
IkReal x13701=(gconst35*r00);
IkReal x13702=(cj3*r01);
IkReal x13703=(sj1*sj2);
IkReal x13704=(cj3*r11);
IkReal x13705=((1.0)*cj1);
IkReal x13706=(cj3*r21);
IkReal x13707=((1.0)*gconst35);
IkReal x13708=(gconst35*r10);
IkReal x13709=(r01*sj3);
IkReal x13710=(gconst34*r00);
IkReal x13711=((1.0)*cj3);
IkReal x13712=(r11*sj3);
IkReal x13713=(gconst34*r20);
IkReal x13714=(gconst34*r10);
IkReal x13715=(sj2*x13705);
IkReal x13716=((1.0)*x13697);
IkReal x13717=((1.0)*x13696);
IkReal x13718=(gconst34*x13697);
evalcond[0]=(((x13696*x13700))+(((-1.0)*r22*x13716))+(((-1.0)*gconst34*r21*x13717)));
evalcond[1]=(((x13696*x13708))+(((-1.0)*r12*x13716))+(((-1.0)*gconst34*r11*x13717)));
evalcond[2]=((-1.0)+((x13696*x13701))+(((-1.0)*gconst34*r01*x13717))+(((-1.0)*r02*x13716)));
evalcond[3]=(((x13702*x13718))+(((-1.0)*r02*x13696*x13711))+((sj3*x13710))+(((-1.0)*x13697*x13701*x13711))+((gconst35*x13709)));
evalcond[4]=((((-1.0)*x13702*x13707))+((x13709*x13718))+(((-1.0)*sj3*x13701*x13716))+(((-1.0)*r02*sj3*x13717))+(((-1.0)*x13710*x13711)));
evalcond[5]=(x13698+((sj3*x13713))+((gconst35*x13699))+((x13706*x13718))+(((-1.0)*x13697*x13700*x13711))+(((-1.0)*r22*x13696*x13711))+(((-1.0)*x13715)));
evalcond[6]=(x13703+(((-1.0)*x13706*x13707))+(((-1.0)*r22*sj3*x13717))+(((-1.0)*sj3*x13700*x13716))+((cj1*cj2))+(((-1.0)*x13711*x13713))+((x13699*x13718)));
evalcond[7]=(((sj3*x13714))+(((-1.0)*x13703))+(((-1.0)*cj3*r10*x13697*x13707))+((x13704*x13718))+(((-1.0)*cj2*x13705))+((gconst35*x13712))+(((-1.0)*r12*x13696*x13711)));
evalcond[8]=((((-1.0)*r10*sj3*x13697*x13707))+x13698+(((-1.0)*x13704*x13707))+((x13712*x13718))+(((-1.0)*r12*sj3*x13717))+(((-1.0)*x13715))+(((-1.0)*x13711*x13714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13720 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x13720)==0){
continue;
}
IkReal x13719=pow(x13720,-0.5);
CheckValue<IkReal> x13721 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13721.valid){
continue;
}
IkReal gconst36=((-1.0)*(x13721.value));
IkReal gconst37=((-1.0)*r11*x13719);
IkReal gconst38=(r10*x13719);
CheckValue<IkReal> x13722 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13722.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13722.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13725 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13725.valid){
continue;
}
IkReal x13723=((-1.0)*(x13725.value));
IkReal x13724=x13719;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x13723;
IkReal gconst36=x13723;
IkReal gconst37=((-1.0)*r11*x13724);
IkReal gconst38=(r10*x13724);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13728 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13728.valid){
continue;
}
IkReal x13726=((-1.0)*(x13728.value));
IkReal x13727=x13719;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x13726;
IkReal gconst36=x13726;
IkReal gconst37=((-1.0)*r11*x13727);
IkReal gconst38=(r10*x13727);
CheckValue<IkReal> x13736=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x13736.valid){
continue;
}
IkReal x13729=x13736.value;
IkReal x13730=(cj3*x13729);
IkReal x13731=(r00*x13730);
IkReal x13732=(r21*x13730);
IkReal x13733=(r20*x13730);
IkReal x13734=(r01*x13730);
IkReal x13735=(r10*r11*x13730);
j4eval[0]=IKsign((((r20*x13731*(r10*r10)))+((r01*x13732*(r11*r11)))+((cj3*r02*r22))+((r10*r11*r21*x13731))+((r01*r10*r11*x13733))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13739 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13739.valid){
continue;
}
IkReal x13737=((-1.0)*(x13739.value));
IkReal x13738=x13719;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x13737;
IkReal gconst36=x13737;
IkReal gconst37=((-1.0)*r11*x13738);
IkReal gconst38=(r10*x13738);
CheckValue<IkReal> x13747=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x13747.valid){
continue;
}
IkReal x13740=x13747.value;
IkReal x13741=(sj3*x13740);
IkReal x13742=(r20*x13741);
IkReal x13743=(r00*x13741);
IkReal x13744=(r01*x13741);
IkReal x13745=(r21*x13741);
IkReal x13746=(r10*r11*x13741);
j4eval[0]=IKsign((((r01*r10*r11*x13742))+((r21*x13744*(r11*r11)))+((r00*x13742*(r10*r10)))+((r10*r11*r21*x13743))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13750 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13750.valid){
continue;
}
IkReal x13748=((-1.0)*(x13750.value));
IkReal x13749=x13719;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x13748;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst36=x13748;
IkReal gconst37=((-1.0)*r11*x13749);
IkReal gconst38=(r10*x13749);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13753 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13753.valid){
continue;
}
IkReal x13751=((-1.0)*(x13753.value));
IkReal x13752=x13719;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x13751;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst36=x13751;
IkReal gconst37=((-1.0)*r11*x13752);
IkReal gconst38=(r10*x13752);
IkReal x13754=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x13758=IKPowWithIntegerCheck(x13754,-1);
if(!x13758.valid){
continue;
}
IkReal x13755=x13758.value;
IkReal x13756=((1.0)*x13755);
IkReal x13757=((((-2.0)*r00*r01*r10*r11*x13755))+(((-1.0)*(r02*r02)))+(((-1.0)*x13756*(r01*r01)*(r11*r11)))+(((-1.0)*x13756*(r00*r00)*(r10*r10))));
j4eval[0]=x13757;
j4eval[1]=r02;
j4eval[2]=x13754;
j4eval[3]=IKsign(x13757);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13761 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13761.valid){
continue;
}
IkReal x13759=((-1.0)*(x13761.value));
IkReal x13760=x13719;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x13759;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst36=x13759;
IkReal gconst37=((-1.0)*r11*x13760);
IkReal gconst38=(r10*x13760);
IkReal x13762=r12*r12;
IkReal x13763=(cj2*r22*sj1);
CheckValue<IkReal> x13768=IKPowWithIntegerCheck(((-1.0)+x13762),-1);
if(!x13768.valid){
continue;
}
IkReal x13764=x13768.value;
IkReal x13765=((1.0)*cj1*r22*sj2);
if((((1.0)+(((-1.0)*x13762)))) < -0.00001)
continue;
IkReal x13766=IKsqrt(((1.0)+(((-1.0)*x13762))));
IkReal x13767=(r12*x13764*x13766);
j4eval[0]=((IKabs((x13763+(((-1.0)*x13765)))))+(IKabs(((((-1.0)*x13765*x13767))+((x13763*x13767))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13769=(cj1*sj2);
IkReal x13770=(gconst37*r21);
IkReal x13771=(gconst38*r20);
IkReal x13772=(cj2*sj1);
CheckValue<IkReal> x13773 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x13769))+((r22*x13772)))),IkReal((((x13769*x13770))+(((-1.0)*x13769*x13771))+(((-1.0)*x13770*x13772))+((x13771*x13772)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13773.valid){
continue;
}
CheckValue<IkReal> x13774=IKPowWithIntegerCheck(IKsign(((((-2.0)*x13770*x13771))+(x13770*x13770)+(r22*r22)+(x13771*x13771))),-1);
if(!x13774.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13773.value)+(((1.5707963267949)*(x13774.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13775=IKsin(j4);
IkReal x13776=IKcos(j4);
IkReal x13777=(gconst38*r20);
IkReal x13778=((1.0)*sj2);
IkReal x13779=(gconst38*r10);
IkReal x13780=(gconst38*r00);
IkReal x13781=((1.0)*x13776);
IkReal x13782=(gconst37*x13776);
IkReal x13783=((1.0)*x13775);
IkReal x13784=(gconst37*x13783);
evalcond[0]=(((x13775*x13777))+(((-1.0)*r21*x13784))+(((-1.0)*r22*x13781)));
evalcond[1]=((((-1.0)*r12*x13781))+((x13775*x13779))+(((-1.0)*r11*x13784)));
evalcond[2]=(((r01*x13782))+(((-1.0)*r02*x13783))+(((-1.0)*x13780*x13781)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x13781))+(((-1.0)*r01*x13784))+((x13775*x13780)));
evalcond[4]=((((-1.0)*cj1*x13778))+((cj2*sj1))+((r21*x13782))+(((-1.0)*r22*x13783))+(((-1.0)*x13777*x13781)));
evalcond[5]=((((-1.0)*r12*x13783))+(((-1.0)*sj1*x13778))+(((-1.0)*cj1*cj2))+(((-1.0)*x13779*x13781))+((r11*x13782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13785=(gconst38*r00);
IkReal x13786=(gconst37*r01);
CheckValue<IkReal> x13787=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13786*x13786)))+(((-1.0)*(r02*r02)))+(((2.0)*x13785*x13786))+(((-1.0)*(x13785*x13785))))),-1);
if(!x13787.valid){
continue;
}
CheckValue<IkReal> x13788 = IKatan2WithCheck(IkReal((x13786+(((-1.0)*x13785)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x13788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13787.value)))+(x13788.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13789=IKsin(j4);
IkReal x13790=IKcos(j4);
IkReal x13791=(gconst38*r20);
IkReal x13792=((1.0)*sj2);
IkReal x13793=(gconst38*r10);
IkReal x13794=(gconst38*r00);
IkReal x13795=((1.0)*x13790);
IkReal x13796=(gconst37*x13790);
IkReal x13797=((1.0)*x13789);
IkReal x13798=(gconst37*x13797);
evalcond[0]=((((-1.0)*r21*x13798))+(((-1.0)*r22*x13795))+((x13789*x13791)));
evalcond[1]=(((x13789*x13793))+(((-1.0)*r11*x13798))+(((-1.0)*r12*x13795)));
evalcond[2]=((((-1.0)*r02*x13797))+((r01*x13796))+(((-1.0)*x13794*x13795)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x13795))+(((-1.0)*r01*x13798))+((x13789*x13794)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*cj1*x13792))+(((-1.0)*x13791*x13795))+((r21*x13796))+(((-1.0)*r22*x13797)));
evalcond[5]=((((-1.0)*sj1*x13792))+(((-1.0)*cj1*cj2))+((r11*x13796))+(((-1.0)*x13793*x13795))+(((-1.0)*r12*x13797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13799=((1.0)*gconst37);
CheckValue<IkReal> x13800 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst38*r10))+(((-1.0)*r11*x13799)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13800.valid){
continue;
}
CheckValue<IkReal> x13801=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x13799))+(((-1.0)*gconst38*r21)))),-1);
if(!x13801.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13800.value)+(((1.5707963267949)*(x13801.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13802=IKsin(j4);
IkReal x13803=IKcos(j4);
IkReal x13804=(gconst38*r20);
IkReal x13805=((1.0)*sj2);
IkReal x13806=(gconst38*r10);
IkReal x13807=(gconst38*r00);
IkReal x13808=((1.0)*x13803);
IkReal x13809=(gconst37*x13803);
IkReal x13810=((1.0)*x13802);
IkReal x13811=(gconst37*x13810);
evalcond[0]=((((-1.0)*r21*x13811))+(((-1.0)*r22*x13808))+((x13802*x13804)));
evalcond[1]=((((-1.0)*r11*x13811))+((x13802*x13806))+(((-1.0)*r12*x13808)));
evalcond[2]=((((-1.0)*x13807*x13808))+((r01*x13809))+(((-1.0)*r02*x13810)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x13808))+((x13802*x13807))+(((-1.0)*r01*x13811)));
evalcond[4]=(((cj2*sj1))+((r21*x13809))+(((-1.0)*r22*x13810))+(((-1.0)*cj1*x13805))+(((-1.0)*x13804*x13808)));
evalcond[5]=((((-1.0)*x13806*x13808))+((r11*x13809))+(((-1.0)*cj1*cj2))+(((-1.0)*r12*x13810))+(((-1.0)*sj1*x13805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13814 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13814.valid){
continue;
}
IkReal x13812=((-1.0)*(x13814.value));
IkReal x13813=x13719;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x13812;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst36=x13812;
IkReal gconst37=((-1.0)*r11*x13813);
IkReal gconst38=(r10*x13813);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13817 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13817.valid){
continue;
}
IkReal x13815=((-1.0)*(x13817.value));
IkReal x13816=x13719;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x13815;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst36=x13815;
IkReal gconst37=((-1.0)*r11*x13816);
IkReal gconst38=(r10*x13816);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13820 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13820.valid){
continue;
}
IkReal x13818=((-1.0)*(x13820.value));
IkReal x13819=x13719;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x13818;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst36=x13818;
IkReal gconst37=((-1.0)*r11*x13819);
IkReal gconst38=(r10*x13819);
IkReal x13821=r12*r12;
IkReal x13822=(r02*sj1*sj2);
IkReal x13823=(cj1*cj2*r02);
CheckValue<IkReal> x13827=IKPowWithIntegerCheck(((-1.0)+x13821),-1);
if(!x13827.valid){
continue;
}
IkReal x13824=x13827.value;
if((((1.0)+(((-1.0)*x13821)))) < -0.00001)
continue;
IkReal x13825=IKsqrt(((1.0)+(((-1.0)*x13821))));
IkReal x13826=((1.0)*r12*x13824*x13825);
j4eval[0]=((IKabs((x13823+x13822)))+(IKabs(((((-1.0)*x13823*x13826))+(((-1.0)*x13822*x13826))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13828=(cj1*cj2);
IkReal x13829=(gconst37*r01);
IkReal x13830=(sj1*sj2);
IkReal x13831=((1.0)*gconst38*r00);
CheckValue<IkReal> x13832 = IKatan2WithCheck(IkReal(((((-1.0)*x13830*x13831))+((x13829*x13830))+(((-1.0)*x13828*x13831))+((x13828*x13829)))),IkReal((((r02*x13830))+((r02*x13828)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13832.valid){
continue;
}
CheckValue<IkReal> x13833=IKPowWithIntegerCheck(IKsign((((gconst37*r20))+((gconst38*r21)))),-1);
if(!x13833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13832.value)+(((1.5707963267949)*(x13833.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13834=IKcos(j4);
IkReal x13835=IKsin(j4);
IkReal x13836=((1.0)*sj2);
IkReal x13837=((1.0)*x13834);
IkReal x13838=(gconst38*x13834);
IkReal x13839=(gconst38*x13835);
IkReal x13840=((1.0)*gconst37*x13835);
evalcond[0]=((((-1.0)*gconst37*r01*x13837))+((r02*x13835))+((r00*x13838)));
evalcond[1]=((((-1.0)*r22*x13837))+(((-1.0)*r21*x13840))+((r20*x13839)));
evalcond[2]=((((-1.0)*r12*x13837))+(((-1.0)*r11*x13840))+((r10*x13839)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x13837))+(((-1.0)*r01*x13840))+((r00*x13839)));
evalcond[4]=(((cj2*sj1))+((r22*x13835))+(((-1.0)*gconst37*r21*x13837))+(((-1.0)*cj1*x13836))+((r20*x13838)));
evalcond[5]=((((-1.0)*cj1*cj2))+((r12*x13835))+(((-1.0)*sj1*x13836))+((r10*x13838))+(((-1.0)*gconst37*r11*x13837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13841=(gconst38*r00);
IkReal x13842=(gconst37*r01);
CheckValue<IkReal> x13843=IKPowWithIntegerCheck(IKsign(((x13842*x13842)+(((-2.0)*x13841*x13842))+(x13841*x13841)+(r02*r02))),-1);
if(!x13843.valid){
continue;
}
CheckValue<IkReal> x13844 = IKatan2WithCheck(IkReal((x13841+(((-1.0)*x13842)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13844.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13843.value)))+(x13844.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13845=IKcos(j4);
IkReal x13846=IKsin(j4);
IkReal x13847=((1.0)*sj2);
IkReal x13848=((1.0)*x13845);
IkReal x13849=(gconst38*x13845);
IkReal x13850=(gconst38*x13846);
IkReal x13851=((1.0)*gconst37*x13846);
evalcond[0]=((((-1.0)*gconst37*r01*x13848))+((r02*x13846))+((r00*x13849)));
evalcond[1]=((((-1.0)*r22*x13848))+((r20*x13850))+(((-1.0)*r21*x13851)));
evalcond[2]=((((-1.0)*r11*x13851))+(((-1.0)*r12*x13848))+((r10*x13850)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x13851))+((r00*x13850))+(((-1.0)*r02*x13848)));
evalcond[4]=(((cj2*sj1))+((r22*x13846))+(((-1.0)*gconst37*r21*x13848))+(((-1.0)*cj1*x13847))+((r20*x13849)));
evalcond[5]=(((r12*x13846))+(((-1.0)*sj1*x13847))+(((-1.0)*cj1*cj2))+((r10*x13849))+(((-1.0)*gconst37*r11*x13848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13852=((1.0)*gconst37);
CheckValue<IkReal> x13853 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x13852))+((gconst38*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13853.valid){
continue;
}
CheckValue<IkReal> x13854=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x13852))+(((-1.0)*gconst38*r21)))),-1);
if(!x13854.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13853.value)+(((1.5707963267949)*(x13854.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13855=IKcos(j4);
IkReal x13856=IKsin(j4);
IkReal x13857=((1.0)*sj2);
IkReal x13858=((1.0)*x13855);
IkReal x13859=(gconst38*x13855);
IkReal x13860=(gconst38*x13856);
IkReal x13861=((1.0)*gconst37*x13856);
evalcond[0]=(((r00*x13859))+(((-1.0)*gconst37*r01*x13858))+((r02*x13856)));
evalcond[1]=((((-1.0)*r22*x13858))+((r20*x13860))+(((-1.0)*r21*x13861)));
evalcond[2]=((((-1.0)*r11*x13861))+(((-1.0)*r12*x13858))+((r10*x13860)));
evalcond[3]=((-1.0)+((r00*x13860))+(((-1.0)*r02*x13858))+(((-1.0)*r01*x13861)));
evalcond[4]=(((cj2*sj1))+((r22*x13856))+(((-1.0)*gconst37*r21*x13858))+(((-1.0)*cj1*x13857))+((r20*x13859)));
evalcond[5]=((((-1.0)*sj1*x13857))+(((-1.0)*cj1*cj2))+((r12*x13856))+(((-1.0)*gconst37*r11*x13858))+((r10*x13859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13864 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13864.valid){
continue;
}
IkReal x13862=((-1.0)*(x13864.value));
IkReal x13863=x13719;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x13862;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst36=x13862;
IkReal gconst37=((-1.0)*r11*x13863);
IkReal gconst38=(r10*x13863);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13867 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13867.valid){
continue;
}
IkReal x13865=((-1.0)*(x13867.value));
IkReal x13866=x13719;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x13865;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst36=x13865;
IkReal gconst37=((-1.0)*r11*x13866);
IkReal gconst38=(r10*x13866);
IkReal x13868=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x13872=IKPowWithIntegerCheck(x13868,-1);
if(!x13872.valid){
continue;
}
IkReal x13869=x13872.value;
IkReal x13870=((1.0)*x13869);
IkReal x13871=((((-2.0)*r00*r01*r10*r11*x13869))+(((-1.0)*x13870*(r01*r01)*(r11*r11)))+(((-1.0)*(r02*r02)))+(((-1.0)*x13870*(r00*r00)*(r10*r10))));
j4eval[0]=x13871;
j4eval[1]=r02;
j4eval[2]=x13868;
j4eval[3]=IKsign(x13871);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13875 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13875.valid){
continue;
}
IkReal x13873=((-1.0)*(x13875.value));
IkReal x13874=x13719;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x13873;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst36=x13873;
IkReal gconst37=((-1.0)*r11*x13874);
IkReal gconst38=(r10*x13874);
IkReal x13876=(cj1*cj2);
IkReal x13877=(sj1*sj2);
IkReal x13878=x13719;
IkReal x13879=(r12*r22*x13878);
j4eval[0]=((IKabs((((x13877*x13879))+((x13876*x13879)))))+(IKabs((((r22*x13876))+((r22*x13877))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13880=(cj1*cj2);
IkReal x13881=(gconst37*r21);
IkReal x13882=(sj1*sj2);
IkReal x13883=(gconst38*r20);
CheckValue<IkReal> x13884=IKPowWithIntegerCheck(IKsign(((((-2.0)*x13881*x13883))+(r22*r22)+(x13881*x13881)+(x13883*x13883))),-1);
if(!x13884.valid){
continue;
}
CheckValue<IkReal> x13885 = IKatan2WithCheck(IkReal((((r22*x13882))+((r22*x13880)))),IkReal(((((-1.0)*x13881*x13882))+((x13882*x13883))+((x13880*x13883))+(((-1.0)*x13880*x13881)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13885.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13884.value)))+(x13885.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13886=IKsin(j4);
IkReal x13887=IKcos(j4);
IkReal x13888=(gconst38*r20);
IkReal x13889=(gconst38*r10);
IkReal x13890=(gconst38*r00);
IkReal x13891=((1.0)*x13887);
IkReal x13892=(gconst37*x13887);
IkReal x13893=((1.0)*x13886);
IkReal x13894=(gconst37*x13893);
evalcond[0]=(((x13886*x13888))+(((-1.0)*r21*x13894))+(((-1.0)*r22*x13891)));
evalcond[1]=((((-1.0)*r12*x13891))+((x13886*x13889))+(((-1.0)*r11*x13894)));
evalcond[2]=((((-1.0)*r02*x13893))+((r01*x13892))+(((-1.0)*x13890*x13891)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x13891))+(((-1.0)*r01*x13894))+((x13886*x13890)));
evalcond[4]=((((-1.0)*x13888*x13891))+((sj1*sj2))+((r21*x13892))+((cj1*cj2))+(((-1.0)*r22*x13893)));
evalcond[5]=((((-1.0)*r12*x13893))+(((-1.0)*x13889*x13891))+((cj2*sj1))+(((-1.0)*cj1*sj2))+((r11*x13892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13895=(gconst38*r00);
IkReal x13896=(gconst37*r01);
CheckValue<IkReal> x13897 = IKatan2WithCheck(IkReal((x13896+(((-1.0)*x13895)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x13897.valid){
continue;
}
CheckValue<IkReal> x13898=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13896*x13896)))+(((2.0)*x13895*x13896))+(((-1.0)*(r02*r02)))+(((-1.0)*(x13895*x13895))))),-1);
if(!x13898.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13897.value)+(((1.5707963267949)*(x13898.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13899=IKsin(j4);
IkReal x13900=IKcos(j4);
IkReal x13901=(gconst38*r20);
IkReal x13902=(gconst38*r10);
IkReal x13903=(gconst38*r00);
IkReal x13904=((1.0)*x13900);
IkReal x13905=(gconst37*x13900);
IkReal x13906=((1.0)*x13899);
IkReal x13907=(gconst37*x13906);
evalcond[0]=(((x13899*x13901))+(((-1.0)*r22*x13904))+(((-1.0)*r21*x13907)));
evalcond[1]=(((x13899*x13902))+(((-1.0)*r11*x13907))+(((-1.0)*r12*x13904)));
evalcond[2]=(((r01*x13905))+(((-1.0)*r02*x13906))+(((-1.0)*x13903*x13904)));
evalcond[3]=((-1.0)+((x13899*x13903))+(((-1.0)*r01*x13907))+(((-1.0)*r02*x13904)));
evalcond[4]=((((-1.0)*x13901*x13904))+((sj1*sj2))+(((-1.0)*r22*x13906))+((r21*x13905))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x13902*x13904))+((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x13906))+((r11*x13905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13908=((1.0)*gconst37);
CheckValue<IkReal> x13909 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x13908))+((gconst38*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13909.valid){
continue;
}
CheckValue<IkReal> x13910=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst38*r21))+(((-1.0)*r20*x13908)))),-1);
if(!x13910.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13909.value)+(((1.5707963267949)*(x13910.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13911=IKsin(j4);
IkReal x13912=IKcos(j4);
IkReal x13913=(gconst38*r20);
IkReal x13914=(gconst38*r10);
IkReal x13915=(gconst38*r00);
IkReal x13916=((1.0)*x13912);
IkReal x13917=(gconst37*x13912);
IkReal x13918=((1.0)*x13911);
IkReal x13919=(gconst37*x13918);
evalcond[0]=((((-1.0)*r22*x13916))+((x13911*x13913))+(((-1.0)*r21*x13919)));
evalcond[1]=((((-1.0)*r12*x13916))+(((-1.0)*r11*x13919))+((x13911*x13914)));
evalcond[2]=((((-1.0)*x13915*x13916))+((r01*x13917))+(((-1.0)*r02*x13918)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x13919))+((x13911*x13915))+(((-1.0)*r02*x13916)));
evalcond[4]=((((-1.0)*x13913*x13916))+((sj1*sj2))+(((-1.0)*r22*x13918))+((cj1*cj2))+((r21*x13917)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*x13914*x13916))+(((-1.0)*r12*x13918))+(((-1.0)*cj1*sj2))+((r11*x13917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13922 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13922.valid){
continue;
}
IkReal x13920=((-1.0)*(x13922.value));
IkReal x13921=x13719;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x13920;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst36=x13920;
IkReal gconst37=((-1.0)*r11*x13921);
IkReal gconst38=(r10*x13921);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13925 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13925.valid){
continue;
}
IkReal x13923=((-1.0)*(x13925.value));
IkReal x13924=x13719;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x13923;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst36=x13923;
IkReal gconst37=((-1.0)*r11*x13924);
IkReal gconst38=(r10*x13924);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13928 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13928.valid){
continue;
}
IkReal x13926=((-1.0)*(x13928.value));
IkReal x13927=x13719;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x13926;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst36=x13926;
IkReal gconst37=((-1.0)*r11*x13927);
IkReal gconst38=(r10*x13927);
IkReal x13929=r12*r12;
IkReal x13930=(cj1*r02*sj2);
IkReal x13931=(cj2*r02*sj1);
CheckValue<IkReal> x13935=IKPowWithIntegerCheck(((-1.0)+x13929),-1);
if(!x13935.valid){
continue;
}
IkReal x13932=x13935.value;
if((((1.0)+(((-1.0)*x13929)))) < -0.00001)
continue;
IkReal x13933=IKsqrt(((1.0)+(((-1.0)*x13929))));
IkReal x13934=(r12*x13932*x13933);
j4eval[0]=((IKabs((((x13931*x13934))+(((-1.0)*x13930*x13934)))))+(IKabs((x13930+(((-1.0)*x13931))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13936=(cj2*sj1);
IkReal x13937=(gconst37*r01);
IkReal x13938=(gconst38*r00);
IkReal x13939=(cj1*sj2);
CheckValue<IkReal> x13940=IKPowWithIntegerCheck(IKsign((((gconst37*r20))+((gconst38*r21)))),-1);
if(!x13940.valid){
continue;
}
CheckValue<IkReal> x13941 = IKatan2WithCheck(IkReal(((((-1.0)*x13938*x13939))+(((-1.0)*x13936*x13937))+((x13936*x13938))+((x13937*x13939)))),IkReal(((((-1.0)*r02*x13936))+((r02*x13939)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13940.value)))+(x13941.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13942=IKcos(j4);
IkReal x13943=IKsin(j4);
IkReal x13944=((1.0)*x13942);
IkReal x13945=(gconst38*x13942);
IkReal x13946=(gconst38*x13943);
IkReal x13947=((1.0)*gconst37*x13943);
evalcond[0]=(((r00*x13945))+(((-1.0)*gconst37*r01*x13944))+((r02*x13943)));
evalcond[1]=(((r20*x13946))+(((-1.0)*r22*x13944))+(((-1.0)*r21*x13947)));
evalcond[2]=((((-1.0)*r11*x13947))+(((-1.0)*r12*x13944))+((r10*x13946)));
evalcond[3]=((-1.0)+((r00*x13946))+(((-1.0)*r01*x13947))+(((-1.0)*r02*x13944)));
evalcond[4]=(((sj1*sj2))+((r20*x13945))+(((-1.0)*gconst37*r21*x13944))+((cj1*cj2))+((r22*x13943)));
evalcond[5]=((((-1.0)*gconst37*r11*x13944))+((cj2*sj1))+(((-1.0)*cj1*sj2))+((r12*x13943))+((r10*x13945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13948=(gconst38*r00);
IkReal x13949=(gconst37*r01);
CheckValue<IkReal> x13950 = IKatan2WithCheck(IkReal(((((-1.0)*x13949))+x13948)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13950.valid){
continue;
}
CheckValue<IkReal> x13951=IKPowWithIntegerCheck(IKsign(((((-2.0)*x13948*x13949))+(x13949*x13949)+(x13948*x13948)+(r02*r02))),-1);
if(!x13951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13950.value)+(((1.5707963267949)*(x13951.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13952=IKcos(j4);
IkReal x13953=IKsin(j4);
IkReal x13954=((1.0)*x13952);
IkReal x13955=(gconst38*x13952);
IkReal x13956=(gconst38*x13953);
IkReal x13957=((1.0)*gconst37*x13953);
evalcond[0]=((((-1.0)*gconst37*r01*x13954))+((r00*x13955))+((r02*x13953)));
evalcond[1]=((((-1.0)*r21*x13957))+(((-1.0)*r22*x13954))+((r20*x13956)));
evalcond[2]=((((-1.0)*r11*x13957))+(((-1.0)*r12*x13954))+((r10*x13956)));
evalcond[3]=((-1.0)+((r00*x13956))+(((-1.0)*r02*x13954))+(((-1.0)*r01*x13957)));
evalcond[4]=((((-1.0)*gconst37*r21*x13954))+((r22*x13953))+((sj1*sj2))+((cj1*cj2))+((r20*x13955)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*gconst37*r11*x13954))+((r12*x13953))+(((-1.0)*cj1*sj2))+((r10*x13955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13958=((1.0)*gconst37);
CheckValue<IkReal> x13959=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x13958))+(((-1.0)*gconst38*r21)))),-1);
if(!x13959.valid){
continue;
}
CheckValue<IkReal> x13960 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x13958))+((gconst38*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13959.value)))+(x13960.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13961=IKcos(j4);
IkReal x13962=IKsin(j4);
IkReal x13963=((1.0)*x13961);
IkReal x13964=(gconst38*x13961);
IkReal x13965=(gconst38*x13962);
IkReal x13966=((1.0)*gconst37*x13962);
evalcond[0]=(((r02*x13962))+(((-1.0)*gconst37*r01*x13963))+((r00*x13964)));
evalcond[1]=((((-1.0)*r21*x13966))+(((-1.0)*r22*x13963))+((r20*x13965)));
evalcond[2]=((((-1.0)*r11*x13966))+((r10*x13965))+(((-1.0)*r12*x13963)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x13963))+(((-1.0)*r01*x13966))+((r00*x13965)));
evalcond[4]=(((sj1*sj2))+((r20*x13964))+((cj1*cj2))+(((-1.0)*gconst37*r21*x13963))+((r22*x13962)));
evalcond[5]=(((cj2*sj1))+((r10*x13964))+(((-1.0)*cj1*sj2))+((r12*x13962))+(((-1.0)*gconst37*r11*x13963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13967=((-1.0)*pz);
CheckValue<IkReal> x13969 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13969.valid){
continue;
}
IkReal x13968=((-1.0)*(x13969.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x13968;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13967);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13967);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst36=x13968;
IkReal gconst37=((-1.0)*r11);
IkReal gconst38=r10;
IkReal x13970=(r00*r10);
IkReal x13971=((1.0)*sj3);
IkReal x13972=(r01*r11);
j4eval[0]=(x13972+x13970);
j4eval[1]=((((-1.0)*x13971*x13972))+(((-1.0)*x13970*x13971)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13973=((-1.0)*pz);
CheckValue<IkReal> x13975 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13975.valid){
continue;
}
IkReal x13974=((-1.0)*(x13975.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x13974;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13973);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13973);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst36=x13974;
IkReal gconst37=((-1.0)*r11);
IkReal gconst38=r10;
IkReal x13976=(r01*r11);
IkReal x13977=(r00*r10);
IkReal x13978=((1.0)*cj3);
j4eval[0]=(x13977+x13976);
j4eval[1]=((((-1.0)*x13977*x13978))+(((-1.0)*x13976*x13978)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13979=((-1.0)*pz);
CheckValue<IkReal> x13981 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13981.valid){
continue;
}
IkReal x13980=((-1.0)*(x13981.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x13980;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13979);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13979);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst36=x13980;
IkReal gconst37=((-1.0)*r11);
IkReal gconst38=r10;
IkReal x13982=((1.0)*cj3);
j4eval[0]=r22;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r00*r10*x13982))+(((-1.0)*r01*r11*x13982)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13983=((1.0)*r00);
CheckValue<IkReal> x13984=IKPowWithIntegerCheck(r22,-1);
if(!x13984.valid){
continue;
}
CheckValue<IkReal> x13985=IKPowWithIntegerCheck(sj3,-1);
if(!x13985.valid){
continue;
}
CheckValue<IkReal> x13986=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst38*x13983))+((cj3*gconst37*r01))),-1);
if(!x13986.valid){
continue;
}
if( IKabs(((x13984.value)*(x13985.value)*((((sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13986.value)*(((((-1.0)*gconst37*sj3*x13983))+(((-1.0)*gconst38*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13984.value)*(x13985.value)*((((sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13986.value)*(((((-1.0)*gconst37*sj3*x13983))+(((-1.0)*gconst38*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13984.value)*(x13985.value)*((((sj1*sj2))+((cj1*cj2))))), ((x13986.value)*(((((-1.0)*gconst37*sj3*x13983))+(((-1.0)*gconst38*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13987=IKsin(j4);
IkReal x13988=IKcos(j4);
IkReal x13989=(cj2*sj1);
IkReal x13990=(sj1*sj2);
IkReal x13991=(gconst37*r01);
IkReal x13992=((1.0)*cj1);
IkReal x13993=((1.0)*gconst38);
IkReal x13994=(r00*sj3);
IkReal x13995=(cj3*r00);
IkReal x13996=((1.0)*gconst37);
IkReal x13997=(gconst38*sj3);
IkReal x13998=(gconst37*sj3);
IkReal x13999=(sj2*x13992);
IkReal x14000=((1.0)*x13987);
IkReal x14001=(gconst38*x13987);
IkReal x14002=(cj3*gconst37*x13988);
IkReal x14003=(r10*x13988*x13993);
evalcond[0]=((-1.0)*r22*x13988);
evalcond[1]=(((r10*x14001))+(((-1.0)*r11*x13987*x13996)));
evalcond[2]=((((-1.0)*r22*sj3*x14000))+x13990+((cj1*cj2)));
evalcond[3]=((-1.0)+((r00*x14001))+(((-1.0)*x13991*x14000)));
evalcond[4]=((((-1.0)*cj3*r22*x14000))+x13989+(((-1.0)*x13999)));
evalcond[5]=((((-1.0)*x13988*x13993*x13995))+((r01*x13997))+((gconst37*x13994))+((cj3*x13988*x13991)));
evalcond[6]=((((-1.0)*cj3*r01*x13993))+(((-1.0)*x13988*x13993*x13994))+((sj3*x13988*x13991))+(((-1.0)*x13995*x13996)));
evalcond[7]=((((-1.0)*cj2*x13992))+(((-1.0)*cj3*x14003))+((r11*x13997))+((r10*x13998))+((r11*x14002))+(((-1.0)*x13990)));
evalcond[8]=(x13989+(((-1.0)*sj3*x14003))+((r11*x13988*x13998))+(((-1.0)*cj3*r10*x13996))+(((-1.0)*x13999))+(((-1.0)*cj3*r11*x13993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14004=((1.0)*gconst37);
IkReal x14005=(gconst38*r00);
CheckValue<IkReal> x14006=IKPowWithIntegerCheck((x14005+(((-1.0)*r01*x14004))),-1);
if(!x14006.valid){
continue;
}
CheckValue<IkReal> x14007=IKPowWithIntegerCheck((((cj3*gconst37*r01))+(((-1.0)*cj3*x14005))),-1);
if(!x14007.valid){
continue;
}
if( IKabs(x14006.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14007.value)*(((((-1.0)*r00*sj3*x14004))+(((-1.0)*gconst38*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14006.value)+IKsqr(((x14007.value)*(((((-1.0)*r00*sj3*x14004))+(((-1.0)*gconst38*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14006.value, ((x14007.value)*(((((-1.0)*r00*sj3*x14004))+(((-1.0)*gconst38*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14008=IKsin(j4);
IkReal x14009=IKcos(j4);
IkReal x14010=(cj2*sj1);
IkReal x14011=(sj1*sj2);
IkReal x14012=(gconst37*r01);
IkReal x14013=((1.0)*cj1);
IkReal x14014=((1.0)*gconst38);
IkReal x14015=(r00*sj3);
IkReal x14016=(cj3*r00);
IkReal x14017=((1.0)*gconst37);
IkReal x14018=(gconst38*sj3);
IkReal x14019=(gconst37*sj3);
IkReal x14020=(sj2*x14013);
IkReal x14021=((1.0)*x14008);
IkReal x14022=(gconst38*x14008);
IkReal x14023=(cj3*gconst37*x14009);
IkReal x14024=(r10*x14009*x14014);
evalcond[0]=((-1.0)*r22*x14009);
evalcond[1]=(((r10*x14022))+(((-1.0)*r11*x14008*x14017)));
evalcond[2]=((((-1.0)*r22*sj3*x14021))+((cj1*cj2))+x14011);
evalcond[3]=((-1.0)+((r00*x14022))+(((-1.0)*x14012*x14021)));
evalcond[4]=((((-1.0)*x14020))+x14010+(((-1.0)*cj3*r22*x14021)));
evalcond[5]=((((-1.0)*x14009*x14014*x14016))+((gconst37*x14015))+((cj3*x14009*x14012))+((r01*x14018)));
evalcond[6]=((((-1.0)*x14009*x14014*x14015))+(((-1.0)*cj3*r01*x14014))+(((-1.0)*x14016*x14017))+((sj3*x14009*x14012)));
evalcond[7]=(((r11*x14023))+(((-1.0)*cj3*x14024))+(((-1.0)*cj2*x14013))+((r11*x14018))+(((-1.0)*x14011))+((r10*x14019)));
evalcond[8]=((((-1.0)*cj3*r11*x14014))+((r11*x14009*x14019))+(((-1.0)*x14020))+(((-1.0)*cj3*r10*x14017))+x14010+(((-1.0)*sj3*x14024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14025=(gconst37*r01);
IkReal x14026=(gconst38*r00);
CheckValue<IkReal> x14027=IKPowWithIntegerCheck(((((-1.0)*x14025))+x14026),-1);
if(!x14027.valid){
continue;
}
CheckValue<IkReal> x14028=IKPowWithIntegerCheck((((sj3*x14025))+(((-1.0)*sj3*x14026))),-1);
if(!x14028.valid){
continue;
}
if( IKabs(x14027.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14028.value)*((((cj3*gconst37*r00))+((cj3*gconst38*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14027.value)+IKsqr(((x14028.value)*((((cj3*gconst37*r00))+((cj3*gconst38*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14027.value, ((x14028.value)*((((cj3*gconst37*r00))+((cj3*gconst38*r01))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14029=IKsin(j4);
IkReal x14030=IKcos(j4);
IkReal x14031=(cj2*sj1);
IkReal x14032=(sj1*sj2);
IkReal x14033=(gconst37*r01);
IkReal x14034=((1.0)*cj1);
IkReal x14035=((1.0)*gconst38);
IkReal x14036=(r00*sj3);
IkReal x14037=(cj3*r00);
IkReal x14038=((1.0)*gconst37);
IkReal x14039=(gconst38*sj3);
IkReal x14040=(gconst37*sj3);
IkReal x14041=(sj2*x14034);
IkReal x14042=((1.0)*x14029);
IkReal x14043=(gconst38*x14029);
IkReal x14044=(cj3*gconst37*x14030);
IkReal x14045=(r10*x14030*x14035);
evalcond[0]=((-1.0)*r22*x14030);
evalcond[1]=((((-1.0)*r11*x14029*x14038))+((r10*x14043)));
evalcond[2]=((((-1.0)*r22*sj3*x14042))+((cj1*cj2))+x14032);
evalcond[3]=((-1.0)+((r00*x14043))+(((-1.0)*x14033*x14042)));
evalcond[4]=((((-1.0)*x14041))+x14031+(((-1.0)*cj3*r22*x14042)));
evalcond[5]=(((r01*x14039))+((cj3*x14030*x14033))+((gconst37*x14036))+(((-1.0)*x14030*x14035*x14037)));
evalcond[6]=((((-1.0)*x14037*x14038))+((sj3*x14030*x14033))+(((-1.0)*cj3*r01*x14035))+(((-1.0)*x14030*x14035*x14036)));
evalcond[7]=(((r11*x14044))+(((-1.0)*cj2*x14034))+((r11*x14039))+((r10*x14040))+(((-1.0)*x14032))+(((-1.0)*cj3*x14045)));
evalcond[8]=((((-1.0)*cj3*r10*x14038))+(((-1.0)*cj3*r11*x14035))+(((-1.0)*x14041))+((r11*x14030*x14040))+x14031+(((-1.0)*sj3*x14045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14046=gconst37*gconst37;
IkReal x14047=gconst38*gconst38;
IkReal x14048=(cj3*r00);
IkReal x14049=(r01*sj3);
IkReal x14050=((1.0)*gconst37);
IkReal x14051=(gconst38*r20);
IkReal x14052=(r00*sj3);
IkReal x14053=(gconst38*r21);
IkReal x14054=((1.0)*cj3*r01);
IkReal x14055=(r21*x14046);
IkReal x14056=(r20*x14047);
CheckValue<IkReal> x14057 = IKatan2WithCheck(IkReal(((((-1.0)*gconst38*r22*x14054))+(((-1.0)*r22*x14048*x14050)))),IkReal(((((-1.0)*x14048*x14050*x14051))+((cj3*gconst37*r01*x14053))+((x14048*x14055))+(((-1.0)*x14054*x14056)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14057.valid){
continue;
}
CheckValue<IkReal> x14058=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14049*x14050*x14051))+((x14052*x14056))+(((-1.0)*x14050*x14052*x14053))+((x14049*x14055))+((r02*r22*sj3)))),-1);
if(!x14058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14057.value)+(((1.5707963267949)*(x14058.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14059=IKsin(j4);
IkReal x14060=IKcos(j4);
IkReal x14061=(cj2*sj1);
IkReal x14062=(gconst37*r21);
IkReal x14063=(gconst38*sj3);
IkReal x14064=(gconst38*r20);
IkReal x14065=((1.0)*cj1);
IkReal x14066=(gconst37*r01);
IkReal x14067=(sj1*sj2);
IkReal x14068=(cj3*gconst38);
IkReal x14069=(gconst37*r00);
IkReal x14070=((1.0)*cj3);
IkReal x14071=(gconst37*sj3);
IkReal x14072=(sj2*x14065);
IkReal x14073=((1.0)*x14060);
IkReal x14074=((1.0)*x14059);
IkReal x14075=(gconst38*x14059);
IkReal x14076=(sj3*x14060);
IkReal x14077=(cj3*gconst37*x14060);
evalcond[0]=((((-1.0)*r22*x14073))+(((-1.0)*x14062*x14074))+((x14059*x14064)));
evalcond[1]=((((-1.0)*r12*x14073))+(((-1.0)*gconst37*r11*x14074))+((r10*x14075)));
evalcond[2]=((-1.0)+(((-1.0)*x14066*x14074))+((r00*x14075))+(((-1.0)*r02*x14073)));
evalcond[3]=(((cj3*x14060*x14066))+((sj3*x14069))+((r01*x14063))+(((-1.0)*r00*x14068*x14073))+(((-1.0)*r02*x14059*x14070)));
evalcond[4]=((((-1.0)*r02*sj3*x14074))+(((-1.0)*r01*x14068))+((x14066*x14076))+(((-1.0)*x14069*x14070))+(((-1.0)*r00*x14063*x14073)));
evalcond[5]=(((cj3*x14060*x14062))+(((-1.0)*r22*x14059*x14070))+((r21*x14063))+(((-1.0)*x14060*x14064*x14070))+((r20*x14071))+(((-1.0)*x14072))+x14061);
evalcond[6]=((((-1.0)*r22*sj3*x14074))+((x14062*x14076))+(((-1.0)*gconst37*r20*x14070))+(((-1.0)*r20*x14063*x14073))+(((-1.0)*r21*x14068))+((cj1*cj2))+x14067);
evalcond[7]=((((-1.0)*r10*x14068*x14073))+(((-1.0)*cj2*x14065))+((r11*x14077))+(((-1.0)*x14067))+((r10*x14071))+((r11*x14063))+(((-1.0)*r12*x14059*x14070)));
evalcond[8]=((((-1.0)*r10*x14063*x14073))+(((-1.0)*x14072))+(((-1.0)*r12*sj3*x14074))+x14061+(((-1.0)*r11*x14068))+(((-1.0)*gconst37*r10*x14070))+((r11*x14060*x14071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14078=gconst38*gconst38;
IkReal x14079=gconst37*gconst37;
IkReal x14080=(r01*r20);
IkReal x14081=(gconst37*gconst38);
IkReal x14082=((1.0)*cj3);
IkReal x14083=(r00*sj3);
IkReal x14084=(r01*sj3);
IkReal x14085=(r21*x14079);
CheckValue<IkReal> x14086=IKPowWithIntegerCheck(IKsign((((cj3*r01*x14085))+((cj3*r00*r20*x14078))+((cj3*r02*r22))+(((-1.0)*x14080*x14081*x14082))+(((-1.0)*r00*r21*x14081*x14082)))),-1);
if(!x14086.valid){
continue;
}
CheckValue<IkReal> x14087 = IKatan2WithCheck(IkReal((((gconst38*r22*x14084))+((gconst37*r22*x14083)))),IkReal((((sj3*x14078*x14080))+(((-1.0)*x14083*x14085))+(((-1.0)*r21*x14081*x14084))+((r20*x14081*x14083)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14087.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14086.value)))+(x14087.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14088=IKsin(j4);
IkReal x14089=IKcos(j4);
IkReal x14090=(cj2*sj1);
IkReal x14091=(gconst37*r21);
IkReal x14092=(gconst38*sj3);
IkReal x14093=(gconst38*r20);
IkReal x14094=((1.0)*cj1);
IkReal x14095=(gconst37*r01);
IkReal x14096=(sj1*sj2);
IkReal x14097=(cj3*gconst38);
IkReal x14098=(gconst37*r00);
IkReal x14099=((1.0)*cj3);
IkReal x14100=(gconst37*sj3);
IkReal x14101=(sj2*x14094);
IkReal x14102=((1.0)*x14089);
IkReal x14103=((1.0)*x14088);
IkReal x14104=(gconst38*x14088);
IkReal x14105=(sj3*x14089);
IkReal x14106=(cj3*gconst37*x14089);
evalcond[0]=(((x14088*x14093))+(((-1.0)*x14091*x14103))+(((-1.0)*r22*x14102)));
evalcond[1]=((((-1.0)*gconst37*r11*x14103))+(((-1.0)*r12*x14102))+((r10*x14104)));
evalcond[2]=((-1.0)+((r00*x14104))+(((-1.0)*r02*x14102))+(((-1.0)*x14095*x14103)));
evalcond[3]=(((sj3*x14098))+((cj3*x14089*x14095))+(((-1.0)*r00*x14097*x14102))+(((-1.0)*r02*x14088*x14099))+((r01*x14092)));
evalcond[4]=((((-1.0)*r01*x14097))+(((-1.0)*r02*sj3*x14103))+(((-1.0)*x14098*x14099))+(((-1.0)*r00*x14092*x14102))+((x14095*x14105)));
evalcond[5]=((((-1.0)*r22*x14088*x14099))+((cj3*x14089*x14091))+(((-1.0)*x14089*x14093*x14099))+((r21*x14092))+(((-1.0)*x14101))+((r20*x14100))+x14090);
evalcond[6]=((((-1.0)*r22*sj3*x14103))+(((-1.0)*gconst37*r20*x14099))+(((-1.0)*r20*x14092*x14102))+((x14091*x14105))+(((-1.0)*r21*x14097))+((cj1*cj2))+x14096);
evalcond[7]=((((-1.0)*r12*x14088*x14099))+(((-1.0)*x14096))+(((-1.0)*r10*x14097*x14102))+(((-1.0)*cj2*x14094))+((r10*x14100))+((r11*x14092))+((r11*x14106)));
evalcond[8]=((((-1.0)*r11*x14097))+((r11*x14089*x14100))+(((-1.0)*x14101))+(((-1.0)*gconst37*r10*x14099))+(((-1.0)*r10*x14092*x14102))+x14090+(((-1.0)*r12*sj3*x14103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14107=((1.0)*gconst37);
CheckValue<IkReal> x14108 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x14107))+((gconst38*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14108.valid){
continue;
}
CheckValue<IkReal> x14109=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14107))+(((-1.0)*gconst38*r21)))),-1);
if(!x14109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14108.value)+(((1.5707963267949)*(x14109.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14110=IKsin(j4);
IkReal x14111=IKcos(j4);
IkReal x14112=(cj2*sj1);
IkReal x14113=(gconst37*r21);
IkReal x14114=(gconst38*sj3);
IkReal x14115=(gconst38*r20);
IkReal x14116=((1.0)*cj1);
IkReal x14117=(gconst37*r01);
IkReal x14118=(sj1*sj2);
IkReal x14119=(cj3*gconst38);
IkReal x14120=(gconst37*r00);
IkReal x14121=((1.0)*cj3);
IkReal x14122=(gconst37*sj3);
IkReal x14123=(sj2*x14116);
IkReal x14124=((1.0)*x14111);
IkReal x14125=((1.0)*x14110);
IkReal x14126=(gconst38*x14110);
IkReal x14127=(sj3*x14111);
IkReal x14128=(cj3*gconst37*x14111);
evalcond[0]=(((x14110*x14115))+(((-1.0)*r22*x14124))+(((-1.0)*x14113*x14125)));
evalcond[1]=((((-1.0)*r12*x14124))+((r10*x14126))+(((-1.0)*gconst37*r11*x14125)));
evalcond[2]=((-1.0)+((r00*x14126))+(((-1.0)*r02*x14124))+(((-1.0)*x14117*x14125)));
evalcond[3]=((((-1.0)*r02*x14110*x14121))+((cj3*x14111*x14117))+((r01*x14114))+((sj3*x14120))+(((-1.0)*r00*x14119*x14124)));
evalcond[4]=((((-1.0)*r01*x14119))+(((-1.0)*x14120*x14121))+(((-1.0)*r02*sj3*x14125))+(((-1.0)*r00*x14114*x14124))+((x14117*x14127)));
evalcond[5]=(((cj3*x14111*x14113))+(((-1.0)*x14123))+(((-1.0)*x14111*x14115*x14121))+((r20*x14122))+(((-1.0)*r22*x14110*x14121))+x14112+((r21*x14114)));
evalcond[6]=((((-1.0)*r21*x14119))+(((-1.0)*r22*sj3*x14125))+((x14113*x14127))+(((-1.0)*r20*x14114*x14124))+x14118+((cj1*cj2))+(((-1.0)*gconst37*r20*x14121)));
evalcond[7]=(((r11*x14114))+(((-1.0)*r12*x14110*x14121))+(((-1.0)*cj2*x14116))+(((-1.0)*r10*x14119*x14124))+(((-1.0)*x14118))+((r10*x14122))+((r11*x14128)));
evalcond[8]=((((-1.0)*r12*sj3*x14125))+((r11*x14111*x14122))+(((-1.0)*x14123))+(((-1.0)*gconst37*r10*x14121))+(((-1.0)*r10*x14114*x14124))+x14112+(((-1.0)*r11*x14119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14130 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14130)==0){
continue;
}
IkReal x14129=pow(x14130,-0.5);
CheckValue<IkReal> x14131 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14131.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x14131.value))));
IkReal gconst40=((1.0)*r11*x14129);
IkReal gconst41=((-1.0)*r10*x14129);
CheckValue<IkReal> x14132 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14132.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14132.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14135 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14135.valid){
continue;
}
IkReal x14133=((1.0)*(x14135.value));
IkReal x14134=x14129;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14133)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14133)));
IkReal gconst40=((1.0)*r11*x14134);
IkReal gconst41=((-1.0)*r10*x14134);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14138 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14138.valid){
continue;
}
IkReal x14136=((1.0)*(x14138.value));
IkReal x14137=x14129;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14136)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14136)));
IkReal gconst40=((1.0)*r11*x14137);
IkReal gconst41=((-1.0)*r10*x14137);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14139=gconst41*gconst41;
IkReal x14140=gconst40*gconst40;
IkReal x14141=(r01*r21);
IkReal x14142=(gconst41*sj3);
IkReal x14143=((1.0)*gconst40);
IkReal x14144=(gconst40*r00);
IkReal x14145=(r00*r21);
IkReal x14146=(cj3*gconst41);
IkReal x14147=(r20*x14139);
CheckValue<IkReal> x14148 = IKatan2WithCheck(IkReal((((r01*r22*x14142))+((r22*sj3*x14144)))),IkReal((((r01*sj3*x14147))+(((-1.0)*sj3*x14140*x14145))+(((-1.0)*x14141*x14142*x14143))+((r20*x14142*x14144)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14148.valid){
continue;
}
CheckValue<IkReal> x14149=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*r20*x14143*x14146))+((cj3*x14140*x14141))+(((-1.0)*x14143*x14145*x14146))+((cj3*r02*r22))+((cj3*r00*x14147)))),-1);
if(!x14149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14148.value)+(((1.5707963267949)*(x14149.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14150=IKsin(j4);
IkReal x14151=IKcos(j4);
IkReal x14152=(cj2*sj1);
IkReal x14153=(gconst40*r01);
IkReal x14154=(cj3*gconst41);
IkReal x14155=(gconst40*sj3);
IkReal x14156=(sj1*sj2);
IkReal x14157=(gconst41*sj3);
IkReal x14158=((1.0)*cj1);
IkReal x14159=(gconst40*r11);
IkReal x14160=(gconst40*r21);
IkReal x14161=(sj2*x14158);
IkReal x14162=((1.0)*x14151);
IkReal x14163=((1.0)*x14150);
IkReal x14164=(cj3*x14151);
IkReal x14165=(gconst41*x14150);
IkReal x14166=((1.0)*cj3*gconst40);
evalcond[0]=((((-1.0)*r22*x14162))+(((-1.0)*x14160*x14163))+((r20*x14165)));
evalcond[1]=(((r10*x14165))+(((-1.0)*r12*x14162))+(((-1.0)*x14159*x14163)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14162))+(((-1.0)*x14153*x14163))+((r00*x14165)));
evalcond[3]=((((-1.0)*r00*x14154*x14162))+((r00*x14155))+((r01*x14157))+(((-1.0)*cj3*r02*x14163))+((x14153*x14164)));
evalcond[4]=((((-1.0)*r01*x14154))+((sj3*x14151*x14153))+(((-1.0)*r02*sj3*x14163))+(((-1.0)*r00*x14166))+(((-1.0)*r00*x14157*x14162)));
evalcond[5]=(((x14160*x14164))+(((-1.0)*cj3*r22*x14163))+(((-1.0)*r20*x14154*x14162))+(((-1.0)*x14161))+x14152+((r21*x14157))+((r20*x14155)));
evalcond[6]=((((-1.0)*r21*x14154))+((r21*x14151*x14155))+(((-1.0)*r20*x14157*x14162))+(((-1.0)*r22*sj3*x14163))+(((-1.0)*r20*x14166))+x14156+((cj1*cj2)));
evalcond[7]=(((x14159*x14164))+((r10*x14155))+(((-1.0)*cj3*r12*x14163))+(((-1.0)*r10*x14154*x14162))+((r11*x14157))+(((-1.0)*cj2*x14158))+(((-1.0)*x14156)));
evalcond[8]=((((-1.0)*r11*x14154))+(((-1.0)*r12*sj3*x14163))+(((-1.0)*x14161))+x14152+(((-1.0)*r10*x14166))+(((-1.0)*r10*x14157*x14162))+((r11*x14151*x14155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14167=((1.0)*gconst40);
CheckValue<IkReal> x14168 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst41*r10))+(((-1.0)*r11*x14167)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14168.valid){
continue;
}
CheckValue<IkReal> x14169=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14167))+(((-1.0)*gconst41*r21)))),-1);
if(!x14169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14168.value)+(((1.5707963267949)*(x14169.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14170=IKsin(j4);
IkReal x14171=IKcos(j4);
IkReal x14172=(cj2*sj1);
IkReal x14173=(gconst40*r01);
IkReal x14174=(cj3*gconst41);
IkReal x14175=(gconst40*sj3);
IkReal x14176=(sj1*sj2);
IkReal x14177=(gconst41*sj3);
IkReal x14178=((1.0)*cj1);
IkReal x14179=(gconst40*r11);
IkReal x14180=(gconst40*r21);
IkReal x14181=(sj2*x14178);
IkReal x14182=((1.0)*x14171);
IkReal x14183=((1.0)*x14170);
IkReal x14184=(cj3*x14171);
IkReal x14185=(gconst41*x14170);
IkReal x14186=((1.0)*cj3*gconst40);
evalcond[0]=(((r20*x14185))+(((-1.0)*x14180*x14183))+(((-1.0)*r22*x14182)));
evalcond[1]=((((-1.0)*r12*x14182))+(((-1.0)*x14179*x14183))+((r10*x14185)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14182))+((r00*x14185))+(((-1.0)*x14173*x14183)));
evalcond[3]=(((r01*x14177))+((r00*x14175))+(((-1.0)*r00*x14174*x14182))+((x14173*x14184))+(((-1.0)*cj3*r02*x14183)));
evalcond[4]=((((-1.0)*r00*x14186))+((sj3*x14171*x14173))+(((-1.0)*r02*sj3*x14183))+(((-1.0)*r01*x14174))+(((-1.0)*r00*x14177*x14182)));
evalcond[5]=(((r21*x14177))+((r20*x14175))+((x14180*x14184))+(((-1.0)*cj3*r22*x14183))+x14172+(((-1.0)*x14181))+(((-1.0)*r20*x14174*x14182)));
evalcond[6]=(((r21*x14171*x14175))+(((-1.0)*r20*x14177*x14182))+(((-1.0)*r21*x14174))+(((-1.0)*r20*x14186))+x14176+((cj1*cj2))+(((-1.0)*r22*sj3*x14183)));
evalcond[7]=(((r11*x14177))+(((-1.0)*r10*x14174*x14182))+(((-1.0)*cj2*x14178))+((x14179*x14184))+(((-1.0)*x14176))+((r10*x14175))+(((-1.0)*cj3*r12*x14183)));
evalcond[8]=((((-1.0)*r12*sj3*x14183))+(((-1.0)*r10*x14177*x14182))+(((-1.0)*r10*x14186))+x14172+(((-1.0)*x14181))+(((-1.0)*r11*x14174))+((r11*x14171*x14175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14187=IKPowWithIntegerCheck(IKsign((((gconst40*r10))+((gconst41*r11)))),-1);
if(!x14187.valid){
continue;
}
CheckValue<IkReal> x14188 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst41*r20))+(((-1.0)*gconst40*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14187.value)))+(x14188.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14189=IKsin(j4);
IkReal x14190=IKcos(j4);
IkReal x14191=(cj2*sj1);
IkReal x14192=(gconst40*r01);
IkReal x14193=(cj3*gconst41);
IkReal x14194=(gconst40*sj3);
IkReal x14195=(sj1*sj2);
IkReal x14196=(gconst41*sj3);
IkReal x14197=((1.0)*cj1);
IkReal x14198=(gconst40*r11);
IkReal x14199=(gconst40*r21);
IkReal x14200=(sj2*x14197);
IkReal x14201=((1.0)*x14190);
IkReal x14202=((1.0)*x14189);
IkReal x14203=(cj3*x14190);
IkReal x14204=(gconst41*x14189);
IkReal x14205=((1.0)*cj3*gconst40);
evalcond[0]=((((-1.0)*x14199*x14202))+((r20*x14204))+(((-1.0)*r22*x14201)));
evalcond[1]=((((-1.0)*x14198*x14202))+((r10*x14204))+(((-1.0)*r12*x14201)));
evalcond[2]=((-1.0)+(((-1.0)*x14192*x14202))+((r00*x14204))+(((-1.0)*r02*x14201)));
evalcond[3]=((((-1.0)*cj3*r02*x14202))+(((-1.0)*r00*x14193*x14201))+((r01*x14196))+((r00*x14194))+((x14192*x14203)));
evalcond[4]=(((sj3*x14190*x14192))+(((-1.0)*r00*x14205))+(((-1.0)*r01*x14193))+(((-1.0)*r02*sj3*x14202))+(((-1.0)*r00*x14196*x14201)));
evalcond[5]=((((-1.0)*x14200))+((x14199*x14203))+x14191+((r21*x14196))+(((-1.0)*r20*x14193*x14201))+(((-1.0)*cj3*r22*x14202))+((r20*x14194)));
evalcond[6]=((((-1.0)*r20*x14205))+(((-1.0)*r20*x14196*x14201))+x14195+((cj1*cj2))+(((-1.0)*r22*sj3*x14202))+(((-1.0)*r21*x14193))+((r21*x14190*x14194)));
evalcond[7]=(((r10*x14194))+(((-1.0)*x14195))+(((-1.0)*cj3*r12*x14202))+(((-1.0)*r10*x14193*x14201))+((x14198*x14203))+((r11*x14196))+(((-1.0)*cj2*x14197)));
evalcond[8]=((((-1.0)*r10*x14196*x14201))+(((-1.0)*r10*x14205))+((r11*x14190*x14194))+(((-1.0)*x14200))+(((-1.0)*r11*x14193))+(((-1.0)*r12*sj3*x14202))+x14191);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14206=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14206);
rxp0_2=(py*r00);
rxp1_0=(r21*x14206);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x14207=(cj5*r00);
IkReal x14208=(r01*sj5);
j4eval[0]=((((-1.0)*x14208))+x14207);
j4eval[1]=((((-1.0)*sj3*x14207))+((sj3*x14208)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14209=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14209);
rxp0_2=(py*r00);
rxp1_0=(r21*x14209);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x14210=(cj5*r00);
IkReal x14211=(r01*sj5);
j4eval[0]=((((-1.0)*x14211))+x14210);
j4eval[1]=((((-1.0)*cj3*x14210))+((cj3*x14211)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14212=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14212);
rxp0_2=(py*r00);
rxp1_0=(r21*x14212);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14213=((1.0)*r00);
CheckValue<IkReal> x14214=IKPowWithIntegerCheck(r12,-1);
if(!x14214.valid){
continue;
}
CheckValue<IkReal> x14215=IKPowWithIntegerCheck(sj3,-1);
if(!x14215.valid){
continue;
}
CheckValue<IkReal> x14216=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x14213))),-1);
if(!x14216.valid){
continue;
}
if( IKabs(((x14214.value)*(x14215.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14216.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14213)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14214.value)*(x14215.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x14216.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14213))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14214.value)*(x14215.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x14216.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14213))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14217=IKsin(j4);
IkReal x14218=IKcos(j4);
IkReal x14219=(cj2*sj1);
IkReal x14220=(cj1*cj2);
IkReal x14221=((1.0)*cj3);
IkReal x14222=(cj5*r21);
IkReal x14223=(sj1*sj2);
IkReal x14224=(cj5*r01);
IkReal x14225=(r20*sj5);
IkReal x14226=(r01*sj5);
IkReal x14227=(r00*sj5);
IkReal x14228=((1.0)*sj3);
IkReal x14229=((1.0)*cj1*sj2);
IkReal x14230=((1.0)*x14217);
IkReal x14231=(cj5*x14218);
IkReal x14232=(cj5*x14217);
IkReal x14233=(r21*sj5*x14218);
evalcond[0]=((-1.0)*r12*x14218);
evalcond[1]=(((r20*x14232))+(((-1.0)*r21*sj5*x14230)));
evalcond[2]=((-1.0)+((r00*x14232))+(((-1.0)*x14226*x14230)));
evalcond[3]=((((-1.0)*x14229))+(((-1.0)*r12*x14217*x14228))+x14219);
evalcond[4]=((((-1.0)*r12*x14217*x14221))+(((-1.0)*x14220))+(((-1.0)*x14223)));
evalcond[5]=(((cj3*x14218*x14226))+(((-1.0)*r00*x14221*x14231))+((sj3*x14227))+((sj3*x14224)));
evalcond[6]=((((-1.0)*x14221*x14227))+(((-1.0)*x14221*x14224))+((sj3*x14218*x14226))+(((-1.0)*r00*x14228*x14231)));
evalcond[7]=((((-1.0)*x14229))+((cj3*x14233))+((sj3*x14225))+((sj3*x14222))+x14219+(((-1.0)*r20*x14221*x14231)));
evalcond[8]=((((-1.0)*x14221*x14222))+(((-1.0)*x14221*x14225))+(((-1.0)*r20*x14228*x14231))+x14223+x14220+((sj3*x14233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14234=((1.0)*sj5);
IkReal x14235=(cj5*r00);
CheckValue<IkReal> x14236=IKPowWithIntegerCheck(((((-1.0)*r01*x14234))+x14235),-1);
if(!x14236.valid){
continue;
}
CheckValue<IkReal> x14237=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*x14235))),-1);
if(!x14237.valid){
continue;
}
if( IKabs(x14236.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14237.value)*(((((-1.0)*r00*sj3*x14234))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14236.value)+IKsqr(((x14237.value)*(((((-1.0)*r00*sj3*x14234))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14236.value, ((x14237.value)*(((((-1.0)*r00*sj3*x14234))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14238=IKsin(j4);
IkReal x14239=IKcos(j4);
IkReal x14240=(cj2*sj1);
IkReal x14241=(cj1*cj2);
IkReal x14242=((1.0)*cj3);
IkReal x14243=(cj5*r21);
IkReal x14244=(sj1*sj2);
IkReal x14245=(cj5*r01);
IkReal x14246=(r20*sj5);
IkReal x14247=(r01*sj5);
IkReal x14248=(r00*sj5);
IkReal x14249=((1.0)*sj3);
IkReal x14250=((1.0)*cj1*sj2);
IkReal x14251=((1.0)*x14238);
IkReal x14252=(cj5*x14239);
IkReal x14253=(cj5*x14238);
IkReal x14254=(r21*sj5*x14239);
evalcond[0]=((-1.0)*r12*x14239);
evalcond[1]=((((-1.0)*r21*sj5*x14251))+((r20*x14253)));
evalcond[2]=((-1.0)+(((-1.0)*x14247*x14251))+((r00*x14253)));
evalcond[3]=((((-1.0)*r12*x14238*x14249))+(((-1.0)*x14250))+x14240);
evalcond[4]=((((-1.0)*x14241))+(((-1.0)*x14244))+(((-1.0)*r12*x14238*x14242)));
evalcond[5]=(((sj3*x14248))+((sj3*x14245))+((cj3*x14239*x14247))+(((-1.0)*r00*x14242*x14252)));
evalcond[6]=(((sj3*x14239*x14247))+(((-1.0)*x14242*x14245))+(((-1.0)*x14242*x14248))+(((-1.0)*r00*x14249*x14252)));
evalcond[7]=(((sj3*x14246))+((sj3*x14243))+(((-1.0)*r20*x14242*x14252))+((cj3*x14254))+(((-1.0)*x14250))+x14240);
evalcond[8]=((((-1.0)*r20*x14249*x14252))+((sj3*x14254))+(((-1.0)*x14242*x14246))+(((-1.0)*x14242*x14243))+x14244+x14241);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14255=(r01*sj5);
IkReal x14256=(cj5*r00);
CheckValue<IkReal> x14257=IKPowWithIntegerCheck((x14256+(((-1.0)*x14255))),-1);
if(!x14257.valid){
continue;
}
CheckValue<IkReal> x14258=IKPowWithIntegerCheck(((((-1.0)*sj3*x14256))+((sj3*x14255))),-1);
if(!x14258.valid){
continue;
}
if( IKabs(x14257.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14258.value)*((((cj3*cj5*r01))+((cj3*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14257.value)+IKsqr(((x14258.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14257.value, ((x14258.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14259=IKsin(j4);
IkReal x14260=IKcos(j4);
IkReal x14261=(cj2*sj1);
IkReal x14262=(cj1*cj2);
IkReal x14263=((1.0)*cj3);
IkReal x14264=(cj5*r21);
IkReal x14265=(sj1*sj2);
IkReal x14266=(cj5*r01);
IkReal x14267=(r20*sj5);
IkReal x14268=(r01*sj5);
IkReal x14269=(r00*sj5);
IkReal x14270=((1.0)*sj3);
IkReal x14271=((1.0)*cj1*sj2);
IkReal x14272=((1.0)*x14259);
IkReal x14273=(cj5*x14260);
IkReal x14274=(cj5*x14259);
IkReal x14275=(r21*sj5*x14260);
evalcond[0]=((-1.0)*r12*x14260);
evalcond[1]=((((-1.0)*r21*sj5*x14272))+((r20*x14274)));
evalcond[2]=((-1.0)+(((-1.0)*x14268*x14272))+((r00*x14274)));
evalcond[3]=((((-1.0)*x14271))+(((-1.0)*r12*x14259*x14270))+x14261);
evalcond[4]=((((-1.0)*x14265))+(((-1.0)*x14262))+(((-1.0)*r12*x14259*x14263)));
evalcond[5]=(((sj3*x14266))+((sj3*x14269))+((cj3*x14260*x14268))+(((-1.0)*r00*x14263*x14273)));
evalcond[6]=((((-1.0)*r00*x14270*x14273))+((sj3*x14260*x14268))+(((-1.0)*x14263*x14269))+(((-1.0)*x14263*x14266)));
evalcond[7]=(((sj3*x14267))+((sj3*x14264))+((cj3*x14275))+(((-1.0)*x14271))+(((-1.0)*r20*x14263*x14273))+x14261);
evalcond[8]=(((sj3*x14275))+(((-1.0)*x14263*x14264))+(((-1.0)*x14263*x14267))+(((-1.0)*r20*x14270*x14273))+x14265+x14262);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14276=cj5*cj5;
IkReal x14277=(cj3*r00);
IkReal x14278=(r01*sj3);
IkReal x14279=(r00*sj3);
IkReal x14280=(cj3*r01);
IkReal x14281=(cj5*r20*sj5);
IkReal x14282=(r21*x14276);
IkReal x14283=(r20*x14276);
IkReal x14284=((1.0)*cj5*r21*sj5);
CheckValue<IkReal> x14285 = IKatan2WithCheck(IkReal((((cj5*r22*x14278))+((r22*sj5*x14279)))),IkReal(((((-1.0)*r21*x14279))+(((-1.0)*x14278*x14284))+((x14279*x14282))+((x14279*x14281))+((x14278*x14283)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14285.valid){
continue;
}
CheckValue<IkReal> x14286=IKPowWithIntegerCheck(IKsign((((r21*x14280))+(((-1.0)*x14280*x14282))+(((-1.0)*x14280*x14281))+((cj3*r02*r22))+(((-1.0)*x14277*x14284))+((x14277*x14283)))),-1);
if(!x14286.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14285.value)+(((1.5707963267949)*(x14286.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14287=IKsin(j4);
IkReal x14288=IKcos(j4);
IkReal x14289=(cj2*sj1);
IkReal x14290=(cj1*cj2);
IkReal x14291=(r11*sj5);
IkReal x14292=(cj5*sj3);
IkReal x14293=(sj1*sj2);
IkReal x14294=(r21*sj5);
IkReal x14295=(r01*sj5);
IkReal x14296=(sj3*sj5);
IkReal x14297=(cj3*cj5);
IkReal x14298=((1.0)*cj1*sj2);
IkReal x14299=((1.0)*x14288);
IkReal x14300=(cj3*x14288);
IkReal x14301=((1.0)*x14287);
IkReal x14302=((1.0)*x14297);
IkReal x14303=((1.0)*cj3*sj5);
IkReal x14304=(cj5*x14287);
IkReal x14305=(sj3*x14288);
evalcond[0]=(((r20*x14304))+(((-1.0)*r22*x14299))+(((-1.0)*x14294*x14301)));
evalcond[1]=((((-1.0)*r12*x14299))+((r10*x14304))+(((-1.0)*x14291*x14301)));
evalcond[2]=((-1.0)+(((-1.0)*x14295*x14301))+((r00*x14304))+(((-1.0)*r02*x14299)));
evalcond[3]=(((r00*x14296))+((r01*x14292))+(((-1.0)*cj3*r02*x14301))+((x14295*x14300))+(((-1.0)*r00*x14297*x14299)));
evalcond[4]=((((-1.0)*r02*sj3*x14301))+(((-1.0)*r01*x14302))+(((-1.0)*r00*x14303))+(((-1.0)*r00*x14292*x14299))+((x14295*x14305)));
evalcond[5]=(((r20*x14296))+((r21*x14292))+(((-1.0)*x14298))+(((-1.0)*cj3*r22*x14301))+(((-1.0)*r20*x14297*x14299))+x14289+((x14294*x14300)));
evalcond[6]=((((-1.0)*r22*sj3*x14301))+(((-1.0)*r21*x14302))+(((-1.0)*r20*x14303))+(((-1.0)*r20*x14292*x14299))+x14293+x14290+((x14294*x14305)));
evalcond[7]=((((-1.0)*cj3*r12*x14301))+((r10*x14296))+((x14291*x14300))+(((-1.0)*x14290))+(((-1.0)*x14293))+((r11*x14292))+(((-1.0)*r10*x14297*x14299)));
evalcond[8]=((((-1.0)*r11*x14302))+(((-1.0)*x14298))+((x14291*x14305))+(((-1.0)*r10*x14303))+(((-1.0)*r10*x14292*x14299))+x14289+(((-1.0)*r12*sj3*x14301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14306=((1.0)*sj5);
CheckValue<IkReal> x14307=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14306))+(((-1.0)*cj5*r21)))),-1);
if(!x14307.valid){
continue;
}
CheckValue<IkReal> x14308 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x14306)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14308.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14307.value)))+(x14308.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14309=IKsin(j4);
IkReal x14310=IKcos(j4);
IkReal x14311=(cj2*sj1);
IkReal x14312=(cj1*cj2);
IkReal x14313=(r11*sj5);
IkReal x14314=(cj5*sj3);
IkReal x14315=(sj1*sj2);
IkReal x14316=(r21*sj5);
IkReal x14317=(r01*sj5);
IkReal x14318=(sj3*sj5);
IkReal x14319=(cj3*cj5);
IkReal x14320=((1.0)*cj1*sj2);
IkReal x14321=((1.0)*x14310);
IkReal x14322=(cj3*x14310);
IkReal x14323=((1.0)*x14309);
IkReal x14324=((1.0)*x14319);
IkReal x14325=((1.0)*cj3*sj5);
IkReal x14326=(cj5*x14309);
IkReal x14327=(sj3*x14310);
evalcond[0]=((((-1.0)*x14316*x14323))+((r20*x14326))+(((-1.0)*r22*x14321)));
evalcond[1]=(((r10*x14326))+(((-1.0)*x14313*x14323))+(((-1.0)*r12*x14321)));
evalcond[2]=((-1.0)+(((-1.0)*x14317*x14323))+((r00*x14326))+(((-1.0)*r02*x14321)));
evalcond[3]=((((-1.0)*r00*x14319*x14321))+((x14317*x14322))+(((-1.0)*cj3*r02*x14323))+((r00*x14318))+((r01*x14314)));
evalcond[4]=((((-1.0)*r00*x14314*x14321))+(((-1.0)*r02*sj3*x14323))+((x14317*x14327))+(((-1.0)*r00*x14325))+(((-1.0)*r01*x14324)));
evalcond[5]=((((-1.0)*cj3*r22*x14323))+((r20*x14318))+(((-1.0)*x14320))+((r21*x14314))+((x14316*x14322))+x14311+(((-1.0)*r20*x14319*x14321)));
evalcond[6]=((((-1.0)*r20*x14314*x14321))+(((-1.0)*r20*x14325))+(((-1.0)*r21*x14324))+(((-1.0)*r22*sj3*x14323))+((x14316*x14327))+x14315+x14312);
evalcond[7]=((((-1.0)*cj3*r12*x14323))+((r11*x14314))+(((-1.0)*r10*x14319*x14321))+(((-1.0)*x14315))+(((-1.0)*x14312))+((r10*x14318))+((x14313*x14322)));
evalcond[8]=((((-1.0)*r10*x14314*x14321))+(((-1.0)*r10*x14325))+(((-1.0)*x14320))+(((-1.0)*r12*sj3*x14323))+x14311+(((-1.0)*r11*x14324))+((x14313*x14327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14328=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x14328.valid){
continue;
}
CheckValue<IkReal> x14329 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14329.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14328.value)))+(x14329.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14330=IKsin(j4);
IkReal x14331=IKcos(j4);
IkReal x14332=(cj2*sj1);
IkReal x14333=(cj1*cj2);
IkReal x14334=(r11*sj5);
IkReal x14335=(cj5*sj3);
IkReal x14336=(sj1*sj2);
IkReal x14337=(r21*sj5);
IkReal x14338=(r01*sj5);
IkReal x14339=(sj3*sj5);
IkReal x14340=(cj3*cj5);
IkReal x14341=((1.0)*cj1*sj2);
IkReal x14342=((1.0)*x14331);
IkReal x14343=(cj3*x14331);
IkReal x14344=((1.0)*x14330);
IkReal x14345=((1.0)*x14340);
IkReal x14346=((1.0)*cj3*sj5);
IkReal x14347=(cj5*x14330);
IkReal x14348=(sj3*x14331);
evalcond[0]=((((-1.0)*r22*x14342))+(((-1.0)*x14337*x14344))+((r20*x14347)));
evalcond[1]=((((-1.0)*r12*x14342))+((r10*x14347))+(((-1.0)*x14334*x14344)));
evalcond[2]=((-1.0)+(((-1.0)*x14338*x14344))+((r00*x14347))+(((-1.0)*r02*x14342)));
evalcond[3]=(((x14338*x14343))+(((-1.0)*cj3*r02*x14344))+((r00*x14339))+((r01*x14335))+(((-1.0)*r00*x14340*x14342)));
evalcond[4]=((((-1.0)*r01*x14345))+((x14338*x14348))+(((-1.0)*r00*x14335*x14342))+(((-1.0)*r02*sj3*x14344))+(((-1.0)*r00*x14346)));
evalcond[5]=(((r20*x14339))+((x14337*x14343))+(((-1.0)*r20*x14340*x14342))+(((-1.0)*cj3*r22*x14344))+(((-1.0)*x14341))+x14332+((r21*x14335)));
evalcond[6]=((((-1.0)*r20*x14346))+((x14337*x14348))+(((-1.0)*r21*x14345))+x14336+x14333+(((-1.0)*r20*x14335*x14342))+(((-1.0)*r22*sj3*x14344)));
evalcond[7]=(((r11*x14335))+((x14334*x14343))+(((-1.0)*cj3*r12*x14344))+(((-1.0)*x14333))+(((-1.0)*x14336))+(((-1.0)*r10*x14340*x14342))+((r10*x14339)));
evalcond[8]=((((-1.0)*r11*x14345))+(((-1.0)*r10*x14335*x14342))+((x14334*x14348))+(((-1.0)*r12*sj3*x14344))+(((-1.0)*x14341))+x14332+(((-1.0)*r10*x14346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14349=((-1.0)*r10);
IkReal x14351 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14351)==0){
continue;
}
IkReal x14350=pow(x14351,-0.5);
CheckValue<IkReal> x14352 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x14349),IKFAST_ATAN2_MAGTHRESH);
if(!x14352.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14352.value));
IkReal gconst13=(r11*x14350);
IkReal gconst14=(x14349*x14350);
CheckValue<IkReal> x14353 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14353.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14353.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14354=((-1.0)*r10);
IkReal x14355=x14350;
CheckValue<IkReal> x14357 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x14354),IKFAST_ATAN2_MAGTHRESH);
if(!x14357.valid){
continue;
}
IkReal x14356=((-1.0)*(x14357.value));
sj5=gconst13;
cj5=gconst14;
j5=x14356;
IkReal gconst12=x14356;
IkReal gconst13=(r11*x14355);
IkReal gconst14=(x14354*x14355);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14358=((1.0)*gconst13);
CheckValue<IkReal> x14359 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst14*r00))+((gconst14*r10*sj0))+(((-1.0)*r11*sj0*x14358))+(((-1.0)*cj0*r01*x14358)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14359.valid){
continue;
}
CheckValue<IkReal> x14360=IKPowWithIntegerCheck(IKsign((((gconst14*r21))+((gconst13*r20)))),-1);
if(!x14360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14359.value)+(((1.5707963267949)*(x14360.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14361=IKsin(j4);
IkReal x14362=IKcos(j4);
IkReal x14363=((1.0)*r22);
IkReal x14364=((1.0)*cj3);
IkReal x14365=(gconst13*r20);
IkReal x14366=(cj1*sj0);
IkReal x14367=(gconst13*sj3);
IkReal x14368=(gconst13*r11);
IkReal x14369=(sj1*sj2);
IkReal x14370=(gconst14*r21);
IkReal x14371=(gconst14*r20);
IkReal x14372=(cj2*sj1);
IkReal x14373=(cj1*sj2);
IkReal x14374=(gconst14*sj3);
IkReal x14375=((1.0)*cj0);
IkReal x14376=(gconst14*r10);
IkReal x14377=(cj1*cj2);
IkReal x14378=(gconst14*r00);
IkReal x14379=((1.0)*x14361);
IkReal x14380=((1.0)*x14362);
IkReal x14381=(cj3*gconst13*x14362);
evalcond[0]=((((-1.0)*x14362*x14363))+((x14361*x14371))+(((-1.0)*gconst13*r21*x14379)));
evalcond[1]=(sj0+((x14361*x14378))+(((-1.0)*gconst13*r01*x14379))+(((-1.0)*r02*x14380)));
evalcond[2]=(((x14361*x14376))+(((-1.0)*r12*x14380))+(((-1.0)*x14375))+(((-1.0)*x14368*x14379)));
evalcond[3]=((((-1.0)*cj3*x14361*x14363))+((r21*x14381))+(((-1.0)*x14373))+((sj3*x14365))+((sj3*x14370))+x14372+(((-1.0)*x14362*x14364*x14371)));
evalcond[4]=((((-1.0)*x14364*x14370))+(((-1.0)*x14364*x14365))+((r21*x14362*x14367))+x14377+x14369+(((-1.0)*sj3*x14371*x14380))+(((-1.0)*sj3*x14361*x14363)));
evalcond[5]=(((r01*x14374))+((r01*x14381))+((cj0*x14369))+(((-1.0)*r02*x14361*x14364))+((r00*x14367))+(((-1.0)*x14362*x14364*x14378))+((cj0*x14377)));
evalcond[6]=(((r10*x14367))+((sj0*x14369))+(((-1.0)*r12*x14361*x14364))+((r11*x14374))+((cj3*x14362*x14368))+(((-1.0)*x14362*x14364*x14376))+((cj2*x14366)));
evalcond[7]=((((-1.0)*r02*sj3*x14379))+(((-1.0)*gconst13*r00*x14364))+(((-1.0)*gconst14*r01*x14364))+(((-1.0)*x14372*x14375))+((r01*x14362*x14367))+(((-1.0)*r00*x14374*x14380))+((cj0*x14373)));
evalcond[8]=(((sj2*x14366))+(((-1.0)*r10*x14374*x14380))+(((-1.0)*gconst13*r10*x14364))+(((-1.0)*r12*sj3*x14379))+(((-1.0)*sj0*x14372))+((r11*x14362*x14367))+(((-1.0)*gconst14*r11*x14364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14382=((1.0)*gconst13);
CheckValue<IkReal> x14383 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x14382))+((cj0*gconst14*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14383.valid){
continue;
}
CheckValue<IkReal> x14384=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x14382))+(((-1.0)*gconst14*r01)))),-1);
if(!x14384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14383.value)+(((1.5707963267949)*(x14384.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14385=IKsin(j4);
IkReal x14386=IKcos(j4);
IkReal x14387=((1.0)*r22);
IkReal x14388=((1.0)*cj3);
IkReal x14389=(gconst13*r20);
IkReal x14390=(cj1*sj0);
IkReal x14391=(gconst13*sj3);
IkReal x14392=(gconst13*r11);
IkReal x14393=(sj1*sj2);
IkReal x14394=(gconst14*r21);
IkReal x14395=(gconst14*r20);
IkReal x14396=(cj2*sj1);
IkReal x14397=(cj1*sj2);
IkReal x14398=(gconst14*sj3);
IkReal x14399=((1.0)*cj0);
IkReal x14400=(gconst14*r10);
IkReal x14401=(cj1*cj2);
IkReal x14402=(gconst14*r00);
IkReal x14403=((1.0)*x14385);
IkReal x14404=((1.0)*x14386);
IkReal x14405=(cj3*gconst13*x14386);
evalcond[0]=((((-1.0)*x14386*x14387))+((x14385*x14395))+(((-1.0)*gconst13*r21*x14403)));
evalcond[1]=(sj0+((x14385*x14402))+(((-1.0)*r02*x14404))+(((-1.0)*gconst13*r01*x14403)));
evalcond[2]=(((x14385*x14400))+(((-1.0)*x14392*x14403))+(((-1.0)*r12*x14404))+(((-1.0)*x14399)));
evalcond[3]=(((r21*x14405))+(((-1.0)*cj3*x14385*x14387))+(((-1.0)*x14397))+(((-1.0)*x14386*x14388*x14395))+x14396+((sj3*x14389))+((sj3*x14394)));
evalcond[4]=((((-1.0)*sj3*x14395*x14404))+((r21*x14386*x14391))+(((-1.0)*sj3*x14385*x14387))+x14401+(((-1.0)*x14388*x14394))+(((-1.0)*x14388*x14389))+x14393);
evalcond[5]=(((cj0*x14393))+((cj0*x14401))+((r01*x14398))+((r00*x14391))+((r01*x14405))+(((-1.0)*x14386*x14388*x14402))+(((-1.0)*r02*x14385*x14388)));
evalcond[6]=(((sj0*x14393))+((cj2*x14390))+((r10*x14391))+((cj3*x14386*x14392))+((r11*x14398))+(((-1.0)*x14386*x14388*x14400))+(((-1.0)*r12*x14385*x14388)));
evalcond[7]=((((-1.0)*r02*sj3*x14403))+((cj0*x14397))+(((-1.0)*gconst14*r01*x14388))+((r01*x14386*x14391))+(((-1.0)*gconst13*r00*x14388))+(((-1.0)*r00*x14398*x14404))+(((-1.0)*x14396*x14399)));
evalcond[8]=(((r11*x14386*x14391))+(((-1.0)*gconst14*r11*x14388))+(((-1.0)*r10*x14398*x14404))+(((-1.0)*sj0*x14396))+(((-1.0)*r12*sj3*x14403))+((sj2*x14390))+(((-1.0)*gconst13*r10*x14388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14406=((-1.0)*r11);
IkReal x14408 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14408)==0){
continue;
}
IkReal x14407=pow(x14408,-0.5);
CheckValue<IkReal> x14409 = IKatan2WithCheck(IkReal(x14406),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14409.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14409.value))));
IkReal gconst16=(x14406*x14407);
IkReal gconst17=((1.0)*r10*x14407);
CheckValue<IkReal> x14410 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14410.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14410.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x14411=((-1.0)*r11);
CheckValue<IkReal> x14414 = IKatan2WithCheck(IkReal(x14411),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14414.valid){
continue;
}
IkReal x14412=((1.0)*(x14414.value));
IkReal x14413=x14407;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14412)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14412)));
IkReal gconst16=(x14411*x14413);
IkReal gconst17=((1.0)*r10*x14413);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14415=((-1.0)*r11);
CheckValue<IkReal> x14418 = IKatan2WithCheck(IkReal(x14415),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14418.valid){
continue;
}
IkReal x14416=((1.0)*(x14418.value));
IkReal x14417=x14407;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14416)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14416)));
IkReal gconst16=(x14415*x14417);
IkReal gconst17=((1.0)*r10*x14417);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14419=((-1.0)*r11);
CheckValue<IkReal> x14422 = IKatan2WithCheck(IkReal(x14419),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14422.valid){
continue;
}
IkReal x14420=((1.0)*(x14422.value));
IkReal x14421=x14407;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14420)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14420)));
IkReal gconst16=(x14419*x14421);
IkReal gconst17=((1.0)*r10*x14421);
IkReal x14423=r12*r12;
IkReal x14424=(cj0*r02);
IkReal x14425=x14407;
IkReal x14426=(sj0*x14425);
j4eval[0]=((IKabs((((x14423*x14426))+(((-1.0)*x14426))+((r12*x14424*x14425)))))+(IKabs((x14424+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x14427=((-1.0)*r11);
CheckValue<IkReal> x14430 = IKatan2WithCheck(IkReal(x14427),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14430.valid){
continue;
}
IkReal x14428=((1.0)*(x14430.value));
IkReal x14429=x14407;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14428)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14428)));
IkReal gconst16=(x14427*x14429);
IkReal gconst17=((1.0)*r10*x14429);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14431=((-1.0)*r11);
CheckValue<IkReal> x14434 = IKatan2WithCheck(IkReal(x14431),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14434.valid){
continue;
}
IkReal x14432=((1.0)*(x14434.value));
IkReal x14433=x14407;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14432)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14432)));
IkReal gconst16=(x14431*x14433);
IkReal gconst17=((1.0)*r10*x14433);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14435=gconst17*gconst17;
IkReal x14436=gconst16*gconst16;
IkReal x14437=(cj3*r01);
IkReal x14438=(r01*sj3);
IkReal x14439=(cj3*r00);
IkReal x14440=(r00*sj3);
IkReal x14441=(gconst16*gconst17);
IkReal x14442=((1.0)*r21);
IkReal x14443=(r21*x14436);
IkReal x14444=(r20*x14435);
CheckValue<IkReal> x14445 = IKatan2WithCheck(IkReal((((gconst17*r22*x14438))+((gconst16*r22*x14440)))),IkReal(((((-1.0)*x14436*x14440*x14442))+((x14438*x14444))+(((-1.0)*x14438*x14441*x14442))+((r20*x14440*x14441)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14445.valid){
continue;
}
CheckValue<IkReal> x14446=IKPowWithIntegerCheck(IKsign((((x14439*x14444))+((x14437*x14443))+(((-1.0)*r20*x14437*x14441))+((cj3*r02*r22))+(((-1.0)*x14439*x14441*x14442)))),-1);
if(!x14446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14445.value)+(((1.5707963267949)*(x14446.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14447=IKsin(j4);
IkReal x14448=IKcos(j4);
IkReal x14449=(cj2*sj1);
IkReal x14450=(cj3*gconst17);
IkReal x14451=((1.0)*cj1);
IkReal x14452=((1.0)*r21);
IkReal x14453=(gconst16*r11);
IkReal x14454=(gconst16*r01);
IkReal x14455=(sj1*sj2);
IkReal x14456=(r20*sj3);
IkReal x14457=(gconst17*sj3);
IkReal x14458=(gconst16*r00);
IkReal x14459=((1.0)*cj3);
IkReal x14460=(gconst16*r10);
IkReal x14461=(sj2*x14451);
IkReal x14462=((1.0)*x14448);
IkReal x14463=((1.0)*x14447);
IkReal x14464=(gconst17*x14447);
IkReal x14465=(cj3*x14448);
IkReal x14466=(sj3*x14448);
IkReal x14467=(gconst16*r21*x14448);
evalcond[0]=((((-1.0)*r22*x14462))+(((-1.0)*gconst16*x14447*x14452))+((r20*x14464)));
evalcond[1]=((((-1.0)*x14453*x14463))+((r10*x14464))+(((-1.0)*r12*x14462)));
evalcond[2]=((-1.0)+((r00*x14464))+(((-1.0)*r02*x14462))+(((-1.0)*x14454*x14463)));
evalcond[3]=(((r01*x14457))+(((-1.0)*r02*x14447*x14459))+((sj3*x14458))+((x14454*x14465))+(((-1.0)*r00*x14450*x14462)));
evalcond[4]=((((-1.0)*x14458*x14459))+(((-1.0)*r02*sj3*x14463))+(((-1.0)*r01*x14450))+((x14454*x14466))+(((-1.0)*r00*x14457*x14462)));
evalcond[5]=(((gconst16*r21*x14465))+(((-1.0)*r20*x14450*x14462))+x14449+((gconst16*x14456))+(((-1.0)*x14461))+(((-1.0)*r22*x14447*x14459))+((r21*x14457)));
evalcond[6]=(((gconst16*r21*x14466))+(((-1.0)*gconst17*x14456*x14462))+(((-1.0)*r22*sj3*x14463))+x14455+(((-1.0)*gconst16*r20*x14459))+((cj1*cj2))+(((-1.0)*x14450*x14452)));
evalcond[7]=(((sj3*x14460))+((r11*x14457))+(((-1.0)*x14455))+(((-1.0)*r10*x14450*x14462))+(((-1.0)*cj2*x14451))+(((-1.0)*r12*x14447*x14459))+((x14453*x14465)));
evalcond[8]=((((-1.0)*r12*sj3*x14463))+x14449+(((-1.0)*x14461))+((x14453*x14466))+(((-1.0)*r11*x14450))+(((-1.0)*r10*x14457*x14462))+(((-1.0)*x14459*x14460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14468=((1.0)*gconst16);
CheckValue<IkReal> x14469=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*r21))+(((-1.0)*r20*x14468)))),-1);
if(!x14469.valid){
continue;
}
CheckValue<IkReal> x14470 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst17*r10))+(((-1.0)*r11*x14468)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14470.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14469.value)))+(x14470.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14471=IKsin(j4);
IkReal x14472=IKcos(j4);
IkReal x14473=(cj2*sj1);
IkReal x14474=(cj3*gconst17);
IkReal x14475=((1.0)*cj1);
IkReal x14476=((1.0)*r21);
IkReal x14477=(gconst16*r11);
IkReal x14478=(gconst16*r01);
IkReal x14479=(sj1*sj2);
IkReal x14480=(r20*sj3);
IkReal x14481=(gconst17*sj3);
IkReal x14482=(gconst16*r00);
IkReal x14483=((1.0)*cj3);
IkReal x14484=(gconst16*r10);
IkReal x14485=(sj2*x14475);
IkReal x14486=((1.0)*x14472);
IkReal x14487=((1.0)*x14471);
IkReal x14488=(gconst17*x14471);
IkReal x14489=(cj3*x14472);
IkReal x14490=(sj3*x14472);
IkReal x14491=(gconst16*r21*x14472);
evalcond[0]=((((-1.0)*gconst16*x14471*x14476))+(((-1.0)*r22*x14486))+((r20*x14488)));
evalcond[1]=(((r10*x14488))+(((-1.0)*x14477*x14487))+(((-1.0)*r12*x14486)));
evalcond[2]=((-1.0)+(((-1.0)*x14478*x14487))+(((-1.0)*r02*x14486))+((r00*x14488)));
evalcond[3]=((((-1.0)*r02*x14471*x14483))+(((-1.0)*r00*x14474*x14486))+((r01*x14481))+((x14478*x14489))+((sj3*x14482)));
evalcond[4]=(((x14478*x14490))+(((-1.0)*r02*sj3*x14487))+(((-1.0)*r01*x14474))+(((-1.0)*r00*x14481*x14486))+(((-1.0)*x14482*x14483)));
evalcond[5]=(((gconst16*r21*x14489))+((r21*x14481))+((gconst16*x14480))+(((-1.0)*r20*x14474*x14486))+(((-1.0)*r22*x14471*x14483))+x14473+(((-1.0)*x14485)));
evalcond[6]=((((-1.0)*x14474*x14476))+(((-1.0)*gconst16*r20*x14483))+(((-1.0)*r22*sj3*x14487))+(((-1.0)*gconst17*x14480*x14486))+x14479+((cj1*cj2))+((gconst16*r21*x14490)));
evalcond[7]=((((-1.0)*cj2*x14475))+((r11*x14481))+(((-1.0)*x14479))+(((-1.0)*r10*x14474*x14486))+(((-1.0)*r12*x14471*x14483))+((x14477*x14489))+((sj3*x14484)));
evalcond[8]=((((-1.0)*r11*x14474))+(((-1.0)*x14483*x14484))+(((-1.0)*r10*x14481*x14486))+x14473+((x14477*x14490))+(((-1.0)*r12*sj3*x14487))+(((-1.0)*x14485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14492 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst16*r21))+((gconst17*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14492.valid){
continue;
}
CheckValue<IkReal> x14493=IKPowWithIntegerCheck(IKsign((((gconst17*r11))+((gconst16*r10)))),-1);
if(!x14493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14492.value)+(((1.5707963267949)*(x14493.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14494=IKsin(j4);
IkReal x14495=IKcos(j4);
IkReal x14496=(cj2*sj1);
IkReal x14497=(cj3*gconst17);
IkReal x14498=((1.0)*cj1);
IkReal x14499=((1.0)*r21);
IkReal x14500=(gconst16*r11);
IkReal x14501=(gconst16*r01);
IkReal x14502=(sj1*sj2);
IkReal x14503=(r20*sj3);
IkReal x14504=(gconst17*sj3);
IkReal x14505=(gconst16*r00);
IkReal x14506=((1.0)*cj3);
IkReal x14507=(gconst16*r10);
IkReal x14508=(sj2*x14498);
IkReal x14509=((1.0)*x14495);
IkReal x14510=((1.0)*x14494);
IkReal x14511=(gconst17*x14494);
IkReal x14512=(cj3*x14495);
IkReal x14513=(sj3*x14495);
IkReal x14514=(gconst16*r21*x14495);
evalcond[0]=(((r20*x14511))+(((-1.0)*gconst16*x14494*x14499))+(((-1.0)*r22*x14509)));
evalcond[1]=((((-1.0)*r12*x14509))+(((-1.0)*x14500*x14510))+((r10*x14511)));
evalcond[2]=((-1.0)+(((-1.0)*x14501*x14510))+((r00*x14511))+(((-1.0)*r02*x14509)));
evalcond[3]=((((-1.0)*r02*x14494*x14506))+((sj3*x14505))+((x14501*x14512))+((r01*x14504))+(((-1.0)*r00*x14497*x14509)));
evalcond[4]=((((-1.0)*x14505*x14506))+(((-1.0)*r02*sj3*x14510))+(((-1.0)*r00*x14504*x14509))+(((-1.0)*r01*x14497))+((x14501*x14513)));
evalcond[5]=((((-1.0)*x14508))+(((-1.0)*r20*x14497*x14509))+(((-1.0)*r22*x14494*x14506))+((r21*x14504))+((gconst16*x14503))+x14496+((gconst16*r21*x14512)));
evalcond[6]=((((-1.0)*gconst17*x14503*x14509))+x14502+(((-1.0)*x14497*x14499))+(((-1.0)*gconst16*r20*x14506))+(((-1.0)*r22*sj3*x14510))+((cj1*cj2))+((gconst16*r21*x14513)));
evalcond[7]=((((-1.0)*r10*x14497*x14509))+(((-1.0)*r12*x14494*x14506))+(((-1.0)*x14502))+((sj3*x14507))+((r11*x14504))+(((-1.0)*cj2*x14498))+((x14500*x14512)));
evalcond[8]=((((-1.0)*r11*x14497))+(((-1.0)*x14508))+(((-1.0)*x14506*x14507))+x14496+(((-1.0)*r10*x14504*x14509))+((x14500*x14513))+(((-1.0)*r12*sj3*x14510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=r22;
op[1]=((((2.0)*gconst17*r20))+(((-2.0)*gconst16*r21)));
op[2]=((-1.0)*r22);
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=r22;
op[1]=((((2.0)*gconst17*r20))+(((-2.0)*gconst16*r21)));
op[2]=((-1.0)*r22);
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14515=((-1.0)*r11);
CheckValue<IkReal> x14518 = IKatan2WithCheck(IkReal(x14515),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14518.valid){
continue;
}
IkReal x14516=((1.0)*(x14518.value));
IkReal x14517=x14407;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14516)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14516)));
IkReal gconst16=(x14515*x14517);
IkReal gconst17=((1.0)*r10*x14517);
IkReal x14519=r12*r12;
IkReal x14520=(cj0*r02);
IkReal x14521=x14407;
IkReal x14522=(sj0*x14521);
j4eval[0]=((IKabs(((((-1.0)*x14522))+((x14519*x14522))+((r12*x14520*x14521)))))+(IKabs((x14520+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14523=(cj3*r02);
IkReal x14524=(gconst17*r21);
IkReal x14525=(gconst16*r20);
IkReal x14526=(gconst16*sj3);
IkReal x14527=((1.0)*sj1*sj2);
IkReal x14528=((1.0)*r21*sj3);
IkReal x14529=(gconst17*r20*sj3);
IkReal x14530=((1.0)*cj1*cj2);
CheckValue<IkReal> x14531=IKPowWithIntegerCheck((((r00*x14524*x14526))+((gconst17*r01*sj3*x14525))+(((-1.0)*gconst16*r01*r21*x14526))+(((-1.0)*gconst17*r00*x14529))),-1);
if(!x14531.valid){
continue;
}
CheckValue<IkReal> x14532=IKPowWithIntegerCheck(((((-1.0)*x14529))+((r21*x14526))),-1);
if(!x14532.valid){
continue;
}
if( IKabs(((x14531.value)*((((x14523*x14524))+((x14523*x14525))+(((-1.0)*r21*sj0*x14526))+((sj0*x14529))+(((-1.0)*r02*x14527))+(((-1.0)*r02*x14530)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14532.value)*(((((-1.0)*x14530))+((cj3*x14524))+((cj3*x14525))+(((-1.0)*x14527)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14531.value)*((((x14523*x14524))+((x14523*x14525))+(((-1.0)*r21*sj0*x14526))+((sj0*x14529))+(((-1.0)*r02*x14527))+(((-1.0)*r02*x14530))))))+IKsqr(((x14532.value)*(((((-1.0)*x14530))+((cj3*x14524))+((cj3*x14525))+(((-1.0)*x14527))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14531.value)*((((x14523*x14524))+((x14523*x14525))+(((-1.0)*r21*sj0*x14526))+((sj0*x14529))+(((-1.0)*r02*x14527))+(((-1.0)*r02*x14530))))), ((x14532.value)*(((((-1.0)*x14530))+((cj3*x14524))+((cj3*x14525))+(((-1.0)*x14527))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14533=IKsin(j4);
IkReal x14534=IKcos(j4);
IkReal x14535=(cj1*sj2);
IkReal x14536=(gconst17*sj3);
IkReal x14537=(sj1*sj2);
IkReal x14538=(cj1*cj2);
IkReal x14539=(cj2*sj1);
IkReal x14540=((1.0)*cj0);
IkReal x14541=(gconst16*sj3);
IkReal x14542=((1.0)*cj3*gconst17);
IkReal x14543=(r00*x14534);
IkReal x14544=((1.0)*x14534);
IkReal x14545=(gconst17*x14533);
IkReal x14546=(r11*x14534);
IkReal x14547=((1.0)*cj3*gconst16);
IkReal x14548=(gconst16*r21*x14534);
IkReal x14549=((1.0)*gconst16*x14533);
IkReal x14550=(gconst16*r01*x14534);
IkReal x14551=((1.0)*cj3*x14533);
IkReal x14552=((1.0)*sj3*x14533);
evalcond[0]=((((-1.0)*r21*x14549))+((r20*x14545)));
evalcond[1]=(sj0+((r00*x14545))+(((-1.0)*r02*x14544))+(((-1.0)*r01*x14549)));
evalcond[2]=(((r10*x14545))+(((-1.0)*r11*x14549))+(((-1.0)*r12*x14544))+(((-1.0)*x14540)));
evalcond[3]=((((-1.0)*x14535))+((cj3*x14548))+((r21*x14536))+(((-1.0)*r20*x14534*x14542))+x14539+((r20*x14541)));
evalcond[4]=((((-1.0)*r21*x14542))+(((-1.0)*r20*x14547))+((r21*x14534*x14541))+x14538+x14537+(((-1.0)*r20*x14536*x14544)));
evalcond[5]=((((-1.0)*r02*x14551))+((r00*x14541))+((r01*x14536))+(((-1.0)*x14542*x14543))+((cj0*x14537))+((cj0*x14538))+((cj3*x14550)));
evalcond[6]=(((r10*x14541))+((sj0*x14537))+((sj0*x14538))+((r11*x14536))+((cj3*gconst16*x14546))+(((-1.0)*r12*x14551))+(((-1.0)*r10*x14534*x14542)));
evalcond[7]=((((-1.0)*r00*x14547))+(((-1.0)*r02*x14552))+(((-1.0)*x14539*x14540))+(((-1.0)*x14536*x14543))+((cj0*x14535))+((r01*x14534*x14541))+(((-1.0)*r01*x14542)));
evalcond[8]=((((-1.0)*sj0*x14539))+(((-1.0)*r10*x14547))+(((-1.0)*r11*x14542))+((sj0*x14535))+((x14541*x14546))+(((-1.0)*r12*x14552))+(((-1.0)*r10*x14536*x14544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14553=((1.0)*gconst16);
CheckValue<IkReal> x14554=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x14554.valid){
continue;
}
CheckValue<IkReal> x14555 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x14553))+(((-1.0)*cj0*r01*x14553))+((cj0*gconst17*r00))+((gconst17*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14554.value)))+(x14555.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14556=IKsin(j4);
IkReal x14557=IKcos(j4);
IkReal x14558=(cj1*sj2);
IkReal x14559=(gconst17*sj3);
IkReal x14560=(sj1*sj2);
IkReal x14561=(cj1*cj2);
IkReal x14562=(cj2*sj1);
IkReal x14563=((1.0)*cj0);
IkReal x14564=(gconst16*sj3);
IkReal x14565=((1.0)*cj3*gconst17);
IkReal x14566=(r00*x14557);
IkReal x14567=((1.0)*x14557);
IkReal x14568=(gconst17*x14556);
IkReal x14569=(r11*x14557);
IkReal x14570=((1.0)*cj3*gconst16);
IkReal x14571=(gconst16*r21*x14557);
IkReal x14572=((1.0)*gconst16*x14556);
IkReal x14573=(gconst16*r01*x14557);
IkReal x14574=((1.0)*cj3*x14556);
IkReal x14575=((1.0)*sj3*x14556);
evalcond[0]=(((r20*x14568))+(((-1.0)*r21*x14572)));
evalcond[1]=(sj0+(((-1.0)*r02*x14567))+(((-1.0)*r01*x14572))+((r00*x14568)));
evalcond[2]=((((-1.0)*x14563))+(((-1.0)*r12*x14567))+(((-1.0)*r11*x14572))+((r10*x14568)));
evalcond[3]=(((r20*x14564))+(((-1.0)*r20*x14557*x14565))+x14562+(((-1.0)*x14558))+((cj3*x14571))+((r21*x14559)));
evalcond[4]=((((-1.0)*r20*x14559*x14567))+((r21*x14557*x14564))+x14561+x14560+(((-1.0)*r20*x14570))+(((-1.0)*r21*x14565)));
evalcond[5]=(((cj0*x14560))+((cj0*x14561))+(((-1.0)*r02*x14574))+(((-1.0)*x14565*x14566))+((cj3*x14573))+((r01*x14559))+((r00*x14564)));
evalcond[6]=((((-1.0)*r12*x14574))+(((-1.0)*r10*x14557*x14565))+((r10*x14564))+((cj3*gconst16*x14569))+((sj0*x14560))+((sj0*x14561))+((r11*x14559)));
evalcond[7]=(((r01*x14557*x14564))+(((-1.0)*x14562*x14563))+(((-1.0)*r02*x14575))+(((-1.0)*x14559*x14566))+(((-1.0)*r01*x14565))+(((-1.0)*r00*x14570))+((cj0*x14558)));
evalcond[8]=(((x14564*x14569))+(((-1.0)*r10*x14559*x14567))+(((-1.0)*r12*x14575))+(((-1.0)*r11*x14565))+((sj0*x14558))+(((-1.0)*sj0*x14562))+(((-1.0)*r10*x14570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14576=((1.0)*gconst16);
CheckValue<IkReal> x14577 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x14576))+(((-1.0)*cj0*r01*x14576))+((cj0*gconst17*r00))+((gconst17*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14577.valid){
continue;
}
CheckValue<IkReal> x14578=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x14578.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14577.value)+(((1.5707963267949)*(x14578.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14579=IKsin(j4);
IkReal x14580=IKcos(j4);
IkReal x14581=(cj3*gconst17);
IkReal x14582=(cj1*sj2);
IkReal x14583=((1.0)*r21);
IkReal x14584=(gconst17*sj3);
IkReal x14585=(sj1*sj2);
IkReal x14586=(cj2*sj0);
IkReal x14587=((1.0)*cj3);
IkReal x14588=(cj2*sj1);
IkReal x14589=(gconst16*r00);
IkReal x14590=((1.0)*cj0);
IkReal x14591=(gconst16*sj3);
IkReal x14592=(cj1*cj2);
IkReal x14593=((1.0)*sj3);
IkReal x14594=((1.0)*x14580);
IkReal x14595=(gconst17*x14579);
IkReal x14596=(r22*x14579);
IkReal x14597=(r02*x14579);
IkReal x14598=(r11*x14580);
IkReal x14599=(r12*x14579);
IkReal x14600=(gconst16*r21*x14580);
IkReal x14601=((1.0)*gconst16*x14579);
IkReal x14602=(gconst16*r01*x14580);
evalcond[0]=(((r20*x14595))+(((-1.0)*gconst16*x14579*x14583))+(((-1.0)*r22*x14594)));
evalcond[1]=(sj0+(((-1.0)*r02*x14594))+(((-1.0)*r01*x14601))+((r00*x14595)));
evalcond[2]=((((-1.0)*x14590))+(((-1.0)*r12*x14594))+(((-1.0)*r11*x14601))+((r10*x14595)));
evalcond[3]=(((r20*x14591))+(((-1.0)*x14587*x14596))+(((-1.0)*x14582))+((r21*x14584))+x14588+((cj3*x14600))+(((-1.0)*r20*x14581*x14594)));
evalcond[4]=((((-1.0)*x14593*x14596))+x14585+x14592+(((-1.0)*r20*x14584*x14594))+(((-1.0)*gconst16*r20*x14587))+((r21*x14580*x14591))+(((-1.0)*x14581*x14583)));
evalcond[5]=((((-1.0)*x14587*x14597))+(((-1.0)*r00*x14581*x14594))+((cj3*x14602))+((sj3*x14589))+((r01*x14584))+((cj0*x14592))+((cj0*x14585)));
evalcond[6]=((((-1.0)*x14587*x14599))+((sj0*x14585))+((cj1*x14586))+((r10*x14591))+(((-1.0)*r10*x14581*x14594))+((r11*x14584))+((cj3*gconst16*x14598)));
evalcond[7]=((((-1.0)*x14587*x14589))+(((-1.0)*x14588*x14590))+(((-1.0)*x14593*x14597))+(((-1.0)*r00*x14584*x14594))+(((-1.0)*r01*x14581))+((cj0*x14582))+((r01*x14580*x14591)));
evalcond[8]=(((x14591*x14598))+((sj0*x14582))+(((-1.0)*sj1*x14586))+(((-1.0)*x14593*x14599))+(((-1.0)*r10*x14584*x14594))+(((-1.0)*gconst16*r10*x14587))+(((-1.0)*r11*x14581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14603=((1.0)*gconst16);
CheckValue<IkReal> x14604 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x14603))+((cj0*gconst17*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14604.valid){
continue;
}
CheckValue<IkReal> x14605=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*r01))+(((-1.0)*r00*x14603)))),-1);
if(!x14605.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14604.value)+(((1.5707963267949)*(x14605.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14606=IKsin(j4);
IkReal x14607=IKcos(j4);
IkReal x14608=(cj3*gconst17);
IkReal x14609=(cj1*sj2);
IkReal x14610=((1.0)*r21);
IkReal x14611=(gconst17*sj3);
IkReal x14612=(sj1*sj2);
IkReal x14613=(cj2*sj0);
IkReal x14614=((1.0)*cj3);
IkReal x14615=(cj2*sj1);
IkReal x14616=(gconst16*r00);
IkReal x14617=((1.0)*cj0);
IkReal x14618=(gconst16*sj3);
IkReal x14619=(cj1*cj2);
IkReal x14620=((1.0)*sj3);
IkReal x14621=((1.0)*x14607);
IkReal x14622=(gconst17*x14606);
IkReal x14623=(r22*x14606);
IkReal x14624=(r02*x14606);
IkReal x14625=(r11*x14607);
IkReal x14626=(r12*x14606);
IkReal x14627=(gconst16*r21*x14607);
IkReal x14628=((1.0)*gconst16*x14606);
IkReal x14629=(gconst16*r01*x14607);
evalcond[0]=(((r20*x14622))+(((-1.0)*gconst16*x14606*x14610))+(((-1.0)*r22*x14621)));
evalcond[1]=(sj0+(((-1.0)*r02*x14621))+(((-1.0)*r01*x14628))+((r00*x14622)));
evalcond[2]=(((r10*x14622))+(((-1.0)*r12*x14621))+(((-1.0)*r11*x14628))+(((-1.0)*x14617)));
evalcond[3]=(((r21*x14611))+((cj3*x14627))+(((-1.0)*x14609))+x14615+(((-1.0)*x14614*x14623))+(((-1.0)*r20*x14608*x14621))+((r20*x14618)));
evalcond[4]=((((-1.0)*gconst16*r20*x14614))+(((-1.0)*x14620*x14623))+((r21*x14607*x14618))+(((-1.0)*r20*x14611*x14621))+x14619+x14612+(((-1.0)*x14608*x14610)));
evalcond[5]=(((cj3*x14629))+((cj0*x14619))+((cj0*x14612))+((r01*x14611))+(((-1.0)*r00*x14608*x14621))+(((-1.0)*x14614*x14624))+((sj3*x14616)));
evalcond[6]=(((sj0*x14612))+((cj1*x14613))+((r10*x14618))+(((-1.0)*r10*x14608*x14621))+((cj3*gconst16*x14625))+(((-1.0)*x14614*x14626))+((r11*x14611)));
evalcond[7]=(((r01*x14607*x14618))+(((-1.0)*x14615*x14617))+(((-1.0)*x14620*x14624))+((cj0*x14609))+(((-1.0)*r01*x14608))+(((-1.0)*x14614*x14616))+(((-1.0)*r00*x14611*x14621)));
evalcond[8]=((((-1.0)*r10*x14611*x14621))+(((-1.0)*sj1*x14613))+((sj0*x14609))+((x14618*x14625))+(((-1.0)*x14620*x14626))+(((-1.0)*r11*x14608))+(((-1.0)*gconst16*r10*x14614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14630=((1.0)*gconst16);
CheckValue<IkReal> x14631=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*r11))+(((-1.0)*r10*x14630)))),-1);
if(!x14631.valid){
continue;
}
CheckValue<IkReal> x14632 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst17*r20*sj0))+(((-1.0)*r21*sj0*x14630)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14631.value)))+(x14632.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14633=IKsin(j4);
IkReal x14634=IKcos(j4);
IkReal x14635=(cj3*gconst17);
IkReal x14636=(cj1*sj2);
IkReal x14637=((1.0)*r21);
IkReal x14638=(gconst17*sj3);
IkReal x14639=(sj1*sj2);
IkReal x14640=(cj2*sj0);
IkReal x14641=((1.0)*cj3);
IkReal x14642=(cj2*sj1);
IkReal x14643=(gconst16*r00);
IkReal x14644=((1.0)*cj0);
IkReal x14645=(gconst16*sj3);
IkReal x14646=(cj1*cj2);
IkReal x14647=((1.0)*sj3);
IkReal x14648=((1.0)*x14634);
IkReal x14649=(gconst17*x14633);
IkReal x14650=(r22*x14633);
IkReal x14651=(r02*x14633);
IkReal x14652=(r11*x14634);
IkReal x14653=(r12*x14633);
IkReal x14654=(gconst16*r21*x14634);
IkReal x14655=((1.0)*gconst16*x14633);
IkReal x14656=(gconst16*r01*x14634);
evalcond[0]=((((-1.0)*r22*x14648))+((r20*x14649))+(((-1.0)*gconst16*x14633*x14637)));
evalcond[1]=(sj0+((r00*x14649))+(((-1.0)*r02*x14648))+(((-1.0)*r01*x14655)));
evalcond[2]=(((r10*x14649))+(((-1.0)*r11*x14655))+(((-1.0)*r12*x14648))+(((-1.0)*x14644)));
evalcond[3]=((((-1.0)*x14641*x14650))+x14642+((r20*x14645))+(((-1.0)*x14636))+((cj3*x14654))+((r21*x14638))+(((-1.0)*r20*x14635*x14648)));
evalcond[4]=((((-1.0)*r20*x14638*x14648))+x14646+x14639+((r21*x14634*x14645))+(((-1.0)*x14635*x14637))+(((-1.0)*gconst16*r20*x14641))+(((-1.0)*x14647*x14650)));
evalcond[5]=(((cj0*x14646))+(((-1.0)*x14641*x14651))+((sj3*x14643))+((cj0*x14639))+((r01*x14638))+(((-1.0)*r00*x14635*x14648))+((cj3*x14656)));
evalcond[6]=((((-1.0)*r10*x14635*x14648))+((r10*x14645))+(((-1.0)*x14641*x14653))+((cj3*gconst16*x14652))+((r11*x14638))+((sj0*x14639))+((cj1*x14640)));
evalcond[7]=((((-1.0)*r00*x14638*x14648))+(((-1.0)*x14642*x14644))+(((-1.0)*x14641*x14643))+((cj0*x14636))+(((-1.0)*r01*x14635))+(((-1.0)*x14647*x14651))+((r01*x14634*x14645)));
evalcond[8]=((((-1.0)*r10*x14638*x14648))+(((-1.0)*r11*x14635))+((x14645*x14652))+((sj0*x14636))+(((-1.0)*gconst16*r10*x14641))+(((-1.0)*sj1*x14640))+(((-1.0)*x14647*x14653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x14657=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14657;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x14657);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x14658=((1.0)*sj5);
IkReal x14659=((((-1.0)*r00*x14658))+(((-1.0)*cj5*r01)));
j4eval[0]=x14659;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x14658)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14659);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x14660=cj5*cj5;
IkReal x14661=(cj3*r11*r21);
IkReal x14662=((1.0)*cj3*cj5*sj5);
IkReal x14663=(((cj3*r12*r22))+((cj3*r10*r20*x14660))+(((-1.0)*r10*r21*x14662))+(((-1.0)*x14660*x14661))+x14661+(((-1.0)*r11*r20*x14662)));
j4eval[0]=x14663;
j4eval[1]=IKsign(x14663);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14664=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14664;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x14664);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14665=((1.0)*sj5);
IkReal x14666=((((-1.0)*r00*x14665))+(((-1.0)*cj5*r01)));
j4eval[0]=x14666;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x14665))+((cj5*r20))))));
j4eval[2]=IKsign(x14666);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14667=cj5*cj5;
IkReal x14668=r11*r11;
IkReal x14669=(cj5*r10);
IkReal x14670=(r11*sj5);
IkReal x14671=((((2.0)*x14669*x14670))+((x14667*x14668))+(((-1.0)*x14668))+(((-1.0)*(r12*r12)))+(((-1.0)*x14667*(r10*r10))));
j4eval[0]=x14671;
j4eval[1]=((IKabs(((((-1.0)*x14669))+x14670)))+(IKabs(r12)));
j4eval[2]=IKsign(x14671);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14672=cj5*cj5;
IkReal x14673=r11*r11;
IkReal x14674=(cj5*r10);
IkReal x14675=(r11*sj5);
CheckValue<IkReal> x14676 = IKatan2WithCheck(IkReal(((((-1.0)*x14674))+x14675)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x14676.valid){
continue;
}
CheckValue<IkReal> x14677=IKPowWithIntegerCheck(IKsign((((x14672*x14673))+(((-1.0)*x14673))+(((2.0)*x14674*x14675))+(((-1.0)*(r12*r12)))+(((-1.0)*x14672*(r10*r10))))),-1);
if(!x14677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14676.value)+(((1.5707963267949)*(x14677.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14678=IKsin(j4);
IkReal x14679=IKcos(j4);
IkReal x14680=(cj5*r00);
IkReal x14681=((1.0)*x14679);
IkReal x14682=(sj5*x14679);
IkReal x14683=(cj5*x14678);
IkReal x14684=((1.0)*x14678);
IkReal x14685=(sj5*x14684);
evalcond[0]=((((-1.0)*r21*x14685))+((r20*x14683))+(((-1.0)*r22*x14681)));
evalcond[1]=((((-1.0)*r01*x14685))+((x14678*x14680))+(((-1.0)*r02*x14681)));
evalcond[2]=(((r11*x14682))+(((-1.0)*r12*x14684))+(((-1.0)*cj5*r10*x14681)));
evalcond[3]=((-1.0)+((r10*x14683))+(((-1.0)*r12*x14681))+(((-1.0)*r11*x14685)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj5*r20*x14681))+(((-1.0)*r22*x14684))+((cj1*cj2))+((r21*x14682)));
evalcond[5]=(((r01*x14682))+((cj1*sj2))+(((-1.0)*r02*x14684))+(((-1.0)*cj2*sj1))+(((-1.0)*x14680*x14681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14686=((1.0)*sj5);
CheckValue<IkReal> x14687 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x14686)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14687.valid){
continue;
}
CheckValue<IkReal> x14688=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x14686))+(((-1.0)*cj5*r01)))),-1);
if(!x14688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14687.value)+(((1.5707963267949)*(x14688.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14689=IKsin(j4);
IkReal x14690=IKcos(j4);
IkReal x14691=(cj5*r00);
IkReal x14692=((1.0)*x14690);
IkReal x14693=(sj5*x14690);
IkReal x14694=(cj5*x14689);
IkReal x14695=((1.0)*x14689);
IkReal x14696=(sj5*x14695);
evalcond[0]=((((-1.0)*r21*x14696))+((r20*x14694))+(((-1.0)*r22*x14692)));
evalcond[1]=((((-1.0)*r01*x14696))+(((-1.0)*r02*x14692))+((x14689*x14691)));
evalcond[2]=(((r11*x14693))+(((-1.0)*r12*x14695))+(((-1.0)*cj5*r10*x14692)));
evalcond[3]=((-1.0)+((r10*x14694))+(((-1.0)*r12*x14692))+(((-1.0)*r11*x14696)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj5*r20*x14692))+(((-1.0)*r22*x14695))+((cj1*cj2))+((r21*x14693)));
evalcond[5]=(((r01*x14693))+(((-1.0)*r02*x14695))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x14691*x14692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14697=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14697.valid){
continue;
}
CheckValue<IkReal> x14698 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14698.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14697.value)))+(x14698.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14699=IKsin(j4);
IkReal x14700=IKcos(j4);
IkReal x14701=(cj5*r00);
IkReal x14702=((1.0)*x14700);
IkReal x14703=(sj5*x14700);
IkReal x14704=(cj5*x14699);
IkReal x14705=((1.0)*x14699);
IkReal x14706=(sj5*x14705);
evalcond[0]=((((-1.0)*r21*x14706))+((r20*x14704))+(((-1.0)*r22*x14702)));
evalcond[1]=((((-1.0)*r01*x14706))+(((-1.0)*r02*x14702))+((x14699*x14701)));
evalcond[2]=((((-1.0)*r12*x14705))+((r11*x14703))+(((-1.0)*cj5*r10*x14702)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x14702))+(((-1.0)*r11*x14706))+((r10*x14704)));
evalcond[4]=(((sj1*sj2))+((r21*x14703))+((cj1*cj2))+(((-1.0)*cj5*r20*x14702))+(((-1.0)*r22*x14705)));
evalcond[5]=(((r01*x14703))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x14701*x14702))+(((-1.0)*r02*x14705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14707=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14707;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x14707);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14708=((1.0)*sj5);
IkReal x14709=((((-1.0)*r00*x14708))+(((-1.0)*cj5*r01)));
j4eval[0]=x14709;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x14708))))));
j4eval[2]=IKsign(x14709);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14710=cj5*cj5;
IkReal x14711=r11*r11;
IkReal x14712=(r11*sj5);
IkReal x14713=(cj5*r10);
IkReal x14714=((((-1.0)*x14710*x14711))+(r12*r12)+((x14710*(r10*r10)))+(((-2.0)*x14712*x14713))+x14711);
j4eval[0]=x14714;
j4eval[1]=IKsign(x14714);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x14712))+x14713))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14715=cj5*cj5;
IkReal x14716=r11*r11;
IkReal x14717=(cj5*r10);
IkReal x14718=(r11*sj5);
CheckValue<IkReal> x14719 = IKatan2WithCheck(IkReal(((((-1.0)*x14718))+x14717)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14719.valid){
continue;
}
CheckValue<IkReal> x14720=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x14715*x14716))+(((-2.0)*x14717*x14718))+x14716+((x14715*(r10*r10))))),-1);
if(!x14720.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14719.value)+(((1.5707963267949)*(x14720.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14721=IKcos(j4);
IkReal x14722=IKsin(j4);
IkReal x14723=(cj5*r10);
IkReal x14724=((1.0)*x14721);
IkReal x14725=(cj5*x14722);
IkReal x14726=(cj5*x14721);
IkReal x14727=((1.0)*sj5*x14722);
evalcond[0]=(((x14721*x14723))+(((-1.0)*r11*sj5*x14724))+((r12*x14722)));
evalcond[1]=(((r20*x14725))+(((-1.0)*r21*x14727))+(((-1.0)*r22*x14724)));
evalcond[2]=(((r00*x14725))+(((-1.0)*r01*x14727))+(((-1.0)*r02*x14724)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x14724))+(((-1.0)*r11*x14727))+((x14722*x14723)));
evalcond[4]=((((-1.0)*r21*sj5*x14724))+((r20*x14726))+((sj1*sj2))+((r22*x14722))+((cj1*cj2)));
evalcond[5]=(((r00*x14726))+(((-1.0)*r01*sj5*x14724))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((r02*x14722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14728=((1.0)*sj5);
CheckValue<IkReal> x14729 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x14728)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14729.valid){
continue;
}
CheckValue<IkReal> x14730=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x14728))+(((-1.0)*cj5*r01)))),-1);
if(!x14730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14729.value)+(((1.5707963267949)*(x14730.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14731=IKcos(j4);
IkReal x14732=IKsin(j4);
IkReal x14733=(cj5*r10);
IkReal x14734=((1.0)*x14731);
IkReal x14735=(cj5*x14732);
IkReal x14736=(cj5*x14731);
IkReal x14737=((1.0)*sj5*x14732);
evalcond[0]=(((x14731*x14733))+(((-1.0)*r11*sj5*x14734))+((r12*x14732)));
evalcond[1]=(((r20*x14735))+(((-1.0)*r21*x14737))+(((-1.0)*r22*x14734)));
evalcond[2]=(((r00*x14735))+(((-1.0)*r01*x14737))+(((-1.0)*r02*x14734)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x14737))+(((-1.0)*r12*x14734))+((x14732*x14733)));
evalcond[4]=((((-1.0)*r21*sj5*x14734))+((r20*x14736))+((sj1*sj2))+((r22*x14732))+((cj1*cj2)));
evalcond[5]=(((r00*x14736))+(((-1.0)*r01*sj5*x14734))+((r02*x14732))+((cj1*sj2))+(((-1.0)*cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14738=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14738.valid){
continue;
}
CheckValue<IkReal> x14739 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14739.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14738.value)))+(x14739.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14740=IKcos(j4);
IkReal x14741=IKsin(j4);
IkReal x14742=(cj5*r10);
IkReal x14743=((1.0)*x14740);
IkReal x14744=(cj5*x14741);
IkReal x14745=(cj5*x14740);
IkReal x14746=((1.0)*sj5*x14741);
evalcond[0]=(((r12*x14741))+(((-1.0)*r11*sj5*x14743))+((x14740*x14742)));
evalcond[1]=((((-1.0)*r22*x14743))+(((-1.0)*r21*x14746))+((r20*x14744)));
evalcond[2]=((((-1.0)*r02*x14743))+((r00*x14744))+(((-1.0)*r01*x14746)));
evalcond[3]=((-1.0)+((x14741*x14742))+(((-1.0)*r12*x14743))+(((-1.0)*r11*x14746)));
evalcond[4]=(((r22*x14741))+((sj1*sj2))+((r20*x14745))+((cj1*cj2))+(((-1.0)*r21*sj5*x14743)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((r00*x14745))+(((-1.0)*r01*sj5*x14743))+((r02*x14741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14747=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14747);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14747);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14748=(cj5*r10);
IkReal x14749=(r11*sj5);
j4eval[0]=((((-1.0)*x14749))+x14748);
j4eval[1]=(((sj3*x14749))+(((-1.0)*sj3*x14748)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14750=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14750);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14750);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14751=(r11*sj5);
IkReal x14752=(cj5*r10);
j4eval[0]=(x14752+(((-1.0)*x14751)));
j4eval[1]=(((cj3*x14751))+(((-1.0)*cj3*x14752)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14753=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14753);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14753);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14754=((1.0)*r10);
CheckValue<IkReal> x14755=IKPowWithIntegerCheck(r22,-1);
if(!x14755.valid){
continue;
}
CheckValue<IkReal> x14756=IKPowWithIntegerCheck(sj3,-1);
if(!x14756.valid){
continue;
}
CheckValue<IkReal> x14757=IKPowWithIntegerCheck((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*x14754))),-1);
if(!x14757.valid){
continue;
}
if( IKabs(((x14755.value)*(x14756.value)*((((sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14757.value)*(((((-1.0)*sj3*sj5*x14754))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14755.value)*(x14756.value)*((((sj1*sj2))+((cj1*cj2))))))+IKsqr(((x14757.value)*(((((-1.0)*sj3*sj5*x14754))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14755.value)*(x14756.value)*((((sj1*sj2))+((cj1*cj2))))), ((x14757.value)*(((((-1.0)*sj3*sj5*x14754))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14758=IKsin(j4);
IkReal x14759=IKcos(j4);
IkReal x14760=(sj1*sj2);
IkReal x14761=(cj1*cj2);
IkReal x14762=(r11*sj5);
IkReal x14763=(cj5*sj3);
IkReal x14764=((1.0)*r10);
IkReal x14765=(cj3*sj5);
IkReal x14766=(cj1*sj2);
IkReal x14767=(sj3*sj5);
IkReal x14768=(cj2*sj1);
IkReal x14769=((1.0)*r00);
IkReal x14770=(r01*sj5);
IkReal x14771=(cj3*x14759);
IkReal x14772=((1.0)*x14758);
IkReal x14773=(cj5*x14758);
IkReal x14774=((1.0)*cj3*cj5);
IkReal x14775=(x14761+x14760);
evalcond[0]=((-1.0)*r22*x14759);
evalcond[1]=((((-1.0)*x14770*x14772))+((r00*x14773)));
evalcond[2]=(x14775+(((-1.0)*r22*sj3*x14772)));
evalcond[3]=((-1.0)+((r10*x14773))+(((-1.0)*x14762*x14772)));
evalcond[4]=((((-1.0)*cj3*r22*x14772))+(((-1.0)*x14766))+x14768);
evalcond[5]=(((r10*x14767))+((x14762*x14771))+(((-1.0)*cj5*x14764*x14771))+((r11*x14763)));
evalcond[6]=((((-1.0)*x14764*x14765))+((sj3*x14759*x14762))+(((-1.0)*r11*x14774))+(((-1.0)*x14759*x14763*x14764)));
evalcond[7]=(((r01*x14759*x14765))+((r01*x14763))+((r00*x14767))+(((-1.0)*cj5*x14769*x14771))+x14775);
evalcond[8]=(((r01*x14759*x14767))+(((-1.0)*x14768))+(((-1.0)*r01*x14774))+x14766+(((-1.0)*x14765*x14769))+(((-1.0)*x14759*x14763*x14769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14776=(cj5*r10);
IkReal x14777=((1.0)*sj3);
IkReal x14778=(r11*sj5);
CheckValue<IkReal> x14779=IKPowWithIntegerCheck(((((-1.0)*x14778))+x14776),-1);
if(!x14779.valid){
continue;
}
CheckValue<IkReal> x14780=IKPowWithIntegerCheck((((cj3*x14778))+(((-1.0)*cj3*x14776))),-1);
if(!x14780.valid){
continue;
}
if( IKabs(x14779.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14780.value)*(((((-1.0)*cj5*r11*x14777))+(((-1.0)*r10*sj5*x14777)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14779.value)+IKsqr(((x14780.value)*(((((-1.0)*cj5*r11*x14777))+(((-1.0)*r10*sj5*x14777))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14779.value, ((x14780.value)*(((((-1.0)*cj5*r11*x14777))+(((-1.0)*r10*sj5*x14777))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14781=IKsin(j4);
IkReal x14782=IKcos(j4);
IkReal x14783=(sj1*sj2);
IkReal x14784=(cj1*cj2);
IkReal x14785=(r11*sj5);
IkReal x14786=(cj5*sj3);
IkReal x14787=((1.0)*r10);
IkReal x14788=(cj3*sj5);
IkReal x14789=(cj1*sj2);
IkReal x14790=(sj3*sj5);
IkReal x14791=(cj2*sj1);
IkReal x14792=((1.0)*r00);
IkReal x14793=(r01*sj5);
IkReal x14794=(cj3*x14782);
IkReal x14795=((1.0)*x14781);
IkReal x14796=(cj5*x14781);
IkReal x14797=((1.0)*cj3*cj5);
IkReal x14798=(x14784+x14783);
evalcond[0]=((-1.0)*r22*x14782);
evalcond[1]=(((r00*x14796))+(((-1.0)*x14793*x14795)));
evalcond[2]=((((-1.0)*r22*sj3*x14795))+x14798);
evalcond[3]=((-1.0)+((r10*x14796))+(((-1.0)*x14785*x14795)));
evalcond[4]=((((-1.0)*x14789))+(((-1.0)*cj3*r22*x14795))+x14791);
evalcond[5]=(((x14785*x14794))+((r10*x14790))+((r11*x14786))+(((-1.0)*cj5*x14787*x14794)));
evalcond[6]=(((sj3*x14782*x14785))+(((-1.0)*r11*x14797))+(((-1.0)*x14782*x14786*x14787))+(((-1.0)*x14787*x14788)));
evalcond[7]=(((r01*x14786))+(((-1.0)*cj5*x14792*x14794))+((r00*x14790))+x14798+((r01*x14782*x14788)));
evalcond[8]=((((-1.0)*x14788*x14792))+(((-1.0)*r01*x14797))+(((-1.0)*x14791))+(((-1.0)*x14782*x14786*x14792))+x14789+((r01*x14782*x14790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14799=(cj5*r10);
IkReal x14800=(r11*sj5);
CheckValue<IkReal> x14801=IKPowWithIntegerCheck((x14799+(((-1.0)*x14800))),-1);
if(!x14801.valid){
continue;
}
CheckValue<IkReal> x14802=IKPowWithIntegerCheck(((((-1.0)*sj3*x14799))+((sj3*x14800))),-1);
if(!x14802.valid){
continue;
}
if( IKabs(x14801.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14802.value)*((((cj3*cj5*r11))+((cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14801.value)+IKsqr(((x14802.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14801.value, ((x14802.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14803=IKsin(j4);
IkReal x14804=IKcos(j4);
IkReal x14805=(sj1*sj2);
IkReal x14806=(cj1*cj2);
IkReal x14807=(r11*sj5);
IkReal x14808=(cj5*sj3);
IkReal x14809=((1.0)*r10);
IkReal x14810=(cj3*sj5);
IkReal x14811=(cj1*sj2);
IkReal x14812=(sj3*sj5);
IkReal x14813=(cj2*sj1);
IkReal x14814=((1.0)*r00);
IkReal x14815=(r01*sj5);
IkReal x14816=(cj3*x14804);
IkReal x14817=((1.0)*x14803);
IkReal x14818=(cj5*x14803);
IkReal x14819=((1.0)*cj3*cj5);
IkReal x14820=(x14806+x14805);
evalcond[0]=((-1.0)*r22*x14804);
evalcond[1]=((((-1.0)*x14815*x14817))+((r00*x14818)));
evalcond[2]=(x14820+(((-1.0)*r22*sj3*x14817)));
evalcond[3]=((-1.0)+(((-1.0)*x14807*x14817))+((r10*x14818)));
evalcond[4]=(x14813+(((-1.0)*cj3*r22*x14817))+(((-1.0)*x14811)));
evalcond[5]=(((r10*x14812))+(((-1.0)*cj5*x14809*x14816))+((x14807*x14816))+((r11*x14808)));
evalcond[6]=((((-1.0)*r11*x14819))+(((-1.0)*x14809*x14810))+((sj3*x14804*x14807))+(((-1.0)*x14804*x14808*x14809)));
evalcond[7]=(x14820+((r01*x14808))+(((-1.0)*cj5*x14814*x14816))+((r00*x14812))+((r01*x14804*x14810)));
evalcond[8]=(x14811+(((-1.0)*r01*x14819))+(((-1.0)*x14813))+(((-1.0)*x14810*x14814))+((r01*x14804*x14812))+(((-1.0)*x14804*x14808*x14814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14821=cj5*cj5;
IkReal x14822=(r11*sj3);
IkReal x14823=(cj3*r10);
IkReal x14824=(cj3*r11);
IkReal x14825=(r10*sj3);
IkReal x14826=(cj5*r20*sj5);
IkReal x14827=(r21*x14821);
IkReal x14828=(r20*x14821);
IkReal x14829=((1.0)*cj5*r21*sj5);
CheckValue<IkReal> x14830 = IKatan2WithCheck(IkReal((((cj5*r22*x14822))+((r22*sj5*x14825)))),IkReal((((x14822*x14828))+(((-1.0)*x14822*x14829))+((x14825*x14826))+((x14825*x14827))+(((-1.0)*r21*x14825)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14830.valid){
continue;
}
CheckValue<IkReal> x14831=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*x14824*x14827))+(((-1.0)*x14824*x14826))+((r21*x14824))+(((-1.0)*x14823*x14829))+((x14823*x14828)))),-1);
if(!x14831.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14830.value)+(((1.5707963267949)*(x14831.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14832=IKsin(j4);
IkReal x14833=IKcos(j4);
IkReal x14834=(sj1*sj2);
IkReal x14835=(cj1*cj2);
IkReal x14836=((1.0)*r22);
IkReal x14837=(r11*sj5);
IkReal x14838=((1.0)*cj3);
IkReal x14839=(cj5*r21);
IkReal x14840=(r00*sj5);
IkReal x14841=(cj5*r01);
IkReal x14842=(r10*sj5);
IkReal x14843=(cj5*r10);
IkReal x14844=(r21*sj5);
IkReal x14845=(r01*sj5);
IkReal x14846=(cj1*sj2);
IkReal x14847=(cj2*sj1);
IkReal x14848=(cj5*r00);
IkReal x14849=(cj5*r20);
IkReal x14850=(r20*sj5);
IkReal x14851=(cj5*r11);
IkReal x14852=((1.0)*x14832);
IkReal x14853=(cj3*x14833);
IkReal x14854=((1.0)*x14833);
IkReal x14855=(sj3*x14833);
IkReal x14856=(x14835+x14834);
evalcond[0]=((((-1.0)*x14833*x14836))+((x14832*x14849))+(((-1.0)*x14844*x14852)));
evalcond[1]=(((x14832*x14848))+(((-1.0)*r02*x14854))+(((-1.0)*x14845*x14852)));
evalcond[2]=((-1.0)+((x14832*x14843))+(((-1.0)*x14837*x14852))+(((-1.0)*r12*x14854)));
evalcond[3]=(((x14837*x14853))+((sj3*x14851))+((sj3*x14842))+(((-1.0)*x14833*x14838*x14843))+(((-1.0)*r12*x14832*x14838)));
evalcond[4]=(((x14837*x14855))+(((-1.0)*sj3*x14843*x14854))+(((-1.0)*x14838*x14842))+(((-1.0)*x14838*x14851))+(((-1.0)*r12*sj3*x14852)));
evalcond[5]=(((x14845*x14853))+x14856+(((-1.0)*r02*x14832*x14838))+((sj3*x14841))+((sj3*x14840))+(((-1.0)*x14833*x14838*x14848)));
evalcond[6]=((((-1.0)*x14846))+((x14844*x14853))+x14847+(((-1.0)*cj3*x14832*x14836))+((sj3*x14850))+(((-1.0)*x14833*x14838*x14849))+((sj3*x14839)));
evalcond[7]=(((x14844*x14855))+x14856+(((-1.0)*sj3*x14832*x14836))+(((-1.0)*x14838*x14850))+(((-1.0)*x14838*x14839))+(((-1.0)*sj3*x14849*x14854)));
evalcond[8]=(((x14845*x14855))+(((-1.0)*x14847))+(((-1.0)*r02*sj3*x14852))+x14846+(((-1.0)*x14838*x14841))+(((-1.0)*x14838*x14840))+(((-1.0)*sj3*x14848*x14854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14857=((1.0)*sj5);
CheckValue<IkReal> x14858 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x14857)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14858.valid){
continue;
}
CheckValue<IkReal> x14859=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r01))+(((-1.0)*r00*x14857)))),-1);
if(!x14859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14858.value)+(((1.5707963267949)*(x14859.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14860=IKsin(j4);
IkReal x14861=IKcos(j4);
IkReal x14862=(sj1*sj2);
IkReal x14863=(cj1*cj2);
IkReal x14864=((1.0)*r22);
IkReal x14865=(r11*sj5);
IkReal x14866=((1.0)*cj3);
IkReal x14867=(cj5*r21);
IkReal x14868=(r00*sj5);
IkReal x14869=(cj5*r01);
IkReal x14870=(r10*sj5);
IkReal x14871=(cj5*r10);
IkReal x14872=(r21*sj5);
IkReal x14873=(r01*sj5);
IkReal x14874=(cj1*sj2);
IkReal x14875=(cj2*sj1);
IkReal x14876=(cj5*r00);
IkReal x14877=(cj5*r20);
IkReal x14878=(r20*sj5);
IkReal x14879=(cj5*r11);
IkReal x14880=((1.0)*x14860);
IkReal x14881=(cj3*x14861);
IkReal x14882=((1.0)*x14861);
IkReal x14883=(sj3*x14861);
IkReal x14884=(x14862+x14863);
evalcond[0]=((((-1.0)*x14872*x14880))+(((-1.0)*x14861*x14864))+((x14860*x14877)));
evalcond[1]=((((-1.0)*x14873*x14880))+(((-1.0)*r02*x14882))+((x14860*x14876)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14882))+(((-1.0)*x14865*x14880))+((x14860*x14871)));
evalcond[3]=(((x14865*x14881))+(((-1.0)*r12*x14860*x14866))+((sj3*x14879))+((sj3*x14870))+(((-1.0)*x14861*x14866*x14871)));
evalcond[4]=(((x14865*x14883))+(((-1.0)*r12*sj3*x14880))+(((-1.0)*x14866*x14879))+(((-1.0)*x14866*x14870))+(((-1.0)*sj3*x14871*x14882)));
evalcond[5]=((((-1.0)*r02*x14860*x14866))+((x14873*x14881))+x14884+((sj3*x14869))+((sj3*x14868))+(((-1.0)*x14861*x14866*x14876)));
evalcond[6]=(((x14872*x14881))+x14875+((sj3*x14867))+((sj3*x14878))+(((-1.0)*x14861*x14866*x14877))+(((-1.0)*x14874))+(((-1.0)*cj3*x14860*x14864)));
evalcond[7]=((((-1.0)*sj3*x14860*x14864))+((x14872*x14883))+x14884+(((-1.0)*sj3*x14877*x14882))+(((-1.0)*x14866*x14878))+(((-1.0)*x14866*x14867)));
evalcond[8]=(((x14873*x14883))+x14874+(((-1.0)*x14866*x14869))+(((-1.0)*x14866*x14868))+(((-1.0)*sj3*x14876*x14882))+(((-1.0)*r02*sj3*x14880))+(((-1.0)*x14875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14885=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14885.valid){
continue;
}
CheckValue<IkReal> x14886 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14886.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14885.value)))+(x14886.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14887=IKsin(j4);
IkReal x14888=IKcos(j4);
IkReal x14889=(sj1*sj2);
IkReal x14890=(cj1*cj2);
IkReal x14891=((1.0)*r22);
IkReal x14892=(r11*sj5);
IkReal x14893=((1.0)*cj3);
IkReal x14894=(cj5*r21);
IkReal x14895=(r00*sj5);
IkReal x14896=(cj5*r01);
IkReal x14897=(r10*sj5);
IkReal x14898=(cj5*r10);
IkReal x14899=(r21*sj5);
IkReal x14900=(r01*sj5);
IkReal x14901=(cj1*sj2);
IkReal x14902=(cj2*sj1);
IkReal x14903=(cj5*r00);
IkReal x14904=(cj5*r20);
IkReal x14905=(r20*sj5);
IkReal x14906=(cj5*r11);
IkReal x14907=((1.0)*x14887);
IkReal x14908=(cj3*x14888);
IkReal x14909=((1.0)*x14888);
IkReal x14910=(sj3*x14888);
IkReal x14911=(x14890+x14889);
evalcond[0]=(((x14887*x14904))+(((-1.0)*x14899*x14907))+(((-1.0)*x14888*x14891)));
evalcond[1]=(((x14887*x14903))+(((-1.0)*r02*x14909))+(((-1.0)*x14900*x14907)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14909))+(((-1.0)*x14892*x14907))+((x14887*x14898)));
evalcond[3]=(((sj3*x14906))+((x14892*x14908))+(((-1.0)*x14888*x14893*x14898))+(((-1.0)*r12*x14887*x14893))+((sj3*x14897)));
evalcond[4]=((((-1.0)*x14893*x14897))+(((-1.0)*x14893*x14906))+(((-1.0)*sj3*x14898*x14909))+((x14892*x14910))+(((-1.0)*r12*sj3*x14907)));
evalcond[5]=((((-1.0)*r02*x14887*x14893))+x14911+(((-1.0)*x14888*x14893*x14903))+((x14900*x14908))+((sj3*x14895))+((sj3*x14896)));
evalcond[6]=((((-1.0)*cj3*x14887*x14891))+x14902+(((-1.0)*x14901))+((sj3*x14905))+(((-1.0)*x14888*x14893*x14904))+((x14899*x14908))+((sj3*x14894)));
evalcond[7]=((((-1.0)*x14893*x14894))+(((-1.0)*x14893*x14905))+x14911+((x14899*x14910))+(((-1.0)*sj3*x14904*x14909))+(((-1.0)*sj3*x14887*x14891)));
evalcond[8]=((((-1.0)*x14893*x14895))+(((-1.0)*x14893*x14896))+x14901+(((-1.0)*x14902))+(((-1.0)*sj3*x14903*x14909))+(((-1.0)*r02*sj3*x14907))+((x14900*x14910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x14912=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x14912;
j4eval[1]=IKsign(x14912);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x14913=((1.0)*sj5);
IkReal x14914=((((-1.0)*cj5*r21))+(((-1.0)*r20*x14913)));
j4eval[0]=x14914;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x14913))+((cj5*r00))))));
j4eval[2]=IKsign(x14914);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x14915=cj5*cj5;
IkReal x14916=(cj3*r11*r21);
IkReal x14917=((1.0)*cj3*cj5*sj5);
IkReal x14918=((((-1.0)*r11*r20*x14917))+((cj3*r12*r22))+x14916+(((-1.0)*x14915*x14916))+((cj3*r10*r20*x14915))+(((-1.0)*r10*r21*x14917)));
j4eval[0]=x14918;
j4eval[1]=IKsign(x14918);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14919=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x14919;
j4eval[1]=IKsign(x14919);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14920=((1.0)*sj5);
IkReal x14921=((((-1.0)*r20*x14920))+(((-1.0)*cj5*r21)));
j4eval[0]=x14921;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x14920))+((cj5*r00))))));
j4eval[2]=IKsign(x14921);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14922=cj5*cj5;
IkReal x14923=r11*r11;
IkReal x14924=(r11*sj5);
IkReal x14925=(cj5*r10);
IkReal x14926=((r12*r12)+x14923+(((-1.0)*x14922*x14923))+((x14922*(r10*r10)))+(((-2.0)*x14924*x14925)));
j4eval[0]=x14926;
j4eval[1]=IKsign(x14926);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x14925))+x14924))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14927=cj5*cj5;
IkReal x14928=r11*r11;
IkReal x14929=(cj5*r10);
IkReal x14930=(r11*sj5);
CheckValue<IkReal> x14931 = IKatan2WithCheck(IkReal(((((-1.0)*x14929))+x14930)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x14931.valid){
continue;
}
CheckValue<IkReal> x14932=IKPowWithIntegerCheck(IKsign(((r12*r12)+x14928+((x14927*(r10*r10)))+(((-1.0)*x14927*x14928))+(((-2.0)*x14929*x14930)))),-1);
if(!x14932.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14931.value)+(((1.5707963267949)*(x14932.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14933=IKsin(j4);
IkReal x14934=IKcos(j4);
IkReal x14935=(cj5*r00);
IkReal x14936=((1.0)*x14934);
IkReal x14937=(sj5*x14934);
IkReal x14938=(cj5*x14933);
IkReal x14939=((1.0)*x14933);
IkReal x14940=(sj5*x14939);
evalcond[0]=((((-1.0)*r21*x14940))+(((-1.0)*r22*x14936))+((r20*x14938)));
evalcond[1]=(((x14933*x14935))+(((-1.0)*r01*x14940))+(((-1.0)*r02*x14936)));
evalcond[2]=((((-1.0)*cj5*r10*x14936))+(((-1.0)*r12*x14939))+((r11*x14937)));
evalcond[3]=((1.0)+((r10*x14938))+(((-1.0)*r11*x14940))+(((-1.0)*r12*x14936)));
evalcond[4]=(((sj1*sj2))+((r21*x14937))+(((-1.0)*r22*x14939))+((cj1*cj2))+(((-1.0)*cj5*r20*x14936)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*x14935*x14936))+(((-1.0)*cj1*sj2))+((r01*x14937))+(((-1.0)*r02*x14939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14941=((1.0)*sj5);
CheckValue<IkReal> x14942 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x14941))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14942.valid){
continue;
}
CheckValue<IkReal> x14943=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14941))+(((-1.0)*cj5*r21)))),-1);
if(!x14943.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14942.value)+(((1.5707963267949)*(x14943.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14944=IKsin(j4);
IkReal x14945=IKcos(j4);
IkReal x14946=(cj5*r00);
IkReal x14947=((1.0)*x14945);
IkReal x14948=(sj5*x14945);
IkReal x14949=(cj5*x14944);
IkReal x14950=((1.0)*x14944);
IkReal x14951=(sj5*x14950);
evalcond[0]=((((-1.0)*r21*x14951))+(((-1.0)*r22*x14947))+((r20*x14949)));
evalcond[1]=((((-1.0)*r01*x14951))+((x14944*x14946))+(((-1.0)*r02*x14947)));
evalcond[2]=((((-1.0)*r12*x14950))+(((-1.0)*cj5*r10*x14947))+((r11*x14948)));
evalcond[3]=((1.0)+((r10*x14949))+(((-1.0)*r12*x14947))+(((-1.0)*r11*x14951)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj5*r20*x14947))+(((-1.0)*r22*x14950))+((cj1*cj2))+((r21*x14948)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x14946*x14947))+((r01*x14948))+(((-1.0)*r02*x14950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14952=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14952.valid){
continue;
}
CheckValue<IkReal> x14953 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14952.value)))+(x14953.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14954=IKsin(j4);
IkReal x14955=IKcos(j4);
IkReal x14956=(cj5*r00);
IkReal x14957=((1.0)*x14955);
IkReal x14958=(sj5*x14955);
IkReal x14959=(cj5*x14954);
IkReal x14960=((1.0)*x14954);
IkReal x14961=(sj5*x14960);
evalcond[0]=((((-1.0)*r22*x14957))+(((-1.0)*r21*x14961))+((r20*x14959)));
evalcond[1]=(((x14954*x14956))+(((-1.0)*r02*x14957))+(((-1.0)*r01*x14961)));
evalcond[2]=((((-1.0)*r12*x14960))+(((-1.0)*cj5*r10*x14957))+((r11*x14958)));
evalcond[3]=((1.0)+((r10*x14959))+(((-1.0)*r11*x14961))+(((-1.0)*r12*x14957)));
evalcond[4]=((((-1.0)*r22*x14960))+((sj1*sj2))+(((-1.0)*cj5*r20*x14957))+((cj1*cj2))+((r21*x14958)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r02*x14960))+((r01*x14958))+(((-1.0)*cj1*sj2))+(((-1.0)*x14956*x14957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14962=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x14962;
j4eval[1]=IKsign(x14962);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14963=((1.0)*sj5);
IkReal x14964=((((-1.0)*r20*x14963))+(((-1.0)*cj5*r21)));
j4eval[0]=x14964;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x14963))+((cj5*r00))))));
j4eval[2]=IKsign(x14964);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14965=((1.0)*r12);
IkReal x14966=(sj1*sj2);
IkReal x14967=(cj1*cj2);
IkReal x14968=(cj5*r10);
IkReal x14969=((1.0)*r11*sj5);
IkReal x14970=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x14970;
j4eval[1]=IKsign(x14970);
j4eval[2]=((IKabs(((((-1.0)*x14967*x14969))+(((-1.0)*x14966*x14969))+((x14967*x14968))+((x14966*x14968)))))+(IKabs(((((-1.0)*x14965*x14966))+(((-1.0)*x14965*x14967))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14971=((1.0)*r12);
IkReal x14972=(sj1*sj2);
IkReal x14973=(cj1*cj2);
IkReal x14974=(cj5*r10);
IkReal x14975=((1.0)*r11*sj5);
CheckValue<IkReal> x14976 = IKatan2WithCheck(IkReal((((x14973*x14974))+((x14972*x14974))+(((-1.0)*x14973*x14975))+(((-1.0)*x14972*x14975)))),IkReal(((((-1.0)*x14971*x14972))+(((-1.0)*x14971*x14973)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14976.valid){
continue;
}
CheckValue<IkReal> x14977=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14976.value)+(((1.5707963267949)*(x14977.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14978=IKcos(j4);
IkReal x14979=IKsin(j4);
IkReal x14980=(cj5*r10);
IkReal x14981=((1.0)*x14978);
IkReal x14982=(cj5*x14979);
IkReal x14983=(cj5*x14978);
IkReal x14984=((1.0)*sj5*x14979);
evalcond[0]=(((r12*x14979))+(((-1.0)*r11*sj5*x14981))+((x14978*x14980)));
evalcond[1]=(((r20*x14982))+(((-1.0)*r21*x14984))+(((-1.0)*r22*x14981)));
evalcond[2]=((((-1.0)*r01*x14984))+((r00*x14982))+(((-1.0)*r02*x14981)));
evalcond[3]=((1.0)+((x14979*x14980))+(((-1.0)*r12*x14981))+(((-1.0)*r11*x14984)));
evalcond[4]=(((r20*x14983))+(((-1.0)*r21*sj5*x14981))+((r22*x14979))+((sj1*sj2))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((r02*x14979))+((r00*x14983))+(((-1.0)*r01*sj5*x14981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14985=((1.0)*sj5);
CheckValue<IkReal> x14986=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14985))+(((-1.0)*cj5*r21)))),-1);
if(!x14986.valid){
continue;
}
CheckValue<IkReal> x14987 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x14985))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14987.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14986.value)))+(x14987.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14988=IKcos(j4);
IkReal x14989=IKsin(j4);
IkReal x14990=(cj5*r10);
IkReal x14991=((1.0)*x14988);
IkReal x14992=(cj5*x14989);
IkReal x14993=(cj5*x14988);
IkReal x14994=((1.0)*sj5*x14989);
evalcond[0]=((((-1.0)*r11*sj5*x14991))+((x14988*x14990))+((r12*x14989)));
evalcond[1]=((((-1.0)*r22*x14991))+((r20*x14992))+(((-1.0)*r21*x14994)));
evalcond[2]=(((r00*x14992))+(((-1.0)*r01*x14994))+(((-1.0)*r02*x14991)));
evalcond[3]=((1.0)+(((-1.0)*r12*x14991))+(((-1.0)*r11*x14994))+((x14989*x14990)));
evalcond[4]=(((sj1*sj2))+((r22*x14989))+((r20*x14993))+(((-1.0)*r21*sj5*x14991))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((r00*x14993))+(((-1.0)*r01*sj5*x14991))+((r02*x14989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14995=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14995.valid){
continue;
}
CheckValue<IkReal> x14996 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14995.value)))+(x14996.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14997=IKcos(j4);
IkReal x14998=IKsin(j4);
IkReal x14999=(cj5*r10);
IkReal x15000=((1.0)*x14997);
IkReal x15001=(cj5*x14998);
IkReal x15002=(cj5*x14997);
IkReal x15003=((1.0)*sj5*x14998);
evalcond[0]=(((r12*x14998))+(((-1.0)*r11*sj5*x15000))+((x14997*x14999)));
evalcond[1]=(((r20*x15001))+(((-1.0)*r22*x15000))+(((-1.0)*r21*x15003)));
evalcond[2]=(((r00*x15001))+(((-1.0)*r02*x15000))+(((-1.0)*r01*x15003)));
evalcond[3]=((1.0)+((x14998*x14999))+(((-1.0)*r11*x15003))+(((-1.0)*r12*x15000)));
evalcond[4]=(((r20*x15002))+((sj1*sj2))+(((-1.0)*r21*sj5*x15000))+((cj1*cj2))+((r22*x14998)));
evalcond[5]=(((cj2*sj1))+((r00*x15002))+((r02*x14998))+(((-1.0)*cj1*sj2))+(((-1.0)*r01*sj5*x15000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15004=((-1.0)*r20);
IkReal x15006 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x15006)==0){
continue;
}
IkReal x15005=pow(x15006,-0.5);
CheckValue<IkReal> x15007 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x15004),IKFAST_ATAN2_MAGTHRESH);
if(!x15007.valid){
continue;
}
IkReal gconst54=((-1.0)*(x15007.value));
IkReal gconst55=(r21*x15005);
IkReal gconst56=(x15004*x15005);
CheckValue<IkReal> x15008 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15008.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15008.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15009=((-1.0)*r20);
IkReal x15010=x15005;
CheckValue<IkReal> x15012 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x15009),IKFAST_ATAN2_MAGTHRESH);
if(!x15012.valid){
continue;
}
IkReal x15011=((-1.0)*(x15012.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst55;
cj5=gconst56;
j5=x15011;
IkReal gconst54=x15011;
IkReal gconst55=(r21*x15010);
IkReal gconst56=(x15009*x15010);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15013=((-1.0)*r20);
IkReal x15014=x15005;
CheckValue<IkReal> x15016 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x15013),IKFAST_ATAN2_MAGTHRESH);
if(!x15016.valid){
continue;
}
IkReal x15015=((-1.0)*(x15016.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst55;
cj5=gconst56;
j5=x15015;
IkReal gconst54=x15015;
IkReal gconst55=(r21*x15014);
IkReal gconst56=(x15013*x15014);
CheckValue<IkReal> x15024=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x15024.valid){
continue;
}
IkReal x15017=x15024.value;
IkReal x15018=(cj3*x15017);
IkReal x15019=(r11*x15018);
IkReal x15020=(r01*x15018);
IkReal x15021=(r00*x15018);
IkReal x15022=(r10*x15018);
IkReal x15023=(r20*r21*x15018);
j4eval[0]=IKsign((((cj3*r02*r12))+((r01*x15019*(r21*r21)))+((r00*r20*r21*x15019))+((r10*x15021*(r20*r20)))+((r10*r20*r21*x15020))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15025=((-1.0)*r20);
IkReal x15026=x15005;
CheckValue<IkReal> x15028 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x15025),IKFAST_ATAN2_MAGTHRESH);
if(!x15028.valid){
continue;
}
IkReal x15027=((-1.0)*(x15028.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst55;
cj5=gconst56;
j5=x15027;
IkReal gconst54=x15027;
IkReal gconst55=(r21*x15026);
IkReal gconst56=(x15025*x15026);
CheckValue<IkReal> x15036=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x15036.valid){
continue;
}
IkReal x15029=x15036.value;
IkReal x15030=(sj3*x15029);
IkReal x15031=(r11*x15030);
IkReal x15032=(r00*x15030);
IkReal x15033=(r01*x15030);
IkReal x15034=(r10*x15030);
IkReal x15035=(r20*r21*x15030);
j4eval[0]=IKsign((((r10*r20*r21*x15033))+((r02*r12*sj3))+((r00*r20*r21*x15031))+((r10*x15032*(r20*r20)))+((r01*x15031*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15037=gconst55*gconst55;
IkReal x15038=gconst56*gconst56;
IkReal x15039=(r11*sj3);
IkReal x15040=((1.0)*r00);
IkReal x15041=(gconst55*gconst56);
IkReal x15042=(cj3*r11);
IkReal x15043=(cj3*r10);
IkReal x15044=((1.0)*r02);
IkReal x15045=(r10*sj3);
IkReal x15046=(r01*x15037);
CheckValue<IkReal> x15047=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*r01*x15041*x15045))+(((-1.0)*x15039*x15040*x15041))+((x15039*x15046))+((r00*x15038*x15045)))),-1);
if(!x15047.valid){
continue;
}
CheckValue<IkReal> x15048 = IKatan2WithCheck(IkReal(((((-1.0)*gconst56*x15042*x15044))+(((-1.0)*gconst55*x15043*x15044)))),IkReal((((x15043*x15046))+(((-1.0)*x15038*x15040*x15042))+((r01*x15041*x15042))+(((-1.0)*x15040*x15041*x15043)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15047.value)))+(x15048.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15049=IKsin(j4);
IkReal x15050=IKcos(j4);
IkReal x15051=(cj2*sj1);
IkReal x15052=((1.0)*cj1);
IkReal x15053=(r00*sj3);
IkReal x15054=(sj1*sj2);
IkReal x15055=(r01*sj3);
IkReal x15056=((1.0)*cj3);
IkReal x15057=(gconst56*sj3);
IkReal x15058=(gconst55*sj3);
IkReal x15059=(cj3*gconst56);
IkReal x15060=(sj2*x15052);
IkReal x15061=((1.0)*x15050);
IkReal x15062=((1.0)*x15049);
IkReal x15063=(gconst55*x15050);
IkReal x15064=(gconst56*x15049);
evalcond[0]=(((r20*x15064))+(((-1.0)*r22*x15061))+(((-1.0)*gconst55*r21*x15062)));
evalcond[1]=(((r00*x15064))+(((-1.0)*r02*x15061))+(((-1.0)*gconst55*r01*x15062)));
evalcond[2]=((1.0)+((r10*x15064))+(((-1.0)*r12*x15061))+(((-1.0)*gconst55*r11*x15062)));
evalcond[3]=(((r10*x15058))+(((-1.0)*gconst56*r10*x15050*x15056))+((r11*x15057))+(((-1.0)*r12*x15049*x15056))+((cj3*r11*x15063)));
evalcond[4]=(((r11*x15050*x15058))+(((-1.0)*r12*sj3*x15062))+(((-1.0)*r10*x15057*x15061))+(((-1.0)*gconst55*r10*x15056))+(((-1.0)*gconst56*r11*x15056)));
evalcond[5]=(((r20*x15058))+(((-1.0)*r22*x15049*x15056))+(((-1.0)*gconst56*r20*x15050*x15056))+x15051+((r21*x15057))+((cj3*r21*x15063))+(((-1.0)*x15060)));
evalcond[6]=((((-1.0)*gconst55*r20*x15056))+((r21*x15050*x15058))+x15054+(((-1.0)*r20*x15057*x15061))+(((-1.0)*gconst56*r21*x15056))+((cj1*cj2))+(((-1.0)*r22*sj3*x15062)));
evalcond[7]=((((-1.0)*r02*x15049*x15056))+((cj3*r01*x15063))+(((-1.0)*x15054))+(((-1.0)*cj2*x15052))+((gconst55*x15053))+((gconst56*x15055))+(((-1.0)*gconst56*r00*x15050*x15056)));
evalcond[8]=((((-1.0)*gconst55*r00*x15056))+(((-1.0)*r02*sj3*x15062))+((x15055*x15063))+x15051+(((-1.0)*gconst56*r01*x15056))+(((-1.0)*x15060))+(((-1.0)*gconst56*x15053*x15061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15065=gconst55*gconst55;
IkReal x15066=gconst56*gconst56;
IkReal x15067=(r11*sj3);
IkReal x15068=(cj3*r01);
IkReal x15069=(gconst55*r10);
IkReal x15070=((1.0)*gconst56);
IkReal x15071=(r00*x15066);
CheckValue<IkReal> x15072=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15068*x15069*x15070))+((cj3*r02*r12))+(((-1.0)*cj3*gconst55*r00*r11*x15070))+((r11*x15065*x15068))+((cj3*r10*x15071)))),-1);
if(!x15072.valid){
continue;
}
CheckValue<IkReal> x15073 = IKatan2WithCheck(IkReal((((gconst56*r02*x15067))+((r02*sj3*x15069)))),IkReal(((((-1.0)*r01*r10*sj3*x15065))+(((-1.0)*gconst55*r01*x15067*x15070))+((gconst56*r00*sj3*x15069))+((x15067*x15071)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15072.value)))+(x15073.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15074=IKsin(j4);
IkReal x15075=IKcos(j4);
IkReal x15076=(cj2*sj1);
IkReal x15077=((1.0)*cj1);
IkReal x15078=(r00*sj3);
IkReal x15079=(sj1*sj2);
IkReal x15080=(r01*sj3);
IkReal x15081=((1.0)*cj3);
IkReal x15082=(gconst56*sj3);
IkReal x15083=(gconst55*sj3);
IkReal x15084=(cj3*gconst56);
IkReal x15085=(sj2*x15077);
IkReal x15086=((1.0)*x15075);
IkReal x15087=((1.0)*x15074);
IkReal x15088=(gconst55*x15075);
IkReal x15089=(gconst56*x15074);
evalcond[0]=((((-1.0)*r22*x15086))+(((-1.0)*gconst55*r21*x15087))+((r20*x15089)));
evalcond[1]=((((-1.0)*r02*x15086))+(((-1.0)*gconst55*r01*x15087))+((r00*x15089)));
evalcond[2]=((1.0)+(((-1.0)*r12*x15086))+(((-1.0)*gconst55*r11*x15087))+((r10*x15089)));
evalcond[3]=((((-1.0)*gconst56*r10*x15075*x15081))+((cj3*r11*x15088))+((r11*x15082))+(((-1.0)*r12*x15074*x15081))+((r10*x15083)));
evalcond[4]=(((r11*x15075*x15083))+(((-1.0)*r10*x15082*x15086))+(((-1.0)*gconst55*r10*x15081))+(((-1.0)*r12*sj3*x15087))+(((-1.0)*gconst56*r11*x15081)));
evalcond[5]=(((cj3*r21*x15088))+(((-1.0)*r22*x15074*x15081))+(((-1.0)*x15085))+x15076+((r21*x15082))+(((-1.0)*gconst56*r20*x15075*x15081))+((r20*x15083)));
evalcond[6]=((((-1.0)*gconst55*r20*x15081))+(((-1.0)*gconst56*r21*x15081))+x15079+(((-1.0)*r22*sj3*x15087))+((r21*x15075*x15083))+((cj1*cj2))+(((-1.0)*r20*x15082*x15086)));
evalcond[7]=((((-1.0)*r02*x15074*x15081))+(((-1.0)*gconst56*r00*x15075*x15081))+((gconst56*x15080))+(((-1.0)*x15079))+((cj3*r01*x15088))+((gconst55*x15078))+(((-1.0)*cj2*x15077)));
evalcond[8]=((((-1.0)*gconst55*r00*x15081))+(((-1.0)*gconst56*r01*x15081))+(((-1.0)*x15085))+(((-1.0)*gconst56*x15078*x15086))+x15076+(((-1.0)*r02*sj3*x15087))+((x15080*x15088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15090=IKPowWithIntegerCheck(IKsign((((gconst56*r01))+((gconst55*r00)))),-1);
if(!x15090.valid){
continue;
}
CheckValue<IkReal> x15091 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst55*r21))+((gconst56*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15091.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15090.value)))+(x15091.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15092=IKsin(j4);
IkReal x15093=IKcos(j4);
IkReal x15094=(cj2*sj1);
IkReal x15095=((1.0)*cj1);
IkReal x15096=(r00*sj3);
IkReal x15097=(sj1*sj2);
IkReal x15098=(r01*sj3);
IkReal x15099=((1.0)*cj3);
IkReal x15100=(gconst56*sj3);
IkReal x15101=(gconst55*sj3);
IkReal x15102=(cj3*gconst56);
IkReal x15103=(sj2*x15095);
IkReal x15104=((1.0)*x15093);
IkReal x15105=((1.0)*x15092);
IkReal x15106=(gconst55*x15093);
IkReal x15107=(gconst56*x15092);
evalcond[0]=((((-1.0)*r22*x15104))+((r20*x15107))+(((-1.0)*gconst55*r21*x15105)));
evalcond[1]=(((r00*x15107))+(((-1.0)*gconst55*r01*x15105))+(((-1.0)*r02*x15104)));
evalcond[2]=((1.0)+(((-1.0)*gconst55*r11*x15105))+(((-1.0)*r12*x15104))+((r10*x15107)));
evalcond[3]=((((-1.0)*r12*x15092*x15099))+((cj3*r11*x15106))+((r10*x15101))+(((-1.0)*gconst56*r10*x15093*x15099))+((r11*x15100)));
evalcond[4]=((((-1.0)*gconst55*r10*x15099))+(((-1.0)*gconst56*r11*x15099))+(((-1.0)*r10*x15100*x15104))+((r11*x15093*x15101))+(((-1.0)*r12*sj3*x15105)));
evalcond[5]=(((cj3*r21*x15106))+(((-1.0)*r22*x15092*x15099))+((r21*x15100))+x15094+((r20*x15101))+(((-1.0)*x15103))+(((-1.0)*gconst56*r20*x15093*x15099)));
evalcond[6]=((((-1.0)*gconst55*r20*x15099))+x15097+(((-1.0)*gconst56*r21*x15099))+(((-1.0)*r20*x15100*x15104))+(((-1.0)*r22*sj3*x15105))+((r21*x15093*x15101))+((cj1*cj2)));
evalcond[7]=(((gconst55*x15096))+((cj3*r01*x15106))+(((-1.0)*gconst56*r00*x15093*x15099))+(((-1.0)*x15097))+(((-1.0)*r02*x15092*x15099))+(((-1.0)*cj2*x15095))+((gconst56*x15098)));
evalcond[8]=(((x15098*x15106))+x15094+(((-1.0)*gconst56*x15096*x15104))+(((-1.0)*x15103))+(((-1.0)*r02*sj3*x15105))+(((-1.0)*gconst55*r00*x15099))+(((-1.0)*gconst56*r01*x15099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15108=((-1.0)*r21);
IkReal x15110 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x15110)==0){
continue;
}
IkReal x15109=pow(x15110,-0.5);
CheckValue<IkReal> x15111 = IKatan2WithCheck(IkReal(x15108),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15111.valid){
continue;
}
IkReal gconst57=((3.14159265358979)+(((-1.0)*(x15111.value))));
IkReal gconst58=(x15108*x15109);
IkReal gconst59=((1.0)*r20*x15109);
CheckValue<IkReal> x15112 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15112.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15112.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15113=((-1.0)*r21);
CheckValue<IkReal> x15116 = IKatan2WithCheck(IkReal(x15113),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15116.valid){
continue;
}
IkReal x15114=((1.0)*(x15116.value));
IkReal x15115=x15109;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x15114)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x15114)));
IkReal gconst58=(x15113*x15115);
IkReal gconst59=((1.0)*r20*x15115);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x15117=((-1.0)*r21);
CheckValue<IkReal> x15120 = IKatan2WithCheck(IkReal(x15117),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15120.valid){
continue;
}
IkReal x15118=((1.0)*(x15120.value));
IkReal x15119=x15109;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x15118)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x15118)));
IkReal gconst58=(x15117*x15119);
IkReal gconst59=((1.0)*r20*x15119);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15121=((-1.0)*r21);
CheckValue<IkReal> x15124 = IKatan2WithCheck(IkReal(x15121),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15124.valid){
continue;
}
IkReal x15122=((1.0)*(x15124.value));
IkReal x15123=x15109;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x15122)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x15122)));
IkReal gconst58=(x15121*x15123);
IkReal gconst59=((1.0)*r20*x15123);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15125=gconst59*gconst59;
IkReal x15126=gconst58*gconst58;
IkReal x15127=(r11*sj3);
IkReal x15128=(r10*sj3);
IkReal x15129=(cj3*r10);
IkReal x15130=((1.0)*r21);
IkReal x15131=(gconst58*gconst59);
IkReal x15132=(cj3*r11);
IkReal x15133=(r20*x15125);
CheckValue<IkReal> x15134=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((r21*x15126*x15132))+((x15129*x15133))+(((-1.0)*r20*x15131*x15132))+(((-1.0)*x15129*x15130*x15131)))),-1);
if(!x15134.valid){
continue;
}
CheckValue<IkReal> x15135 = IKatan2WithCheck(IkReal((((gconst59*r22*x15127))+((gconst58*r22*x15128)))),IkReal(((((-1.0)*x15126*x15128*x15130))+((x15127*x15133))+((r20*x15128*x15131))+(((-1.0)*x15127*x15130*x15131)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15134.value)))+(x15135.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15136=IKsin(j4);
IkReal x15137=IKcos(j4);
IkReal x15138=(cj2*sj1);
IkReal x15139=(cj3*gconst59);
IkReal x15140=(sj1*sj2);
IkReal x15141=(cj3*gconst58);
IkReal x15142=(gconst58*r01);
IkReal x15143=(gconst58*r11);
IkReal x15144=(cj1*cj2);
IkReal x15145=(r20*sj3);
IkReal x15146=(gconst59*r00);
IkReal x15147=(gconst59*sj3);
IkReal x15148=(gconst58*sj3);
IkReal x15149=(gconst58*r21);
IkReal x15150=((1.0)*cj1*sj2);
IkReal x15151=((1.0)*x15137);
IkReal x15152=((1.0)*x15136);
IkReal x15153=(sj3*x15137);
IkReal x15154=(gconst59*x15136);
evalcond[0]=((((-1.0)*r22*x15151))+(((-1.0)*x15149*x15152))+((r20*x15154)));
evalcond[1]=(((x15136*x15146))+(((-1.0)*r02*x15151))+(((-1.0)*x15142*x15152)));
evalcond[2]=((1.0)+(((-1.0)*r12*x15151))+((r10*x15154))+(((-1.0)*x15143*x15152)));
evalcond[3]=(((r10*x15148))+((r11*x15147))+(((-1.0)*cj3*r12*x15152))+((r11*x15137*x15141))+(((-1.0)*r10*x15139*x15151)));
evalcond[4]=((((-1.0)*r12*sj3*x15152))+(((-1.0)*r10*x15147*x15151))+((x15143*x15153))+(((-1.0)*r10*x15141))+(((-1.0)*r11*x15139)));
evalcond[5]=((((-1.0)*cj3*r22*x15152))+((r21*x15137*x15141))+(((-1.0)*x15150))+((gconst58*x15145))+x15138+((r21*x15147))+(((-1.0)*r20*x15139*x15151)));
evalcond[6]=(((r21*x15137*x15148))+(((-1.0)*r22*sj3*x15152))+x15140+x15144+(((-1.0)*r21*x15139))+(((-1.0)*gconst59*x15145*x15151))+(((-1.0)*r20*x15141)));
evalcond[7]=(((r01*x15137*x15141))+(((-1.0)*x15144))+(((-1.0)*x15140))+(((-1.0)*cj3*r02*x15152))+(((-1.0)*r00*x15139*x15151))+((r01*x15147))+((r00*x15148)));
evalcond[8]=((((-1.0)*r02*sj3*x15152))+((x15142*x15153))+(((-1.0)*x15150))+(((-1.0)*r01*x15139))+(((-1.0)*r00*x15141))+x15138+(((-1.0)*sj3*x15146*x15151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15155=((1.0)*gconst58);
CheckValue<IkReal> x15156=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x15155))+(((-1.0)*gconst59*r21)))),-1);
if(!x15156.valid){
continue;
}
CheckValue<IkReal> x15157 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst59*r00))+(((-1.0)*r01*x15155)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15157.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15156.value)))+(x15157.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15158=IKsin(j4);
IkReal x15159=IKcos(j4);
IkReal x15160=(cj2*sj1);
IkReal x15161=(cj3*gconst59);
IkReal x15162=(sj1*sj2);
IkReal x15163=(cj3*gconst58);
IkReal x15164=(gconst58*r01);
IkReal x15165=(gconst58*r11);
IkReal x15166=(cj1*cj2);
IkReal x15167=(r20*sj3);
IkReal x15168=(gconst59*r00);
IkReal x15169=(gconst59*sj3);
IkReal x15170=(gconst58*sj3);
IkReal x15171=(gconst58*r21);
IkReal x15172=((1.0)*cj1*sj2);
IkReal x15173=((1.0)*x15159);
IkReal x15174=((1.0)*x15158);
IkReal x15175=(sj3*x15159);
IkReal x15176=(gconst59*x15158);
evalcond[0]=(((r20*x15176))+(((-1.0)*x15171*x15174))+(((-1.0)*r22*x15173)));
evalcond[1]=(((x15158*x15168))+(((-1.0)*x15164*x15174))+(((-1.0)*r02*x15173)));
evalcond[2]=((1.0)+((r10*x15176))+(((-1.0)*x15165*x15174))+(((-1.0)*r12*x15173)));
evalcond[3]=((((-1.0)*r10*x15161*x15173))+((r10*x15170))+((r11*x15169))+((r11*x15159*x15163))+(((-1.0)*cj3*r12*x15174)));
evalcond[4]=((((-1.0)*r12*sj3*x15174))+(((-1.0)*r10*x15169*x15173))+((x15165*x15175))+(((-1.0)*r10*x15163))+(((-1.0)*r11*x15161)));
evalcond[5]=(((gconst58*x15167))+(((-1.0)*cj3*r22*x15174))+((r21*x15159*x15163))+(((-1.0)*x15172))+x15160+((r21*x15169))+(((-1.0)*r20*x15161*x15173)));
evalcond[6]=(((r21*x15159*x15170))+(((-1.0)*r22*sj3*x15174))+(((-1.0)*r21*x15161))+x15162+x15166+(((-1.0)*gconst59*x15167*x15173))+(((-1.0)*r20*x15163)));
evalcond[7]=((((-1.0)*cj3*r02*x15174))+(((-1.0)*r00*x15161*x15173))+((r01*x15159*x15163))+(((-1.0)*x15166))+(((-1.0)*x15162))+((r01*x15169))+((r00*x15170)));
evalcond[8]=((((-1.0)*sj3*x15168*x15173))+(((-1.0)*x15172))+((x15164*x15175))+(((-1.0)*r01*x15161))+x15160+(((-1.0)*r00*x15163))+(((-1.0)*r02*sj3*x15174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15177 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst58*r21))+((gconst59*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15177.valid){
continue;
}
CheckValue<IkReal> x15178=IKPowWithIntegerCheck(IKsign((((gconst58*r00))+((gconst59*r01)))),-1);
if(!x15178.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15177.value)+(((1.5707963267949)*(x15178.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15179=IKsin(j4);
IkReal x15180=IKcos(j4);
IkReal x15181=(cj2*sj1);
IkReal x15182=(cj3*gconst59);
IkReal x15183=(sj1*sj2);
IkReal x15184=(cj3*gconst58);
IkReal x15185=(gconst58*r01);
IkReal x15186=(gconst58*r11);
IkReal x15187=(cj1*cj2);
IkReal x15188=(r20*sj3);
IkReal x15189=(gconst59*r00);
IkReal x15190=(gconst59*sj3);
IkReal x15191=(gconst58*sj3);
IkReal x15192=(gconst58*r21);
IkReal x15193=((1.0)*cj1*sj2);
IkReal x15194=((1.0)*x15180);
IkReal x15195=((1.0)*x15179);
IkReal x15196=(sj3*x15180);
IkReal x15197=(gconst59*x15179);
evalcond[0]=((((-1.0)*r22*x15194))+((r20*x15197))+(((-1.0)*x15192*x15195)));
evalcond[1]=(((x15179*x15189))+(((-1.0)*x15185*x15195))+(((-1.0)*r02*x15194)));
evalcond[2]=((1.0)+(((-1.0)*x15186*x15195))+(((-1.0)*r12*x15194))+((r10*x15197)));
evalcond[3]=(((r11*x15180*x15184))+((r11*x15190))+((r10*x15191))+(((-1.0)*cj3*r12*x15195))+(((-1.0)*r10*x15182*x15194)));
evalcond[4]=((((-1.0)*r11*x15182))+(((-1.0)*r12*sj3*x15195))+(((-1.0)*r10*x15190*x15194))+(((-1.0)*r10*x15184))+((x15186*x15196)));
evalcond[5]=((((-1.0)*cj3*r22*x15195))+((r21*x15190))+((gconst58*x15188))+x15181+((r21*x15180*x15184))+(((-1.0)*r20*x15182*x15194))+(((-1.0)*x15193)));
evalcond[6]=(((r21*x15180*x15191))+(((-1.0)*r21*x15182))+(((-1.0)*r22*sj3*x15195))+x15187+x15183+(((-1.0)*gconst59*x15188*x15194))+(((-1.0)*r20*x15184)));
evalcond[7]=(((r00*x15191))+(((-1.0)*x15183))+(((-1.0)*x15187))+((r01*x15180*x15184))+(((-1.0)*cj3*r02*x15195))+(((-1.0)*r00*x15182*x15194))+((r01*x15190)));
evalcond[8]=(((x15185*x15196))+(((-1.0)*sj3*x15189*x15194))+(((-1.0)*r00*x15184))+x15181+(((-1.0)*r02*sj3*x15195))+(((-1.0)*r01*x15182))+(((-1.0)*x15193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15199 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x15199)==0){
continue;
}
IkReal x15198=pow(x15199,-0.5);
CheckValue<IkReal> x15200 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15200.valid){
continue;
}
IkReal gconst60=((-1.0)*(x15200.value));
IkReal gconst61=((-1.0)*r01*x15198);
IkReal gconst62=(r00*x15198);
CheckValue<IkReal> x15201 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15201.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15201.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15204 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15204.valid){
continue;
}
IkReal x15202=((-1.0)*(x15204.value));
IkReal x15203=x15198;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst61;
cj5=gconst62;
j5=x15202;
IkReal gconst60=x15202;
IkReal gconst61=((-1.0)*r01*x15203);
IkReal gconst62=(r00*x15203);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15207 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15207.valid){
continue;
}
IkReal x15205=((-1.0)*(x15207.value));
IkReal x15206=x15198;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst61;
cj5=gconst62;
j5=x15205;
IkReal gconst60=x15205;
IkReal gconst61=((-1.0)*r01*x15206);
IkReal gconst62=(r00*x15206);
CheckValue<IkReal> x15215=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x15215.valid){
continue;
}
IkReal x15208=x15215.value;
IkReal x15209=(cj3*x15208);
IkReal x15210=(r21*x15209);
IkReal x15211=(r10*x15209);
IkReal x15212=(r11*x15209);
IkReal x15213=(r20*x15209);
IkReal x15214=(r00*r01*x15209);
j4eval[0]=IKsign((((cj3*r12*r22))+((r20*x15211*(r00*r00)))+((r00*r01*r20*x15212))+((r11*x15210*(r01*r01)))+((r00*r01*r10*x15210))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15218 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15218.valid){
continue;
}
IkReal x15216=((-1.0)*(x15218.value));
IkReal x15217=x15198;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst61;
cj5=gconst62;
j5=x15216;
IkReal gconst60=x15216;
IkReal gconst61=((-1.0)*r01*x15217);
IkReal gconst62=(r00*x15217);
CheckValue<IkReal> x15226=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x15226.valid){
continue;
}
IkReal x15219=x15226.value;
IkReal x15220=(sj3*x15219);
IkReal x15221=(r11*x15220);
IkReal x15222=(r21*x15220);
IkReal x15223=(r20*x15220);
IkReal x15224=(r10*x15220);
IkReal x15225=(r00*r01*x15220);
j4eval[0]=IKsign((((r00*r01*r20*x15221))+((r12*r22*sj3))+((r00*r01*r10*x15222))+((r21*x15221*(r01*r01)))+((r10*x15223*(r00*r00)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15227=gconst61*gconst61;
IkReal x15228=gconst62*gconst62;
IkReal x15229=((1.0)*gconst62);
IkReal x15230=(r10*r21);
IkReal x15231=(gconst61*sj3);
IkReal x15232=(cj3*r11);
IkReal x15233=(cj3*gconst61*r10);
IkReal x15234=(r20*x15228);
CheckValue<IkReal> x15235 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x15233))+(((-1.0)*r22*x15229*x15232)))),IkReal(((((-1.0)*x15232*x15234))+(((-1.0)*r20*x15229*x15233))+((gconst61*gconst62*r21*x15232))+((cj3*x15227*x15230)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15235.valid){
continue;
}
CheckValue<IkReal> x15236=IKPowWithIntegerCheck(IKsign((((r11*r21*sj3*x15227))+(((-1.0)*r11*r20*x15229*x15231))+((r10*sj3*x15234))+((r12*r22*sj3))+(((-1.0)*x15229*x15230*x15231)))),-1);
if(!x15236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15235.value)+(((1.5707963267949)*(x15236.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15237=IKsin(j4);
IkReal x15238=IKcos(j4);
IkReal x15239=(cj2*sj1);
IkReal x15240=((1.0)*r22);
IkReal x15241=(gconst62*sj3);
IkReal x15242=(gconst61*r11);
IkReal x15243=(gconst61*sj3);
IkReal x15244=((1.0)*cj3);
IkReal x15245=(sj1*sj2);
IkReal x15246=(gconst61*r01);
IkReal x15247=((1.0)*cj1);
IkReal x15248=(sj2*x15247);
IkReal x15249=((1.0)*x15237);
IkReal x15250=(gconst62*x15237);
IkReal x15251=(r21*x15238);
IkReal x15252=(cj3*x15238);
IkReal x15253=(r00*x15238);
IkReal x15254=((1.0)*x15238);
IkReal x15255=(gconst62*x15238);
evalcond[0]=((((-1.0)*gconst61*r21*x15249))+((r20*x15250))+(((-1.0)*x15238*x15240)));
evalcond[1]=(((r00*x15250))+(((-1.0)*x15246*x15249))+(((-1.0)*r02*x15254)));
evalcond[2]=((1.0)+(((-1.0)*x15242*x15249))+(((-1.0)*r12*x15254))+((r10*x15250)));
evalcond[3]=((((-1.0)*r10*x15244*x15255))+((r10*x15243))+(((-1.0)*r12*x15237*x15244))+((r11*x15241))+((x15242*x15252)));
evalcond[4]=((((-1.0)*r12*sj3*x15249))+(((-1.0)*gconst62*r11*x15244))+((sj3*x15238*x15242))+(((-1.0)*gconst61*r10*x15244))+(((-1.0)*r10*x15241*x15254)));
evalcond[5]=((((-1.0)*cj3*x15237*x15240))+(((-1.0)*x15248))+x15239+((r21*x15241))+((r20*x15243))+(((-1.0)*r20*x15244*x15255))+((cj3*gconst61*x15251)));
evalcond[6]=(((x15243*x15251))+(((-1.0)*sj3*x15237*x15240))+(((-1.0)*r20*x15241*x15254))+x15245+(((-1.0)*gconst62*r21*x15244))+(((-1.0)*gconst61*r20*x15244))+((cj1*cj2)));
evalcond[7]=((((-1.0)*cj2*x15247))+((x15246*x15252))+((r01*x15241))+(((-1.0)*x15245))+(((-1.0)*r02*x15237*x15244))+((r00*x15243))+(((-1.0)*gconst62*x15244*x15253)));
evalcond[8]=((((-1.0)*x15241*x15253))+(((-1.0)*x15248))+x15239+(((-1.0)*r02*sj3*x15249))+((r01*x15238*x15243))+(((-1.0)*gconst61*r00*x15244))+(((-1.0)*gconst62*r01*x15244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15256=gconst62*gconst62;
IkReal x15257=gconst61*gconst61;
IkReal x15258=(r20*sj3);
IkReal x15259=(gconst61*r10);
IkReal x15260=(r22*sj3);
IkReal x15261=(gconst62*r11);
IkReal x15262=(cj3*r21);
IkReal x15263=(cj3*r20);
IkReal x15264=((1.0)*r21*sj3);
CheckValue<IkReal> x15265=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*gconst62*x15259*x15262))+((r11*x15257*x15262))+(((-1.0)*gconst61*x15261*x15263))+((r10*x15256*x15263)))),-1);
if(!x15265.valid){
continue;
}
CheckValue<IkReal> x15266 = IKatan2WithCheck(IkReal((((x15259*x15260))+((x15260*x15261)))),IkReal(((((-1.0)*r10*x15257*x15264))+((gconst62*x15258*x15259))+(((-1.0)*gconst61*x15261*x15264))+((r11*x15256*x15258)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15266.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15265.value)))+(x15266.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15267=IKsin(j4);
IkReal x15268=IKcos(j4);
IkReal x15269=(cj2*sj1);
IkReal x15270=((1.0)*r22);
IkReal x15271=(gconst62*sj3);
IkReal x15272=(gconst61*r11);
IkReal x15273=(gconst61*sj3);
IkReal x15274=((1.0)*cj3);
IkReal x15275=(sj1*sj2);
IkReal x15276=(gconst61*r01);
IkReal x15277=((1.0)*cj1);
IkReal x15278=(sj2*x15277);
IkReal x15279=((1.0)*x15267);
IkReal x15280=(gconst62*x15267);
IkReal x15281=(r21*x15268);
IkReal x15282=(cj3*x15268);
IkReal x15283=(r00*x15268);
IkReal x15284=((1.0)*x15268);
IkReal x15285=(gconst62*x15268);
evalcond[0]=((((-1.0)*x15268*x15270))+((r20*x15280))+(((-1.0)*gconst61*r21*x15279)));
evalcond[1]=(((r00*x15280))+(((-1.0)*x15276*x15279))+(((-1.0)*r02*x15284)));
evalcond[2]=((1.0)+(((-1.0)*r12*x15284))+((r10*x15280))+(((-1.0)*x15272*x15279)));
evalcond[3]=(((x15272*x15282))+(((-1.0)*r10*x15274*x15285))+((r11*x15271))+((r10*x15273))+(((-1.0)*r12*x15267*x15274)));
evalcond[4]=((((-1.0)*gconst62*r11*x15274))+(((-1.0)*r10*x15271*x15284))+(((-1.0)*r12*sj3*x15279))+(((-1.0)*gconst61*r10*x15274))+((sj3*x15268*x15272)));
evalcond[5]=((((-1.0)*cj3*x15267*x15270))+x15269+((cj3*gconst61*x15281))+((r20*x15273))+(((-1.0)*r20*x15274*x15285))+((r21*x15271))+(((-1.0)*x15278)));
evalcond[6]=((((-1.0)*r20*x15271*x15284))+(((-1.0)*sj3*x15267*x15270))+x15275+(((-1.0)*gconst62*r21*x15274))+((x15273*x15281))+((cj1*cj2))+(((-1.0)*gconst61*r20*x15274)));
evalcond[7]=((((-1.0)*cj2*x15277))+(((-1.0)*gconst62*x15274*x15283))+(((-1.0)*r02*x15267*x15274))+(((-1.0)*x15275))+((r01*x15271))+((x15276*x15282))+((r00*x15273)));
evalcond[8]=((((-1.0)*gconst62*r01*x15274))+((r01*x15268*x15273))+(((-1.0)*gconst61*r00*x15274))+x15269+(((-1.0)*r02*sj3*x15279))+(((-1.0)*x15271*x15283))+(((-1.0)*x15278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15286=((1.0)*gconst61);
CheckValue<IkReal> x15287 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x15286))+((gconst62*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15287.valid){
continue;
}
CheckValue<IkReal> x15288=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst62*r21))+(((-1.0)*r20*x15286)))),-1);
if(!x15288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15287.value)+(((1.5707963267949)*(x15288.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15289=IKsin(j4);
IkReal x15290=IKcos(j4);
IkReal x15291=(cj2*sj1);
IkReal x15292=((1.0)*r22);
IkReal x15293=(gconst62*sj3);
IkReal x15294=(gconst61*r11);
IkReal x15295=(gconst61*sj3);
IkReal x15296=((1.0)*cj3);
IkReal x15297=(sj1*sj2);
IkReal x15298=(gconst61*r01);
IkReal x15299=((1.0)*cj1);
IkReal x15300=(sj2*x15299);
IkReal x15301=((1.0)*x15289);
IkReal x15302=(gconst62*x15289);
IkReal x15303=(r21*x15290);
IkReal x15304=(cj3*x15290);
IkReal x15305=(r00*x15290);
IkReal x15306=((1.0)*x15290);
IkReal x15307=(gconst62*x15290);
evalcond[0]=((((-1.0)*gconst61*r21*x15301))+((r20*x15302))+(((-1.0)*x15290*x15292)));
evalcond[1]=(((r00*x15302))+(((-1.0)*x15298*x15301))+(((-1.0)*r02*x15306)));
evalcond[2]=((1.0)+((r10*x15302))+(((-1.0)*r12*x15306))+(((-1.0)*x15294*x15301)));
evalcond[3]=((((-1.0)*r12*x15289*x15296))+((r10*x15295))+(((-1.0)*r10*x15296*x15307))+((r11*x15293))+((x15294*x15304)));
evalcond[4]=(((sj3*x15290*x15294))+(((-1.0)*r12*sj3*x15301))+(((-1.0)*gconst62*r11*x15296))+(((-1.0)*r10*x15293*x15306))+(((-1.0)*gconst61*r10*x15296)));
evalcond[5]=(((r20*x15295))+x15291+((r21*x15293))+((cj3*gconst61*x15303))+(((-1.0)*cj3*x15289*x15292))+(((-1.0)*x15300))+(((-1.0)*r20*x15296*x15307)));
evalcond[6]=((((-1.0)*sj3*x15289*x15292))+((x15295*x15303))+(((-1.0)*gconst62*r21*x15296))+x15297+(((-1.0)*r20*x15293*x15306))+((cj1*cj2))+(((-1.0)*gconst61*r20*x15296)));
evalcond[7]=((((-1.0)*x15297))+(((-1.0)*r02*x15289*x15296))+((r01*x15293))+((r00*x15295))+(((-1.0)*cj2*x15299))+((x15298*x15304))+(((-1.0)*gconst62*x15296*x15305)));
evalcond[8]=((((-1.0)*gconst61*r00*x15296))+(((-1.0)*r02*sj3*x15301))+x15291+(((-1.0)*x15293*x15305))+((r01*x15290*x15295))+(((-1.0)*x15300))+(((-1.0)*gconst62*r01*x15296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15309 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x15309)==0){
continue;
}
IkReal x15308=pow(x15309,-0.5);
CheckValue<IkReal> x15310 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15310.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x15310.value))));
IkReal gconst64=((1.0)*r01*x15308);
IkReal gconst65=((-1.0)*r00*x15308);
CheckValue<IkReal> x15311 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15311.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15311.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x15314 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15314.valid){
continue;
}
IkReal x15312=((1.0)*(x15314.value));
IkReal x15313=x15308;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x15312)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x15312)));
IkReal gconst64=((1.0)*r01*x15313);
IkReal gconst65=((-1.0)*r00*x15313);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15317 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15317.valid){
continue;
}
IkReal x15315=((1.0)*(x15317.value));
IkReal x15316=x15308;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x15315)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x15315)));
IkReal gconst64=((1.0)*r01*x15316);
IkReal gconst65=((-1.0)*r00*x15316);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15318=gconst65*gconst65;
IkReal x15319=gconst64*gconst64;
IkReal x15320=(r11*r20);
IkReal x15321=(r22*sj3);
IkReal x15322=(gconst64*r10);
IkReal x15323=(gconst65*r11);
IkReal x15324=((1.0)*sj3);
IkReal x15325=((1.0)*cj3*gconst65);
IkReal x15326=(r21*x15319);
CheckValue<IkReal> x15327 = IKatan2WithCheck(IkReal((((x15321*x15322))+((x15321*x15323)))),IkReal(((((-1.0)*r10*x15324*x15326))+((gconst65*r20*sj3*x15322))+((sj3*x15318*x15320))+(((-1.0)*gconst64*r21*x15323*x15324)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15327.valid){
continue;
}
CheckValue<IkReal> x15328=IKPowWithIntegerCheck(IKsign((((cj3*r11*x15326))+((cj3*r12*r22))+((cj3*r10*r20*x15318))+(((-1.0)*r21*x15322*x15325))+(((-1.0)*gconst64*x15320*x15325)))),-1);
if(!x15328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15327.value)+(((1.5707963267949)*(x15328.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15329=IKsin(j4);
IkReal x15330=IKcos(j4);
IkReal x15331=(cj2*sj1);
IkReal x15332=(gconst65*r10);
IkReal x15333=((1.0)*cj3);
IkReal x15334=(gconst65*r21);
IkReal x15335=(sj1*sj2);
IkReal x15336=(gconst64*r00);
IkReal x15337=(gconst65*sj3);
IkReal x15338=((1.0)*cj1);
IkReal x15339=(cj3*gconst65);
IkReal x15340=(gconst64*sj3);
IkReal x15341=(sj2*x15338);
IkReal x15342=((1.0)*x15330);
IkReal x15343=((1.0)*x15329);
IkReal x15344=(gconst65*x15329);
IkReal x15345=(cj3*gconst64*x15330);
evalcond[0]=((((-1.0)*r22*x15342))+(((-1.0)*gconst64*r21*x15343))+((r20*x15344)));
evalcond[1]=(((r00*x15344))+(((-1.0)*r02*x15342))+(((-1.0)*gconst64*r01*x15343)));
evalcond[2]=((1.0)+(((-1.0)*r12*x15342))+((x15329*x15332))+(((-1.0)*gconst64*r11*x15343)));
evalcond[3]=((((-1.0)*r12*x15329*x15333))+((r11*x15337))+(((-1.0)*x15330*x15332*x15333))+((r11*x15345))+((r10*x15340)));
evalcond[4]=((((-1.0)*r12*sj3*x15343))+(((-1.0)*sj3*x15332*x15342))+(((-1.0)*gconst65*r11*x15333))+((r11*x15330*x15340))+(((-1.0)*gconst64*r10*x15333)));
evalcond[5]=(((r21*x15345))+((sj3*x15334))+(((-1.0)*x15341))+x15331+((r20*x15340))+(((-1.0)*r22*x15329*x15333))+(((-1.0)*gconst65*r20*x15330*x15333)));
evalcond[6]=((((-1.0)*r20*x15337*x15342))+(((-1.0)*r22*sj3*x15343))+x15335+(((-1.0)*gconst64*r20*x15333))+(((-1.0)*x15333*x15334))+((cj1*cj2))+((r21*x15330*x15340)));
evalcond[7]=((((-1.0)*x15335))+((r01*x15345))+((r01*x15337))+((sj3*x15336))+(((-1.0)*cj2*x15338))+(((-1.0)*gconst65*r00*x15330*x15333))+(((-1.0)*r02*x15329*x15333)));
evalcond[8]=((((-1.0)*x15341))+(((-1.0)*gconst65*r01*x15333))+x15331+(((-1.0)*r00*x15337*x15342))+(((-1.0)*x15333*x15336))+((r01*x15330*x15340))+(((-1.0)*r02*sj3*x15343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15346=((1.0)*gconst64);
CheckValue<IkReal> x15347=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst65*r21))+(((-1.0)*r20*x15346)))),-1);
if(!x15347.valid){
continue;
}
CheckValue<IkReal> x15348 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x15346))+((gconst65*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15347.value)))+(x15348.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15349=IKsin(j4);
IkReal x15350=IKcos(j4);
IkReal x15351=(cj2*sj1);
IkReal x15352=(gconst65*r10);
IkReal x15353=((1.0)*cj3);
IkReal x15354=(gconst65*r21);
IkReal x15355=(sj1*sj2);
IkReal x15356=(gconst64*r00);
IkReal x15357=(gconst65*sj3);
IkReal x15358=((1.0)*cj1);
IkReal x15359=(cj3*gconst65);
IkReal x15360=(gconst64*sj3);
IkReal x15361=(sj2*x15358);
IkReal x15362=((1.0)*x15350);
IkReal x15363=((1.0)*x15349);
IkReal x15364=(gconst65*x15349);
IkReal x15365=(cj3*gconst64*x15350);
evalcond[0]=((((-1.0)*gconst64*r21*x15363))+(((-1.0)*r22*x15362))+((r20*x15364)));
evalcond[1]=((((-1.0)*r02*x15362))+(((-1.0)*gconst64*r01*x15363))+((r00*x15364)));
evalcond[2]=((1.0)+(((-1.0)*r12*x15362))+((x15349*x15352))+(((-1.0)*gconst64*r11*x15363)));
evalcond[3]=((((-1.0)*r12*x15349*x15353))+((r10*x15360))+((r11*x15365))+((r11*x15357))+(((-1.0)*x15350*x15352*x15353)));
evalcond[4]=((((-1.0)*r12*sj3*x15363))+((r11*x15350*x15360))+(((-1.0)*gconst64*r10*x15353))+(((-1.0)*gconst65*r11*x15353))+(((-1.0)*sj3*x15352*x15362)));
evalcond[5]=((((-1.0)*x15361))+x15351+(((-1.0)*gconst65*r20*x15350*x15353))+((r20*x15360))+(((-1.0)*r22*x15349*x15353))+((sj3*x15354))+((r21*x15365)));
evalcond[6]=((((-1.0)*r22*sj3*x15363))+(((-1.0)*gconst64*r20*x15353))+(((-1.0)*x15353*x15354))+x15355+(((-1.0)*r20*x15357*x15362))+((r21*x15350*x15360))+((cj1*cj2)));
evalcond[7]=((((-1.0)*r02*x15349*x15353))+(((-1.0)*cj2*x15358))+(((-1.0)*x15355))+((sj3*x15356))+((r01*x15357))+((r01*x15365))+(((-1.0)*gconst65*r00*x15350*x15353)));
evalcond[8]=((((-1.0)*gconst65*r01*x15353))+(((-1.0)*x15361))+(((-1.0)*x15353*x15356))+x15351+((r01*x15350*x15360))+(((-1.0)*r02*sj3*x15363))+(((-1.0)*r00*x15357*x15362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15366=IKPowWithIntegerCheck(IKsign((((gconst64*r00))+((gconst65*r01)))),-1);
if(!x15366.valid){
continue;
}
CheckValue<IkReal> x15367 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst64*r21))+((gconst65*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15367.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15366.value)))+(x15367.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15368=IKsin(j4);
IkReal x15369=IKcos(j4);
IkReal x15370=(cj2*sj1);
IkReal x15371=(gconst65*r10);
IkReal x15372=((1.0)*cj3);
IkReal x15373=(gconst65*r21);
IkReal x15374=(sj1*sj2);
IkReal x15375=(gconst64*r00);
IkReal x15376=(gconst65*sj3);
IkReal x15377=((1.0)*cj1);
IkReal x15378=(cj3*gconst65);
IkReal x15379=(gconst64*sj3);
IkReal x15380=(sj2*x15377);
IkReal x15381=((1.0)*x15369);
IkReal x15382=((1.0)*x15368);
IkReal x15383=(gconst65*x15368);
IkReal x15384=(cj3*gconst64*x15369);
evalcond[0]=((((-1.0)*r22*x15381))+((r20*x15383))+(((-1.0)*gconst64*r21*x15382)));
evalcond[1]=((((-1.0)*gconst64*r01*x15382))+(((-1.0)*r02*x15381))+((r00*x15383)));
evalcond[2]=((1.0)+((x15368*x15371))+(((-1.0)*gconst64*r11*x15382))+(((-1.0)*r12*x15381)));
evalcond[3]=((((-1.0)*x15369*x15371*x15372))+((r11*x15384))+(((-1.0)*r12*x15368*x15372))+((r10*x15379))+((r11*x15376)));
evalcond[4]=((((-1.0)*gconst65*r11*x15372))+(((-1.0)*r12*sj3*x15382))+(((-1.0)*gconst64*r10*x15372))+((r11*x15369*x15379))+(((-1.0)*sj3*x15371*x15381)));
evalcond[5]=(((r21*x15384))+((r20*x15379))+((sj3*x15373))+x15370+(((-1.0)*x15380))+(((-1.0)*gconst65*r20*x15369*x15372))+(((-1.0)*r22*x15368*x15372)));
evalcond[6]=((((-1.0)*x15372*x15373))+x15374+((r21*x15369*x15379))+(((-1.0)*r20*x15376*x15381))+(((-1.0)*gconst64*r20*x15372))+((cj1*cj2))+(((-1.0)*r22*sj3*x15382)));
evalcond[7]=(((r01*x15384))+(((-1.0)*x15374))+((sj3*x15375))+((r01*x15376))+(((-1.0)*cj2*x15377))+(((-1.0)*r02*x15368*x15372))+(((-1.0)*gconst65*r00*x15369*x15372)));
evalcond[8]=((((-1.0)*x15372*x15375))+x15370+(((-1.0)*x15380))+(((-1.0)*r02*sj3*x15382))+(((-1.0)*gconst65*r01*x15372))+(((-1.0)*r00*x15376*x15381))+((r01*x15369*x15379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15385=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15385);
rxp1_1=(px*r21);
rxp1_2=(r11*x15385);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15386=(cj5*r10);
IkReal x15387=(r11*sj5);
j4eval[0]=(x15386+(((-1.0)*x15387)));
j4eval[1]=((((-1.0)*sj3*x15386))+((sj3*x15387)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15388=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15388);
rxp1_1=(px*r21);
rxp1_2=(r11*x15388);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15389=(r11*sj5);
IkReal x15390=(cj5*r10);
j4eval[0]=(x15390+(((-1.0)*x15389)));
j4eval[1]=(((cj3*x15389))+(((-1.0)*cj3*x15390)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15391=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15391);
rxp1_1=(px*r21);
rxp1_2=(r11*x15391);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15392=((1.0)*r10);
CheckValue<IkReal> x15393=IKPowWithIntegerCheck(r02,-1);
if(!x15393.valid){
continue;
}
CheckValue<IkReal> x15394=IKPowWithIntegerCheck(sj3,-1);
if(!x15394.valid){
continue;
}
CheckValue<IkReal> x15395=IKPowWithIntegerCheck((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*x15392))),-1);
if(!x15395.valid){
continue;
}
if( IKabs(((x15393.value)*(x15394.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15395.value)*(((((-1.0)*sj3*sj5*x15392))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15393.value)*(x15394.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x15395.value)*(((((-1.0)*sj3*sj5*x15392))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15393.value)*(x15394.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x15395.value)*(((((-1.0)*sj3*sj5*x15392))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15396=IKsin(j4);
IkReal x15397=IKcos(j4);
IkReal x15398=(cj2*sj1);
IkReal x15399=(r11*sj5);
IkReal x15400=(sj1*sj2);
IkReal x15401=((1.0)*cj3);
IkReal x15402=(r10*sj5);
IkReal x15403=(cj5*r10);
IkReal x15404=(r21*sj5);
IkReal x15405=((1.0)*cj1);
IkReal x15406=(cj5*r11);
IkReal x15407=(cj5*r20);
IkReal x15408=(r20*sj5);
IkReal x15409=(cj5*r21);
IkReal x15410=(sj2*x15405);
IkReal x15411=((1.0)*x15396);
IkReal x15412=(cj3*x15397);
IkReal x15413=(sj3*x15397);
evalcond[0]=((-1.0)*r02*x15397);
evalcond[1]=((((-1.0)*x15404*x15411))+((x15396*x15407)));
evalcond[2]=((1.0)+(((-1.0)*x15399*x15411))+((x15396*x15403)));
evalcond[3]=(x15398+(((-1.0)*r02*sj3*x15411))+(((-1.0)*x15410)));
evalcond[4]=((((-1.0)*x15400))+(((-1.0)*cj2*x15405))+(((-1.0)*r02*x15396*x15401)));
evalcond[5]=(((x15399*x15412))+((sj3*x15402))+((sj3*x15406))+(((-1.0)*x15397*x15401*x15403)));
evalcond[6]=(((x15399*x15413))+(((-1.0)*x15401*x15406))+(((-1.0)*x15401*x15402))+(((-1.0)*x15403*x15413)));
evalcond[7]=(x15398+((sj3*x15408))+((sj3*x15409))+(((-1.0)*x15397*x15401*x15407))+((x15404*x15412))+(((-1.0)*x15410)));
evalcond[8]=((((-1.0)*x15401*x15409))+(((-1.0)*x15401*x15408))+(((-1.0)*x15407*x15413))+((x15404*x15413))+x15400+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15414=(cj5*r10);
IkReal x15415=((1.0)*sj3);
IkReal x15416=(r11*sj5);
CheckValue<IkReal> x15417=IKPowWithIntegerCheck(((((-1.0)*x15416))+x15414),-1);
if(!x15417.valid){
continue;
}
CheckValue<IkReal> x15418=IKPowWithIntegerCheck((((cj3*x15416))+(((-1.0)*cj3*x15414))),-1);
if(!x15418.valid){
continue;
}
if( IKabs(((-1.0)*(x15417.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15418.value)*(((((-1.0)*r10*sj5*x15415))+(((-1.0)*cj5*r11*x15415)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15417.value)))+IKsqr(((x15418.value)*(((((-1.0)*r10*sj5*x15415))+(((-1.0)*cj5*r11*x15415))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15417.value)), ((x15418.value)*(((((-1.0)*r10*sj5*x15415))+(((-1.0)*cj5*r11*x15415))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15419=IKsin(j4);
IkReal x15420=IKcos(j4);
IkReal x15421=(cj2*sj1);
IkReal x15422=(r11*sj5);
IkReal x15423=(sj1*sj2);
IkReal x15424=((1.0)*cj3);
IkReal x15425=(r10*sj5);
IkReal x15426=(cj5*r10);
IkReal x15427=(r21*sj5);
IkReal x15428=((1.0)*cj1);
IkReal x15429=(cj5*r11);
IkReal x15430=(cj5*r20);
IkReal x15431=(r20*sj5);
IkReal x15432=(cj5*r21);
IkReal x15433=(sj2*x15428);
IkReal x15434=((1.0)*x15419);
IkReal x15435=(cj3*x15420);
IkReal x15436=(sj3*x15420);
evalcond[0]=((-1.0)*r02*x15420);
evalcond[1]=((((-1.0)*x15427*x15434))+((x15419*x15430)));
evalcond[2]=((1.0)+(((-1.0)*x15422*x15434))+((x15419*x15426)));
evalcond[3]=((((-1.0)*x15433))+x15421+(((-1.0)*r02*sj3*x15434)));
evalcond[4]=((((-1.0)*cj2*x15428))+(((-1.0)*r02*x15419*x15424))+(((-1.0)*x15423)));
evalcond[5]=(((sj3*x15425))+((sj3*x15429))+((x15422*x15435))+(((-1.0)*x15420*x15424*x15426)));
evalcond[6]=((((-1.0)*x15424*x15429))+(((-1.0)*x15424*x15425))+(((-1.0)*x15426*x15436))+((x15422*x15436)));
evalcond[7]=((((-1.0)*x15420*x15424*x15430))+((sj3*x15432))+((sj3*x15431))+(((-1.0)*x15433))+x15421+((x15427*x15435)));
evalcond[8]=((((-1.0)*x15430*x15436))+(((-1.0)*x15424*x15431))+(((-1.0)*x15424*x15432))+x15423+((cj1*cj2))+((x15427*x15436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15437=(cj5*r10);
IkReal x15438=(r11*sj5);
CheckValue<IkReal> x15439=IKPowWithIntegerCheck(((((-1.0)*x15438))+x15437),-1);
if(!x15439.valid){
continue;
}
CheckValue<IkReal> x15440=IKPowWithIntegerCheck((((sj3*x15438))+(((-1.0)*sj3*x15437))),-1);
if(!x15440.valid){
continue;
}
if( IKabs(((-1.0)*(x15439.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15440.value)*((((cj3*cj5*r11))+((cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15439.value)))+IKsqr(((x15440.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15439.value)), ((x15440.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15441=IKsin(j4);
IkReal x15442=IKcos(j4);
IkReal x15443=(cj2*sj1);
IkReal x15444=(r11*sj5);
IkReal x15445=(sj1*sj2);
IkReal x15446=((1.0)*cj3);
IkReal x15447=(r10*sj5);
IkReal x15448=(cj5*r10);
IkReal x15449=(r21*sj5);
IkReal x15450=((1.0)*cj1);
IkReal x15451=(cj5*r11);
IkReal x15452=(cj5*r20);
IkReal x15453=(r20*sj5);
IkReal x15454=(cj5*r21);
IkReal x15455=(sj2*x15450);
IkReal x15456=((1.0)*x15441);
IkReal x15457=(cj3*x15442);
IkReal x15458=(sj3*x15442);
evalcond[0]=((-1.0)*r02*x15442);
evalcond[1]=(((x15441*x15452))+(((-1.0)*x15449*x15456)));
evalcond[2]=((1.0)+(((-1.0)*x15444*x15456))+((x15441*x15448)));
evalcond[3]=((((-1.0)*r02*sj3*x15456))+(((-1.0)*x15455))+x15443);
evalcond[4]=((((-1.0)*r02*x15441*x15446))+(((-1.0)*cj2*x15450))+(((-1.0)*x15445)));
evalcond[5]=(((sj3*x15447))+((sj3*x15451))+((x15444*x15457))+(((-1.0)*x15442*x15446*x15448)));
evalcond[6]=((((-1.0)*x15446*x15447))+((x15444*x15458))+(((-1.0)*x15448*x15458))+(((-1.0)*x15446*x15451)));
evalcond[7]=(((sj3*x15453))+((sj3*x15454))+((x15449*x15457))+(((-1.0)*x15442*x15446*x15452))+(((-1.0)*x15455))+x15443);
evalcond[8]=(((x15449*x15458))+(((-1.0)*x15452*x15458))+x15445+((cj1*cj2))+(((-1.0)*x15446*x15454))+(((-1.0)*x15446*x15453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15459=cj5*cj5;
IkReal x15460=(r11*sj3);
IkReal x15461=(cj3*r10);
IkReal x15462=(cj3*r11);
IkReal x15463=(r10*sj3);
IkReal x15464=(cj5*r20*sj5);
IkReal x15465=(r21*x15459);
IkReal x15466=(r20*x15459);
IkReal x15467=((1.0)*cj5*r21*sj5);
CheckValue<IkReal> x15468=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*x15462*x15465))+(((-1.0)*x15462*x15464))+((x15461*x15466))+((r21*x15462))+(((-1.0)*x15461*x15467)))),-1);
if(!x15468.valid){
continue;
}
CheckValue<IkReal> x15469 = IKatan2WithCheck(IkReal((((cj5*r22*x15460))+((r22*sj5*x15463)))),IkReal(((((-1.0)*r21*x15463))+((x15463*x15465))+((x15463*x15464))+((x15460*x15466))+(((-1.0)*x15460*x15467)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15469.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15468.value)))+(x15469.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15470=IKsin(j4);
IkReal x15471=IKcos(j4);
IkReal x15472=(cj2*sj1);
IkReal x15473=((1.0)*r22);
IkReal x15474=(cj5*r01);
IkReal x15475=(r11*sj5);
IkReal x15476=((1.0)*cj3);
IkReal x15477=(cj5*r21);
IkReal x15478=(r00*sj5);
IkReal x15479=(sj1*sj2);
IkReal x15480=(r10*sj5);
IkReal x15481=(r01*sj5);
IkReal x15482=(cj5*r10);
IkReal x15483=(r21*sj5);
IkReal x15484=((1.0)*cj1);
IkReal x15485=(cj5*r00);
IkReal x15486=(cj5*r20);
IkReal x15487=(r20*sj5);
IkReal x15488=(cj5*r11);
IkReal x15489=(sj2*x15484);
IkReal x15490=((1.0)*x15470);
IkReal x15491=(cj3*x15471);
IkReal x15492=((1.0)*x15471);
IkReal x15493=(sj3*x15471);
evalcond[0]=((((-1.0)*x15483*x15490))+((x15470*x15486))+(((-1.0)*x15471*x15473)));
evalcond[1]=(((x15470*x15485))+(((-1.0)*r02*x15492))+(((-1.0)*x15481*x15490)));
evalcond[2]=((1.0)+(((-1.0)*x15475*x15490))+((x15470*x15482))+(((-1.0)*r12*x15492)));
evalcond[3]=(((sj3*x15488))+((sj3*x15480))+(((-1.0)*r12*x15470*x15476))+((x15475*x15491))+(((-1.0)*x15471*x15476*x15482)));
evalcond[4]=((((-1.0)*sj3*x15482*x15492))+(((-1.0)*r12*sj3*x15490))+((x15475*x15493))+(((-1.0)*x15476*x15480))+(((-1.0)*x15476*x15488)));
evalcond[5]=(((sj3*x15487))+(((-1.0)*x15489))+x15472+(((-1.0)*cj3*x15470*x15473))+((sj3*x15477))+((x15483*x15491))+(((-1.0)*x15471*x15476*x15486)));
evalcond[6]=((((-1.0)*sj3*x15486*x15492))+(((-1.0)*sj3*x15470*x15473))+(((-1.0)*x15476*x15477))+x15479+((cj1*cj2))+((x15483*x15493))+(((-1.0)*x15476*x15487)));
evalcond[7]=((((-1.0)*x15479))+(((-1.0)*r02*x15470*x15476))+((x15481*x15491))+(((-1.0)*cj2*x15484))+((sj3*x15478))+((sj3*x15474))+(((-1.0)*x15471*x15476*x15485)));
evalcond[8]=((((-1.0)*r02*sj3*x15490))+(((-1.0)*x15489))+(((-1.0)*x15476*x15478))+x15472+(((-1.0)*x15474*x15476))+((x15481*x15493))+(((-1.0)*sj3*x15485*x15492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15494=((1.0)*sj5);
CheckValue<IkReal> x15495=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x15494))+(((-1.0)*cj5*r21)))),-1);
if(!x15495.valid){
continue;
}
CheckValue<IkReal> x15496 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x15494))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15496.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15495.value)))+(x15496.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15497=IKsin(j4);
IkReal x15498=IKcos(j4);
IkReal x15499=(cj2*sj1);
IkReal x15500=((1.0)*r22);
IkReal x15501=(cj5*r01);
IkReal x15502=(r11*sj5);
IkReal x15503=((1.0)*cj3);
IkReal x15504=(cj5*r21);
IkReal x15505=(r00*sj5);
IkReal x15506=(sj1*sj2);
IkReal x15507=(r10*sj5);
IkReal x15508=(r01*sj5);
IkReal x15509=(cj5*r10);
IkReal x15510=(r21*sj5);
IkReal x15511=((1.0)*cj1);
IkReal x15512=(cj5*r00);
IkReal x15513=(cj5*r20);
IkReal x15514=(r20*sj5);
IkReal x15515=(cj5*r11);
IkReal x15516=(sj2*x15511);
IkReal x15517=((1.0)*x15497);
IkReal x15518=(cj3*x15498);
IkReal x15519=((1.0)*x15498);
IkReal x15520=(sj3*x15498);
evalcond[0]=((((-1.0)*x15510*x15517))+(((-1.0)*x15498*x15500))+((x15497*x15513)));
evalcond[1]=((((-1.0)*r02*x15519))+(((-1.0)*x15508*x15517))+((x15497*x15512)));
evalcond[2]=((1.0)+(((-1.0)*r12*x15519))+(((-1.0)*x15502*x15517))+((x15497*x15509)));
evalcond[3]=((((-1.0)*r12*x15497*x15503))+((sj3*x15515))+(((-1.0)*x15498*x15503*x15509))+((x15502*x15518))+((sj3*x15507)));
evalcond[4]=((((-1.0)*sj3*x15509*x15519))+((x15502*x15520))+(((-1.0)*r12*sj3*x15517))+(((-1.0)*x15503*x15507))+(((-1.0)*x15503*x15515)));
evalcond[5]=((((-1.0)*cj3*x15497*x15500))+(((-1.0)*x15498*x15503*x15513))+((sj3*x15514))+x15499+(((-1.0)*x15516))+((sj3*x15504))+((x15510*x15518)));
evalcond[6]=(((x15510*x15520))+(((-1.0)*sj3*x15497*x15500))+(((-1.0)*x15503*x15504))+(((-1.0)*x15503*x15514))+((cj1*cj2))+x15506+(((-1.0)*sj3*x15513*x15519)));
evalcond[7]=((((-1.0)*cj2*x15511))+((x15508*x15518))+(((-1.0)*x15498*x15503*x15512))+(((-1.0)*r02*x15497*x15503))+(((-1.0)*x15506))+((sj3*x15505))+((sj3*x15501)));
evalcond[8]=((((-1.0)*sj3*x15512*x15519))+((x15508*x15520))+(((-1.0)*x15501*x15503))+(((-1.0)*r02*sj3*x15517))+(((-1.0)*x15503*x15505))+x15499+(((-1.0)*x15516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15521=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x15521.valid){
continue;
}
CheckValue<IkReal> x15522 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15522.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15521.value)))+(x15522.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15523=IKsin(j4);
IkReal x15524=IKcos(j4);
IkReal x15525=(cj2*sj1);
IkReal x15526=((1.0)*r22);
IkReal x15527=(cj5*r01);
IkReal x15528=(r11*sj5);
IkReal x15529=((1.0)*cj3);
IkReal x15530=(cj5*r21);
IkReal x15531=(r00*sj5);
IkReal x15532=(sj1*sj2);
IkReal x15533=(r10*sj5);
IkReal x15534=(r01*sj5);
IkReal x15535=(cj5*r10);
IkReal x15536=(r21*sj5);
IkReal x15537=((1.0)*cj1);
IkReal x15538=(cj5*r00);
IkReal x15539=(cj5*r20);
IkReal x15540=(r20*sj5);
IkReal x15541=(cj5*r11);
IkReal x15542=(sj2*x15537);
IkReal x15543=((1.0)*x15523);
IkReal x15544=(cj3*x15524);
IkReal x15545=((1.0)*x15524);
IkReal x15546=(sj3*x15524);
evalcond[0]=((((-1.0)*x15536*x15543))+((x15523*x15539))+(((-1.0)*x15524*x15526)));
evalcond[1]=(((x15523*x15538))+(((-1.0)*x15534*x15543))+(((-1.0)*r02*x15545)));
evalcond[2]=((1.0)+((x15523*x15535))+(((-1.0)*x15528*x15543))+(((-1.0)*r12*x15545)));
evalcond[3]=(((x15528*x15544))+(((-1.0)*r12*x15523*x15529))+((sj3*x15541))+((sj3*x15533))+(((-1.0)*x15524*x15529*x15535)));
evalcond[4]=(((x15528*x15546))+(((-1.0)*x15529*x15541))+(((-1.0)*sj3*x15535*x15545))+(((-1.0)*x15529*x15533))+(((-1.0)*r12*sj3*x15543)));
evalcond[5]=(((x15536*x15544))+((sj3*x15540))+((sj3*x15530))+(((-1.0)*cj3*x15523*x15526))+(((-1.0)*x15524*x15529*x15539))+(((-1.0)*x15542))+x15525);
evalcond[6]=((((-1.0)*sj3*x15539*x15545))+(((-1.0)*x15529*x15540))+((x15536*x15546))+(((-1.0)*x15529*x15530))+(((-1.0)*sj3*x15523*x15526))+((cj1*cj2))+x15532);
evalcond[7]=(((sj3*x15531))+((sj3*x15527))+(((-1.0)*x15524*x15529*x15538))+((x15534*x15544))+(((-1.0)*x15532))+(((-1.0)*r02*x15523*x15529))+(((-1.0)*cj2*x15537)));
evalcond[8]=((((-1.0)*x15529*x15531))+((x15534*x15546))+(((-1.0)*sj3*x15538*x15545))+(((-1.0)*x15542))+x15525+(((-1.0)*x15527*x15529))+(((-1.0)*r02*sj3*x15543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15547=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15547);
rxp0_2=(py*r00);
rxp1_0=(r21*x15547);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15548=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15548);
rxp0_2=(py*r00);
rxp1_0=(r21*x15548);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15549=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15549);
rxp0_2=(py*r00);
rxp1_0=(r21*x15549);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15550=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15550);
rxp0_2=(py*r00);
rxp1_0=(r21*x15550);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15551=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15551);
rxp0_2=(py*r00);
rxp1_0=(r21*x15551);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15552=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15552);
rxp0_2=(py*r00);
rxp1_0=(r21*x15552);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15555=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x15555.valid){
continue;
}
IkReal x15553=x15555.value;
IkReal x15554=(cj0*x15553);
cj4array[0]=((((-1.0)*cj1*sj2*x15554))+((cj2*sj1*x15554)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15556=IKsin(j4);
IkReal x15557=IKcos(j4);
IkReal x15558=(cj5*r20);
IkReal x15559=((1.0)*x15557);
IkReal x15560=((1.0)*sj5*x15556);
evalcond[0]=((-1.0)*r12*x15556);
evalcond[1]=((((-1.0)*r12*x15559))+(((-1.0)*cj0)));
evalcond[2]=(((x15556*x15558))+(((-1.0)*r21*x15560)));
evalcond[3]=(((cj5*r00*x15556))+(((-1.0)*r01*x15560)));
evalcond[4]=((((-1.0)*x15558*x15559))+((sj1*sj2))+((r21*sj5*x15557))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15563=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x15563.valid){
continue;
}
IkReal x15561=x15563.value;
IkReal x15562=((1.0)*x15561);
cj4array[0]=((((-1.0)*cj1*cj2*x15562))+(((-1.0)*sj1*sj2*x15562)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15564=IKsin(j4);
IkReal x15565=IKcos(j4);
IkReal x15566=(cj5*r00);
IkReal x15567=(r01*sj5);
IkReal x15568=((1.0)*cj0);
IkReal x15569=((1.0)*x15565);
IkReal x15570=((1.0)*x15564);
evalcond[0]=((-1.0)*r12*x15564);
evalcond[1]=((((-1.0)*r12*x15569))+(((-1.0)*x15568)));
evalcond[2]=((((-1.0)*r21*sj5*x15570))+((cj5*r20*x15564)));
evalcond[3]=((((-1.0)*x15567*x15570))+((x15564*x15566)));
evalcond[4]=((((-1.0)*x15566*x15569))+((x15565*x15567))+(((-1.0)*cj2*sj1*x15568))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15571=IKPowWithIntegerCheck(r12,-1);
if(!x15571.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x15571.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15572=IKsin(j4);
IkReal x15573=IKcos(j4);
IkReal x15574=(sj5*x15573);
IkReal x15575=(cj5*x15572);
IkReal x15576=((1.0)*cj5*x15573);
IkReal x15577=((1.0)*sj5*x15572);
evalcond[0]=((-1.0)*r12*x15572);
evalcond[1]=((((-1.0)*r21*x15577))+((r20*x15575)));
evalcond[2]=((((-1.0)*r01*x15577))+((r00*x15575)));
evalcond[3]=(((r21*x15574))+(((-1.0)*r20*x15576))+((sj1*sj2))+((cj1*cj2)));
evalcond[4]=((((-1.0)*cj0*cj2*sj1))+(((-1.0)*r00*x15576))+((cj0*cj1*sj2))+((r01*x15574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15578=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15578);
rxp0_2=(py*r00);
rxp1_0=(r21*x15578);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15579=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15579);
rxp0_2=(py*r00);
rxp1_0=(r21*x15579);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15580=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15580);
rxp0_2=(py*r00);
rxp1_0=(r21*x15580);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15583=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x15583.valid){
continue;
}
IkReal x15581=x15583.value;
IkReal x15582=(cj0*x15581);
cj4array[0]=((((-1.0)*cj1*sj2*x15582))+((cj2*sj1*x15582)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15584=IKsin(j4);
IkReal x15585=IKcos(j4);
IkReal x15586=(cj5*r20);
IkReal x15587=((1.0)*sj5);
evalcond[0]=(r12*x15584);
evalcond[1]=((((-1.0)*r12*x15585))+(((-1.0)*cj0)));
evalcond[2]=(((x15584*x15586))+(((-1.0)*r21*x15584*x15587)));
evalcond[3]=((((-1.0)*r01*x15584*x15587))+((cj5*r00*x15584)));
evalcond[4]=(((x15585*x15586))+((sj1*sj2))+(((-1.0)*r21*x15585*x15587))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15590=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x15590.valid){
continue;
}
IkReal x15588=x15590.value;
IkReal x15589=((1.0)*x15588);
cj4array[0]=((((-1.0)*sj1*sj2*x15589))+(((-1.0)*cj1*cj2*x15589)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15591=IKsin(j4);
IkReal x15592=IKcos(j4);
IkReal x15593=(cj5*r00);
IkReal x15594=((1.0)*cj0);
IkReal x15595=((1.0)*r01*sj5);
evalcond[0]=(r12*x15591);
evalcond[1]=((((-1.0)*r12*x15592))+(((-1.0)*x15594)));
evalcond[2]=(((cj5*r20*x15591))+(((-1.0)*r21*sj5*x15591)));
evalcond[3]=((((-1.0)*x15591*x15595))+((x15591*x15593)));
evalcond[4]=((((-1.0)*x15592*x15595))+((x15592*x15593))+((cj0*cj1*sj2))+(((-1.0)*cj2*sj1*x15594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15596=IKPowWithIntegerCheck(r12,-1);
if(!x15596.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x15596.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15597=IKsin(j4);
IkReal x15598=IKcos(j4);
IkReal x15599=(cj5*x15598);
IkReal x15600=((1.0)*r21*sj5);
IkReal x15601=((1.0)*r01*sj5);
IkReal x15602=(cj5*x15597);
evalcond[0]=(r12*x15597);
evalcond[1]=(((r20*x15602))+(((-1.0)*x15597*x15600)));
evalcond[2]=(((r00*x15602))+(((-1.0)*x15597*x15601)));
evalcond[3]=(((sj1*sj2))+((r20*x15599))+((cj1*cj2))+(((-1.0)*x15598*x15600)));
evalcond[4]=((((-1.0)*cj0*cj2*sj1))+(((-1.0)*x15598*x15601))+((cj0*cj1*sj2))+((r00*x15599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15603=((-1.0)*r01);
CheckValue<IkReal> x15604 = IKatan2WithCheck(IkReal(r00),IkReal(x15603),IKFAST_ATAN2_MAGTHRESH);
if(!x15604.valid){
continue;
}
IkReal gconst66=((-1.0)*(x15604.value));
IkReal gconst67=((-1.0)*r00);
IkReal gconst68=x15603;
CheckValue<IkReal> x15605 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x15605.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15605.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15606=((-1.0)*r01);
IkReal x15607=((-1.0)*py);
CheckValue<IkReal> x15609 = IKatan2WithCheck(IkReal(r00),IkReal(x15606),IKFAST_ATAN2_MAGTHRESH);
if(!x15609.valid){
continue;
}
IkReal x15608=((-1.0)*(x15609.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15607);
rxp0_2=(py*r00);
rxp1_0=(r21*x15607);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x15608;
IkReal gconst66=x15608;
IkReal gconst67=((-1.0)*r00);
IkReal gconst68=x15606;
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15610=((-1.0)*r01);
IkReal x15611=((-1.0)*py);
CheckValue<IkReal> x15613 = IKatan2WithCheck(IkReal(r00),IkReal(x15610),IKFAST_ATAN2_MAGTHRESH);
if(!x15613.valid){
continue;
}
IkReal x15612=((-1.0)*(x15613.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15611);
rxp0_2=(py*r00);
rxp1_0=(r21*x15611);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x15612;
IkReal gconst66=x15612;
IkReal gconst67=((-1.0)*r00);
IkReal gconst68=x15610;
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15614=((-1.0)*r01);
IkReal x15615=((-1.0)*py);
CheckValue<IkReal> x15617 = IKatan2WithCheck(IkReal(r00),IkReal(x15614),IKFAST_ATAN2_MAGTHRESH);
if(!x15617.valid){
continue;
}
IkReal x15616=((-1.0)*(x15617.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15615);
rxp0_2=(py*r00);
rxp1_0=(r21*x15615);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x15616;
IkReal gconst66=x15616;
IkReal gconst67=((-1.0)*r00);
IkReal gconst68=x15614;
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r00*r21*sj3))+((r01*r20*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15618=(sj1*sj2);
IkReal x15619=(cj1*cj2);
CheckValue<IkReal> x15620=IKPowWithIntegerCheck(cj3,-1);
if(!x15620.valid){
continue;
}
CheckValue<IkReal> x15621=IKPowWithIntegerCheck(r12,-1);
if(!x15621.valid){
continue;
}
CheckValue<IkReal> x15622=IKPowWithIntegerCheck((((gconst67*r21*sj3))+(((-1.0)*gconst68*r20*sj3))),-1);
if(!x15622.valid){
continue;
}
if( IKabs(((x15620.value)*(x15621.value)*((((sj0*x15619))+((sj0*x15618)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15622.value)*((((cj3*gconst67*r20))+((cj3*gconst68*r21))+(((-1.0)*x15618))+(((-1.0)*x15619)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15620.value)*(x15621.value)*((((sj0*x15619))+((sj0*x15618))))))+IKsqr(((x15622.value)*((((cj3*gconst67*r20))+((cj3*gconst68*r21))+(((-1.0)*x15618))+(((-1.0)*x15619))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15620.value)*(x15621.value)*((((sj0*x15619))+((sj0*x15618))))), ((x15622.value)*((((cj3*gconst67*r20))+((cj3*gconst68*r21))+(((-1.0)*x15618))+(((-1.0)*x15619))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15623=IKsin(j4);
IkReal x15624=IKcos(j4);
IkReal x15625=(gconst67*r21);
IkReal x15626=(cj1*cj2);
IkReal x15627=(r01*sj3);
IkReal x15628=(sj1*sj2);
IkReal x15629=(gconst68*r00);
IkReal x15630=(cj2*sj1);
IkReal x15631=(gconst67*sj3);
IkReal x15632=(cj1*sj2);
IkReal x15633=((1.0)*gconst68);
IkReal x15634=(cj3*r01);
IkReal x15635=((1.0)*cj0);
IkReal x15636=((1.0)*x15623);
IkReal x15637=(gconst67*x15624);
IkReal x15638=(sj3*x15624);
IkReal x15639=((1.0)*cj3*r20);
IkReal x15640=((1.0)*x15624);
evalcond[0]=((((-1.0)*r12*x15640))+(((-1.0)*x15635)));
evalcond[1]=((((-1.0)*x15625*x15636))+((gconst68*r20*x15623)));
evalcond[2]=(sj0+(((-1.0)*gconst67*r01*x15636))+((x15623*x15629)));
evalcond[3]=(((sj0*x15626))+((sj0*x15628))+(((-1.0)*cj3*r12*x15636)));
evalcond[4]=((((-1.0)*sj0*x15630))+((sj0*x15632))+(((-1.0)*r12*sj3*x15636)));
evalcond[5]=(((cj3*x15624*x15625))+((r20*x15631))+(((-1.0)*cj3*r20*x15624*x15633))+x15630+(((-1.0)*x15632))+((gconst68*r21*sj3)));
evalcond[6]=(((x15625*x15638))+(((-1.0)*cj3*r21*x15633))+(((-1.0)*gconst67*x15639))+x15628+x15626+(((-1.0)*r20*x15633*x15638)));
evalcond[7]=(((r00*x15631))+((cj0*x15628))+((cj0*x15626))+((x15634*x15637))+(((-1.0)*cj3*x15629*x15640))+((gconst68*x15627)));
evalcond[8]=((((-1.0)*x15633*x15634))+(((-1.0)*x15630*x15635))+((x15627*x15637))+(((-1.0)*cj3*gconst67*r00))+((cj0*x15632))+(((-1.0)*x15629*x15638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15642=IKPowWithIntegerCheck(r12,-1);
if(!x15642.valid){
continue;
}
IkReal x15641=x15642.value;
CheckValue<IkReal> x15643=IKPowWithIntegerCheck(sj3,-1);
if(!x15643.valid){
continue;
}
if( IKabs((x15641*(x15643.value)*(((((-1.0)*cj2*sj0*sj1))+((cj1*sj0*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x15641)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15641*(x15643.value)*(((((-1.0)*cj2*sj0*sj1))+((cj1*sj0*sj2))))))+IKsqr(((-1.0)*cj0*x15641))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15641*(x15643.value)*(((((-1.0)*cj2*sj0*sj1))+((cj1*sj0*sj2))))), ((-1.0)*cj0*x15641));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15644=IKsin(j4);
IkReal x15645=IKcos(j4);
IkReal x15646=(gconst67*r21);
IkReal x15647=(cj1*cj2);
IkReal x15648=(r01*sj3);
IkReal x15649=(sj1*sj2);
IkReal x15650=(gconst68*r00);
IkReal x15651=(cj2*sj1);
IkReal x15652=(gconst67*sj3);
IkReal x15653=(cj1*sj2);
IkReal x15654=((1.0)*gconst68);
IkReal x15655=(cj3*r01);
IkReal x15656=((1.0)*cj0);
IkReal x15657=((1.0)*x15644);
IkReal x15658=(gconst67*x15645);
IkReal x15659=(sj3*x15645);
IkReal x15660=((1.0)*cj3*r20);
IkReal x15661=((1.0)*x15645);
evalcond[0]=((((-1.0)*x15656))+(((-1.0)*r12*x15661)));
evalcond[1]=(((gconst68*r20*x15644))+(((-1.0)*x15646*x15657)));
evalcond[2]=(sj0+(((-1.0)*gconst67*r01*x15657))+((x15644*x15650)));
evalcond[3]=((((-1.0)*cj3*r12*x15657))+((sj0*x15647))+((sj0*x15649)));
evalcond[4]=((((-1.0)*r12*sj3*x15657))+(((-1.0)*sj0*x15651))+((sj0*x15653)));
evalcond[5]=((((-1.0)*cj3*r20*x15645*x15654))+x15651+((gconst68*r21*sj3))+(((-1.0)*x15653))+((cj3*x15645*x15646))+((r20*x15652)));
evalcond[6]=(((x15646*x15659))+(((-1.0)*gconst67*x15660))+(((-1.0)*cj3*r21*x15654))+x15649+x15647+(((-1.0)*r20*x15654*x15659)));
evalcond[7]=((((-1.0)*cj3*x15650*x15661))+((gconst68*x15648))+((x15655*x15658))+((r00*x15652))+((cj0*x15647))+((cj0*x15649)));
evalcond[8]=((((-1.0)*x15651*x15656))+(((-1.0)*cj3*gconst67*r00))+((cj0*x15653))+(((-1.0)*x15650*x15659))+(((-1.0)*x15654*x15655))+((x15648*x15658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15663=IKPowWithIntegerCheck(r12,-1);
if(!x15663.valid){
continue;
}
IkReal x15662=x15663.value;
CheckValue<IkReal> x15664=IKPowWithIntegerCheck(cj3,-1);
if(!x15664.valid){
continue;
}
if( IKabs((x15662*(x15664.value)*((((cj1*cj2*sj0))+((sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x15662)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15662*(x15664.value)*((((cj1*cj2*sj0))+((sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x15662))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15662*(x15664.value)*((((cj1*cj2*sj0))+((sj0*sj1*sj2))))), ((-1.0)*cj0*x15662));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15665=IKsin(j4);
IkReal x15666=IKcos(j4);
IkReal x15667=(gconst67*r21);
IkReal x15668=(cj1*cj2);
IkReal x15669=(r01*sj3);
IkReal x15670=(sj1*sj2);
IkReal x15671=(gconst68*r00);
IkReal x15672=(cj2*sj1);
IkReal x15673=(gconst67*sj3);
IkReal x15674=(cj1*sj2);
IkReal x15675=((1.0)*gconst68);
IkReal x15676=(cj3*r01);
IkReal x15677=((1.0)*cj0);
IkReal x15678=((1.0)*x15665);
IkReal x15679=(gconst67*x15666);
IkReal x15680=(sj3*x15666);
IkReal x15681=((1.0)*cj3*r20);
IkReal x15682=((1.0)*x15666);
evalcond[0]=((((-1.0)*x15677))+(((-1.0)*r12*x15682)));
evalcond[1]=((((-1.0)*x15667*x15678))+((gconst68*r20*x15665)));
evalcond[2]=((((-1.0)*gconst67*r01*x15678))+sj0+((x15665*x15671)));
evalcond[3]=((((-1.0)*cj3*r12*x15678))+((sj0*x15670))+((sj0*x15668)));
evalcond[4]=(((sj0*x15674))+(((-1.0)*r12*sj3*x15678))+(((-1.0)*sj0*x15672)));
evalcond[5]=(((cj3*x15666*x15667))+((r20*x15673))+x15672+((gconst68*r21*sj3))+(((-1.0)*x15674))+(((-1.0)*cj3*r20*x15666*x15675)));
evalcond[6]=(((x15667*x15680))+(((-1.0)*gconst67*x15681))+(((-1.0)*cj3*r21*x15675))+(((-1.0)*r20*x15675*x15680))+x15668+x15670);
evalcond[7]=(((gconst68*x15669))+(((-1.0)*cj3*x15671*x15682))+((x15676*x15679))+((r00*x15673))+((cj0*x15670))+((cj0*x15668)));
evalcond[8]=((((-1.0)*x15672*x15677))+(((-1.0)*x15675*x15676))+(((-1.0)*cj3*gconst67*r00))+((x15669*x15679))+(((-1.0)*x15671*x15680))+((cj0*x15674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x15683 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x15683.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x15683.value))));
IkReal gconst70=((1.0)*r00);
IkReal gconst71=((1.0)*r01);
CheckValue<IkReal> x15684 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x15684.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15684.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15685=((-1.0)*py);
CheckValue<IkReal> x15687 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x15687.valid){
continue;
}
IkReal x15686=((1.0)*(x15687.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15685);
rxp0_2=(py*r00);
rxp1_0=(r21*x15685);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15686)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15686)));
IkReal gconst70=((1.0)*r00);
IkReal gconst71=((1.0)*r01);
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15688=((-1.0)*py);
CheckValue<IkReal> x15690 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x15690.valid){
continue;
}
IkReal x15689=((1.0)*(x15690.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15688);
rxp0_2=(py*r00);
rxp1_0=(r21*x15688);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15689)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15689)));
IkReal gconst70=((1.0)*r00);
IkReal gconst71=((1.0)*r01);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15691=((-1.0)*py);
CheckValue<IkReal> x15693 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x15693.valid){
continue;
}
IkReal x15692=((1.0)*(x15693.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15691);
rxp0_2=(py*r00);
rxp1_0=(r21*x15691);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15692)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15692)));
IkReal gconst70=((1.0)*r00);
IkReal gconst71=((1.0)*r01);
IkReal x15694=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r01*r20*x15694))+((r00*r21*x15694)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15695=(sj1*sj2);
IkReal x15696=(cj1*cj2);
CheckValue<IkReal> x15697=IKPowWithIntegerCheck(cj3,-1);
if(!x15697.valid){
continue;
}
CheckValue<IkReal> x15698=IKPowWithIntegerCheck(r12,-1);
if(!x15698.valid){
continue;
}
CheckValue<IkReal> x15699=IKPowWithIntegerCheck(((((-1.0)*gconst71*r20*sj3))+((gconst70*r21*sj3))),-1);
if(!x15699.valid){
continue;
}
if( IKabs(((x15697.value)*(x15698.value)*((((sj0*x15696))+((sj0*x15695)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15699.value)*((((cj3*gconst70*r20))+(((-1.0)*x15695))+(((-1.0)*x15696))+((cj3*gconst71*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15697.value)*(x15698.value)*((((sj0*x15696))+((sj0*x15695))))))+IKsqr(((x15699.value)*((((cj3*gconst70*r20))+(((-1.0)*x15695))+(((-1.0)*x15696))+((cj3*gconst71*r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15697.value)*(x15698.value)*((((sj0*x15696))+((sj0*x15695))))), ((x15699.value)*((((cj3*gconst70*r20))+(((-1.0)*x15695))+(((-1.0)*x15696))+((cj3*gconst71*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15700=IKsin(j4);
IkReal x15701=IKcos(j4);
IkReal x15702=(gconst70*r21);
IkReal x15703=(gconst71*r21);
IkReal x15704=((1.0)*cj3);
IkReal x15705=(cj1*cj2);
IkReal x15706=(gconst70*r01);
IkReal x15707=(sj1*sj2);
IkReal x15708=(cj1*sj2);
IkReal x15709=(cj2*sj1);
IkReal x15710=(gconst70*r00);
IkReal x15711=((1.0)*cj0);
IkReal x15712=(gconst71*r20);
IkReal x15713=(gconst71*r01);
IkReal x15714=(gconst71*r00);
IkReal x15715=(gconst70*r20);
IkReal x15716=((1.0)*x15700);
IkReal x15717=(cj3*x15701);
IkReal x15718=(sj3*x15701);
IkReal x15719=(gconst71*x15700);
evalcond[0]=((((-1.0)*x15711))+(((-1.0)*r12*x15701)));
evalcond[1]=((((-1.0)*x15702*x15716))+((x15700*x15712)));
evalcond[2]=((((-1.0)*x15706*x15716))+sj0+((x15700*x15714)));
evalcond[3]=(((sj0*x15705))+((sj0*x15707))+(((-1.0)*r12*x15700*x15704)));
evalcond[4]=(((sj0*x15708))+(((-1.0)*r12*sj3*x15716))+(((-1.0)*sj0*x15709)));
evalcond[5]=(((sj3*x15715))+((x15702*x15717))+(((-1.0)*x15701*x15704*x15712))+x15709+((sj3*x15703))+(((-1.0)*x15708)));
evalcond[6]=((((-1.0)*x15703*x15704))+((x15702*x15718))+x15707+x15705+(((-1.0)*x15712*x15718))+(((-1.0)*x15704*x15715)));
evalcond[7]=(((cj0*x15705))+((cj0*x15707))+((sj3*x15713))+((sj3*x15710))+(((-1.0)*x15701*x15704*x15714))+((x15706*x15717)));
evalcond[8]=((((-1.0)*x15714*x15718))+((cj0*x15708))+(((-1.0)*x15709*x15711))+((x15706*x15718))+(((-1.0)*x15704*x15713))+(((-1.0)*x15704*x15710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15721=IKPowWithIntegerCheck(r12,-1);
if(!x15721.valid){
continue;
}
IkReal x15720=x15721.value;
CheckValue<IkReal> x15722=IKPowWithIntegerCheck(sj3,-1);
if(!x15722.valid){
continue;
}
if( IKabs((x15720*(x15722.value)*(((((-1.0)*cj2*sj0*sj1))+((cj1*sj0*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x15720)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15720*(x15722.value)*(((((-1.0)*cj2*sj0*sj1))+((cj1*sj0*sj2))))))+IKsqr(((-1.0)*cj0*x15720))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15720*(x15722.value)*(((((-1.0)*cj2*sj0*sj1))+((cj1*sj0*sj2))))), ((-1.0)*cj0*x15720));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15723=IKsin(j4);
IkReal x15724=IKcos(j4);
IkReal x15725=(gconst70*r21);
IkReal x15726=(gconst71*r21);
IkReal x15727=((1.0)*cj3);
IkReal x15728=(cj1*cj2);
IkReal x15729=(gconst70*r01);
IkReal x15730=(sj1*sj2);
IkReal x15731=(cj1*sj2);
IkReal x15732=(cj2*sj1);
IkReal x15733=(gconst70*r00);
IkReal x15734=((1.0)*cj0);
IkReal x15735=(gconst71*r20);
IkReal x15736=(gconst71*r01);
IkReal x15737=(gconst71*r00);
IkReal x15738=(gconst70*r20);
IkReal x15739=((1.0)*x15723);
IkReal x15740=(cj3*x15724);
IkReal x15741=(sj3*x15724);
IkReal x15742=(gconst71*x15723);
evalcond[0]=((((-1.0)*r12*x15724))+(((-1.0)*x15734)));
evalcond[1]=(((x15723*x15735))+(((-1.0)*x15725*x15739)));
evalcond[2]=(((x15723*x15737))+sj0+(((-1.0)*x15729*x15739)));
evalcond[3]=(((sj0*x15728))+((sj0*x15730))+(((-1.0)*r12*x15723*x15727)));
evalcond[4]=((((-1.0)*r12*sj3*x15739))+(((-1.0)*sj0*x15732))+((sj0*x15731)));
evalcond[5]=((((-1.0)*x15731))+((x15725*x15740))+((sj3*x15738))+((sj3*x15726))+x15732+(((-1.0)*x15724*x15727*x15735)));
evalcond[6]=((((-1.0)*x15726*x15727))+((x15725*x15741))+(((-1.0)*x15727*x15738))+(((-1.0)*x15735*x15741))+x15730+x15728);
evalcond[7]=(((cj0*x15728))+((cj0*x15730))+((sj3*x15736))+((sj3*x15733))+((x15729*x15740))+(((-1.0)*x15724*x15727*x15737)));
evalcond[8]=((((-1.0)*x15732*x15734))+((cj0*x15731))+(((-1.0)*x15737*x15741))+(((-1.0)*x15727*x15736))+(((-1.0)*x15727*x15733))+((x15729*x15741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15744=IKPowWithIntegerCheck(r12,-1);
if(!x15744.valid){
continue;
}
IkReal x15743=x15744.value;
CheckValue<IkReal> x15745=IKPowWithIntegerCheck(cj3,-1);
if(!x15745.valid){
continue;
}
if( IKabs((x15743*(x15745.value)*((((cj1*cj2*sj0))+((sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x15743)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15743*(x15745.value)*((((cj1*cj2*sj0))+((sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x15743))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15743*(x15745.value)*((((cj1*cj2*sj0))+((sj0*sj1*sj2))))), ((-1.0)*cj0*x15743));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15746=IKsin(j4);
IkReal x15747=IKcos(j4);
IkReal x15748=(gconst70*r21);
IkReal x15749=(gconst71*r21);
IkReal x15750=((1.0)*cj3);
IkReal x15751=(cj1*cj2);
IkReal x15752=(gconst70*r01);
IkReal x15753=(sj1*sj2);
IkReal x15754=(cj1*sj2);
IkReal x15755=(cj2*sj1);
IkReal x15756=(gconst70*r00);
IkReal x15757=((1.0)*cj0);
IkReal x15758=(gconst71*r20);
IkReal x15759=(gconst71*r01);
IkReal x15760=(gconst71*r00);
IkReal x15761=(gconst70*r20);
IkReal x15762=((1.0)*x15746);
IkReal x15763=(cj3*x15747);
IkReal x15764=(sj3*x15747);
IkReal x15765=(gconst71*x15746);
evalcond[0]=((((-1.0)*x15757))+(((-1.0)*r12*x15747)));
evalcond[1]=((((-1.0)*x15748*x15762))+((x15746*x15758)));
evalcond[2]=(sj0+(((-1.0)*x15752*x15762))+((x15746*x15760)));
evalcond[3]=((((-1.0)*r12*x15746*x15750))+((sj0*x15753))+((sj0*x15751)));
evalcond[4]=(((sj0*x15754))+(((-1.0)*r12*sj3*x15762))+(((-1.0)*sj0*x15755)));
evalcond[5]=(((sj3*x15749))+(((-1.0)*x15747*x15750*x15758))+(((-1.0)*x15754))+x15755+((sj3*x15761))+((x15748*x15763)));
evalcond[6]=((((-1.0)*x15758*x15764))+(((-1.0)*x15749*x15750))+x15751+x15753+(((-1.0)*x15750*x15761))+((x15748*x15764)));
evalcond[7]=((((-1.0)*x15747*x15750*x15760))+((x15752*x15763))+((sj3*x15759))+((sj3*x15756))+((cj0*x15753))+((cj0*x15751)));
evalcond[8]=((((-1.0)*x15760*x15764))+((x15752*x15764))+(((-1.0)*x15750*x15756))+(((-1.0)*x15750*x15759))+(((-1.0)*x15755*x15757))+((cj0*x15754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15767=IKPowWithIntegerCheck(r12,-1);
if(!x15767.valid){
continue;
}
IkReal x15766=x15767.value;
CheckValue<IkReal> x15768=IKPowWithIntegerCheck(cj3,-1);
if(!x15768.valid){
continue;
}
if( IKabs((x15766*(x15768.value)*((((cj1*cj2*sj0))+((sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x15766)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15766*(x15768.value)*((((cj1*cj2*sj0))+((sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x15766))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15766*(x15768.value)*((((cj1*cj2*sj0))+((sj0*sj1*sj2))))), ((-1.0)*cj0*x15766));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15769=IKsin(j4);
IkReal x15770=IKcos(j4);
IkReal x15771=(cj2*sj0);
IkReal x15772=((1.0)*cj3);
IkReal x15773=(cj5*r21);
IkReal x15774=(sj1*sj2);
IkReal x15775=(cj5*r01);
IkReal x15776=(r20*sj5);
IkReal x15777=((1.0)*sj1);
IkReal x15778=(r01*sj5);
IkReal x15779=(cj1*sj2);
IkReal x15780=(r00*sj5);
IkReal x15781=(cj5*r00);
IkReal x15782=(cj5*r20);
IkReal x15783=(cj0*cj2);
IkReal x15784=(r21*sj5);
IkReal x15785=((1.0)*x15769);
IkReal x15786=((1.0)*x15770);
IkReal x15787=(sj3*x15770);
IkReal x15788=(cj3*sj5*x15770);
evalcond[0]=((((-1.0)*r12*x15786))+(((-1.0)*cj0)));
evalcond[1]=(((x15769*x15782))+(((-1.0)*x15784*x15785)));
evalcond[2]=(((x15769*x15781))+sj0+(((-1.0)*x15778*x15785)));
evalcond[3]=(((cj1*x15771))+((sj0*x15774))+(((-1.0)*r12*x15769*x15772)));
evalcond[4]=(((sj0*x15779))+(((-1.0)*r12*sj3*x15785))+(((-1.0)*x15771*x15777)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*x15779))+(((-1.0)*x15770*x15772*x15782))+((cj3*x15770*x15784))+((sj3*x15776))+((sj3*x15773)));
evalcond[6]=((((-1.0)*sj3*x15782*x15786))+(((-1.0)*x15772*x15776))+(((-1.0)*x15772*x15773))+((x15784*x15787))+x15774+((cj1*cj2)));
evalcond[7]=(((cj1*x15783))+((sj3*x15780))+(((-1.0)*x15770*x15772*x15781))+((cj0*x15774))+((sj3*x15775))+((cj3*x15770*x15778)));
evalcond[8]=((((-1.0)*x15777*x15783))+(((-1.0)*x15772*x15775))+(((-1.0)*x15772*x15780))+((x15778*x15787))+((cj0*x15779))+(((-1.0)*sj3*x15781*x15786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15789=((1.0)*sj5);
IkReal x15790=((1.0)*cj5);
CheckValue<IkReal> x15791=IKPowWithIntegerCheck(((((-1.0)*r01*x15789))+((cj5*r00))),-1);
if(!x15791.valid){
continue;
}
CheckValue<IkReal> x15792=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15790))),-1);
if(!x15792.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x15791.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15792.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r20*sj3*x15789))+(((-1.0)*r21*sj3*x15790)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x15791.value)))+IKsqr(((x15792.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r20*sj3*x15789))+(((-1.0)*r21*sj3*x15790))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x15791.value)), ((x15792.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r20*sj3*x15789))+(((-1.0)*r21*sj3*x15790))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15793=IKsin(j4);
IkReal x15794=IKcos(j4);
IkReal x15795=(cj2*sj0);
IkReal x15796=((1.0)*cj3);
IkReal x15797=(cj5*r21);
IkReal x15798=(sj1*sj2);
IkReal x15799=(cj5*r01);
IkReal x15800=(r20*sj5);
IkReal x15801=((1.0)*sj1);
IkReal x15802=(r01*sj5);
IkReal x15803=(cj1*sj2);
IkReal x15804=(r00*sj5);
IkReal x15805=(cj5*r00);
IkReal x15806=(cj5*r20);
IkReal x15807=(cj0*cj2);
IkReal x15808=(r21*sj5);
IkReal x15809=((1.0)*x15793);
IkReal x15810=((1.0)*x15794);
IkReal x15811=(sj3*x15794);
IkReal x15812=(cj3*sj5*x15794);
evalcond[0]=((((-1.0)*r12*x15810))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*x15808*x15809))+((x15793*x15806)));
evalcond[2]=(sj0+((x15793*x15805))+(((-1.0)*x15802*x15809)));
evalcond[3]=((((-1.0)*r12*x15793*x15796))+((cj1*x15795))+((sj0*x15798)));
evalcond[4]=((((-1.0)*x15795*x15801))+(((-1.0)*r12*sj3*x15809))+((sj0*x15803)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*x15794*x15796*x15806))+((sj3*x15800))+((cj3*x15794*x15808))+(((-1.0)*x15803))+((sj3*x15797)));
evalcond[6]=((((-1.0)*x15796*x15797))+(((-1.0)*x15796*x15800))+(((-1.0)*sj3*x15806*x15810))+((x15808*x15811))+x15798+((cj1*cj2)));
evalcond[7]=((((-1.0)*x15794*x15796*x15805))+((cj0*x15798))+((cj1*x15807))+((sj3*x15804))+((cj3*x15794*x15802))+((sj3*x15799)));
evalcond[8]=(((x15802*x15811))+(((-1.0)*sj3*x15805*x15810))+(((-1.0)*x15796*x15799))+(((-1.0)*x15796*x15804))+((cj0*x15803))+(((-1.0)*x15801*x15807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15813=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x15813.valid){
continue;
}
CheckValue<IkReal> x15814=IKPowWithIntegerCheck(r12,-1);
if(!x15814.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x15813.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x15814.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x15813.value)))+IKsqr(((-1.0)*cj0*(x15814.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x15813.value)), ((-1.0)*cj0*(x15814.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15815=IKsin(j4);
IkReal x15816=IKcos(j4);
IkReal x15817=(cj2*sj0);
IkReal x15818=((1.0)*cj3);
IkReal x15819=(cj5*r21);
IkReal x15820=(sj1*sj2);
IkReal x15821=(cj5*r01);
IkReal x15822=(r20*sj5);
IkReal x15823=((1.0)*sj1);
IkReal x15824=(r01*sj5);
IkReal x15825=(cj1*sj2);
IkReal x15826=(r00*sj5);
IkReal x15827=(cj5*r00);
IkReal x15828=(cj5*r20);
IkReal x15829=(cj0*cj2);
IkReal x15830=(r21*sj5);
IkReal x15831=((1.0)*x15815);
IkReal x15832=((1.0)*x15816);
IkReal x15833=(sj3*x15816);
IkReal x15834=(cj3*sj5*x15816);
evalcond[0]=((((-1.0)*r12*x15832))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*x15830*x15831))+((x15815*x15828)));
evalcond[2]=((((-1.0)*x15824*x15831))+sj0+((x15815*x15827)));
evalcond[3]=(((cj1*x15817))+(((-1.0)*r12*x15815*x15818))+((sj0*x15820)));
evalcond[4]=((((-1.0)*x15817*x15823))+(((-1.0)*r12*sj3*x15831))+((sj0*x15825)));
evalcond[5]=((((-1.0)*x15825))+((cj2*sj1))+((sj3*x15819))+(((-1.0)*x15816*x15818*x15828))+((sj3*x15822))+((cj3*x15816*x15830)));
evalcond[6]=((((-1.0)*x15818*x15822))+(((-1.0)*sj3*x15828*x15832))+((cj1*cj2))+(((-1.0)*x15818*x15819))+x15820+((x15830*x15833)));
evalcond[7]=(((cj3*x15816*x15824))+((cj1*x15829))+(((-1.0)*x15816*x15818*x15827))+((sj3*x15826))+((sj3*x15821))+((cj0*x15820)));
evalcond[8]=((((-1.0)*x15818*x15821))+(((-1.0)*x15818*x15826))+(((-1.0)*x15823*x15829))+(((-1.0)*sj3*x15827*x15832))+((x15824*x15833))+((cj0*x15825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15835=((1.0)*sj5);
CheckValue<IkReal> x15836=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15836.valid){
continue;
}
CheckValue<IkReal> x15837 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x15835))+(((-1.0)*cj0*r01*x15835)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15836.value)))+(x15837.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15838=IKsin(j4);
IkReal x15839=IKcos(j4);
IkReal x15840=(cj5*sj3);
IkReal x15841=(r11*sj5);
IkReal x15842=(cj1*cj2);
IkReal x15843=(sj1*sj2);
IkReal x15844=(r21*sj5);
IkReal x15845=(cj2*sj1);
IkReal x15846=(r01*sj5);
IkReal x15847=(cj1*sj2);
IkReal x15848=(sj3*sj5);
IkReal x15849=(cj3*cj5);
IkReal x15850=((1.0)*cj0);
IkReal x15851=((1.0)*x15839);
IkReal x15852=((1.0)*x15838);
IkReal x15853=(cj3*x15839);
IkReal x15854=((1.0)*x15849);
IkReal x15855=((1.0)*cj3*sj5);
IkReal x15856=(cj5*x15838);
IkReal x15857=(sj3*x15839);
evalcond[0]=(((r20*x15856))+(((-1.0)*r22*x15851))+(((-1.0)*x15844*x15852)));
evalcond[1]=((((-1.0)*r02*x15851))+sj0+((r00*x15856))+(((-1.0)*x15846*x15852)));
evalcond[2]=((((-1.0)*r12*x15851))+(((-1.0)*x15841*x15852))+(((-1.0)*x15850))+((r10*x15856)));
evalcond[3]=((((-1.0)*r20*x15849*x15851))+((r20*x15848))+((r21*x15840))+((x15844*x15853))+x15845+(((-1.0)*x15847))+(((-1.0)*cj3*r22*x15852)));
evalcond[4]=((((-1.0)*r20*x15855))+(((-1.0)*r21*x15854))+(((-1.0)*r22*sj3*x15852))+((x15844*x15857))+x15843+x15842+(((-1.0)*r20*x15840*x15851)));
evalcond[5]=(((r01*x15840))+((x15846*x15853))+((r00*x15848))+(((-1.0)*cj3*r02*x15852))+(((-1.0)*r00*x15849*x15851))+((cj0*x15842))+((cj0*x15843)));
evalcond[6]=(((r11*x15840))+(((-1.0)*cj3*r12*x15852))+(((-1.0)*r10*x15849*x15851))+((x15841*x15853))+((r10*x15848))+((sj0*x15842))+((sj0*x15843)));
evalcond[7]=(((x15846*x15857))+(((-1.0)*r02*sj3*x15852))+(((-1.0)*r00*x15840*x15851))+((cj0*x15847))+(((-1.0)*x15845*x15850))+(((-1.0)*r00*x15855))+(((-1.0)*r01*x15854)));
evalcond[8]=((((-1.0)*r11*x15854))+(((-1.0)*r10*x15855))+((x15841*x15857))+(((-1.0)*r10*x15840*x15851))+(((-1.0)*sj0*x15845))+(((-1.0)*r12*sj3*x15852))+((sj0*x15847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15858=((1.0)*sj5);
CheckValue<IkReal> x15859=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r01))+(((-1.0)*r00*x15858)))),-1);
if(!x15859.valid){
continue;
}
CheckValue<IkReal> x15860 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x15858)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15860.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15859.value)))+(x15860.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15861=IKsin(j4);
IkReal x15862=IKcos(j4);
IkReal x15863=(cj5*sj3);
IkReal x15864=(r11*sj5);
IkReal x15865=(cj1*cj2);
IkReal x15866=(sj1*sj2);
IkReal x15867=(r21*sj5);
IkReal x15868=(cj2*sj1);
IkReal x15869=(r01*sj5);
IkReal x15870=(cj1*sj2);
IkReal x15871=(sj3*sj5);
IkReal x15872=(cj3*cj5);
IkReal x15873=((1.0)*cj0);
IkReal x15874=((1.0)*x15862);
IkReal x15875=((1.0)*x15861);
IkReal x15876=(cj3*x15862);
IkReal x15877=((1.0)*x15872);
IkReal x15878=((1.0)*cj3*sj5);
IkReal x15879=(cj5*x15861);
IkReal x15880=(sj3*x15862);
evalcond[0]=(((r20*x15879))+(((-1.0)*r22*x15874))+(((-1.0)*x15867*x15875)));
evalcond[1]=(sj0+(((-1.0)*x15869*x15875))+((r00*x15879))+(((-1.0)*r02*x15874)));
evalcond[2]=((((-1.0)*r12*x15874))+((r10*x15879))+(((-1.0)*x15873))+(((-1.0)*x15864*x15875)));
evalcond[3]=((((-1.0)*r20*x15872*x15874))+((r21*x15863))+(((-1.0)*cj3*r22*x15875))+((r20*x15871))+((x15867*x15876))+(((-1.0)*x15870))+x15868);
evalcond[4]=((((-1.0)*r21*x15877))+(((-1.0)*r20*x15878))+(((-1.0)*r22*sj3*x15875))+(((-1.0)*r20*x15863*x15874))+((x15867*x15880))+x15866+x15865);
evalcond[5]=(((r00*x15871))+((cj0*x15865))+((cj0*x15866))+((r01*x15863))+(((-1.0)*r00*x15872*x15874))+((x15869*x15876))+(((-1.0)*cj3*r02*x15875)));
evalcond[6]=(((x15864*x15876))+(((-1.0)*cj3*r12*x15875))+((r11*x15863))+((sj0*x15865))+((sj0*x15866))+((r10*x15871))+(((-1.0)*r10*x15872*x15874)));
evalcond[7]=((((-1.0)*r00*x15863*x15874))+(((-1.0)*r02*sj3*x15875))+(((-1.0)*x15868*x15873))+(((-1.0)*r01*x15877))+((cj0*x15870))+(((-1.0)*r00*x15878))+((x15869*x15880)));
evalcond[8]=((((-1.0)*sj0*x15868))+(((-1.0)*r10*x15878))+(((-1.0)*r10*x15863*x15874))+(((-1.0)*r11*x15877))+(((-1.0)*r12*sj3*x15875))+((x15864*x15880))+((sj0*x15870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15881=((1.0)*sj5);
CheckValue<IkReal> x15882=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x15881)))),-1);
if(!x15882.valid){
continue;
}
CheckValue<IkReal> x15883 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x15881)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15883.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15882.value)))+(x15883.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15884=IKsin(j4);
IkReal x15885=IKcos(j4);
IkReal x15886=(cj5*sj3);
IkReal x15887=(r11*sj5);
IkReal x15888=(cj1*cj2);
IkReal x15889=(sj1*sj2);
IkReal x15890=(r21*sj5);
IkReal x15891=(cj2*sj1);
IkReal x15892=(r01*sj5);
IkReal x15893=(cj1*sj2);
IkReal x15894=(sj3*sj5);
IkReal x15895=(cj3*cj5);
IkReal x15896=((1.0)*cj0);
IkReal x15897=((1.0)*x15885);
IkReal x15898=((1.0)*x15884);
IkReal x15899=(cj3*x15885);
IkReal x15900=((1.0)*x15895);
IkReal x15901=((1.0)*cj3*sj5);
IkReal x15902=(cj5*x15884);
IkReal x15903=(sj3*x15885);
evalcond[0]=((((-1.0)*r22*x15897))+((r20*x15902))+(((-1.0)*x15890*x15898)));
evalcond[1]=((((-1.0)*r02*x15897))+sj0+(((-1.0)*x15892*x15898))+((r00*x15902)));
evalcond[2]=((((-1.0)*x15896))+(((-1.0)*x15887*x15898))+(((-1.0)*r12*x15897))+((r10*x15902)));
evalcond[3]=((((-1.0)*cj3*r22*x15898))+((r20*x15894))+(((-1.0)*x15893))+((x15890*x15899))+(((-1.0)*r20*x15895*x15897))+x15891+((r21*x15886)));
evalcond[4]=((((-1.0)*r20*x15886*x15897))+((x15890*x15903))+(((-1.0)*r22*sj3*x15898))+x15889+x15888+(((-1.0)*r21*x15900))+(((-1.0)*r20*x15901)));
evalcond[5]=(((r01*x15886))+((r00*x15894))+(((-1.0)*cj3*r02*x15898))+((cj0*x15888))+((cj0*x15889))+(((-1.0)*r00*x15895*x15897))+((x15892*x15899)));
evalcond[6]=(((r10*x15894))+((sj0*x15888))+((sj0*x15889))+(((-1.0)*r10*x15895*x15897))+((r11*x15886))+(((-1.0)*cj3*r12*x15898))+((x15887*x15899)));
evalcond[7]=((((-1.0)*r00*x15901))+(((-1.0)*r00*x15886*x15897))+((cj0*x15893))+((x15892*x15903))+(((-1.0)*r02*sj3*x15898))+(((-1.0)*x15891*x15896))+(((-1.0)*r01*x15900)));
evalcond[8]=(((x15887*x15903))+(((-1.0)*sj0*x15891))+(((-1.0)*r11*x15900))+((sj0*x15893))+(((-1.0)*r10*x15901))+(((-1.0)*r10*x15886*x15897))+(((-1.0)*r12*sj3*x15898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15904=r21*r21;
IkReal x15905=cj5*cj5;
IkReal x15906=r20*r20;
IkReal x15907=(cj5*r21);
IkReal x15908=(r20*sj5);
IkReal x15909=(sj1*sj2);
IkReal x15910=(cj1*cj2);
IkReal x15911=(cj5*r20);
IkReal x15912=((1.0)*cj3*r22);
IkReal x15913=(cj3*r20*r21);
IkReal x15914=((1.0)*r21*sj5);
IkReal x15915=(cj3*cj5*sj5);
IkReal x15916=(sj3*x15904);
CheckValue<IkReal> x15917 = IKatan2WithCheck(IkReal((((r22*x15910))+(((-1.0)*x15907*x15912))+((r22*x15909))+(((-1.0)*x15908*x15912)))),IkReal(((((-2.0)*x15905*x15913))+((x15910*x15911))+((x15909*x15911))+((x15904*x15915))+(((-1.0)*x15906*x15915))+(((-1.0)*x15909*x15914))+(((-1.0)*x15910*x15914))+x15913)),IKFAST_ATAN2_MAGTHRESH);
if(!x15917.valid){
continue;
}
CheckValue<IkReal> x15918=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-2.0)*sj3*x15907*x15908))+(((-1.0)*x15905*x15916))+((sj3*x15905*x15906))+x15916)),-1);
if(!x15918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15917.value)+(((1.5707963267949)*(x15918.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15919=IKsin(j4);
IkReal x15920=IKcos(j4);
IkReal x15921=((1.0)*r22);
IkReal x15922=(cj5*sj3);
IkReal x15923=((1.0)*r21);
IkReal x15924=(r20*sj5);
IkReal x15925=(cj3*cj5);
IkReal x15926=(r21*sj5*x15920);
IkReal x15927=((1.0)*r20*x15920);
evalcond[0]=((((-1.0)*x15920*x15921))+(((-1.0)*sj5*x15919*x15923))+((cj5*r20*x15919)));
evalcond[1]=(((cj2*sj1))+((r21*x15922))+(((-1.0)*x15925*x15927))+(((-1.0)*cj1*sj2))+((sj3*x15924))+((cj3*x15926))+(((-1.0)*cj3*x15919*x15921)));
evalcond[2]=((((-1.0)*x15922*x15927))+((sj3*x15926))+((sj1*sj2))+(((-1.0)*cj3*x15924))+(((-1.0)*x15923*x15925))+(((-1.0)*sj3*x15919*x15921))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15928=(cj5*sj4);
IkReal x15929=(sj4*sj5);
if( IKabs((((r01*x15929))+(((-1.0)*r00*x15928))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15928))+(((-1.0)*r11*x15929))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x15929))+(((-1.0)*r00*x15928))+((cj4*r02))))+IKsqr((((r10*x15928))+(((-1.0)*r11*x15929))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x15929))+(((-1.0)*r00*x15928))+((cj4*r02))), (((r10*x15928))+(((-1.0)*r11*x15929))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15930=IKcos(j0);
IkReal x15931=IKsin(j0);
IkReal x15932=((0.376)*cj2);
IkReal x15933=((1.0)*cj3);
IkReal x15934=(r02*sj4);
IkReal x15935=(cj4*cj5);
IkReal x15936=((1.0)*sj3);
IkReal x15937=(cj5*sj4);
IkReal x15938=(cj5*r01);
IkReal x15939=(r12*sj4);
IkReal x15940=(r01*sj5);
IkReal x15941=((1.0)*sj4);
IkReal x15942=(cj1*cj2);
IkReal x15943=(cj1*sj2);
IkReal x15944=(cj4*sj3);
IkReal x15945=(cj5*r11);
IkReal x15946=(cj3*cj4);
IkReal x15947=(r00*sj5);
IkReal x15948=((1.0)*cj2);
IkReal x15949=((1.97e-6)*cj1);
IkReal x15950=(r11*sj5);
IkReal x15951=(r10*sj5);
IkReal x15952=((1.0)*cj4);
IkReal x15953=(sj1*x15931);
IkReal x15954=(sj1*x15930);
evalcond[0]=((((-1.0)*r02*x15952))+((r00*x15937))+(((-1.0)*x15940*x15941))+x15931);
evalcond[1]=((((-1.0)*x15930))+(((-1.0)*x15941*x15950))+(((-1.0)*r12*x15952))+((r10*x15937)));
evalcond[2]=(((x15940*x15946))+(((-1.0)*r00*x15933*x15935))+((x15930*x15942))+(((-1.0)*x15933*x15934))+((sj3*x15947))+((sj2*x15954))+((sj3*x15938)));
evalcond[3]=((((-1.0)*x15933*x15939))+((x15931*x15942))+((sj3*x15951))+((x15946*x15950))+((sj3*x15945))+((sj2*x15953))+(((-1.0)*r10*x15933*x15935)));
evalcond[4]=((((-1.0)*r00*x15935*x15936))+((x15940*x15944))+(((-1.0)*x15934*x15936))+(((-1.0)*x15933*x15947))+((x15930*x15943))+(((-1.0)*x15933*x15938))+(((-1.0)*x15948*x15954)));
evalcond[5]=((((-1.0)*x15933*x15945))+(((-1.0)*x15936*x15939))+(((-1.0)*x15933*x15951))+((x15944*x15950))+((x15931*x15943))+(((-1.0)*r10*x15935*x15936))+(((-1.0)*x15948*x15953)));
evalcond[6]=((((0.1025)*x15938))+(((0.376)*x15930*x15943))+(((-1.0)*x15932*x15954))+(((0.1215)*x15931))+(((8.9e-7)*x15930))+(((-1.0)*px))+((x15930*x15949))+(((0.1025)*x15947))+(((-0.408)*x15954)));
evalcond[7]=((((0.376)*x15931*x15943))+(((-0.1215)*x15930))+(((-1.0)*x15932*x15953))+(((8.9e-7)*x15931))+(((-1.0)*py))+(((0.1025)*x15951))+((x15931*x15949))+(((0.1025)*x15945))+(((-0.408)*x15953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15955=cj5*cj5;
IkReal x15956=r21*r21;
IkReal x15957=r20*r20;
IkReal x15958=(cj5*r20);
IkReal x15959=(r20*sj3);
IkReal x15960=((1.0)*r21);
IkReal x15961=((2.0)*r21);
IkReal x15962=(cj2*sj1);
IkReal x15963=((1.0)*cj1*sj2);
IkReal x15964=(cj3*x15956);
IkReal x15965=(cj5*sj3*sj5);
CheckValue<IkReal> x15966=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15955*x15964))+((cj3*x15955*x15957))+((cj3*(r22*r22)))+(((-1.0)*cj3*sj5*x15958*x15961))+x15964)),-1);
if(!x15966.valid){
continue;
}
CheckValue<IkReal> x15967 = IKatan2WithCheck(IkReal((((cj5*r21*r22*sj3))+((r22*x15962))+((r22*sj5*x15959))+(((-1.0)*r22*x15963)))),IkReal(((((-1.0)*x15958*x15963))+(((-1.0)*x15959*x15960))+((x15958*x15962))+(((-1.0)*x15956*x15965))+((cj1*r21*sj2*sj5))+((x15957*x15965))+(((-1.0)*sj5*x15960*x15962))+((x15955*x15959*x15961)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15967.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15966.value)))+(x15967.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15968=IKsin(j4);
IkReal x15969=IKcos(j4);
IkReal x15970=((1.0)*r22);
IkReal x15971=(cj5*sj3);
IkReal x15972=((1.0)*r21);
IkReal x15973=(r20*sj5);
IkReal x15974=(cj3*cj5);
IkReal x15975=(r21*sj5*x15969);
IkReal x15976=((1.0)*r20*x15969);
evalcond[0]=((((-1.0)*sj5*x15968*x15972))+(((-1.0)*x15969*x15970))+((cj5*r20*x15968)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*cj3*x15968*x15970))+(((-1.0)*x15974*x15976))+(((-1.0)*cj1*sj2))+((sj3*x15973))+((cj3*x15975))+((r21*x15971)));
evalcond[2]=((((-1.0)*x15972*x15974))+((sj1*sj2))+(((-1.0)*sj3*x15968*x15970))+((sj3*x15975))+(((-1.0)*cj3*x15973))+((cj1*cj2))+(((-1.0)*x15971*x15976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15977=(cj5*sj4);
IkReal x15978=(sj4*sj5);
if( IKabs((((r01*x15978))+(((-1.0)*r00*x15977))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x15978))+((r10*x15977))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x15978))+(((-1.0)*r00*x15977))+((cj4*r02))))+IKsqr(((((-1.0)*r11*x15978))+((r10*x15977))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x15978))+(((-1.0)*r00*x15977))+((cj4*r02))), ((((-1.0)*r11*x15978))+((r10*x15977))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15979=IKcos(j0);
IkReal x15980=IKsin(j0);
IkReal x15981=((0.376)*cj2);
IkReal x15982=((1.0)*cj3);
IkReal x15983=(r02*sj4);
IkReal x15984=(cj4*cj5);
IkReal x15985=((1.0)*sj3);
IkReal x15986=(cj5*sj4);
IkReal x15987=(cj5*r01);
IkReal x15988=(r12*sj4);
IkReal x15989=(r01*sj5);
IkReal x15990=((1.0)*sj4);
IkReal x15991=(cj1*cj2);
IkReal x15992=(cj1*sj2);
IkReal x15993=(cj4*sj3);
IkReal x15994=(cj5*r11);
IkReal x15995=(cj3*cj4);
IkReal x15996=(r00*sj5);
IkReal x15997=((1.0)*cj2);
IkReal x15998=((1.97e-6)*cj1);
IkReal x15999=(r11*sj5);
IkReal x16000=(r10*sj5);
IkReal x16001=((1.0)*cj4);
IkReal x16002=(sj1*x15980);
IkReal x16003=(sj1*x15979);
evalcond[0]=(((r00*x15986))+(((-1.0)*x15989*x15990))+(((-1.0)*r02*x16001))+x15980);
evalcond[1]=((((-1.0)*x15979))+((r10*x15986))+(((-1.0)*x15990*x15999))+(((-1.0)*r12*x16001)));
evalcond[2]=(((sj2*x16003))+((x15989*x15995))+(((-1.0)*x15982*x15983))+(((-1.0)*r00*x15982*x15984))+((sj3*x15996))+((sj3*x15987))+((x15979*x15991)));
evalcond[3]=(((sj2*x16002))+(((-1.0)*x15982*x15988))+((x15995*x15999))+((sj3*x16000))+((sj3*x15994))+((x15980*x15991))+(((-1.0)*r10*x15982*x15984)));
evalcond[4]=(((x15989*x15993))+(((-1.0)*r00*x15984*x15985))+(((-1.0)*x15982*x15987))+(((-1.0)*x15982*x15996))+(((-1.0)*x15983*x15985))+(((-1.0)*x15997*x16003))+((x15979*x15992)));
evalcond[5]=((((-1.0)*x15985*x15988))+(((-1.0)*r10*x15984*x15985))+(((-1.0)*x15982*x15994))+((x15980*x15992))+(((-1.0)*x15997*x16002))+((x15993*x15999))+(((-1.0)*x15982*x16000)));
evalcond[6]=((((-0.408)*x16003))+(((0.1025)*x15996))+(((0.376)*x15979*x15992))+(((-1.0)*px))+(((0.1025)*x15987))+(((8.9e-7)*x15979))+(((-1.0)*x15981*x16003))+((x15979*x15998))+(((0.1215)*x15980)));
evalcond[7]=((((0.1025)*x16000))+(((-0.408)*x16002))+(((0.1025)*x15994))+(((-1.0)*py))+((x15980*x15998))+(((-1.0)*x15981*x16002))+(((8.9e-7)*x15980))+(((0.376)*x15980*x15992))+(((-0.1215)*x15979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - aubo_i5 (6dba9447a385937865cd4935c088f8a4)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
