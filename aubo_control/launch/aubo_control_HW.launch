 
<launch>
 
 <!-- RVIZ  -->
   
    <!-- Load the URDF to the parameter server -->
    <param name="robot_description" textfile="$(find aubo_description)/urdf/aubo_i5_with_gripper.urdf"/>


    <!-- Show in Rviz  -->
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find aubo_control)/basic.rviz"/>



 <!-- CORE  -->

  <!-- Load controller settings  -->
    <rosparam file="$(find aubo_control)/cfg/aubo_controllers.yaml" command="load"/>


    <!-- Load hardware interface -->
    <node name="aubo_hw_main" pkg="aubo_control" type="aubo_hw_main" output="screen"/> 


    <!-- Load scene -->
    <node name="planning_scene_primatives" pkg="aubo_motion" type="planning_scene_primatives" output="screen"/> 



    <!-- Load controller manager  -->
    <node name="ros_control_controller_manager" pkg="controller_manager" type="controller_manager" respawn="false"
    output="screen" args="spawn joint_state_controller position_trajectory_controller" />

    <!-- Convert joint states to /tf tranforms -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>


 
 <!-- MOVEIT -->

    <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
    <include file="$(find aubo_i5_moveit_config)/launch/planning_context.launch">
    <arg name="load_robot_description" value="true"/>
    </include>


    <!-- Remap follow_joint_trajectory -->
    <remap from="/joint_trajectory_action" to="/position_trajectory_controller/follow_joint_trajectory"/>
  

    <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
    <include file="$(find aubo_i5_moveit_config)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="fake_execution" value="false"/>
    <arg name="info" value="true"/> 
    </include>



 
<!-- HARDWARE -->

    <!-- required watchdog signal -->
    <node name="watchdog_signal" pkg="aubo_control" type="watchdog_signal" output="screen"/> 

    <!-- rosserial to teensy -->
    <node pkg="rosserial_server" type="serial_node" name="rosserial_server_main" output="screen" respawn="true"> 
        <rosparam>
            port: /dev/teensy_main
            baud: 115200
            spin_rate: 0.5

        </rosparam>
    </node>


 

</launch>
